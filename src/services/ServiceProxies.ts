//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, {
  AxiosError,
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  CancelToken,
} from 'axios';

import * as dayjs from 'dayjs';

export class AccountServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  activateEmail(
    body: ActivateEmailInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Account/ActivateEmail';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processActivateEmail(_response);
      });
  }

  protected processActivateEmail(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  backToImpersonator(cancelToken?: CancelToken | undefined): Promise<ImpersonateOutput> {
    let url_ = this.baseUrl + '/api/services/app/Account/BackToImpersonator';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBackToImpersonator(_response);
      });
  }

  protected processBackToImpersonator(response: AxiosResponse): Promise<ImpersonateOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ImpersonateOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<ImpersonateOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ImpersonateOutput>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  impersonate(
    body: ImpersonateInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<ImpersonateOutput> {
    let url_ = this.baseUrl + '/api/services/app/Account/Impersonate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processImpersonate(_response);
      });
  }

  protected processImpersonate(response: AxiosResponse): Promise<ImpersonateOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ImpersonateOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<ImpersonateOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ImpersonateOutput>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  isTenantAvailable(
    body: IsTenantAvailableInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<IsTenantAvailableOutput> {
    let url_ = this.baseUrl + '/api/services/app/Account/IsTenantAvailable';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processIsTenantAvailable(_response);
      });
  }

  protected processIsTenantAvailable(response: AxiosResponse): Promise<IsTenantAvailableOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = IsTenantAvailableOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<IsTenantAvailableOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<IsTenantAvailableOutput>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  register(
    body: RegisterInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<RegisterOutput> {
    let url_ = this.baseUrl + '/api/services/app/Account/Register';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRegister(_response);
      });
  }

  protected processRegister(response: AxiosResponse): Promise<RegisterOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = RegisterOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<RegisterOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<RegisterOutput>(null as any);
  }

  /**
   * 重置密码
   * @param body (optional)
   * @return Success
   */
  resetPassword(
    body: ResetPasswordInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<ResetPasswordOutput> {
    let url_ = this.baseUrl + '/api/services/app/Account/ResetPassword';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processResetPassword(_response);
      });
  }

  protected processResetPassword(response: AxiosResponse): Promise<ResetPasswordOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ResetPasswordOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<ResetPasswordOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ResetPasswordOutput>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  resolveTenantId(
    body: ResolveTenantIdInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<number> {
    let url_ = this.baseUrl + '/api/services/app/Account/ResolveTenantId';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processResolveTenantId(_response);
      });
  }

  protected processResolveTenantId(response: AxiosResponse): Promise<number> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<number>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<number>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  sendEmailActivationLink(
    body: SendEmailActivationLinkInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Account/SendEmailActivationLink';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSendEmailActivationLink(_response);
      });
  }

  protected processSendEmailActivationLink(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  sendPasswordResetCode(
    body: SendPasswordResetCodeInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Account/SendPasswordResetCode';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSendPasswordResetCode(_response);
      });
  }

  protected processSendPasswordResetCode(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  switchToLinkedAccount(
    body: SwitchToLinkedAccountInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<SwitchToLinkedAccountOutput> {
    let url_ = this.baseUrl + '/api/services/app/Account/SwitchToLinkedAccount';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSwitchToLinkedAccount(_response);
      });
  }

  protected processSwitchToLinkedAccount(
    response: AxiosResponse,
  ): Promise<SwitchToLinkedAccountOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = SwitchToLinkedAccountOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<SwitchToLinkedAccountOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<SwitchToLinkedAccountOutput>(null as any);
  }
}

export class Accounts_BalanceServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除Accounts_Balance的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改对账开票的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateAccounts_BalanceInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增付款记录
   * @param body (optional)
   * @return Success
   */
  createPaymentCollection(
    body: Accounts_PaymentCollection | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/CreatePaymentCollection';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreatePaymentCollection(_response);
      });
  }

  protected processCreatePaymentCollection(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 删除对账开票信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除付款记录
   * @param id (optional)
   * @return Success
   */
  deletePaymentCollection(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/DeletePaymentCollection?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeletePaymentCollection(_response);
      });
  }

  protected processDeletePaymentCollection(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 生成承运商的对账单
   * @param transEntId (optional)
   * @param entName (optional)
   * @param body (optional)
   * @return Success
   */
  generateBalanceReceiver(
    transEntId: number | undefined,
    entName: string | undefined,
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/GenerateBalanceReceiver?';
    if (transEntId === null) throw new Error("The parameter 'transEntId' cannot be null.");
    else if (transEntId !== undefined)
      url_ += 'transEntId=' + encodeURIComponent('' + transEntId) + '&';
    if (entName === null) throw new Error("The parameter 'entName' cannot be null.");
    else if (entName !== undefined) url_ += 'entName=' + encodeURIComponent('' + entName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGenerateBalanceReceiver(_response);
      });
  }

  protected processGenerateBalanceReceiver(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 生成发单商的对账单
   * @param senderEntId (optional)
   * @param entName (optional)
   * @param body (optional)
   * @return Success
   */
  generateBalanceSender(
    senderEntId: number | undefined,
    entName: string | undefined,
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/GenerateBalanceSender?';
    if (senderEntId === null) throw new Error("The parameter 'senderEntId' cannot be null.");
    else if (senderEntId !== undefined)
      url_ += 'senderEntId=' + encodeURIComponent('' + senderEntId) + '&';
    if (entName === null) throw new Error("The parameter 'entName' cannot be null.");
    else if (entName !== undefined) url_ += 'entName=' + encodeURIComponent('' + entName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGenerateBalanceSender(_response);
      });
  }

  protected processGenerateBalanceSender(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 生成付款单
   * @param body (optional)
   * @return Success
   */
  generatePayment(
    body: Accounts_PaymentListDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Accounts_PaymentListDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/GeneratePayment';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGeneratePayment(_response);
      });
  }

  protected processGeneratePayment(response: AxiosResponse): Promise<Accounts_PaymentListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Accounts_PaymentListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Accounts_PaymentListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Accounts_PaymentListDto>(null as any);
  }

  /**
   * 发单商差价待开票分页查询
   * @param type (optional) 0：发单商 1:承运商
   * @param entId (optional) 客户id
   * @param entName (optional) 客户名称
   * @param balanceState (optional) 0:全部 1:待对账 2:对账中 3:待开票（完成对账） 4:已开票
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getBalanceSenderNeedPaged(
    type: number | undefined,
    entId: number | undefined,
    entName: string | undefined,
    balanceState: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfBalanceNeedListDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/GetBalanceSenderNeedPaged?';
    if (type === null) throw new Error("The parameter 'type' cannot be null.");
    else if (type !== undefined) url_ += 'type=' + encodeURIComponent('' + type) + '&';
    if (entId === null) throw new Error("The parameter 'entId' cannot be null.");
    else if (entId !== undefined) url_ += 'entId=' + encodeURIComponent('' + entId) + '&';
    if (entName === null) throw new Error("The parameter 'entName' cannot be null.");
    else if (entName !== undefined) url_ += 'entName=' + encodeURIComponent('' + entName) + '&';
    if (balanceState === null) throw new Error("The parameter 'balanceState' cannot be null.");
    else if (balanceState !== undefined)
      url_ += 'balanceState=' + encodeURIComponent('' + balanceState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetBalanceSenderNeedPaged(_response);
      });
  }

  protected processGetBalanceSenderNeedPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfBalanceNeedListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfBalanceNeedListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfBalanceNeedListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfBalanceNeedListDto>(null as any);
  }

  /**
   * 通过指定id获取Accounts_BalanceListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Accounts_BalanceListDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<Accounts_BalanceListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Accounts_BalanceListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Accounts_BalanceListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Accounts_BalanceListDto>(null as any);
  }

  /**
   * 获取对账单详情信息
   * @param type (optional) 0:发单商 1:承运商
   * @param id (optional)
   * @return Success
   */
  getDiffBalanceDetailById(
    type: number | undefined,
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Accounts_DiffBalanceListDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/GetDiffBalanceDetailById?';
    if (type === null) throw new Error("The parameter 'type' cannot be null.");
    else if (type !== undefined) url_ += 'type=' + encodeURIComponent('' + type) + '&';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDiffBalanceDetailById(_response);
      });
  }

  protected processGetDiffBalanceDetailById(
    response: AxiosResponse,
  ): Promise<Accounts_DiffBalanceListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Accounts_DiffBalanceListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Accounts_DiffBalanceListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Accounts_DiffBalanceListDto>(null as any);
  }

  /**
   * 差价对账单
   * @param type (optional) 0：发单商 1:承运商
   * @param entId (optional) 客户id
   * @param entName (optional) 客户名称
   * @param balanceState (optional) 0:全部 1:待开票 2:已开票
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getDiffBalancePaged(
    type: number | undefined,
    entId: number | undefined,
    entName: string | undefined,
    balanceState: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfAccounts_DiffBalanceListDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/GetDiffBalancePaged?';
    if (type === null) throw new Error("The parameter 'type' cannot be null.");
    else if (type !== undefined) url_ += 'type=' + encodeURIComponent('' + type) + '&';
    if (entId === null) throw new Error("The parameter 'entId' cannot be null.");
    else if (entId !== undefined) url_ += 'entId=' + encodeURIComponent('' + entId) + '&';
    if (entName === null) throw new Error("The parameter 'entName' cannot be null.");
    else if (entName !== undefined) url_ += 'entName=' + encodeURIComponent('' + entName) + '&';
    if (balanceState === null) throw new Error("The parameter 'balanceState' cannot be null.");
    else if (balanceState !== undefined)
      url_ += 'balanceState=' + encodeURIComponent('' + balanceState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDiffBalancePaged(_response);
      });
  }

  protected processGetDiffBalancePaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfAccounts_DiffBalanceListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfAccounts_DiffBalanceListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfAccounts_DiffBalanceListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfAccounts_DiffBalanceListDto>(null as any);
  }

  /**
   * @param type (optional)
   * @param id (optional)
   * @return Success
   */
  getDiffBalanceToExcelFile(
    type: number | undefined,
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/GetDiffBalanceToExcelFile?';
    if (type === null) throw new Error("The parameter 'type' cannot be null.");
    else if (type !== undefined) url_ += 'type=' + encodeURIComponent('' + type) + '&';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDiffBalanceToExcelFile(_response);
      });
  }

  protected processGetDiffBalanceToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 获取编辑 对账开票
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetAccounts_BalanceForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetAccounts_BalanceForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetAccounts_BalanceForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetAccounts_BalanceForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetAccounts_BalanceForEditOutput>(null as any);
  }

  /**
   * 获取编辑开票信息
   * @param id (optional)
   * @return Success
   */
  getInvoiceForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Accounts_InvoiceEditDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/GetInvoiceForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetInvoiceForEdit(_response);
      });
  }

  protected processGetInvoiceForEdit(response: AxiosResponse): Promise<Accounts_InvoiceEditDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Accounts_InvoiceEditDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Accounts_InvoiceEditDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Accounts_InvoiceEditDto>(null as any);
  }

  /**
   * 对账单
   * @param customerId (optional) 客户id
   * @param year (optional) 年
   * @param month (optional) 月
   * @param balanceState (optional) 0:全部 1:待对账 2:对账中 3:待开票（完成对账） 4:已开票
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    customerId: number | undefined,
    year: number | undefined,
    month: number | undefined,
    balanceState: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfAccounts_BalanceListDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/GetPaged?';
    if (customerId === null) throw new Error("The parameter 'customerId' cannot be null.");
    else if (customerId !== undefined)
      url_ += 'customerId=' + encodeURIComponent('' + customerId) + '&';
    if (year === null) throw new Error("The parameter 'year' cannot be null.");
    else if (year !== undefined) url_ += 'year=' + encodeURIComponent('' + year) + '&';
    if (month === null) throw new Error("The parameter 'month' cannot be null.");
    else if (month !== undefined) url_ += 'month=' + encodeURIComponent('' + month) + '&';
    if (balanceState === null) throw new Error("The parameter 'balanceState' cannot be null.");
    else if (balanceState !== undefined)
      url_ += 'balanceState=' + encodeURIComponent('' + balanceState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfAccounts_BalanceListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfAccounts_BalanceListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfAccounts_BalanceListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfAccounts_BalanceListDto>(null as any);
  }

  /**
   * 付款的查询列表
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaymentPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfAccounts_PaymentListDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/GetPaymentPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaymentPaged(_response);
      });
  }

  protected processGetPaymentPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfAccounts_PaymentListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfAccounts_PaymentListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfAccounts_PaymentListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfAccounts_PaymentListDto>(null as any);
  }

  /**
   * 待开票和已开票的对账单
   * @param customerId (optional) 客户id
   * @param year (optional) 年
   * @param month (optional) 月
   * @param balanceState (optional) 0:全部   1:待开票（完成对账）2:已开票
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getToBeInvoicePaged(
    customerId: number | undefined,
    year: number | undefined,
    month: number | undefined,
    balanceState: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfAccounts_DoneBalanceListDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/GetToBeInvoicePaged?';
    if (customerId === null) throw new Error("The parameter 'customerId' cannot be null.");
    else if (customerId !== undefined)
      url_ += 'customerId=' + encodeURIComponent('' + customerId) + '&';
    if (year === null) throw new Error("The parameter 'year' cannot be null.");
    else if (year !== undefined) url_ += 'year=' + encodeURIComponent('' + year) + '&';
    if (month === null) throw new Error("The parameter 'month' cannot be null.");
    else if (month !== undefined) url_ += 'month=' + encodeURIComponent('' + month) + '&';
    if (balanceState === null) throw new Error("The parameter 'balanceState' cannot be null.");
    else if (balanceState !== undefined)
      url_ += 'balanceState=' + encodeURIComponent('' + balanceState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToBeInvoicePaged(_response);
      });
  }

  protected processGetToBeInvoicePaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfAccounts_DoneBalanceListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfAccounts_DoneBalanceListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfAccounts_DoneBalanceListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfAccounts_DoneBalanceListDto>(null as any);
  }

  /**
   * 导出对账开票为excel文件
   * @param balanceId (optional)
   * @return Success
   */
  getToExcelFile(
    balanceId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/GetToExcelFile?';
    if (balanceId === null) throw new Error("The parameter 'balanceId' cannot be null.");
    else if (balanceId !== undefined)
      url_ += 'balanceId=' + encodeURIComponent('' + balanceId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 添加或者修改对账开票的公共方法
   * @param body (optional)
   * @return Success
   */
  invoiceCreateOrUpdate(
    body: Accounts_InvoiceEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_Balance/InvoiceCreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processInvoiceCreateOrUpdate(_response);
      });
  }

  protected processInvoiceCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class Accounts_InvoiceInformationServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除Accounts_InvoiceInformation的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_InvoiceInformation/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改开票资料的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateAccounts_InvoiceInformationInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_InvoiceInformation/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除开票资料信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_InvoiceInformation/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取Accounts_InvoiceInformationListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Accounts_InvoiceInformationListDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_InvoiceInformation/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<Accounts_InvoiceInformationListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Accounts_InvoiceInformationListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Accounts_InvoiceInformationListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Accounts_InvoiceInformationListDto>(null as any);
  }

  /**
   * 获取编辑 开票资料
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetAccounts_InvoiceInformationForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_InvoiceInformation/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(
    response: AxiosResponse,
  ): Promise<GetAccounts_InvoiceInformationForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetAccounts_InvoiceInformationForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetAccounts_InvoiceInformationForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetAccounts_InvoiceInformationForEditOutput>(null as any);
  }

  /**
   * 获取客户开票资料前10条
   * @param customerName (optional)
   * @param customerId (optional)
   * @return Success
   */
  getInvoiceInformationListTop10(
    customerName: string | undefined,
    customerId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Accounts_InvoiceInformationListDto[]> {
    let url_ =
      this.baseUrl +
      '/api/services/app/Accounts_InvoiceInformation/GetInvoiceInformationListTop10?';
    if (customerName === null) throw new Error("The parameter 'customerName' cannot be null.");
    else if (customerName !== undefined)
      url_ += 'customerName=' + encodeURIComponent('' + customerName) + '&';
    if (customerId === null) throw new Error("The parameter 'customerId' cannot be null.");
    else if (customerId !== undefined)
      url_ += 'customerId=' + encodeURIComponent('' + customerId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetInvoiceInformationListTop10(_response);
      });
  }

  protected processGetInvoiceInformationListTop10(
    response: AxiosResponse,
  ): Promise<Accounts_InvoiceInformationListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(Accounts_InvoiceInformationListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Accounts_InvoiceInformationListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Accounts_InvoiceInformationListDto[]>(null as any);
  }

  /**
   * 获取开票资料的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfAccounts_InvoiceInformationListDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_InvoiceInformation/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfAccounts_InvoiceInformationListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfAccounts_InvoiceInformationListDto.fromJS(
        resultData200,
        _mappings,
      );
      return Promise.resolve<PagedResultDtoOfAccounts_InvoiceInformationListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfAccounts_InvoiceInformationListDto>(null as any);
  }

  /**
   * 导出开票资料为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_InvoiceInformation/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class Accounts_ReceivableCollectionServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除Accounts_PaymentCollection的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_ReceivableCollection/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateAccounts_ReceivableCollectionInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_ReceivableCollection/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_ReceivableCollection/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取Accounts_PaymentCollectionListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Accounts_ReceivableCollectionListDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_ReceivableCollection/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<Accounts_ReceivableCollectionListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Accounts_ReceivableCollectionListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Accounts_ReceivableCollectionListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Accounts_ReceivableCollectionListDto>(null as any);
  }

  /**
   * 获取编辑
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetAccounts_ReceivableCollectionForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_ReceivableCollection/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(
    response: AxiosResponse,
  ): Promise<GetAccounts_ReceivableCollectionForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetAccounts_ReceivableCollectionForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetAccounts_ReceivableCollectionForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetAccounts_ReceivableCollectionForEditOutput>(null as any);
  }

  /**
   * 获取的开票回款分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getInvoicePaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfAccounts_InvoiceListDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_ReceivableCollection/GetInvoicePaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetInvoicePaged(_response);
      });
  }

  protected processGetInvoicePaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfAccounts_InvoiceListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfAccounts_InvoiceListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfAccounts_InvoiceListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfAccounts_InvoiceListDto>(null as any);
  }

  /**
   * 获取的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfAccounts_ReceivableCollectionListDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_ReceivableCollection/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfAccounts_ReceivableCollectionListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfAccounts_ReceivableCollectionListDto.fromJS(
        resultData200,
        _mappings,
      );
      return Promise.resolve<PagedResultDtoOfAccounts_ReceivableCollectionListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfAccounts_ReceivableCollectionListDto>(null as any);
  }

  /**
   * 导出为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Accounts_ReceivableCollection/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class AddressLinkageServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 获取所有数据
   * @return Success
   */
  getAll(cancelToken?: CancelToken | undefined): Promise<AllAddressLinkage> {
    let url_ = this.baseUrl + '/api/services/app/AddressLinkage/GetAll';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAll(_response);
      });
  }

  protected processGetAll(response: AxiosResponse): Promise<AllAddressLinkage> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AllAddressLinkage.fromJS(resultData200, _mappings);
      return Promise.resolve<AllAddressLinkage>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AllAddressLinkage>(null as any);
  }

  /**
   * 获取所有县数据
   * @return Success
   */
  getAllArea(cancelToken?: CancelToken | undefined): Promise<AddressAreaDto[]> {
    let url_ = this.baseUrl + '/api/services/app/AddressLinkage/GetAllArea';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllArea(_response);
      });
  }

  protected processGetAllArea(response: AxiosResponse): Promise<AddressAreaDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(AddressAreaDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<AddressAreaDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AddressAreaDto[]>(null as any);
  }

  /**
   * 获取所有市数据
   * @return Success
   */
  getAllCity(cancelToken?: CancelToken | undefined): Promise<AddressCityDto[]> {
    let url_ = this.baseUrl + '/api/services/app/AddressLinkage/GetAllCity';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllCity(_response);
      });
  }

  protected processGetAllCity(response: AxiosResponse): Promise<AddressCityDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(AddressCityDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<AddressCityDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AddressCityDto[]>(null as any);
  }

  /**
   * 获取所有镇数据
   * @return Success
   */
  getAllStreet(cancelToken?: CancelToken | undefined): Promise<AddressStreetDto[]> {
    let url_ = this.baseUrl + '/api/services/app/AddressLinkage/GetAllStreet';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllStreet(_response);
      });
  }

  protected processGetAllStreet(response: AxiosResponse): Promise<AddressStreetDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(AddressStreetDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<AddressStreetDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AddressStreetDto[]>(null as any);
  }

  /**
   * 通过code获取省市区县镇名称（没有code传空）
   * @param provinceCode (optional)
   * @param cityCode (optional)
   * @param areaCode (optional)
   * @param streetCode (optional)
   * @return Success
   */
  getByCode(
    provinceCode: string | undefined,
    cityCode: string | undefined,
    areaCode: string | undefined,
    streetCode: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetByCodeOutput> {
    let url_ = this.baseUrl + '/api/services/app/AddressLinkage/GetByCode?';
    if (provinceCode === null) throw new Error("The parameter 'provinceCode' cannot be null.");
    else if (provinceCode !== undefined)
      url_ += 'provinceCode=' + encodeURIComponent('' + provinceCode) + '&';
    if (cityCode === null) throw new Error("The parameter 'cityCode' cannot be null.");
    else if (cityCode !== undefined) url_ += 'cityCode=' + encodeURIComponent('' + cityCode) + '&';
    if (areaCode === null) throw new Error("The parameter 'areaCode' cannot be null.");
    else if (areaCode !== undefined) url_ += 'areaCode=' + encodeURIComponent('' + areaCode) + '&';
    if (streetCode === null) throw new Error("The parameter 'streetCode' cannot be null.");
    else if (streetCode !== undefined)
      url_ += 'streetCode=' + encodeURIComponent('' + streetCode) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetByCode(_response);
      });
  }

  protected processGetByCode(response: AxiosResponse): Promise<GetByCodeOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetByCodeOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetByCodeOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetByCodeOutput>(null as any);
  }

  /**
   * 通过父级code获取省市区县镇数据
   * @param parentCode (optional) 父级code
   * @return Success
   */
  getByParentCode(
    addressEnum: AddressEnum,
    parentCode: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<AddressProvincetDto[]> {
    let url_ = this.baseUrl + '/api/services/app/AddressLinkage/GetByParentCode?';
    if (addressEnum === undefined || addressEnum === null)
      throw new Error("The parameter 'addressEnum' must be defined and cannot be null.");
    else url_ += 'addressEnum=' + encodeURIComponent('' + addressEnum) + '&';
    if (parentCode === null) throw new Error("The parameter 'parentCode' cannot be null.");
    else if (parentCode !== undefined)
      url_ += 'parentCode=' + encodeURIComponent('' + parentCode) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetByParentCode(_response);
      });
  }

  protected processGetByParentCode(response: AxiosResponse): Promise<AddressProvincetDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(AddressProvincetDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<AddressProvincetDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AddressProvincetDto[]>(null as any);
  }
}

export class AliDynamicPrivacyServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param enquiryId (optional)
   * @return Success
   */
  getEnquiryPhoneBindAxb(
    enquiryId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/AliDynamicPrivacy/GetEnquiryPhoneBindAxb?';
    if (enquiryId === null) throw new Error("The parameter 'enquiryId' cannot be null.");
    else if (enquiryId !== undefined)
      url_ += 'enquiryId=' + encodeURIComponent('' + enquiryId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEnquiryPhoneBindAxb(_response);
      });
  }

  protected processGetEnquiryPhoneBindAxb(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }

  /**
   * @param viewdClueId (optional)
   * @param contactId (optional)
   * @return Success
   */
  getEntPhoneBindAxb(
    viewdClueId: number | undefined,
    contactId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/AliDynamicPrivacy/GetEntPhoneBindAxb?';
    if (viewdClueId === null) throw new Error("The parameter 'viewdClueId' cannot be null.");
    else if (viewdClueId !== undefined)
      url_ += 'viewdClueId=' + encodeURIComponent('' + viewdClueId) + '&';
    if (contactId === null) throw new Error("The parameter 'contactId' cannot be null.");
    else if (contactId !== undefined)
      url_ += 'contactId=' + encodeURIComponent('' + contactId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEntPhoneBindAxb(_response);
      });
  }

  protected processGetEntPhoneBindAxb(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }

  /**
   * @param entId (optional)
   * @param contactId (optional)
   * @return Success
   */
  getEntPhoneBindAxbByViewedEntId(
    entId: number | undefined,
    contactId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<string> {
    let url_ =
      this.baseUrl + '/api/services/app/AliDynamicPrivacy/GetEntPhoneBindAxbByViewedEntId?';
    if (entId === null) throw new Error("The parameter 'entId' cannot be null.");
    else if (entId !== undefined) url_ += 'entId=' + encodeURIComponent('' + entId) + '&';
    if (contactId === null) throw new Error("The parameter 'contactId' cannot be null.");
    else if (contactId !== undefined)
      url_ += 'contactId=' + encodeURIComponent('' + contactId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEntPhoneBindAxbByViewedEntId(_response);
      });
  }

  protected processGetEntPhoneBindAxbByViewedEntId(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }
}

export class App_ContractServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除App_Contract的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Contract/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateApp_ContractInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Contract/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Contract/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取App_ContractListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<App_ContractListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Contract/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<App_ContractListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = App_ContractListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<App_ContractListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<App_ContractListDto>(null as any);
  }

  /**
   * 获取编辑
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetApp_ContractForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/App_Contract/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetApp_ContractForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetApp_ContractForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetApp_ContractForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetApp_ContractForEditOutput>(null as any);
  }

  /**
   * 获取的分页列表信息
   * @param disposalEntId (optional) 处置企业
   * @param produceEntId (optional) 产废企业
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    disposalEntId: number | undefined,
    produceEntId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfApp_ContractListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Contract/GetPaged?';
    if (disposalEntId === null) throw new Error("The parameter 'disposalEntId' cannot be null.");
    else if (disposalEntId !== undefined)
      url_ += 'disposalEntId=' + encodeURIComponent('' + disposalEntId) + '&';
    if (produceEntId === null) throw new Error("The parameter 'produceEntId' cannot be null.");
    else if (produceEntId !== undefined)
      url_ += 'produceEntId=' + encodeURIComponent('' + produceEntId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfApp_ContractListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfApp_ContractListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfApp_ContractListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfApp_ContractListDto>(null as any);
  }

  /**
   * 导出为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Contract/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class App_EnquiryServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 审核询价单
   * @param enquryId (optional)
   * @param state (optional)
   * @param reason (optional)
   * @return Success
   */
  approveEnquiry(
    enquryId: number | undefined,
    state: number | undefined,
    reason: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry/ApproveEnquiry?';
    if (enquryId === null) throw new Error("The parameter 'enquryId' cannot be null.");
    else if (enquryId !== undefined) url_ += 'enquryId=' + encodeURIComponent('' + enquryId) + '&';
    if (state === null) throw new Error("The parameter 'state' cannot be null.");
    else if (state !== undefined) url_ += 'state=' + encodeURIComponent('' + state) + '&';
    if (reason === null) throw new Error("The parameter 'reason' cannot be null.");
    else if (reason !== undefined) url_ += 'reason=' + encodeURIComponent('' + reason) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processApproveEnquiry(_response);
      });
  }

  protected processApproveEnquiry(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 批量删除App_Enquiry的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 更新联系信息
   * @param body (optional)
   * @return Success
   */
  contactInfoEdit(
    body: App_EnquiryForContact | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry/ContactInfoEdit';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processContactInfoEdit(_response);
      });
  }

  protected processContactInfoEdit(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateApp_EnquiryInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取App_EnquiryListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<App_EnquiryDetailDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<App_EnquiryDetailDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = App_EnquiryDetailDto.fromJS(resultData200, _mappings);
      return Promise.resolve<App_EnquiryDetailDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<App_EnquiryDetailDto>(null as any);
  }

  /**
   * @return Success
   */
  getData(cancelToken?: CancelToken | undefined): Promise<string[]> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry/GetData';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetData(_response);
      });
  }

  protected processGetData(response: AxiosResponse): Promise<string[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(item);
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<string[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string[]>(null as any);
  }

  /**
   * 处置企业查询询价详情
   * @param enquiryId (optional)
   * @return Success
   */
  getEnquiryDisposalById(
    enquiryId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<App_EnquiryDetailDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry/GetEnquiryDisposalById?';
    if (enquiryId === null) throw new Error("The parameter 'enquiryId' cannot be null.");
    else if (enquiryId !== undefined)
      url_ += 'enquiryId=' + encodeURIComponent('' + enquiryId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEnquiryDisposalById(_response);
      });
  }

  protected processGetEnquiryDisposalById(response: AxiosResponse): Promise<App_EnquiryDetailDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = App_EnquiryDetailDto.fromJS(resultData200, _mappings);
      return Promise.resolve<App_EnquiryDetailDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<App_EnquiryDetailDto>(null as any);
  }

  /**
   * 处置企业查询价单列表
   * @param cantonCode (optional) 行政区
   * @param industryCode (optional) 行业编码
   * @param enquiryState (optional) 状态
   * @param prodEnquiry (optional) true：产废发布   false：平台发布
   * @param approved (optional) true：已审核   false：待审核
   * @param isContacted (optional)
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getEnquiryDisposalPaged(
    cantonCode: string | undefined,
    industryCode: string | undefined,
    enquiryState: number | undefined,
    prodEnquiry: boolean | undefined,
    approved: boolean | undefined,
    isContacted: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfApp_EnquiryListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry/GetEnquiryDisposalPaged?';
    if (cantonCode === null) throw new Error("The parameter 'cantonCode' cannot be null.");
    else if (cantonCode !== undefined)
      url_ += 'cantonCode=' + encodeURIComponent('' + cantonCode) + '&';
    if (industryCode === null) throw new Error("The parameter 'industryCode' cannot be null.");
    else if (industryCode !== undefined)
      url_ += 'industryCode=' + encodeURIComponent('' + industryCode) + '&';
    if (enquiryState === null) throw new Error("The parameter 'enquiryState' cannot be null.");
    else if (enquiryState !== undefined)
      url_ += 'enquiryState=' + encodeURIComponent('' + enquiryState) + '&';
    if (prodEnquiry === null) throw new Error("The parameter 'prodEnquiry' cannot be null.");
    else if (prodEnquiry !== undefined)
      url_ += 'prodEnquiry=' + encodeURIComponent('' + prodEnquiry) + '&';
    if (approved === null) throw new Error("The parameter 'approved' cannot be null.");
    else if (approved !== undefined) url_ += 'approved=' + encodeURIComponent('' + approved) + '&';
    if (isContacted === null) throw new Error("The parameter 'isContacted' cannot be null.");
    else if (isContacted !== undefined)
      url_ += 'isContacted=' + encodeURIComponent('' + isContacted) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEnquiryDisposalPaged(_response);
      });
  }

  protected processGetEnquiryDisposalPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfApp_EnquiryListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfApp_EnquiryListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfApp_EnquiryListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfApp_EnquiryListDto>(null as any);
  }

  /**
   * 获取编辑
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetApp_EnquiryForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetApp_EnquiryForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetApp_EnquiryForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetApp_EnquiryForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetApp_EnquiryForEditOutput>(null as any);
  }

  /**
   * 获取待审核需求的数量
   * @return Success
   */
  getNeedApprovedCount(cancelToken?: CancelToken | undefined): Promise<number> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry/GetNeedApprovedCount';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetNeedApprovedCount(_response);
      });
  }

  protected processGetNeedApprovedCount(response: AxiosResponse): Promise<number> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<number>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<number>(null as any);
  }

  /**
   * 获取的分页列表信息
   * @param cantonCode (optional) 行政区
   * @param industryCode (optional) 行业编码
   * @param enquiryState (optional) 状态
   * @param prodEnquiry (optional) true：产废发布   false：平台发布
   * @param approved (optional) true：已审核   false：待审核
   * @param isContacted (optional)
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    cantonCode: string | undefined,
    industryCode: string | undefined,
    enquiryState: number | undefined,
    prodEnquiry: boolean | undefined,
    approved: boolean | undefined,
    isContacted: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfApp_EnquiryListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry/GetPaged?';
    if (cantonCode === null) throw new Error("The parameter 'cantonCode' cannot be null.");
    else if (cantonCode !== undefined)
      url_ += 'cantonCode=' + encodeURIComponent('' + cantonCode) + '&';
    if (industryCode === null) throw new Error("The parameter 'industryCode' cannot be null.");
    else if (industryCode !== undefined)
      url_ += 'industryCode=' + encodeURIComponent('' + industryCode) + '&';
    if (enquiryState === null) throw new Error("The parameter 'enquiryState' cannot be null.");
    else if (enquiryState !== undefined)
      url_ += 'enquiryState=' + encodeURIComponent('' + enquiryState) + '&';
    if (prodEnquiry === null) throw new Error("The parameter 'prodEnquiry' cannot be null.");
    else if (prodEnquiry !== undefined)
      url_ += 'prodEnquiry=' + encodeURIComponent('' + prodEnquiry) + '&';
    if (approved === null) throw new Error("The parameter 'approved' cannot be null.");
    else if (approved !== undefined) url_ += 'approved=' + encodeURIComponent('' + approved) + '&';
    if (isContacted === null) throw new Error("The parameter 'isContacted' cannot be null.");
    else if (isContacted !== undefined)
      url_ += 'isContacted=' + encodeURIComponent('' + isContacted) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfApp_EnquiryListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfApp_EnquiryListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfApp_EnquiryListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfApp_EnquiryListDto>(null as any);
  }

  /**
   * 导出为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class App_Enquiry_PushServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除App_Enquiry_Push的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry_Push/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 全部标记为已读
   * @return Success
   */
  batchRead(cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry_Push/BatchRead';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchRead(_response);
      });
  }

  protected processBatchRead(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改平台危废线索推送的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateApp_Enquiry_PushInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry_Push/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除平台危废线索推送信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry_Push/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 导出处置企业获取推送列表
   * @param body (optional)
   * @return Success
   */
  exportExcelForPushList(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry_Push/ExportExcelForPushList';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processExportExcelForPushList(_response);
      });
  }

  protected processExportExcelForPushList(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 通过指定id获取App_Enquiry_PushListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<App_Enquiry_PushListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry_Push/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<App_Enquiry_PushListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = App_Enquiry_PushListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<App_Enquiry_PushListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<App_Enquiry_PushListDto>(null as any);
  }

  /**
   * 获取编辑 平台危废线索推送
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetApp_Enquiry_PushForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry_Push/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetApp_Enquiry_PushForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetApp_Enquiry_PushForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetApp_Enquiry_PushForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetApp_Enquiry_PushForEditOutput>(null as any);
  }

  /**
   * 处置企业消息列表
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfApp_Enquiry_PushListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry_Push/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfApp_Enquiry_PushListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfApp_Enquiry_PushListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfApp_Enquiry_PushListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfApp_Enquiry_PushListDto>(null as any);
  }

  /**
   * 根据处置企业获取推送列表
   * @param beginTime (optional) 开始推送时间
   * @param endTime (optional) 结束推送时间
   * @param disposalEntId (optional) 处置企业
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPagedByDisposal(
    beginTime: dayjs.Dayjs | undefined,
    endTime: dayjs.Dayjs | undefined,
    disposalEntId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfApp_Enquiry_PushDisposalListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry_Push/GetPagedByDisposal?';
    if (beginTime === null) throw new Error("The parameter 'beginTime' cannot be null.");
    else if (beginTime !== undefined)
      url_ +=
        'beginTime=' + encodeURIComponent(beginTime ? '' + beginTime.toISOString() : '') + '&';
    if (endTime === null) throw new Error("The parameter 'endTime' cannot be null.");
    else if (endTime !== undefined)
      url_ += 'endTime=' + encodeURIComponent(endTime ? '' + endTime.toISOString() : '') + '&';
    if (disposalEntId === null) throw new Error("The parameter 'disposalEntId' cannot be null.");
    else if (disposalEntId !== undefined)
      url_ += 'disposalEntId=' + encodeURIComponent('' + disposalEntId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPagedByDisposal(_response);
      });
  }

  protected processGetPagedByDisposal(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfApp_Enquiry_PushDisposalListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfApp_Enquiry_PushDisposalListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfApp_Enquiry_PushDisposalListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfApp_Enquiry_PushDisposalListDto>(null as any);
  }

  /**
   * 获取产废企业数量和危废重量
   * @return Success
   */
  getPushData(cancelToken?: CancelToken | undefined): Promise<PushData> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry_Push/GetPushData';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPushData(_response);
      });
  }

  protected processGetPushData(response: AxiosResponse): Promise<PushData> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PushData.fromJS(resultData200, _mappings);
      return Promise.resolve<PushData>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PushData>(null as any);
  }

  /**
   * 获取未读消息数量
   * @return Success
   */
  getUnReadCount(cancelToken?: CancelToken | undefined): Promise<number> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry_Push/GetUnReadCount';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUnReadCount(_response);
      });
  }

  protected processGetUnReadCount(response: AxiosResponse): Promise<number> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<number>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<number>(null as any);
  }

  /**
   * 根据询价危废代码推送给处置企业
   * @param enquiryId (optional)
   * @param wasteId (optional) 询价危废信息
   * @param body (optional)
   * @return Success
   */
  pushEnquiryWasteToDisposalEnt(
    enquiryId: number | undefined,
    wasteId: number | undefined,
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/App_Enquiry_Push/PushEnquiryWasteToDisposalEnt?';
    if (enquiryId === null) throw new Error("The parameter 'enquiryId' cannot be null.");
    else if (enquiryId !== undefined)
      url_ += 'enquiryId=' + encodeURIComponent('' + enquiryId) + '&';
    if (wasteId === null) throw new Error("The parameter 'wasteId' cannot be null.");
    else if (wasteId !== undefined) url_ += 'wasteId=' + encodeURIComponent('' + wasteId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processPushEnquiryWasteToDisposalEnt(_response);
      });
  }

  protected processPushEnquiryWasteToDisposalEnt(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }
}

export class App_Enterprise_ExtServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除App_Enterprise_Ext的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Enterprise_Ext/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改企业扩展的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateApp_Enterprise_ExtInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Enterprise_Ext/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除企业扩展信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Enterprise_Ext/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取App_Enterprise_ExtListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<App_Enterprise_ExtListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Enterprise_Ext/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<App_Enterprise_ExtListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = App_Enterprise_ExtListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<App_Enterprise_ExtListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<App_Enterprise_ExtListDto>(null as any);
  }

  /**
   * 获取所有处置企业
   * @param entName (optional)
   * @return Success
   */
  getDisposalEntList(
    entName: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<EnterpriseListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/App_Enterprise_Ext/GetDisposalEntList?';
    if (entName === null) throw new Error("The parameter 'entName' cannot be null.");
    else if (entName !== undefined) url_ += 'entName=' + encodeURIComponent('' + entName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDisposalEntList(_response);
      });
  }

  protected processGetDisposalEntList(response: AxiosResponse): Promise<EnterpriseListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(EnterpriseListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<EnterpriseListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EnterpriseListDto[]>(null as any);
  }

  /**
   * 获取询价单对应的处置企业
   * @param enquiryId (optional)
   * @param entName (optional)
   * @return Success
   */
  getDisposalEntListByEnquiryId(
    enquiryId: number | undefined,
    entName: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<EnterpriseListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/App_Enterprise_Ext/GetDisposalEntListByEnquiryId?';
    if (enquiryId === null) throw new Error("The parameter 'enquiryId' cannot be null.");
    else if (enquiryId !== undefined)
      url_ += 'enquiryId=' + encodeURIComponent('' + enquiryId) + '&';
    if (entName === null) throw new Error("The parameter 'entName' cannot be null.");
    else if (entName !== undefined) url_ += 'entName=' + encodeURIComponent('' + entName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDisposalEntListByEnquiryId(_response);
      });
  }

  protected processGetDisposalEntListByEnquiryId(
    response: AxiosResponse,
  ): Promise<EnterpriseListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(EnterpriseListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<EnterpriseListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EnterpriseListDto[]>(null as any);
  }

  /**
   * 根据危废代码获取有该处置能力的处置企业
   * @param wasteCode (optional)
   * @param disposalMethodList (optional)
   * @param entName (optional)
   * @return Success
   */
  getDisposalEntListByWasteCode(
    wasteCode: string | undefined,
    disposalMethodList: string | undefined,
    entName: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<NewEnterpriseListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Enterprise_Ext/GetDisposalEntListByWasteCode?';
    if (wasteCode === null) throw new Error("The parameter 'wasteCode' cannot be null.");
    else if (wasteCode !== undefined)
      url_ += 'wasteCode=' + encodeURIComponent('' + wasteCode) + '&';
    if (disposalMethodList === null)
      throw new Error("The parameter 'disposalMethodList' cannot be null.");
    else if (disposalMethodList !== undefined)
      url_ += 'disposalMethodList=' + encodeURIComponent('' + disposalMethodList) + '&';
    if (entName === null) throw new Error("The parameter 'entName' cannot be null.");
    else if (entName !== undefined) url_ += 'entName=' + encodeURIComponent('' + entName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDisposalEntListByWasteCode(_response);
      });
  }

  protected processGetDisposalEntListByWasteCode(
    response: AxiosResponse,
  ): Promise<NewEnterpriseListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NewEnterpriseListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<NewEnterpriseListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<NewEnterpriseListDto>(null as any);
  }

  /**
   * 在合同模块里查找处置企业
   * @param produceEntId (optional)
   * @param entName (optional)
   * @return Success
   */
  getDisposalEntListInContract(
    produceEntId: number | undefined,
    entName: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<EnterpriseListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/App_Enterprise_Ext/GetDisposalEntListInContract?';
    if (produceEntId === null) throw new Error("The parameter 'produceEntId' cannot be null.");
    else if (produceEntId !== undefined)
      url_ += 'produceEntId=' + encodeURIComponent('' + produceEntId) + '&';
    if (entName === null) throw new Error("The parameter 'entName' cannot be null.");
    else if (entName !== undefined) url_ += 'entName=' + encodeURIComponent('' + entName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDisposalEntListInContract(_response);
      });
  }

  protected processGetDisposalEntListInContract(
    response: AxiosResponse,
  ): Promise<EnterpriseListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(EnterpriseListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<EnterpriseListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EnterpriseListDto[]>(null as any);
  }

  /**
   * 根据企业名称模糊匹配前10条企业信息
   * @param entName (optional)
   * @return Success
   */
  getEnterpriseTop10(
    entName: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<EnterpriseListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/App_Enterprise_Ext/GetEnterpriseTop10?';
    if (entName === null) throw new Error("The parameter 'entName' cannot be null.");
    else if (entName !== undefined) url_ += 'entName=' + encodeURIComponent('' + entName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEnterpriseTop10(_response);
      });
  }

  protected processGetEnterpriseTop10(response: AxiosResponse): Promise<EnterpriseListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(EnterpriseListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<EnterpriseListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EnterpriseListDto[]>(null as any);
  }

  /**
   * 获取编辑 企业扩展
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetApp_Enterprise_ExtForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/App_Enterprise_Ext/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(
    response: AxiosResponse,
  ): Promise<GetApp_Enterprise_ExtForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetApp_Enterprise_ExtForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetApp_Enterprise_ExtForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetApp_Enterprise_ExtForEditOutput>(null as any);
  }

  /**
   * 获取企业扩展的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfApp_Enterprise_ExtListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Enterprise_Ext/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfApp_Enterprise_ExtListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfApp_Enterprise_ExtListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfApp_Enterprise_ExtListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfApp_Enterprise_ExtListDto>(null as any);
  }

  /**
   * 在合同模块里查找产废企业
   * @param entName (optional)
   * @return Success
   */
  getProduceEntListInContract(
    entName: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<EnterpriseListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/App_Enterprise_Ext/GetProduceEntListInContract?';
    if (entName === null) throw new Error("The parameter 'entName' cannot be null.");
    else if (entName !== undefined) url_ += 'entName=' + encodeURIComponent('' + entName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetProduceEntListInContract(_response);
      });
  }

  protected processGetProduceEntListInContract(
    response: AxiosResponse,
  ): Promise<EnterpriseListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(EnterpriseListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<EnterpriseListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EnterpriseListDto[]>(null as any);
  }

  /**
   * 导出企业扩展为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Enterprise_Ext/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class App_MessageServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 选择报价
   * @param body (optional)
   * @return Success
   */
  chooseOffer(
    body: EntityDtoOfInt64 | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/App_Message/ChooseOffer';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processChooseOffer(_response);
      });
  }

  protected processChooseOffer(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }
}

export class App_OfferServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除App_Offer的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Offer/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 选择报价
   * @param body (optional)
   * @return Success
   */
  chooseOffer(
    body: EntityDtoOfInt64 | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/App_Offer/ChooseOffer';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processChooseOffer(_response);
      });
  }

  protected processChooseOffer(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 添加或者修改处置报价的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateApp_OfferInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Offer/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除处置报价信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Offer/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取App_OfferListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<App_OfferListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Offer/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<App_OfferListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = App_OfferListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<App_OfferListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<App_OfferListDto>(null as any);
  }

  /**
   * 获取编辑 处置报价
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetApp_OfferForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/App_Offer/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetApp_OfferForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetApp_OfferForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetApp_OfferForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetApp_OfferForEditOutput>(null as any);
  }

  /**
   * 获取处置报价的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfApp_OfferListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Offer/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfApp_OfferListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfApp_OfferListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfApp_OfferListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfApp_OfferListDto>(null as any);
  }

  /**
   * 导出处置报价为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Offer/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class App_SampleServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除App_Sample的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Sample/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改取样记录的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateApp_SampleInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Sample/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除取样记录信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Sample/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取App_SampleListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<App_SampleListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Sample/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<App_SampleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = App_SampleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<App_SampleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<App_SampleListDto>(null as any);
  }

  /**
   * 获取编辑 取样记录
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetApp_SampleForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/App_Sample/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetApp_SampleForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetApp_SampleForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetApp_SampleForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetApp_SampleForEditOutput>(null as any);
  }

  /**
   * 获取取样记录的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfApp_SampleListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Sample/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfApp_SampleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfApp_SampleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfApp_SampleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfApp_SampleListDto>(null as any);
  }

  /**
   * 导出取样记录为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Sample/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class App_TransferServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除App_Transfer的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Transfer/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改转移记录的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateApp_TransferInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Transfer/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除转移记录信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Transfer/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取App_TransferListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<App_TransferListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Transfer/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<App_TransferListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = App_TransferListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<App_TransferListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<App_TransferListDto>(null as any);
  }

  /**
   * 获取编辑 转移记录
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetApp_TransferForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/App_Transfer/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetApp_TransferForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetApp_TransferForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetApp_TransferForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetApp_TransferForEditOutput>(null as any);
  }

  /**
   * 获取转移记录的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfApp_TransferListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Transfer/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfApp_TransferListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfApp_TransferListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfApp_TransferListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfApp_TransferListDto>(null as any);
  }

  /**
   * 导出转移记录为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Transfer/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class App_ViewclueServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除App_Viewclue的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改平台解锁危废线索的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateApp_ViewclueInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除平台解锁危废线索信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改平台线索跟进记录的公共方法
   * @param body (optional)
   * @return Success
   */
  followCreateOrUpdate(
    body: App_FollowupEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/FollowCreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processFollowCreateOrUpdate(_response);
      });
  }

  protected processFollowCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 查看线索池危废详情服务
   * @param id (optional)
   * @return Success
   */
  getByEntId(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<EnterpriseAppClueDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/GetByEntId?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetByEntId(_response);
      });
  }

  protected processGetByEntId(response: AxiosResponse): Promise<EnterpriseAppClueDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = EnterpriseAppClueDto.fromJS(resultData200, _mappings);
      return Promise.resolve<EnterpriseAppClueDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EnterpriseAppClueDto>(null as any);
  }

  /**
   * 通过指定id获取App_ViewclueListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<App_ViewclueListDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<App_ViewclueListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = App_ViewclueListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<App_ViewclueListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<App_ViewclueListDto>(null as any);
  }

  /**
   * 查看线索的次数
   * @return Success
   */
  getCanViewClueCount(cancelToken?: CancelToken | undefined): Promise<EnterpriseAppClueDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/getCanViewClueCount';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCanViewClueCount(_response);
      });
  }

  protected processGetCanViewClueCount(response: AxiosResponse): Promise<EnterpriseAppClueDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = EnterpriseAppClueDto.fromJS(resultData200, _mappings);
      return Promise.resolve<EnterpriseAppClueDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EnterpriseAppClueDto>(null as any);
  }

  /**
   * 查看线索的次数
   * @param id (optional)
   * @return Success
   */
  getClueUnlocked(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<EnterpriseAppClueDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/getClueUnlocked?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetClueUnlocked(_response);
      });
  }

  protected processGetClueUnlocked(response: AxiosResponse): Promise<EnterpriseAppClueDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = EnterpriseAppClueDto.fromJS(resultData200, _mappings);
      return Promise.resolve<EnterpriseAppClueDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EnterpriseAppClueDto>(null as any);
  }

  /**
   * 获取跟进记录
   * @param id (optional)
   * @return Success
   */
  getFollowUpById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<App_Followup> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/GetFollowUpById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetFollowUpById(_response);
      });
  }

  protected processGetFollowUpById(response: AxiosResponse): Promise<App_Followup> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = App_Followup.fromJS(resultData200, _mappings);
      return Promise.resolve<App_Followup>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<App_Followup>(null as any);
  }

  /**
   * 获取线索的跟进记录列表
   * @param viewClueId (optional)
   * @return Success
   */
  getFollowUpList(
    viewClueId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<App_Followup[]> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/GetFollowUpList?';
    if (viewClueId === null) throw new Error("The parameter 'viewClueId' cannot be null.");
    else if (viewClueId !== undefined)
      url_ += 'viewClueId=' + encodeURIComponent('' + viewClueId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetFollowUpList(_response);
      });
  }

  protected processGetFollowUpList(response: AxiosResponse): Promise<App_Followup[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(App_Followup.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<App_Followup[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<App_Followup[]>(null as any);
  }

  /**
   * 获取编辑 平台解锁危废线索
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetApp_ViewclueForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetApp_ViewclueForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetApp_ViewclueForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetApp_ViewclueForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetApp_ViewclueForEditOutput>(null as any);
  }

  /**
   * 获取平台解锁危废线索的分页列表信息
   * @param cantonCode (optional) 行政区编码
   * @param hWCode (optional) 危废编码
   * @param hWFilterText (optional) 危废过滤内容
   * @param isExceptHW01 (optional) 是否排除HW01医疗废物
   * @param dateType (optional) 数据类型
   * @param weightFilterType (optional) 重量排除  空--默认所有   01 --20吨以上
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    cantonCode: string | undefined,
    hWCode: string | undefined,
    hWFilterText: string | undefined,
    isExceptHW01: boolean | undefined,
    dateType: string | undefined,
    weightFilterType: string | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfEnterpriseAppClueDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/GetPaged?';
    if (cantonCode === null) throw new Error("The parameter 'cantonCode' cannot be null.");
    else if (cantonCode !== undefined)
      url_ += 'cantonCode=' + encodeURIComponent('' + cantonCode) + '&';
    if (hWCode === null) throw new Error("The parameter 'hWCode' cannot be null.");
    else if (hWCode !== undefined) url_ += 'hWCode=' + encodeURIComponent('' + hWCode) + '&';
    if (hWFilterText === null) throw new Error("The parameter 'hWFilterText' cannot be null.");
    else if (hWFilterText !== undefined)
      url_ += 'hWFilterText=' + encodeURIComponent('' + hWFilterText) + '&';
    if (isExceptHW01 === null) throw new Error("The parameter 'isExceptHW01' cannot be null.");
    else if (isExceptHW01 !== undefined)
      url_ += 'isExceptHW01=' + encodeURIComponent('' + isExceptHW01) + '&';
    if (dateType === null) throw new Error("The parameter 'dateType' cannot be null.");
    else if (dateType !== undefined) url_ += 'dateType=' + encodeURIComponent('' + dateType) + '&';
    if (weightFilterType === null)
      throw new Error("The parameter 'weightFilterType' cannot be null.");
    else if (weightFilterType !== undefined)
      url_ += 'weightFilterType=' + encodeURIComponent('' + weightFilterType) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfEnterpriseAppClueDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfEnterpriseAppClueDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfEnterpriseAppClueDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfEnterpriseAppClueDto>(null as any);
  }

  /**
   * 跟进快速回复文案
   * @param type (optional)
   * @return Success
   */
  getQuickList(type: number | undefined, cancelToken?: CancelToken | undefined): Promise<string[]> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/GetQuickList?';
    if (type === null) throw new Error("The parameter 'type' cannot be null.");
    else if (type !== undefined) url_ += 'type=' + encodeURIComponent('' + type) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetQuickList(_response);
      });
  }

  protected processGetQuickList(response: AxiosResponse): Promise<string[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(item);
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<string[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string[]>(null as any);
  }

  /**
   * 查询当前销售指定日期的最后一条待联系的跟进记录
   * @param startDate (optional)
   * @param endDate (optional)
   * @return Success
   */
  getTheLatestFollowUpByDate(
    startDate: dayjs.Dayjs | undefined,
    endDate: dayjs.Dayjs | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<App_FollowupListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/GetTheLatestFollowUpByDate?';
    if (startDate === null) throw new Error("The parameter 'startDate' cannot be null.");
    else if (startDate !== undefined)
      url_ +=
        'startDate=' + encodeURIComponent(startDate ? '' + startDate.toISOString() : '') + '&';
    if (endDate === null) throw new Error("The parameter 'endDate' cannot be null.");
    else if (endDate !== undefined)
      url_ += 'endDate=' + encodeURIComponent(endDate ? '' + endDate.toISOString() : '') + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTheLatestFollowUpByDate(_response);
      });
  }

  protected processGetTheLatestFollowUpByDate(
    response: AxiosResponse,
  ): Promise<App_FollowupListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(App_FollowupListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<App_FollowupListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<App_FollowupListDto[]>(null as any);
  }

  /**
   * 获取已解锁的信息
   * @param cantonCode (optional) 行政区编码
   * @param date (optional) 查询所在月的时间
   * @param followUpState (optional) 记录状态
   * @param dateType (optional) 日期类型，0：日，1：周，2：月
   * @param userId (optional) 用户
   * @param isAll (optional) 是否全部
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getUnlockCluePaged(
    cantonCode: string | undefined,
    date: dayjs.Dayjs | undefined,
    followUpState: number | undefined,
    dateType: number | undefined,
    userId: number | undefined,
    isAll: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfEnterpriseAppClueDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/GetUnlockCluePaged?';
    if (cantonCode === null) throw new Error("The parameter 'cantonCode' cannot be null.");
    else if (cantonCode !== undefined)
      url_ += 'cantonCode=' + encodeURIComponent('' + cantonCode) + '&';
    if (date === null) throw new Error("The parameter 'date' cannot be null.");
    else if (date !== undefined)
      url_ += 'date=' + encodeURIComponent(date ? '' + date.toISOString() : '') + '&';
    if (followUpState === null) throw new Error("The parameter 'followUpState' cannot be null.");
    else if (followUpState !== undefined)
      url_ += 'followUpState=' + encodeURIComponent('' + followUpState) + '&';
    if (dateType === null) throw new Error("The parameter 'dateType' cannot be null.");
    else if (dateType !== undefined) url_ += 'dateType=' + encodeURIComponent('' + dateType) + '&';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    if (isAll === null) throw new Error("The parameter 'isAll' cannot be null.");
    else if (isAll !== undefined) url_ += 'isAll=' + encodeURIComponent('' + isAll) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUnlockCluePaged(_response);
      });
  }

  protected processGetUnlockCluePaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfEnterpriseAppClueDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfEnterpriseAppClueDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfEnterpriseAppClueDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfEnterpriseAppClueDto>(null as any);
  }

  /**
   * 导出已解锁的信息
   * @param cantonCode (optional) 行政区编码
   * @param date (optional) 查询所在月的时间
   * @param followUpState (optional) 记录状态
   * @param dateType (optional) 日期类型，0：日，1：周，2：月
   * @param userId (optional) 用户
   * @param isAll (optional) 是否全部
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getUnlockClueToExcelFile(
    cantonCode: string | undefined,
    date: dayjs.Dayjs | undefined,
    followUpState: number | undefined,
    dateType: number | undefined,
    userId: number | undefined,
    isAll: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/GetUnlockClueToExcelFile?';
    if (cantonCode === null) throw new Error("The parameter 'cantonCode' cannot be null.");
    else if (cantonCode !== undefined)
      url_ += 'cantonCode=' + encodeURIComponent('' + cantonCode) + '&';
    if (date === null) throw new Error("The parameter 'date' cannot be null.");
    else if (date !== undefined)
      url_ += 'date=' + encodeURIComponent(date ? '' + date.toISOString() : '') + '&';
    if (followUpState === null) throw new Error("The parameter 'followUpState' cannot be null.");
    else if (followUpState !== undefined)
      url_ += 'followUpState=' + encodeURIComponent('' + followUpState) + '&';
    if (dateType === null) throw new Error("The parameter 'dateType' cannot be null.");
    else if (dateType !== undefined) url_ += 'dateType=' + encodeURIComponent('' + dateType) + '&';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    if (isAll === null) throw new Error("The parameter 'isAll' cannot be null.");
    else if (isAll !== undefined) url_ += 'isAll=' + encodeURIComponent('' + isAll) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUnlockClueToExcelFile(_response);
      });
  }

  protected processGetUnlockClueToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 获取某月、周、日解锁信息的统计
   * @param dateType (optional) 日期类型，0：日，1：周，2：月
   * @param selectDate (optional) 选择日期
   * @param userId (optional) 用户
   * @param isAll (optional) 是否全部
   * @return Success
   */
  getViewClueTotalByDate(
    dateType: number | undefined,
    selectDate: dayjs.Dayjs | undefined,
    userId: number | undefined,
    isAll: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<ViewClueTotalDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/GetViewClueTotalByDate?';
    if (dateType === null) throw new Error("The parameter 'dateType' cannot be null.");
    else if (dateType !== undefined) url_ += 'dateType=' + encodeURIComponent('' + dateType) + '&';
    if (selectDate === null) throw new Error("The parameter 'selectDate' cannot be null.");
    else if (selectDate !== undefined)
      url_ +=
        'selectDate=' + encodeURIComponent(selectDate ? '' + selectDate.toISOString() : '') + '&';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    if (isAll === null) throw new Error("The parameter 'isAll' cannot be null.");
    else if (isAll !== undefined) url_ += 'isAll=' + encodeURIComponent('' + isAll) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetViewClueTotalByDate(_response);
      });
  }

  protected processGetViewClueTotalByDate(response: AxiosResponse): Promise<ViewClueTotalDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ViewClueTotalDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ViewClueTotalDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ViewClueTotalDto>(null as any);
  }

  /**
   * 获取某月解锁信息的统计
   * @param date (optional)
   * @return Success
   */
  getViewClueTotalByMonthDate(
    date: dayjs.Dayjs | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<ViewClueTotalDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/GetViewClueTotalByMonthDate?';
    if (date === null) throw new Error("The parameter 'date' cannot be null.");
    else if (date !== undefined)
      url_ += 'date=' + encodeURIComponent(date ? '' + date.toISOString() : '') + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetViewClueTotalByMonthDate(_response);
      });
  }

  protected processGetViewClueTotalByMonthDate(response: AxiosResponse): Promise<ViewClueTotalDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ViewClueTotalDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ViewClueTotalDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ViewClueTotalDto>(null as any);
  }

  /**
   * 导出线索统计
   * @param dateType (optional) 日期类型，0：日，1：周，2：月
   * @param selectDate (optional) 选择日期
   * @param userId (optional) 用户
   * @param isAll (optional) 是否全部
   * @return Success
   */
  getViewClueTotalToExcelFile(
    dateType: number | undefined,
    selectDate: dayjs.Dayjs | undefined,
    userId: number | undefined,
    isAll: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/App_Viewclue/GetViewClueTotalToExcelFile?';
    if (dateType === null) throw new Error("The parameter 'dateType' cannot be null.");
    else if (dateType !== undefined) url_ += 'dateType=' + encodeURIComponent('' + dateType) + '&';
    if (selectDate === null) throw new Error("The parameter 'selectDate' cannot be null.");
    else if (selectDate !== undefined)
      url_ +=
        'selectDate=' + encodeURIComponent(selectDate ? '' + selectDate.toISOString() : '') + '&';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    if (isAll === null) throw new Error("The parameter 'isAll' cannot be null.");
    else if (isAll !== undefined) url_ += 'isAll=' + encodeURIComponent('' + isAll) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetViewClueTotalToExcelFile(_response);
      });
  }

  protected processGetViewClueTotalToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class AppManageServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  generate(cancelToken?: CancelToken | undefined): Promise<HttpResponseMessage> {
    let url_ = this.baseUrl + '/api/services/app/AppManage/Generate';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGenerate(_response);
      });
  }

  protected processGenerate(response: AxiosResponse): Promise<HttpResponseMessage> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = HttpResponseMessage.fromJS(resultData200, _mappings);
      return Promise.resolve<HttpResponseMessage>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<HttpResponseMessage>(null as any);
  }

  /**
   * @return Success
   */
  getById(cancelToken?: CancelToken | undefined): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/AppManage/GetById';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }
}

export class AuditLogServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param startDate (optional) 开始时间
   * @param endDate (optional) 结束时间
   * @param userName (optional) 用户名
   * @param serviceName (optional) 服务名称
   * @param methodName (optional) 方法名称
   * @param browserInfo (optional) 浏览器信息
   * @param hasException (optional) 是否包含异常
   * @param minExecutionDuration (optional)
   * @param maxExecutionDuration (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getAuditLogsToExcel(
    startDate: dayjs.Dayjs | undefined,
    endDate: dayjs.Dayjs | undefined,
    userName: string | undefined,
    serviceName: string | undefined,
    methodName: string | undefined,
    browserInfo: string | undefined,
    hasException: boolean | undefined,
    minExecutionDuration: number | undefined,
    maxExecutionDuration: number | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/AuditLog/GetAuditLogsToExcel?';
    if (startDate === null) throw new Error("The parameter 'startDate' cannot be null.");
    else if (startDate !== undefined)
      url_ +=
        'startDate=' + encodeURIComponent(startDate ? '' + startDate.toISOString() : '') + '&';
    if (endDate === null) throw new Error("The parameter 'endDate' cannot be null.");
    else if (endDate !== undefined)
      url_ += 'endDate=' + encodeURIComponent(endDate ? '' + endDate.toISOString() : '') + '&';
    if (userName === null) throw new Error("The parameter 'userName' cannot be null.");
    else if (userName !== undefined) url_ += 'userName=' + encodeURIComponent('' + userName) + '&';
    if (serviceName === null) throw new Error("The parameter 'serviceName' cannot be null.");
    else if (serviceName !== undefined)
      url_ += 'serviceName=' + encodeURIComponent('' + serviceName) + '&';
    if (methodName === null) throw new Error("The parameter 'methodName' cannot be null.");
    else if (methodName !== undefined)
      url_ += 'methodName=' + encodeURIComponent('' + methodName) + '&';
    if (browserInfo === null) throw new Error("The parameter 'browserInfo' cannot be null.");
    else if (browserInfo !== undefined)
      url_ += 'browserInfo=' + encodeURIComponent('' + browserInfo) + '&';
    if (hasException === null) throw new Error("The parameter 'hasException' cannot be null.");
    else if (hasException !== undefined)
      url_ += 'hasException=' + encodeURIComponent('' + hasException) + '&';
    if (minExecutionDuration === null)
      throw new Error("The parameter 'minExecutionDuration' cannot be null.");
    else if (minExecutionDuration !== undefined)
      url_ += 'minExecutionDuration=' + encodeURIComponent('' + minExecutionDuration) + '&';
    if (maxExecutionDuration === null)
      throw new Error("The parameter 'maxExecutionDuration' cannot be null.");
    else if (maxExecutionDuration !== undefined)
      url_ += 'maxExecutionDuration=' + encodeURIComponent('' + maxExecutionDuration) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAuditLogsToExcel(_response);
      });
  }

  protected processGetAuditLogsToExcel(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * @param startDate (optional)
   * @param endDate (optional)
   * @param userName (optional)
   * @param entityTypeFullName (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getEntityChanges(
    startDate: dayjs.Dayjs | undefined,
    endDate: dayjs.Dayjs | undefined,
    userName: string | undefined,
    entityTypeFullName: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfEntityChangeListDto> {
    let url_ = this.baseUrl + '/api/services/app/AuditLog/GetEntityChanges?';
    if (startDate === null) throw new Error("The parameter 'startDate' cannot be null.");
    else if (startDate !== undefined)
      url_ +=
        'startDate=' + encodeURIComponent(startDate ? '' + startDate.toISOString() : '') + '&';
    if (endDate === null) throw new Error("The parameter 'endDate' cannot be null.");
    else if (endDate !== undefined)
      url_ += 'endDate=' + encodeURIComponent(endDate ? '' + endDate.toISOString() : '') + '&';
    if (userName === null) throw new Error("The parameter 'userName' cannot be null.");
    else if (userName !== undefined) url_ += 'userName=' + encodeURIComponent('' + userName) + '&';
    if (entityTypeFullName === null)
      throw new Error("The parameter 'entityTypeFullName' cannot be null.");
    else if (entityTypeFullName !== undefined)
      url_ += 'entityTypeFullName=' + encodeURIComponent('' + entityTypeFullName) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEntityChanges(_response);
      });
  }

  protected processGetEntityChanges(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfEntityChangeListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfEntityChangeListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfEntityChangeListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfEntityChangeListDto>(null as any);
  }

  /**
   * @param startDate (optional)
   * @param endDate (optional)
   * @param userName (optional)
   * @param entityTypeFullName (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getEntityChangesToExcel(
    startDate: dayjs.Dayjs | undefined,
    endDate: dayjs.Dayjs | undefined,
    userName: string | undefined,
    entityTypeFullName: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/AuditLog/GetEntityChangesToExcel?';
    if (startDate === null) throw new Error("The parameter 'startDate' cannot be null.");
    else if (startDate !== undefined)
      url_ +=
        'startDate=' + encodeURIComponent(startDate ? '' + startDate.toISOString() : '') + '&';
    if (endDate === null) throw new Error("The parameter 'endDate' cannot be null.");
    else if (endDate !== undefined)
      url_ += 'endDate=' + encodeURIComponent(endDate ? '' + endDate.toISOString() : '') + '&';
    if (userName === null) throw new Error("The parameter 'userName' cannot be null.");
    else if (userName !== undefined) url_ += 'userName=' + encodeURIComponent('' + userName) + '&';
    if (entityTypeFullName === null)
      throw new Error("The parameter 'entityTypeFullName' cannot be null.");
    else if (entityTypeFullName !== undefined)
      url_ += 'entityTypeFullName=' + encodeURIComponent('' + entityTypeFullName) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEntityChangesToExcel(_response);
      });
  }

  protected processGetEntityChangesToExcel(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * @return Success
   */
  getEntityHistoryObjectTypes(cancelToken?: CancelToken | undefined): Promise<NameValueDto[]> {
    let url_ = this.baseUrl + '/api/services/app/AuditLog/GetEntityHistoryObjectTypes';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEntityHistoryObjectTypes(_response);
      });
  }

  protected processGetEntityHistoryObjectTypes(response: AxiosResponse): Promise<NameValueDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(NameValueDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<NameValueDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<NameValueDto[]>(null as any);
  }

  /**
   * @param startDate (optional) 开始时间
   * @param endDate (optional) 结束时间
   * @param userName (optional) 用户名
   * @param serviceName (optional) 服务名称
   * @param methodName (optional) 方法名称
   * @param browserInfo (optional) 浏览器信息
   * @param hasException (optional) 是否包含异常
   * @param minExecutionDuration (optional)
   * @param maxExecutionDuration (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPagedAuditLogs(
    startDate: dayjs.Dayjs | undefined,
    endDate: dayjs.Dayjs | undefined,
    userName: string | undefined,
    serviceName: string | undefined,
    methodName: string | undefined,
    browserInfo: string | undefined,
    hasException: boolean | undefined,
    minExecutionDuration: number | undefined,
    maxExecutionDuration: number | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfAuditLogListDto> {
    let url_ = this.baseUrl + '/api/services/app/AuditLog/GetPagedAuditLogs?';
    if (startDate === null) throw new Error("The parameter 'startDate' cannot be null.");
    else if (startDate !== undefined)
      url_ +=
        'startDate=' + encodeURIComponent(startDate ? '' + startDate.toISOString() : '') + '&';
    if (endDate === null) throw new Error("The parameter 'endDate' cannot be null.");
    else if (endDate !== undefined)
      url_ += 'endDate=' + encodeURIComponent(endDate ? '' + endDate.toISOString() : '') + '&';
    if (userName === null) throw new Error("The parameter 'userName' cannot be null.");
    else if (userName !== undefined) url_ += 'userName=' + encodeURIComponent('' + userName) + '&';
    if (serviceName === null) throw new Error("The parameter 'serviceName' cannot be null.");
    else if (serviceName !== undefined)
      url_ += 'serviceName=' + encodeURIComponent('' + serviceName) + '&';
    if (methodName === null) throw new Error("The parameter 'methodName' cannot be null.");
    else if (methodName !== undefined)
      url_ += 'methodName=' + encodeURIComponent('' + methodName) + '&';
    if (browserInfo === null) throw new Error("The parameter 'browserInfo' cannot be null.");
    else if (browserInfo !== undefined)
      url_ += 'browserInfo=' + encodeURIComponent('' + browserInfo) + '&';
    if (hasException === null) throw new Error("The parameter 'hasException' cannot be null.");
    else if (hasException !== undefined)
      url_ += 'hasException=' + encodeURIComponent('' + hasException) + '&';
    if (minExecutionDuration === null)
      throw new Error("The parameter 'minExecutionDuration' cannot be null.");
    else if (minExecutionDuration !== undefined)
      url_ += 'minExecutionDuration=' + encodeURIComponent('' + minExecutionDuration) + '&';
    if (maxExecutionDuration === null)
      throw new Error("The parameter 'maxExecutionDuration' cannot be null.");
    else if (maxExecutionDuration !== undefined)
      url_ += 'maxExecutionDuration=' + encodeURIComponent('' + maxExecutionDuration) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPagedAuditLogs(_response);
      });
  }

  protected processGetPagedAuditLogs(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfAuditLogListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfAuditLogListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfAuditLogListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfAuditLogListDto>(null as any);
  }
}

export class BiddingProjectServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 新增或者修改招投标推送消息功能
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: BidProjectSendMsgDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/BiddingProject/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 获取所有租户列表  todo 这里要赋值权限，只能在这里才能使用
   * @return Success
   */
  getAllTenantList(cancelToken?: CancelToken | undefined): Promise<TenantListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/BiddingProject/GetAllTenantList';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllTenantList(_response);
      });
  }

  protected processGetAllTenantList(response: AxiosResponse): Promise<TenantListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(TenantListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<TenantListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<TenantListDto[]>(null as any);
  }

  /**
   * 通过指定id获取Bidding_ProjectListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Bidding_ProjectDetailsDto> {
    let url_ = this.baseUrl + '/api/services/app/BiddingProject/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<Bidding_ProjectDetailsDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Bidding_ProjectDetailsDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Bidding_ProjectDetailsDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Bidding_ProjectDetailsDto>(null as any);
  }

  /**
   * 获取招投标信息列表
   * @param cantonCode (optional) 行政区Code
   * @param startDateTime (optional) 起始时间
   * @param endDateTime (optional) 结束时间
   * @param isWasterTransfer (optional) 是否是危废转移，1：危废转移，2：其他危废相关
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    cantonCode: string | undefined,
    startDateTime: dayjs.Dayjs | undefined,
    endDateTime: dayjs.Dayjs | undefined,
    isWasterTransfer: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfBidding_ProjectListDto> {
    let url_ = this.baseUrl + '/api/services/app/BiddingProject/GetPaged?';
    if (cantonCode === null) throw new Error("The parameter 'cantonCode' cannot be null.");
    else if (cantonCode !== undefined)
      url_ += 'cantonCode=' + encodeURIComponent('' + cantonCode) + '&';
    if (startDateTime === null) throw new Error("The parameter 'startDateTime' cannot be null.");
    else if (startDateTime !== undefined)
      url_ +=
        'startDateTime=' +
        encodeURIComponent(startDateTime ? '' + startDateTime.toISOString() : '') +
        '&';
    if (endDateTime === null) throw new Error("The parameter 'endDateTime' cannot be null.");
    else if (endDateTime !== undefined)
      url_ +=
        'endDateTime=' +
        encodeURIComponent(endDateTime ? '' + endDateTime.toISOString() : '') +
        '&';
    if (isWasterTransfer === null)
      throw new Error("The parameter 'isWasterTransfer' cannot be null.");
    else if (isWasterTransfer !== undefined)
      url_ += 'isWasterTransfer=' + encodeURIComponent('' + isWasterTransfer) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfBidding_ProjectListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfBidding_ProjectListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfBidding_ProjectListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfBidding_ProjectListDto>(null as any);
  }

  /**
   * 根据危废代码 获取匹配的处置企业
   * @param hwCodes (optional)
   * @return Success
   */
  getTenantIdsByHWCodes(
    hwCodes: string[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<number[]> {
    let url_ = this.baseUrl + '/api/services/app/BiddingProject/GetTenantIdsByHWCodes?';
    if (hwCodes === null) throw new Error("The parameter 'hwCodes' cannot be null.");
    else if (hwCodes !== undefined)
      hwCodes &&
        hwCodes.forEach((item) => {
          url_ += 'hwCodes=' + encodeURIComponent('' + item) + '&';
        });
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTenantIdsByHWCodes(_response);
      });
  }

  protected processGetTenantIdsByHWCodes(response: AxiosResponse): Promise<number[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(item);
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<number[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<number[]>(null as any);
  }
}

export class BllDicServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除BllDic的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/BllDic/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateBllDicInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/BllDic/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/BllDic/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取BllDicListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<BllDicListDto> {
    let url_ = this.baseUrl + '/api/services/app/BllDic/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<BllDicListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = BllDicListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<BllDicListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<BllDicListDto>(null as any);
  }

  /**
   * 获取编辑
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetBllDicForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/BllDic/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetBllDicForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetBllDicForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetBllDicForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetBllDicForEditOutput>(null as any);
  }

  /**
   * 获取的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfBllDicListDto> {
    let url_ = this.baseUrl + '/api/services/app/BllDic/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfBllDicListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfBllDicListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfBllDicListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfBllDicListDto>(null as any);
  }
}

export class CommonLookupServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  findUsers(
    body: CommonLookupFindUsersInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfNameValueDto> {
    let url_ = this.baseUrl + '/api/services/app/CommonLookup/FindUsers';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processFindUsers(_response);
      });
  }

  protected processFindUsers(response: AxiosResponse): Promise<PagedResultDtoOfNameValueDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfNameValueDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfNameValueDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfNameValueDto>(null as any);
  }

  /**
   * @return Success
   */
  getDefaultEditionName(
    cancelToken?: CancelToken | undefined,
  ): Promise<GetDefaultEditionNameOutput> {
    let url_ = this.baseUrl + '/api/services/app/CommonLookup/GetDefaultEditionName';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDefaultEditionName(_response);
      });
  }

  protected processGetDefaultEditionName(
    response: AxiosResponse,
  ): Promise<GetDefaultEditionNameOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetDefaultEditionNameOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetDefaultEditionNameOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetDefaultEditionNameOutput>(null as any);
  }

  /**
   * @param onlyFreeItems (optional)
   * @return Success
   */
  getEditionsForCombobox(
    onlyFreeItems: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<ListResultDtoOfSubscribableEditionComboboxItemDto> {
    let url_ = this.baseUrl + '/api/services/app/CommonLookup/GetEditionsForCombobox?';
    if (onlyFreeItems === null) throw new Error("The parameter 'onlyFreeItems' cannot be null.");
    else if (onlyFreeItems !== undefined)
      url_ += 'onlyFreeItems=' + encodeURIComponent('' + onlyFreeItems) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEditionsForCombobox(_response);
      });
  }

  protected processGetEditionsForCombobox(
    response: AxiosResponse,
  ): Promise<ListResultDtoOfSubscribableEditionComboboxItemDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ListResultDtoOfSubscribableEditionComboboxItemDto.fromJS(
        resultData200,
        _mappings,
      );
      return Promise.resolve<ListResultDtoOfSubscribableEditionComboboxItemDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ListResultDtoOfSubscribableEditionComboboxItemDto>(null as any);
  }

  /**
   * @return Success
   */
  getValidateCodeTypesForCombobox(
    cancelToken?: CancelToken | undefined,
  ): Promise<ListResultDtoOfComboboxItemDtoTOfInt32> {
    let url_ = this.baseUrl + '/api/services/app/CommonLookup/GetValidateCodeTypesForCombobox';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetValidateCodeTypesForCombobox(_response);
      });
  }

  protected processGetValidateCodeTypesForCombobox(
    response: AxiosResponse,
  ): Promise<ListResultDtoOfComboboxItemDtoTOfInt32> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ListResultDtoOfComboboxItemDtoTOfInt32.fromJS(resultData200, _mappings);
      return Promise.resolve<ListResultDtoOfComboboxItemDtoTOfInt32>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ListResultDtoOfComboboxItemDtoTOfInt32>(null as any);
  }
}

export class CommonMethodServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 新增物流操作日志
   * @param body (optional)
   * @return Success
   */
  addWlOperationLog(
    body: WlOperationLogEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/AddWlOperationLog';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAddWlOperationLog(_response);
      });
  }

  protected processAddWlOperationLog(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增物流操作日志
   * @param operationType (optional)
   * @param operationDesc (optional)
   * @param fromTable (optional)
   * @param fromId (optional)
   * @param operationFlag (optional)
   * @param body (optional)
   * @return Success
   */
  addWlOperationLogByParam(
    operationType: number | undefined,
    operationDesc: string | undefined,
    fromTable: string | undefined,
    fromId: number | undefined,
    operationFlag: string | undefined,
    body: WlOperationField[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/AddWlOperationLogByParam?';
    if (operationType === null) throw new Error("The parameter 'operationType' cannot be null.");
    else if (operationType !== undefined)
      url_ += 'operationType=' + encodeURIComponent('' + operationType) + '&';
    if (operationDesc === null) throw new Error("The parameter 'operationDesc' cannot be null.");
    else if (operationDesc !== undefined)
      url_ += 'operationDesc=' + encodeURIComponent('' + operationDesc) + '&';
    if (fromTable === null) throw new Error("The parameter 'fromTable' cannot be null.");
    else if (fromTable !== undefined)
      url_ += 'fromTable=' + encodeURIComponent('' + fromTable) + '&';
    if (fromId === null) throw new Error("The parameter 'fromId' cannot be null.");
    else if (fromId !== undefined) url_ += 'fromId=' + encodeURIComponent('' + fromId) + '&';
    if (operationFlag === null) throw new Error("The parameter 'operationFlag' cannot be null.");
    else if (operationFlag !== undefined)
      url_ += 'operationFlag=' + encodeURIComponent('' + operationFlag) + '&';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAddWlOperationLogByParam(_response);
      });
  }

  protected processAddWlOperationLogByParam(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增字典
   * @param categoryCode (optional)
   * @param dicValue (optional)
   * @return Success
   */
  createPublicDictItem(
    categoryCode: string | undefined,
    dicValue: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/CreatePublicDictItem?';
    if (categoryCode === null) throw new Error("The parameter 'categoryCode' cannot be null.");
    else if (categoryCode !== undefined)
      url_ += 'categoryCode=' + encodeURIComponent('' + categoryCode) + '&';
    if (dicValue === null) throw new Error("The parameter 'dicValue' cannot be null.");
    else if (dicValue !== undefined) url_ += 'dicValue=' + encodeURIComponent('' + dicValue) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreatePublicDictItem(_response);
      });
  }

  protected processCreatePublicDictItem(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 获取行政区列表
   * @return Success
   */
  getAllCantons(cancelToken?: CancelToken | undefined): Promise<Dic_Canton[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetAllCantons';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllCantons(_response);
      });
  }

  protected processGetAllCantons(response: AxiosResponse): Promise<Dic_Canton[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_Canton.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_Canton[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_Canton[]>(null as any);
  }

  /**
   * 一次获取所有的线索池的查询条件
   * @param canViewHW (optional)
   * @param canViewEia (optional)
   * @return Success
   */
  getAllCluePoolQuerysFromCache(
    canViewHW: boolean | undefined,
    canViewEia: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CluePoolQueryDto> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetAllCluePoolQuerysFromCache?';
    if (canViewHW === null) throw new Error("The parameter 'canViewHW' cannot be null.");
    else if (canViewHW !== undefined)
      url_ += 'canViewHW=' + encodeURIComponent('' + canViewHW) + '&';
    if (canViewEia === null) throw new Error("The parameter 'canViewEia' cannot be null.");
    else if (canViewEia !== undefined)
      url_ += 'canViewEia=' + encodeURIComponent('' + canViewEia) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllCluePoolQuerysFromCache(_response);
      });
  }

  protected processGetAllCluePoolQuerysFromCache(
    response: AxiosResponse,
  ): Promise<CluePoolQueryDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = CluePoolQueryDto.fromJS(resultData200, _mappings);
      return Promise.resolve<CluePoolQueryDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CluePoolQueryDto>(null as any);
  }

  /**
   * 获取危废列表
   * @return Success
   */
  getAllHWCodes(cancelToken?: CancelToken | undefined): Promise<Dic_HWCodeDto[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetAllHWCodes';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllHWCodes(_response);
      });
  }

  protected processGetAllHWCodes(response: AxiosResponse): Promise<Dic_HWCodeDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_HWCodeDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_HWCodeDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_HWCodeDto[]>(null as any);
  }

  /**
   * 根据行政区Code获取 它所以的父级的Code和当前Code
   * @param cantonCode (optional)
   * @return Success
   */
  getAllParentCodeCantonsByCode(
    cantonCode: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<string[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetAllParentCodeCantonsByCode?';
    if (cantonCode === null) throw new Error("The parameter 'cantonCode' cannot be null.");
    else if (cantonCode !== undefined)
      url_ += 'cantonCode=' + encodeURIComponent('' + cantonCode) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllParentCodeCantonsByCode(_response);
      });
  }

  protected processGetAllParentCodeCantonsByCode(response: AxiosResponse): Promise<string[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(item);
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<string[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string[]>(null as any);
  }

  /**
   * 根据行政区名称获取 它所以的父级的Code和当前Code
   * @param cantonName (optional)
   * @return Success
   */
  getAllParentCodeCantonsByName(
    cantonName: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<string[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetAllParentCodeCantonsByName?';
    if (cantonName === null) throw new Error("The parameter 'cantonName' cannot be null.");
    else if (cantonName !== undefined)
      url_ += 'cantonName=' + encodeURIComponent('' + cantonName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllParentCodeCantonsByName(_response);
      });
  }

  protected processGetAllParentCodeCantonsByName(response: AxiosResponse): Promise<string[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(item);
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<string[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string[]>(null as any);
  }

  /**
   * 获取同部门和下级
   * @return Success
   */
  getAllUsers(cancelToken?: CancelToken | undefined): Promise<UserDto[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetAllUsers';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllUsers(_response);
      });
  }

  protected processGetAllUsers(response: AxiosResponse): Promise<UserDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(UserDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<UserDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<UserDto[]>(null as any);
  }

  /**
   * 根据地址获取行政区
   * @param address (optional)
   * @return Success
   */
  getCantonFullCodeByAddress(
    address: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CantonFullCodeByAddress> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetCantonFullCodeByAddress?';
    if (address === null) throw new Error("The parameter 'address' cannot be null.");
    else if (address !== undefined) url_ += 'address=' + encodeURIComponent('' + address) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCantonFullCodeByAddress(_response);
      });
  }

  protected processGetCantonFullCodeByAddress(
    response: AxiosResponse,
  ): Promise<CantonFullCodeByAddress> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = CantonFullCodeByAddress.fromJS(resultData200, _mappings);
      return Promise.resolve<CantonFullCodeByAddress>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CantonFullCodeByAddress>(null as any);
  }

  /**
   * 根据经纬度获取行政区
   * @param longitude (optional)
   * @param latitude (optional)
   * @return Success
   */
  getCantonFullCodeByGeography(
    longitude: number | undefined,
    latitude: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CantonFullCodeByAddress> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetCantonFullCodeByGeography?';
    if (longitude === null) throw new Error("The parameter 'longitude' cannot be null.");
    else if (longitude !== undefined)
      url_ += 'longitude=' + encodeURIComponent('' + longitude) + '&';
    if (latitude === null) throw new Error("The parameter 'latitude' cannot be null.");
    else if (latitude !== undefined) url_ += 'latitude=' + encodeURIComponent('' + latitude) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCantonFullCodeByGeography(_response);
      });
  }

  protected processGetCantonFullCodeByGeography(
    response: AxiosResponse,
  ): Promise<CantonFullCodeByAddress> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = CantonFullCodeByAddress.fromJS(resultData200, _mappings);
      return Promise.resolve<CantonFullCodeByAddress>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CantonFullCodeByAddress>(null as any);
  }

  /**
   * 获取行政区
   * @param showAll (optional)
   * @return Success
   */
  getCantons(
    showAll: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Dic_Canton[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetCantons?';
    if (showAll === null) throw new Error("The parameter 'showAll' cannot be null.");
    else if (showAll !== undefined) url_ += 'showAll=' + encodeURIComponent('' + showAll) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCantons(_response);
      });
  }

  protected processGetCantons(response: AxiosResponse): Promise<Dic_Canton[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_Canton.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_Canton[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_Canton[]>(null as any);
  }

  /**
   * 获取三级行政区列表
   * @return Success
   */
  getCantons3Level(cancelToken?: CancelToken | undefined): Promise<Dic_CantonDto[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetCantons3Level';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCantons3Level(_response);
      });
  }

  protected processGetCantons3Level(response: AxiosResponse): Promise<Dic_CantonDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_CantonDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_CantonDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_CantonDto[]>(null as any);
  }

  /**
   * 获取行政区列表（可以按照一级目录的代码查询二级目录）
   * @param parentCode (optional)
   * @return Success
   */
  getCantonsByParentCode(
    parentCode: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Dic_Canton[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetCantonsByParentCode?';
    if (parentCode === null) throw new Error("The parameter 'parentCode' cannot be null.");
    else if (parentCode !== undefined)
      url_ += 'parentCode=' + encodeURIComponent('' + parentCode) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCantonsByParentCode(_response);
      });
  }

  protected processGetCantonsByParentCode(response: AxiosResponse): Promise<Dic_Canton[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_Canton.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_Canton[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_Canton[]>(null as any);
  }

  /**
   * 获取分类的字典列表
   * @param categoryCode (optional) 字典分类
   * @return Success
   */
  getDicItemByCode(
    categoryCode: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CrmDictItems[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetDicItemByCode?';
    if (categoryCode === null) throw new Error("The parameter 'categoryCode' cannot be null.");
    else if (categoryCode !== undefined)
      url_ += 'categoryCode=' + encodeURIComponent('' + categoryCode) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDicItemByCode(_response);
      });
  }

  protected processGetDicItemByCode(response: AxiosResponse): Promise<CrmDictItems[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(CrmDictItems.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<CrmDictItems[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CrmDictItems[]>(null as any);
  }

  /**
   * 测算两个经纬度之间的距离
   * @param lngStart (optional)
   * @param latStart (optional)
   * @param lngEnd (optional)
   * @param latEnd (optional)
   * @return Success
   */
  getDistance(
    lngStart: number | undefined,
    latStart: number | undefined,
    lngEnd: number | undefined,
    latEnd: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<number> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetDistance?';
    if (lngStart === null) throw new Error("The parameter 'lngStart' cannot be null.");
    else if (lngStart !== undefined) url_ += 'lngStart=' + encodeURIComponent('' + lngStart) + '&';
    if (latStart === null) throw new Error("The parameter 'latStart' cannot be null.");
    else if (latStart !== undefined) url_ += 'latStart=' + encodeURIComponent('' + latStart) + '&';
    if (lngEnd === null) throw new Error("The parameter 'lngEnd' cannot be null.");
    else if (lngEnd !== undefined) url_ += 'lngEnd=' + encodeURIComponent('' + lngEnd) + '&';
    if (latEnd === null) throw new Error("The parameter 'latEnd' cannot be null.");
    else if (latEnd !== undefined) url_ += 'latEnd=' + encodeURIComponent('' + latEnd) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDistance(_response);
      });
  }

  protected processGetDistance(response: AxiosResponse): Promise<number> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<number>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<number>(null as any);
  }

  /**
   * 环保获取行业类型
   * @param canViewHW (optional) 有危废权限
   * @param canViewEia (optional) 有环评权限
   * @return Success
   */
  getEnvIndustrys(
    canViewHW: boolean | undefined,
    canViewEia: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Dic_EnvIndustry[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetEnvIndustrys?';
    if (canViewHW === null) throw new Error("The parameter 'canViewHW' cannot be null.");
    else if (canViewHW !== undefined)
      url_ += 'canViewHW=' + encodeURIComponent('' + canViewHW) + '&';
    if (canViewEia === null) throw new Error("The parameter 'canViewEia' cannot be null.");
    else if (canViewEia !== undefined)
      url_ += 'canViewEia=' + encodeURIComponent('' + canViewEia) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEnvIndustrys(_response);
      });
  }

  protected processGetEnvIndustrys(response: AxiosResponse): Promise<Dic_EnvIndustry[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_EnvIndustry.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_EnvIndustry[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_EnvIndustry[]>(null as any);
  }

  /**
   * 从缓存中获取行业类型
   * @param canViewHW (optional)
   * @param canViewEia (optional)
   * @return Success
   */
  getEnvIndustrysCache(
    canViewHW: boolean | undefined,
    canViewEia: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Dic_EnvIndustry[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetEnvIndustrysCache?';
    if (canViewHW === null) throw new Error("The parameter 'canViewHW' cannot be null.");
    else if (canViewHW !== undefined)
      url_ += 'canViewHW=' + encodeURIComponent('' + canViewHW) + '&';
    if (canViewEia === null) throw new Error("The parameter 'canViewEia' cannot be null.");
    else if (canViewEia !== undefined)
      url_ += 'canViewEia=' + encodeURIComponent('' + canViewEia) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEnvIndustrysCache(_response);
      });
  }

  protected processGetEnvIndustrysCache(response: AxiosResponse): Promise<Dic_EnvIndustry[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_EnvIndustry.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_EnvIndustry[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_EnvIndustry[]>(null as any);
  }

  /**
   * 获取危废列表（可以按照一级目录的代码查询二级目录）
   * @param parentCode (optional)
   * @return Success
   */
  getHWCodeByParentCode(
    parentCode: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Dic_HWCode[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetHWCodeByParentCode?';
    if (parentCode === null) throw new Error("The parameter 'parentCode' cannot be null.");
    else if (parentCode !== undefined)
      url_ += 'parentCode=' + encodeURIComponent('' + parentCode) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetHWCodeByParentCode(_response);
      });
  }

  protected processGetHWCodeByParentCode(response: AxiosResponse): Promise<Dic_HWCode[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_HWCode.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_HWCode[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_HWCode[]>(null as any);
  }

  /**
   * 获取危废的列表
   * @param hwcode (optional)
   * @return Success
   */
  getHWList(
    hwcode: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Dic_HWCode[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetHWList?';
    if (hwcode === null) throw new Error("The parameter 'hwcode' cannot be null.");
    else if (hwcode !== undefined) url_ += 'hwcode=' + encodeURIComponent('' + hwcode) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetHWList(_response);
      });
  }

  protected processGetHWList(response: AxiosResponse): Promise<Dic_HWCode[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_HWCode.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_HWCode[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_HWCode[]>(null as any);
  }

  /**
   * 获取行业列表
   * @return Success
   */
  getIndustrys(cancelToken?: CancelToken | undefined): Promise<Dic_Industry[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetIndustrys';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetIndustrys(_response);
      });
  }

  protected processGetIndustrys(response: AxiosResponse): Promise<Dic_Industry[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_Industry.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_Industry[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_Industry[]>(null as any);
  }

  /**
   * 获取行业列表（可以按照一级目录的代码查询二级目录）
   * @param parentCode (optional)
   * @return Success
   */
  getIndustrysByParentCode(
    parentCode: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Dic_Industry[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetIndustrysByParentCode?';
    if (parentCode === null) throw new Error("The parameter 'parentCode' cannot be null.");
    else if (parentCode !== undefined)
      url_ += 'parentCode=' + encodeURIComponent('' + parentCode) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetIndustrysByParentCode(_response);
      });
  }

  protected processGetIndustrysByParentCode(response: AxiosResponse): Promise<Dic_Industry[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_Industry.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_Industry[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_Industry[]>(null as any);
  }

  /**
   * 获取同部门和下级
   * @return Success
   */
  getMyAndSubOrgUsers(cancelToken?: CancelToken | undefined): Promise<UserDto[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetMyAndSubOrgUsers';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetMyAndSubOrgUsers(_response);
      });
  }

  protected processGetMyAndSubOrgUsers(response: AxiosResponse): Promise<UserDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(UserDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<UserDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<UserDto[]>(null as any);
  }

  /**
   * 获取百分比
   * @param currentValue (optional) 当前值
   * @param lastOneValue (optional) 前值
   * @return Success
   */
  getPercentage(
    currentValue: number | undefined,
    lastOneValue: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<number> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetPercentage?';
    if (currentValue === null) throw new Error("The parameter 'currentValue' cannot be null.");
    else if (currentValue !== undefined)
      url_ += 'currentValue=' + encodeURIComponent('' + currentValue) + '&';
    if (lastOneValue === null) throw new Error("The parameter 'lastOneValue' cannot be null.");
    else if (lastOneValue !== undefined)
      url_ += 'lastOneValue=' + encodeURIComponent('' + lastOneValue) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPercentage(_response);
      });
  }

  protected processGetPercentage(response: AxiosResponse): Promise<number> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<number>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<number>(null as any);
  }

  /**
   * 获取公共字典列表
   * @param categoryCode (optional)
   * @return Success
   */
  getPublicDictItemList(
    categoryCode: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CrmDictItems[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetPublicDictItemList?';
    if (categoryCode === null) throw new Error("The parameter 'categoryCode' cannot be null.");
    else if (categoryCode !== undefined)
      url_ += 'categoryCode=' + encodeURIComponent('' + categoryCode) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPublicDictItemList(_response);
      });
  }

  protected processGetPublicDictItemList(response: AxiosResponse): Promise<CrmDictItems[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(CrmDictItems.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<CrmDictItems[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CrmDictItems[]>(null as any);
  }

  /**
   * 从缓存中取授权行政区列表
   * @param categoryCode (optional)
   * @return Success
   */
  getPublicDictItemListCache(
    categoryCode: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CrmDictItems[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetPublicDictItemListCache?';
    if (categoryCode === null) throw new Error("The parameter 'categoryCode' cannot be null.");
    else if (categoryCode !== undefined)
      url_ += 'categoryCode=' + encodeURIComponent('' + categoryCode) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPublicDictItemListCache(_response);
      });
  }

  protected processGetPublicDictItemListCache(response: AxiosResponse): Promise<CrmDictItems[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(CrmDictItems.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<CrmDictItems[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CrmDictItems[]>(null as any);
  }

  /**
   * 获取环评阶段
   * @return Success
   */
  getRecordStates(cancelToken?: CancelToken | undefined): Promise<KeyValuePairOfStringString[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetRecordStates';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetRecordStates(_response);
      });
  }

  protected processGetRecordStates(response: AxiosResponse): Promise<KeyValuePairOfStringString[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(KeyValuePairOfStringString.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<KeyValuePairOfStringString[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<KeyValuePairOfStringString[]>(null as any);
  }

  /**
   * 从缓存中获取环评阶段
   * @return Success
   */
  getRecordStatesCache(
    cancelToken?: CancelToken | undefined,
  ): Promise<KeyValuePairOfStringString[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetRecordStatesCache';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetRecordStatesCache(_response);
      });
  }

  protected processGetRecordStatesCache(
    response: AxiosResponse,
  ): Promise<KeyValuePairOfStringString[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(KeyValuePairOfStringString.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<KeyValuePairOfStringString[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<KeyValuePairOfStringString[]>(null as any);
  }

  /**
   * 我下属用户List
   * @return Success
   */
  getSubUserIdList(cancelToken?: CancelToken | undefined): Promise<number[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetSubUserIdList';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetSubUserIdList(_response);
      });
  }

  protected processGetSubUserIdList(response: AxiosResponse): Promise<number[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(item);
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<number[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<number[]>(null as any);
  }

  /**
   * 获取标签
   * @return Success
   */
  getTags(cancelToken?: CancelToken | undefined): Promise<Tags[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetTags';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTags(_response);
      });
  }

  protected processGetTags(response: AxiosResponse): Promise<Tags[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Tags.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Tags[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Tags[]>(null as any);
  }

  /**
   * 从缓存中获取标签
   * @return Success
   */
  getTagsCache(cancelToken?: CancelToken | undefined): Promise<Tags[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetTagsCache';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTagsCache(_response);
      });
  }

  protected processGetTagsCache(response: AxiosResponse): Promise<Tags[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Tags.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Tags[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Tags[]>(null as any);
  }

  /**
   * 获取企业行政区权限的列表
   * @return Success
   */
  getTenantAuthorizeCantonList(cancelToken?: CancelToken | undefined): Promise<Dic_Canton[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetTenantAuthorizeCantonList';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTenantAuthorizeCantonList(_response);
      });
  }

  protected processGetTenantAuthorizeCantonList(response: AxiosResponse): Promise<Dic_Canton[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_Canton.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_Canton[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_Canton[]>(null as any);
  }

  /**
   * 从缓存中取授权行政区列表
   * @return Success
   */
  getTenantAuthorizeCantonListCache(cancelToken?: CancelToken | undefined): Promise<Dic_Canton[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetTenantAuthorizeCantonListCache';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTenantAuthorizeCantonListCache(_response);
      });
  }

  protected processGetTenantAuthorizeCantonListCache(
    response: AxiosResponse,
  ): Promise<Dic_Canton[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_Canton.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_Canton[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_Canton[]>(null as any);
  }

  /**
   * 获取企业危废权限的列表
   * @return Success
   */
  getTenantAuthorizeHWList(cancelToken?: CancelToken | undefined): Promise<Dic_HWCode[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetTenantAuthorizeHWList';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTenantAuthorizeHWList(_response);
      });
  }

  protected processGetTenantAuthorizeHWList(response: AxiosResponse): Promise<Dic_HWCode[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_HWCode.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_HWCode[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_HWCode[]>(null as any);
  }

  /**
   * 从缓存中获取授权企业危废权限的列表
   * @return Success
   */
  getTenantAuthorizeHWListCache(cancelToken?: CancelToken | undefined): Promise<Dic_HWCode[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetTenantAuthorizeHWListCache';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTenantAuthorizeHWListCache(_response);
      });
  }

  protected processGetTenantAuthorizeHWListCache(response: AxiosResponse): Promise<Dic_HWCode[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_HWCode.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_HWCode[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_HWCode[]>(null as any);
  }

  /**
   * 用户数据权限,如果用户不在组织机构里，则只能看自己的数据。 获取用户可以查看的创建人List
   * @return Success
   */
  getUserIdListForCanViewAuthority(cancelToken?: CancelToken | undefined): Promise<number[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetUserIdListForCanViewAuthority';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUserIdListForCanViewAuthority(_response);
      });
  }

  protected processGetUserIdListForCanViewAuthority(response: AxiosResponse): Promise<number[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(item);
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<number[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<number[]>(null as any);
  }

  /**
   * 获取车型字典列表
   * @return Success
   */
  getVehicleTypeItem(cancelToken?: CancelToken | undefined): Promise<CrmDictItems[]> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetVehicleTypeItem';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetVehicleTypeItem(_response);
      });
  }

  protected processGetVehicleTypeItem(response: AxiosResponse): Promise<CrmDictItems[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(CrmDictItems.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<CrmDictItems[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CrmDictItems[]>(null as any);
  }

  /**
   * 获取物流操作日志列表
   * @param fromId (optional) 查询ID
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlOperationLogPaged(
    fromId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlOperationLogListDto> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/GetWlOperationLogPaged?';
    if (fromId === null) throw new Error("The parameter 'fromId' cannot be null.");
    else if (fromId !== undefined) url_ += 'fromId=' + encodeURIComponent('' + fromId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlOperationLogPaged(_response);
      });
  }

  protected processGetWlOperationLogPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlOperationLogListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlOperationLogListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlOperationLogListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlOperationLogListDto>(null as any);
  }

  /**
   * 上传文件到OSS
   * @param bucketName (optional)
   * @param filePath (optional)
   * @param body (optional)
   * @return Success
   */
  uploadFile(
    bucketName: string | undefined,
    filePath: string | undefined,
    body: Stream | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/CommonMethod/UploadFile?';
    if (bucketName === null) throw new Error("The parameter 'bucketName' cannot be null.");
    else if (bucketName !== undefined)
      url_ += 'bucketName=' + encodeURIComponent('' + bucketName) + '&';
    if (filePath === null) throw new Error("The parameter 'filePath' cannot be null.");
    else if (filePath !== undefined) url_ += 'filePath=' + encodeURIComponent('' + filePath) + '&';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUploadFile(_response);
      });
  }

  protected processUploadFile(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }
}

export class ContractServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 审核合同
   * @param body (optional)
   * @return Success
   */
  approveContract(
    body: ApproveInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Contract/ApproveContract';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processApproveContract(_response);
      });
  }

  protected processApproveContract(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 批量删除Contract的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Contract/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改合同的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateContractInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Contract/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除合同信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Contract/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取ContractListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<ContractListDto> {
    let url_ = this.baseUrl + '/api/services/app/Contract/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<ContractListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ContractListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ContractListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ContractListDto>(null as any);
  }

  /**
   * 合同详情
   * @param id (optional)
   * @return Success
   */
  getDetailsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<ContractDetailDto> {
    let url_ = this.baseUrl + '/api/services/app/Contract/GetDetailsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDetailsById(_response);
      });
  }

  protected processGetDetailsById(response: AxiosResponse): Promise<ContractDetailDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ContractDetailDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ContractDetailDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ContractDetailDto>(null as any);
  }

  /**
   * 获取编辑 合同
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetContractForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Contract/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetContractForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetContractForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetContractForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetContractForEditOutput>(null as any);
  }

  /**
   * 获取合同的分页列表信息
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param customerState (optional) 客户当前状态
   * @param approveState (optional) 总经理审核合同状态
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    customerState: CustomerState | undefined,
    approveState: ApproveState | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfContractListDto> {
    let url_ = this.baseUrl + '/api/services/app/Contract/GetPaged?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (customerState === null) throw new Error("The parameter 'customerState' cannot be null.");
    else if (customerState !== undefined)
      url_ += 'customerState=' + encodeURIComponent('' + customerState) + '&';
    if (approveState === null) throw new Error("The parameter 'approveState' cannot be null.");
    else if (approveState !== undefined)
      url_ += 'approveState=' + encodeURIComponent('' + approveState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfContractListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfContractListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfContractListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfContractListDto>(null as any);
  }

  /**
   * 导出合同为excel文件
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param customerState (optional) 客户当前状态
   * @param approveState (optional) 总经理审核合同状态
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getToExcelFile(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    customerState: CustomerState | undefined,
    approveState: ApproveState | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Contract/GetToExcelFile?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (customerState === null) throw new Error("The parameter 'customerState' cannot be null.");
    else if (customerState !== undefined)
      url_ += 'customerState=' + encodeURIComponent('' + customerState) + '&';
    if (approveState === null) throw new Error("The parameter 'approveState' cannot be null.");
    else if (approveState !== undefined)
      url_ += 'approveState=' + encodeURIComponent('' + approveState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 重新签合同
   * @param contractId (optional)
   * @param type (optional)
   * @return Success
   */
  restartContract(
    contractId: number | undefined,
    type: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Contract/RestartContract?';
    if (contractId === null) throw new Error("The parameter 'contractId' cannot be null.");
    else if (contractId !== undefined)
      url_ += 'contractId=' + encodeURIComponent('' + contractId) + '&';
    if (type === null) throw new Error("The parameter 'type' cannot be null.");
    else if (type !== undefined) url_ += 'type=' + encodeURIComponent('' + type) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRestartContract(_response);
      });
  }

  protected processRestartContract(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }
}

export class CRM_ClueServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除CRM_Clue的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量转移责任人
   * @param customerIdList (optional)
   * @param userId (optional) 被分配的人员ID
   * @param state (optional)
   * @return Success
   */
  batchTransferResponsibleUser(
    customerIdList: number[] | undefined,
    userId: number | undefined,
    state: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/BatchTransferResponsibleUser?';
    if (customerIdList === null) throw new Error("The parameter 'customerIdList' cannot be null.");
    else if (customerIdList !== undefined)
      customerIdList &&
        customerIdList.forEach((item) => {
          url_ += 'customerIdList=' + encodeURIComponent('' + item) + '&';
        });
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    if (state === null) throw new Error("The parameter 'state' cannot be null.");
    else if (state !== undefined) url_ += 'state=' + encodeURIComponent('' + state) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchTransferResponsibleUser(_response);
      });
  }

  protected processBatchTransferResponsibleUser(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改处置企业线索池的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateCRM_ClueInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增或更新单个联系人信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateContactInfo(
    body: ContactListDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/CreateOrUpdateContactInfo';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateContactInfo(_response);
      });
  }

  protected processCreateOrUpdateContactInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增或更新单个合同信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateContractInfo(
    body: ContractYFListDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/CreateOrUpdateContractInfo';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateContractInfo(_response);
      });
  }

  protected processCreateOrUpdateContractInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增或修改跟进记录
   * @param body (optional)
   * @return Success
   */
  createOrUpdateFollowRecord(
    body: FollowRecordEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/CreateOrUpdateFollowRecord';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateFollowRecord(_response);
      });
  }

  protected processCreateOrUpdateFollowRecord(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增或更新单个许可证信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateLicenseInfo(
    body: LicenseListDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/CreateOrUpdateLicenseInfo';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateLicenseInfo(_response);
      });
  }

  protected processCreateOrUpdateLicenseInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增或更新单个拜访信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateVisitingPlanInfo(
    body: VisitingPlanListDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/CreateOrUpdateVisitingPlanInfo';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateVisitingPlanInfo(_response);
      });
  }

  protected processCreateOrUpdateVisitingPlanInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除处置企业线索池信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除单个联系人
   * @param contactId (optional)
   * @return Success
   */
  deleteContactInfo(
    contactId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/DeleteContactInfo?';
    if (contactId === null) throw new Error("The parameter 'contactId' cannot be null.");
    else if (contactId !== undefined)
      url_ += 'contactId=' + encodeURIComponent('' + contactId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteContactInfo(_response);
      });
  }

  protected processDeleteContactInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除单个合同
   * @param contractId (optional)
   * @return Success
   */
  deleteContractInfo(
    contractId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/DeleteContractInfo?';
    if (contractId === null) throw new Error("The parameter 'contractId' cannot be null.");
    else if (contractId !== undefined)
      url_ += 'contractId=' + encodeURIComponent('' + contractId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteContractInfo(_response);
      });
  }

  protected processDeleteContractInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除跟进记录
   * @param recordId (optional)
   * @return Success
   */
  deleteFollowRecord(
    recordId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/DeleteFollowRecord?';
    if (recordId === null) throw new Error("The parameter 'recordId' cannot be null.");
    else if (recordId !== undefined) url_ += 'recordId=' + encodeURIComponent('' + recordId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteFollowRecord(_response);
      });
  }

  protected processDeleteFollowRecord(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除单个许可证信息
   * @param licenseId (optional)
   * @return Success
   */
  deleteLicenseInfo(
    licenseId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/DeleteLicenseInfo?';
    if (licenseId === null) throw new Error("The parameter 'licenseId' cannot be null.");
    else if (licenseId !== undefined)
      url_ += 'licenseId=' + encodeURIComponent('' + licenseId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteLicenseInfo(_response);
      });
  }

  protected processDeleteLicenseInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除单个拜访信息
   * @param planId (optional)
   * @return Success
   */
  deleteVisitingPlanInfo(
    planId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/DeleteVisitingPlanInfo?';
    if (planId === null) throw new Error("The parameter 'planId' cannot be null.");
    else if (planId !== undefined) url_ += 'planId=' + encodeURIComponent('' + planId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteVisitingPlanInfo(_response);
      });
  }

  protected processDeleteVisitingPlanInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 更改线索中企业信息
   * @param body (optional)
   * @return Success
   */
  editEnterpriseInfo(
    body: EditEnterpriseInfoDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/EditEnterpriseInfo';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processEditEnterpriseInfo(_response);
      });
  }

  protected processEditEnterpriseInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 获取所有销售小组名称
   * @return Success
   */
  getAllSalesGroups(cancelToken?: CancelToken | undefined): Promise<UserDto[]> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetAllSalesGroups';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllSalesGroups(_response);
      });
  }

  protected processGetAllSalesGroups(response: AxiosResponse): Promise<UserDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(UserDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<UserDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<UserDto[]>(null as any);
  }

  /**
   * 获取所有的销售用户
   * @return Success
   */
  getAllSalesUsers(cancelToken?: CancelToken | undefined): Promise<UserDto[]> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetAllSalesUsers';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllSalesUsers(_response);
      });
  }

  protected processGetAllSalesUsers(response: AxiosResponse): Promise<UserDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(UserDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<UserDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<UserDto[]>(null as any);
  }

  /**
   * 获取所有销售人员或者通过小组名称获取相关人员
   * @param groupName (optional)
   * @param isSalesLeader (optional)
   * @return Success
   */
  getAllSalesUsersByGroup(
    groupName: string | undefined,
    isSalesLeader: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<UserDto[]> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetAllSalesUsersByGroup?';
    if (groupName === null) throw new Error("The parameter 'groupName' cannot be null.");
    else if (groupName !== undefined)
      url_ += 'groupName=' + encodeURIComponent('' + groupName) + '&';
    if (isSalesLeader === null) throw new Error("The parameter 'isSalesLeader' cannot be null.");
    else if (isSalesLeader !== undefined)
      url_ += 'isSalesLeader=' + encodeURIComponent('' + isSalesLeader) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllSalesUsersByGroup(_response);
      });
  }

  protected processGetAllSalesUsersByGroup(response: AxiosResponse): Promise<UserDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(UserDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<UserDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<UserDto[]>(null as any);
  }

  /**
   * 通过指定id获取CRM_ClueListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<CRM_ClueListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<CRM_ClueListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = CRM_ClueListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<CRM_ClueListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CRM_ClueListDto>(null as any);
  }

  /**
   * 获取单个联系人信息
   * @param contactId (optional)
   * @return Success
   */
  getContactInfo(
    contactId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<ContactListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetContactInfo?';
    if (contactId === null) throw new Error("The parameter 'contactId' cannot be null.");
    else if (contactId !== undefined)
      url_ += 'contactId=' + encodeURIComponent('' + contactId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetContactInfo(_response);
      });
  }

  protected processGetContactInfo(response: AxiosResponse): Promise<ContactListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ContactListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ContactListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ContactListDto>(null as any);
  }

  /**
   * 获取线索的全部联系人列表
   * @param clueId (optional)
   * @return Success
   */
  getContactInfoList(
    clueId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<ContactListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetContactInfoList?';
    if (clueId === null) throw new Error("The parameter 'clueId' cannot be null.");
    else if (clueId !== undefined) url_ += 'clueId=' + encodeURIComponent('' + clueId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetContactInfoList(_response);
      });
  }

  protected processGetContactInfoList(response: AxiosResponse): Promise<ContactListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(ContactListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<ContactListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ContactListDto[]>(null as any);
  }

  /**
   * 获取线索的全部联系人信息
   * @param clueId (optional) 线索ID
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getContactInfoPaged(
    clueId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfContactListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetContactInfoPaged?';
    if (clueId === null) throw new Error("The parameter 'clueId' cannot be null.");
    else if (clueId !== undefined) url_ += 'clueId=' + encodeURIComponent('' + clueId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetContactInfoPaged(_response);
      });
  }

  protected processGetContactInfoPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfContactListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfContactListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfContactListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfContactListDto>(null as any);
  }

  /**
   * 获取单个合同信息
   * @param contractId (optional)
   * @return Success
   */
  getContractInfo(
    contractId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<ContractYFListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetContractInfo?';
    if (contractId === null) throw new Error("The parameter 'contractId' cannot be null.");
    else if (contractId !== undefined)
      url_ += 'contractId=' + encodeURIComponent('' + contractId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetContractInfo(_response);
      });
  }

  protected processGetContractInfo(response: AxiosResponse): Promise<ContractYFListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ContractYFListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ContractYFListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ContractYFListDto>(null as any);
  }

  /**
   * 获取线索的全部合同信息
   * @param clueId (optional) 线索ID
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getContractInfoPaged(
    clueId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfContractYFListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetContractInfoPaged?';
    if (clueId === null) throw new Error("The parameter 'clueId' cannot be null.");
    else if (clueId !== undefined) url_ += 'clueId=' + encodeURIComponent('' + clueId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetContractInfoPaged(_response);
      });
  }

  protected processGetContractInfoPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfContractYFListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfContractYFListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfContractYFListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfContractYFListDto>(null as any);
  }

  /**
   * 获取线索中企业信息
   * @param culeId (optional)
   * @return Success
   */
  getEnterpriseInfo(
    culeId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<EditEnterpriseInfoListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetEnterpriseInfo?';
    if (culeId === null) throw new Error("The parameter 'culeId' cannot be null.");
    else if (culeId !== undefined) url_ += 'culeId=' + encodeURIComponent('' + culeId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEnterpriseInfo(_response);
      });
  }

  protected processGetEnterpriseInfo(response: AxiosResponse): Promise<EditEnterpriseInfoListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = EditEnterpriseInfoListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<EditEnterpriseInfoListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EditEnterpriseInfoListDto>(null as any);
  }

  /**
   * 导出跟进记录
   * @param clueId (optional) 线索ID
   * @param filterText (optional) 文本搜索
   * @param recordType (optional) 记录类型，0：文本，1：货单，2：日程
   * @param startDate (optional) 开始日期
   * @param endDate (optional) 结束日期
   * @return Success
   */
  getExcelForFollow(
    clueId: number | undefined,
    filterText: string | undefined,
    recordType: string | undefined,
    startDate: dayjs.Dayjs | undefined,
    endDate: dayjs.Dayjs | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetExcelForFollow?';
    if (clueId === null) throw new Error("The parameter 'clueId' cannot be null.");
    else if (clueId !== undefined) url_ += 'clueId=' + encodeURIComponent('' + clueId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (recordType === null) throw new Error("The parameter 'recordType' cannot be null.");
    else if (recordType !== undefined)
      url_ += 'recordType=' + encodeURIComponent('' + recordType) + '&';
    if (startDate === null) throw new Error("The parameter 'startDate' cannot be null.");
    else if (startDate !== undefined)
      url_ +=
        'startDate=' + encodeURIComponent(startDate ? '' + startDate.toISOString() : '') + '&';
    if (endDate === null) throw new Error("The parameter 'endDate' cannot be null.");
    else if (endDate !== undefined)
      url_ += 'endDate=' + encodeURIComponent(endDate ? '' + endDate.toISOString() : '') + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetExcelForFollow(_response);
      });
  }

  protected processGetExcelForFollow(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 获取单个跟进记录
   * @param recordId (optional)
   * @return Success
   */
  getFollowRecord(
    recordId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FollowRecordListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetFollowRecord?';
    if (recordId === null) throw new Error("The parameter 'recordId' cannot be null.");
    else if (recordId !== undefined) url_ += 'recordId=' + encodeURIComponent('' + recordId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetFollowRecord(_response);
      });
  }

  protected processGetFollowRecord(response: AxiosResponse): Promise<FollowRecordListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FollowRecordListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FollowRecordListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FollowRecordListDto>(null as any);
  }

  /**
   * 获取自己负责的拜访信息关联的跟进记录
   * @param planId (optional)
   * @return Success
   */
  getFollowRecordBySelf(
    planId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FollowRecordListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetFollowRecordBySelf?';
    if (planId === null) throw new Error("The parameter 'planId' cannot be null.");
    else if (planId !== undefined) url_ += 'planId=' + encodeURIComponent('' + planId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetFollowRecordBySelf(_response);
      });
  }

  protected processGetFollowRecordBySelf(response: AxiosResponse): Promise<FollowRecordListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FollowRecordListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FollowRecordListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FollowRecordListDto>(null as any);
  }

  /**
   * 获取跟进记录分页信息
   * @param clueId (optional) 线索ID
   * @param recordType (optional) 记录类型，0：文本，1：货单，2：日程
   * @param startDate (optional) 开始日期
   * @param endDate (optional) 结束日期
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getFollowRecordPaged(
    clueId: number | undefined,
    recordType: string | undefined,
    startDate: dayjs.Dayjs | undefined,
    endDate: dayjs.Dayjs | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfFollowRecordListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetFollowRecordPaged?';
    if (clueId === null) throw new Error("The parameter 'clueId' cannot be null.");
    else if (clueId !== undefined) url_ += 'clueId=' + encodeURIComponent('' + clueId) + '&';
    if (recordType === null) throw new Error("The parameter 'recordType' cannot be null.");
    else if (recordType !== undefined)
      url_ += 'recordType=' + encodeURIComponent('' + recordType) + '&';
    if (startDate === null) throw new Error("The parameter 'startDate' cannot be null.");
    else if (startDate !== undefined)
      url_ +=
        'startDate=' + encodeURIComponent(startDate ? '' + startDate.toISOString() : '') + '&';
    if (endDate === null) throw new Error("The parameter 'endDate' cannot be null.");
    else if (endDate !== undefined)
      url_ += 'endDate=' + encodeURIComponent(endDate ? '' + endDate.toISOString() : '') + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetFollowRecordPaged(_response);
      });
  }

  protected processGetFollowRecordPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfFollowRecordListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfFollowRecordListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfFollowRecordListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfFollowRecordListDto>(null as any);
  }

  /**
   * 获取编辑 处置企业线索池
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetCRM_ClueForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetCRM_ClueForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetCRM_ClueForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetCRM_ClueForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetCRM_ClueForEditOutput>(null as any);
  }

  /**
   * 获取单笔许可证信息
   * @param licenseId (optional)
   * @return Success
   */
  getLicenseInfo(
    licenseId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<LicenseListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetLicenseInfo?';
    if (licenseId === null) throw new Error("The parameter 'licenseId' cannot be null.");
    else if (licenseId !== undefined)
      url_ += 'licenseId=' + encodeURIComponent('' + licenseId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetLicenseInfo(_response);
      });
  }

  protected processGetLicenseInfo(response: AxiosResponse): Promise<LicenseListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LicenseListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<LicenseListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<LicenseListDto>(null as any);
  }

  /**
   * 获取线索的全部许可证信息
   * @param clueId (optional) 线索ID
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getLicenseInfoPaged(
    clueId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfLicenseListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetLicenseInfoPaged?';
    if (clueId === null) throw new Error("The parameter 'clueId' cannot be null.");
    else if (clueId !== undefined) url_ += 'clueId=' + encodeURIComponent('' + clueId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetLicenseInfoPaged(_response);
      });
  }

  protected processGetLicenseInfoPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfLicenseListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfLicenseListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfLicenseListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfLicenseListDto>(null as any);
  }

  /**
   * 获取管理的用户
   * @return Success
   */
  getMyManageUsers(cancelToken?: CancelToken | undefined): Promise<UserDto[]> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetMyManageUsers';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetMyManageUsers(_response);
      });
  }

  protected processGetMyManageUsers(response: AxiosResponse): Promise<UserDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(UserDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<UserDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<UserDto[]>(null as any);
  }

  /**
   * 获取货单详情
   * @param id (optional)
   * @return Success
   */
  getOrderFormById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetOrderFormById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrderFormById(_response);
      });
  }

  protected processGetOrderFormById(response: AxiosResponse): Promise<WlOrderFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlOrderFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlOrderFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderFormListDto>(null as any);
  }

  /**
   * 【电销客服】获取货单分页信息
   * @param createStartTime (optional)
   * @param createEndTime (optional)
   * @param shippingStartTime (optional)
   * @param shippingEndTime (optional)
   * @param tenantId (optional) 租户
   * @param orderState (optional) 单据状态，0：抢单中，1：抢单成功，2：抢单失败，3：货单结束，4：货单取消
   * @param isManagerApproved (optional) 物流经理审核
   * @param isSpecialOrder (optional) 是否是专车单，false：不是，true：是
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getOrderPaged(
    createStartTime: dayjs.Dayjs | undefined,
    createEndTime: dayjs.Dayjs | undefined,
    shippingStartTime: dayjs.Dayjs | undefined,
    shippingEndTime: dayjs.Dayjs | undefined,
    tenantId: number | undefined,
    orderState: number | undefined,
    isManagerApproved: boolean | undefined,
    isSpecialOrder: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlOrderFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetOrderPaged?';
    if (createStartTime === null)
      throw new Error("The parameter 'createStartTime' cannot be null.");
    else if (createStartTime !== undefined)
      url_ +=
        'createStartTime=' +
        encodeURIComponent(createStartTime ? '' + createStartTime.toISOString() : '') +
        '&';
    if (createEndTime === null) throw new Error("The parameter 'createEndTime' cannot be null.");
    else if (createEndTime !== undefined)
      url_ +=
        'createEndTime=' +
        encodeURIComponent(createEndTime ? '' + createEndTime.toISOString() : '') +
        '&';
    if (shippingStartTime === null)
      throw new Error("The parameter 'shippingStartTime' cannot be null.");
    else if (shippingStartTime !== undefined)
      url_ +=
        'shippingStartTime=' +
        encodeURIComponent(shippingStartTime ? '' + shippingStartTime.toISOString() : '') +
        '&';
    if (shippingEndTime === null)
      throw new Error("The parameter 'shippingEndTime' cannot be null.");
    else if (shippingEndTime !== undefined)
      url_ +=
        'shippingEndTime=' +
        encodeURIComponent(shippingEndTime ? '' + shippingEndTime.toISOString() : '') +
        '&';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (orderState === null) throw new Error("The parameter 'orderState' cannot be null.");
    else if (orderState !== undefined)
      url_ += 'orderState=' + encodeURIComponent('' + orderState) + '&';
    if (isManagerApproved === null)
      throw new Error("The parameter 'isManagerApproved' cannot be null.");
    else if (isManagerApproved !== undefined)
      url_ += 'isManagerApproved=' + encodeURIComponent('' + isManagerApproved) + '&';
    if (isSpecialOrder === null) throw new Error("The parameter 'isSpecialOrder' cannot be null.");
    else if (isSpecialOrder !== undefined)
      url_ += 'isSpecialOrder=' + encodeURIComponent('' + isSpecialOrder) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrderPaged(_response);
      });
  }

  protected processGetOrderPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlOrderFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlOrderFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlOrderFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlOrderFormListDto>(null as any);
  }

  /**
   * 获取处置企业线索池的分页列表信息
   * @param cantonCode (optional) 行政区
   * @param clueState (optional) 状态
   * @param groupUserId (optional) 小组成员id
   * @param phoneCustomerServiceViewSelf (optional) 客服查看自己的数据
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    cantonCode: string | undefined,
    clueState: number | undefined,
    groupUserId: number | undefined,
    phoneCustomerServiceViewSelf: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfCRM_ClueListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetPaged?';
    if (cantonCode === null) throw new Error("The parameter 'cantonCode' cannot be null.");
    else if (cantonCode !== undefined)
      url_ += 'cantonCode=' + encodeURIComponent('' + cantonCode) + '&';
    if (clueState === null) throw new Error("The parameter 'clueState' cannot be null.");
    else if (clueState !== undefined)
      url_ += 'clueState=' + encodeURIComponent('' + clueState) + '&';
    if (groupUserId === null) throw new Error("The parameter 'groupUserId' cannot be null.");
    else if (groupUserId !== undefined)
      url_ += 'groupUserId=' + encodeURIComponent('' + groupUserId) + '&';
    if (phoneCustomerServiceViewSelf === null)
      throw new Error("The parameter 'phoneCustomerServiceViewSelf' cannot be null.");
    else if (phoneCustomerServiceViewSelf !== undefined)
      url_ +=
        'phoneCustomerServiceViewSelf=' +
        encodeURIComponent('' + phoneCustomerServiceViewSelf) +
        '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfCRM_ClueListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfCRM_ClueListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfCRM_ClueListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfCRM_ClueListDto>(null as any);
  }

  /**
   * 获取用户拥有的行政区权限
   * @return Success
   */
  getUserOwnCantons(cancelToken?: CancelToken | undefined): Promise<Dic_Canton[]> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetUserOwnCantons';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUserOwnCantons(_response);
      });
  }

  protected processGetUserOwnCantons(response: AxiosResponse): Promise<Dic_Canton[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Dic_Canton.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Dic_Canton[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Dic_Canton[]>(null as any);
  }

  /**
   * 获取单个拜访信息
   * @param planId (optional)
   * @return Success
   */
  getVisitingPlanInfo(
    planId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<VisitingPlanListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetVisitingPlanInfo?';
    if (planId === null) throw new Error("The parameter 'planId' cannot be null.");
    else if (planId !== undefined) url_ += 'planId=' + encodeURIComponent('' + planId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetVisitingPlanInfo(_response);
      });
  }

  protected processGetVisitingPlanInfo(response: AxiosResponse): Promise<VisitingPlanListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = VisitingPlanListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<VisitingPlanListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<VisitingPlanListDto>(null as any);
  }

  /**
   * 获取线索的全部拜访信息
   * @param clueId (optional) 线索ID
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getVisitingPlanInfoPaged(
    clueId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfVisitingPlanListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetVisitingPlanInfoPaged?';
    if (clueId === null) throw new Error("The parameter 'clueId' cannot be null.");
    else if (clueId !== undefined) url_ += 'clueId=' + encodeURIComponent('' + clueId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetVisitingPlanInfoPaged(_response);
      });
  }

  protected processGetVisitingPlanInfoPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfVisitingPlanListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfVisitingPlanListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfVisitingPlanListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfVisitingPlanListDto>(null as any);
  }

  /**
   * 获取自己负责的全部拜访信息
   * @param planStartTime (optional)
   * @param planEndTime (optional)
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getVisitingPlanInfoPagedBySelf(
    planStartTime: dayjs.Dayjs | undefined,
    planEndTime: dayjs.Dayjs | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfVisitingPlanListDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetVisitingPlanInfoPagedBySelf?';
    if (planStartTime === null) throw new Error("The parameter 'planStartTime' cannot be null.");
    else if (planStartTime !== undefined)
      url_ +=
        'planStartTime=' +
        encodeURIComponent(planStartTime ? '' + planStartTime.toISOString() : '') +
        '&';
    if (planEndTime === null) throw new Error("The parameter 'planEndTime' cannot be null.");
    else if (planEndTime !== undefined)
      url_ +=
        'planEndTime=' +
        encodeURIComponent(planEndTime ? '' + planEndTime.toISOString() : '') +
        '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetVisitingPlanInfoPagedBySelf(_response);
      });
  }

  protected processGetVisitingPlanInfoPagedBySelf(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfVisitingPlanListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfVisitingPlanListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfVisitingPlanListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfVisitingPlanListDto>(null as any);
  }

  /**
   * 导出销售日报Word
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param groupName (optional) 小组名称
   * @param userId (optional) 人员Id
   * @param isSalesLeader (optional) 是否是销售经理
   * @return Success
   */
  getWordExport(
    selectPeriod: string | undefined,
    groupName: string | undefined,
    userId: number | undefined,
    isSalesLeader: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/GetWordExport?';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (groupName === null) throw new Error("The parameter 'groupName' cannot be null.");
    else if (groupName !== undefined)
      url_ += 'groupName=' + encodeURIComponent('' + groupName) + '&';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    if (isSalesLeader === null) throw new Error("The parameter 'isSalesLeader' cannot be null.");
    else if (isSalesLeader !== undefined)
      url_ += 'isSalesLeader=' + encodeURIComponent('' + isSalesLeader) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWordExport(_response);
      });
  }

  protected processGetWordExport(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 作废单个合同
   * @param contractId (optional)
   * @return Success
   */
  invalidContractInfo(
    contractId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/InvalidContractInfo?';
    if (contractId === null) throw new Error("The parameter 'contractId' cannot be null.");
    else if (contractId !== undefined)
      url_ += 'contractId=' + encodeURIComponent('' + contractId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processInvalidContractInfo(_response);
      });
  }

  protected processInvalidContractInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  receivingClues(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Clue/ReceivingClues?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processReceivingClues(_response);
      });
  }

  protected processReceivingClues(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }
}

export class CRM_StatisticsServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 运力信息
   * @param defaultCount (optional) 默认返回数量 10
   * @return Success
   */
  getCapacityInfos(
    defaultCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CapacityInfo> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Statistics/GetCapacityInfos?';
    if (defaultCount === null) throw new Error("The parameter 'defaultCount' cannot be null.");
    else if (defaultCount !== undefined)
      url_ += 'defaultCount=' + encodeURIComponent('' + defaultCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCapacityInfos(_response);
      });
  }

  protected processGetCapacityInfos(response: AxiosResponse): Promise<CapacityInfo> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = CapacityInfo.fromJS(resultData200, _mappings);
      return Promise.resolve<CapacityInfo>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CapacityInfo>(null as any);
  }

  /**
   * 运单信息
   * @param queryType (optional) 查询类型，0：本月，1：本周
   * @param defaultCount (optional) 默认返回数量 10
   * @return Success
   */
  getTransInfos(
    queryType: number | undefined,
    defaultCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<TransInfo> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Statistics/GetTransInfos?';
    if (queryType === null) throw new Error("The parameter 'queryType' cannot be null.");
    else if (queryType !== undefined)
      url_ += 'queryType=' + encodeURIComponent('' + queryType) + '&';
    if (defaultCount === null) throw new Error("The parameter 'defaultCount' cannot be null.");
    else if (defaultCount !== undefined)
      url_ += 'defaultCount=' + encodeURIComponent('' + defaultCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTransInfos(_response);
      });
  }

  protected processGetTransInfos(response: AxiosResponse): Promise<TransInfo> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = TransInfo.fromJS(resultData200, _mappings);
      return Promise.resolve<TransInfo>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<TransInfo>(null as any);
  }

  /**
   * 车型信息
   * @param defaultCount (optional) 默认返回数量 10
   * @return Success
   */
  getVehicleInfos(
    defaultCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<VehicleDto[]> {
    let url_ = this.baseUrl + '/api/services/app/CRM_Statistics/GetVehicleInfos?';
    if (defaultCount === null) throw new Error("The parameter 'defaultCount' cannot be null.");
    else if (defaultCount !== undefined)
      url_ += 'defaultCount=' + encodeURIComponent('' + defaultCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetVehicleInfos(_response);
      });
  }

  protected processGetVehicleInfos(response: AxiosResponse): Promise<VehicleDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(VehicleDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<VehicleDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<VehicleDto[]>(null as any);
  }
}

export class CrmDictItemsServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除CrmDictItems的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CrmDictItems/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改公用字典的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateCrmDictItemsInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CrmDictItems/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除公用字典信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/CrmDictItems/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取CrmDictItemsListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CrmDictItemsListDto> {
    let url_ = this.baseUrl + '/api/services/app/CrmDictItems/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<CrmDictItemsListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = CrmDictItemsListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<CrmDictItemsListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CrmDictItemsListDto>(null as any);
  }

  /**
   * 获取编辑 公用字典
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetCrmDictItemsForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/CrmDictItems/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetCrmDictItemsForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetCrmDictItemsForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetCrmDictItemsForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetCrmDictItemsForEditOutput>(null as any);
  }

  /**
   * 获取公用字典的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfCrmDictItemsListDto> {
    let url_ = this.baseUrl + '/api/services/app/CrmDictItems/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfCrmDictItemsListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfCrmDictItemsListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfCrmDictItemsListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfCrmDictItemsListDto>(null as any);
  }

  /**
   * 导出公用字典为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/CrmDictItems/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class CustomerServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 增加阅读次数
   * @param id (optional)
   * @return Success
   */
  addPageView(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<number> {
    let url_ = this.baseUrl + '/api/services/app/Customer/AddPageView?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAddPageView(_response);
      });
  }

  protected processAddPageView(response: AxiosResponse): Promise<number> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<number>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<number>(null as any);
  }

  /**
   * 批量删除Customer的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Customer/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量转移责任人
   * @param customerIdList (optional)
   * @param userId (optional) 被分配的人员ID
   * @return Success
   */
  batchTransferResponsibleUser(
    customerIdList: number[] | undefined,
    userId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Customer/BatchTransferResponsibleUser?';
    if (customerIdList === null) throw new Error("The parameter 'customerIdList' cannot be null.");
    else if (customerIdList !== undefined)
      customerIdList &&
        customerIdList.forEach((item) => {
          url_ += 'customerIdList=' + encodeURIComponent('' + item) + '&';
        });
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchTransferResponsibleUser(_response);
      });
  }

  protected processBatchTransferResponsibleUser(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增线索跟进记录
   * @param body (optional)
   * @return Success
   */
  createCustomerFollowUp(
    body: FollowUpEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Customer/CreateCustomerFollowUp';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateCustomerFollowUp(_response);
      });
  }

  protected processCreateCustomerFollowUp(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 新增线索跟进记录
   * @param body (optional)
   * @return Success
   */
  createCustomerHWAndGetId(
    body: CustomerHWEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<number> {
    let url_ = this.baseUrl + '/api/services/app/Customer/CreateCustomerHWAndGetId';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateCustomerHWAndGetId(_response);
      });
  }

  protected processCreateCustomerHWAndGetId(response: AxiosResponse): Promise<number> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<number>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<number>(null as any);
  }

  /**
   * 添加或者修改的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateCustomerInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Customer/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 危废编辑
   * @param body (optional)
   * @return Success
   */
  customerHWUpdate(
    body: CustomerHWEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Customer/CustomerHWUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCustomerHWUpdate(_response);
      });
  }

  protected processCustomerHWUpdate(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 删除信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Customer/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除线索跟进记录
   * @param id (optional)
   * @return Success
   */
  deleteCustomerFollowUp(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Customer/DeleteCustomerFollowUp?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteCustomerFollowUp(_response);
      });
  }

  protected processDeleteCustomerFollowUp(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 删除线索危废记录信息
   * @param id (optional)
   * @return Success
   */
  deleteCustomerHW(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Customer/DeleteCustomerHW?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteCustomerHW(_response);
      });
  }

  protected processDeleteCustomerHW(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 查看线索池危废详情服务
   * @param id (optional)
   * @param canViewHW (optional)
   * @return Success
   */
  getByEntId(
    id: number | undefined,
    canViewHW: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<EnterpriseClueDto> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetByEntId?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    if (canViewHW === null) throw new Error("The parameter 'canViewHW' cannot be null.");
    else if (canViewHW !== undefined)
      url_ += 'canViewHW=' + encodeURIComponent('' + canViewHW) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetByEntId(_response);
      });
  }

  protected processGetByEntId(response: AxiosResponse): Promise<EnterpriseClueDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = EnterpriseClueDto.fromJS(resultData200, _mappings);
      return Promise.resolve<EnterpriseClueDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EnterpriseClueDto>(null as any);
  }

  /**
   * 通过指定id获取CustomerListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<CustomerListDto> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<CustomerListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = CustomerListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<CustomerListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CustomerListDto>(null as any);
  }

  /**
   * 新增线索从线索池导入-获取线索池中企业的基本数据和危废数据
   * @param enterpriseId (optional)
   * @return Success
   */
  getClueDetails(
    enterpriseId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CustomerEditDto> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetClueDetails?';
    if (enterpriseId === null) throw new Error("The parameter 'enterpriseId' cannot be null.");
    else if (enterpriseId !== undefined)
      url_ += 'enterpriseId=' + encodeURIComponent('' + enterpriseId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetClueDetails(_response);
      });
  }

  protected processGetClueDetails(response: AxiosResponse): Promise<CustomerEditDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = CustomerEditDto.fromJS(resultData200, _mappings);
      return Promise.resolve<CustomerEditDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CustomerEditDto>(null as any);
  }

  /**
   * 获取线索跟进记录
   * @param id (optional)
   * @return Success
   */
  getCustomerFollowUpList(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FollowUpCommonDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetCustomerFollowUpList?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCustomerFollowUpList(_response);
      });
  }

  protected processGetCustomerFollowUpList(response: AxiosResponse): Promise<FollowUpCommonDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(FollowUpCommonDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<FollowUpCommonDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FollowUpCommonDto[]>(null as any);
  }

  /**
   * 通过指定id获取CustomerListDto信息
   * @param id (optional)
   * @return Success
   */
  getCustomerHWById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CustomerHWListDto> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetCustomerHWById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCustomerHWById(_response);
      });
  }

  protected processGetCustomerHWById(response: AxiosResponse): Promise<CustomerHWListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = CustomerHWListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<CustomerHWListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CustomerHWListDto>(null as any);
  }

  /**
   * 线索危废列表
   * @param id (optional)
   * @return Success
   */
  getCustomerHWList(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CustomerHWListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetCustomerHWList?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCustomerHWList(_response);
      });
  }

  protected processGetCustomerHWList(response: AxiosResponse): Promise<CustomerHWListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(CustomerHWListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<CustomerHWListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CustomerHWListDto[]>(null as any);
  }

  /**
   * 线索列表
   * @return Success
   */
  getCustomerList(cancelToken?: CancelToken | undefined): Promise<CustomerListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetCustomerList';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCustomerList(_response);
      });
  }

  protected processGetCustomerList(response: AxiosResponse): Promise<CustomerListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(CustomerListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<CustomerListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CustomerListDto[]>(null as any);
  }

  /**
   * 线索详情
   * @param id (optional)
   * @return Success
   */
  getDetailsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CustomerListDto> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetDetailsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDetailsById(_response);
      });
  }

  protected processGetDetailsById(response: AxiosResponse): Promise<CustomerListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = CustomerListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<CustomerListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CustomerListDto>(null as any);
  }

  /**
   * 获取产废企业前10条信息
   * @param entName (optional)
   * @return Success
   */
  getEnterpriseList(
    entName: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<EnterpriseDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetEnterpriseList?';
    if (entName === null) throw new Error("The parameter 'entName' cannot be null.");
    else if (entName !== undefined) url_ += 'entName=' + encodeURIComponent('' + entName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEnterpriseList(_response);
      });
  }

  protected processGetEnterpriseList(response: AxiosResponse): Promise<EnterpriseDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(EnterpriseDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<EnterpriseDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EnterpriseDto[]>(null as any);
  }

  /**
   * 获取编辑
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetCustomerForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetCustomerForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetCustomerForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetCustomerForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetCustomerForEditOutput>(null as any);
  }

  /**
   * 危废线索池查询分页服务
   * @param tenantId (optional) 租户ID
   * @param cantonCode (optional) 行政区编码
   * @param hWCode (optional) 危废编码
   * @param hWFilterText (optional) 危废过滤内容
   * @param needPhoneNo (optional) 要有电话号码 -1：线索全部  0：无号码  1：有号码
   * @param sendTime (optional) 消息推送时间
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getHWPaged(
    tenantId: number | undefined,
    cantonCode: string | undefined,
    hWCode: string | undefined,
    hWFilterText: string | undefined,
    needPhoneNo: string | undefined,
    sendTime: dayjs.Dayjs | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfEnterpriseHWListDto> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetHWPaged?';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (cantonCode === null) throw new Error("The parameter 'cantonCode' cannot be null.");
    else if (cantonCode !== undefined)
      url_ += 'cantonCode=' + encodeURIComponent('' + cantonCode) + '&';
    if (hWCode === null) throw new Error("The parameter 'hWCode' cannot be null.");
    else if (hWCode !== undefined) url_ += 'hWCode=' + encodeURIComponent('' + hWCode) + '&';
    if (hWFilterText === null) throw new Error("The parameter 'hWFilterText' cannot be null.");
    else if (hWFilterText !== undefined)
      url_ += 'hWFilterText=' + encodeURIComponent('' + hWFilterText) + '&';
    if (needPhoneNo === null) throw new Error("The parameter 'needPhoneNo' cannot be null.");
    else if (needPhoneNo !== undefined)
      url_ += 'needPhoneNo=' + encodeURIComponent('' + needPhoneNo) + '&';
    if (sendTime === null) throw new Error("The parameter 'sendTime' cannot be null.");
    else if (sendTime !== undefined)
      url_ += 'sendTime=' + encodeURIComponent(sendTime ? '' + sendTime.toISOString() : '') + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetHWPaged(_response);
      });
  }

  protected processGetHWPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfEnterpriseHWListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfEnterpriseHWListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfEnterpriseHWListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfEnterpriseHWListDto>(null as any);
  }

  /**
   * 获取的分页列表信息
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param customerState (optional) 当前状态
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    customerState: CustomerState | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfCustomerListDto> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetPaged?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (customerState === null) throw new Error("The parameter 'customerState' cannot be null.");
    else if (customerState !== undefined)
      url_ += 'customerState=' + encodeURIComponent('' + customerState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfCustomerListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfCustomerListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfCustomerListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfCustomerListDto>(null as any);
  }

  /**
   * 获取租户还可以领取的次数
   * @return Success
   */
  getTenantHasCanViewClueCount(
    cancelToken?: CancelToken | undefined,
  ): Promise<TenantCanViewClueDto> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetTenantHasCanViewClueCount';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTenantHasCanViewClueCount(_response);
      });
  }

  protected processGetTenantHasCanViewClueCount(
    response: AxiosResponse,
  ): Promise<TenantCanViewClueDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = TenantCanViewClueDto.fromJS(resultData200, _mappings);
      return Promise.resolve<TenantCanViewClueDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<TenantCanViewClueDto>(null as any);
  }

  /**
   * 导出为excel文件
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param customerState (optional) 当前状态
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getToExcelFile(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    customerState: CustomerState | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetToExcelFile?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (customerState === null) throw new Error("The parameter 'customerState' cannot be null.");
    else if (customerState !== undefined)
      url_ += 'customerState=' + encodeURIComponent('' + customerState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
     * 危废线索池查询分页服务
     * @param cantonCode (optional) 行政区编码
     * @param hWCode (optional) 危废编码
     * @param hWFilterText (optional) 危废过滤内容
     * @param importType (optional) 全部   null
    只显示未导入  0
    只显示已导入  1
     * @param filterText (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
  getUniHWPaged(
    cantonCode: string | undefined,
    hWCode: string | undefined,
    hWFilterText: string | undefined,
    importType: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfTenantViewedClueListDto> {
    let url_ = this.baseUrl + '/api/services/app/Customer/GetUniHWPaged?';
    if (cantonCode === null) throw new Error("The parameter 'cantonCode' cannot be null.");
    else if (cantonCode !== undefined)
      url_ += 'cantonCode=' + encodeURIComponent('' + cantonCode) + '&';
    if (hWCode === null) throw new Error("The parameter 'hWCode' cannot be null.");
    else if (hWCode !== undefined) url_ += 'hWCode=' + encodeURIComponent('' + hWCode) + '&';
    if (hWFilterText === null) throw new Error("The parameter 'hWFilterText' cannot be null.");
    else if (hWFilterText !== undefined)
      url_ += 'hWFilterText=' + encodeURIComponent('' + hWFilterText) + '&';
    if (importType === null) throw new Error("The parameter 'importType' cannot be null.");
    else if (importType !== undefined)
      url_ += 'importType=' + encodeURIComponent('' + importType) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUniHWPaged(_response);
      });
  }

  protected processGetUniHWPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfTenantViewedClueListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfTenantViewedClueListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfTenantViewedClueListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfTenantViewedClueListDto>(null as any);
  }

  /**
   * 领取线索
   * @param id (optional)
   * @return Success
   */
  receivingClues(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Customer/ReceivingClues?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processReceivingClues(_response);
      });
  }

  protected processReceivingClues(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 租户还能查看线索的次数
   * @param entId (optional)
   * @return Success
   */
  tenantHasCanViewClueCount(
    entId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<EnterpriseClueDto> {
    let url_ = this.baseUrl + '/api/services/app/Customer/TenantHasCanViewClueCount?';
    if (entId === null) throw new Error("The parameter 'entId' cannot be null.");
    else if (entId !== undefined) url_ += 'entId=' + encodeURIComponent('' + entId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processTenantHasCanViewClueCount(_response);
      });
  }

  protected processTenantHasCanViewClueCount(response: AxiosResponse): Promise<EnterpriseClueDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = EnterpriseClueDto.fromJS(resultData200, _mappings);
      return Promise.resolve<EnterpriseClueDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EnterpriseClueDto>(null as any);
  }

  /**
   * 判断线索手工录入时，线索名称、联系方式如果有在公司的线索列表中已存在，提示。
   * @param id (optional) 编辑时候的customerid
   * @param value (optional)
   * @param type (optional)
   * @return Success
   */
  theValueHasContaints(
    id: number | undefined,
    value: string | undefined,
    type: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Customer/TheValueHasContaints?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    if (value === null) throw new Error("The parameter 'value' cannot be null.");
    else if (value !== undefined) url_ += 'value=' + encodeURIComponent('' + value) + '&';
    if (type === null) throw new Error("The parameter 'type' cannot be null.");
    else if (type !== undefined) url_ += 'type=' + encodeURIComponent('' + type) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processTheValueHasContaints(_response);
      });
  }

  protected processTheValueHasContaints(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }
}

export class DashboardServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 客户汇总信息
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param groupName (optional) 小组名称
   * @param userId (optional) 人员Id
   * @param isSalesLeader (optional) 是否是销售经理
   * @return Success
   */
  getCustomers(
    selectPeriod: string | undefined,
    groupName: string | undefined,
    userId: number | undefined,
    isSalesLeader: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CustomerDto> {
    let url_ = this.baseUrl + '/api/services/app/Dashboard/GetCustomers?';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (groupName === null) throw new Error("The parameter 'groupName' cannot be null.");
    else if (groupName !== undefined)
      url_ += 'groupName=' + encodeURIComponent('' + groupName) + '&';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    if (isSalesLeader === null) throw new Error("The parameter 'isSalesLeader' cannot be null.");
    else if (isSalesLeader !== undefined)
      url_ += 'isSalesLeader=' + encodeURIComponent('' + isSalesLeader) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCustomers(_response);
      });
  }

  protected processGetCustomers(response: AxiosResponse): Promise<CustomerDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = CustomerDto.fromJS(resultData200, _mappings);
      return Promise.resolve<CustomerDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CustomerDto>(null as any);
  }

  /**
   * 获取客服统计
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param groupName (optional) 小组名称
   * @param userId (optional) 人员Id
   * @param isSalesLeader (optional) 是否是销售经理
   * @return Success
   */
  getCustomerServiceStatistics(
    selectPeriod: string | undefined,
    groupName: string | undefined,
    userId: number | undefined,
    isSalesLeader: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CustomerServiceDto> {
    let url_ = this.baseUrl + '/api/services/app/Dashboard/GetCustomerServiceStatistics?';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (groupName === null) throw new Error("The parameter 'groupName' cannot be null.");
    else if (groupName !== undefined)
      url_ += 'groupName=' + encodeURIComponent('' + groupName) + '&';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    if (isSalesLeader === null) throw new Error("The parameter 'isSalesLeader' cannot be null.");
    else if (isSalesLeader !== undefined)
      url_ += 'isSalesLeader=' + encodeURIComponent('' + isSalesLeader) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCustomerServiceStatistics(_response);
      });
  }

  protected processGetCustomerServiceStatistics(
    response: AxiosResponse,
  ): Promise<CustomerServiceDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = CustomerServiceDto.fromJS(resultData200, _mappings);
      return Promise.resolve<CustomerServiceDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CustomerServiceDto>(null as any);
  }

  /**
   * @return Success
   */
  getDashboardstatistics(cancelToken?: CancelToken | undefined): Promise<DashboardDto> {
    let url_ = this.baseUrl + '/api/services/app/Dashboard/GetDashboardstatistics';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDashboardstatistics(_response);
      });
  }

  protected processGetDashboardstatistics(response: AxiosResponse): Promise<DashboardDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DashboardDto.fromJS(resultData200, _mappings);
      return Promise.resolve<DashboardDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DashboardDto>(null as any);
  }

  /**
   * 物流信息统计
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param groupName (optional) 小组名称
   * @param userId (optional) 人员Id
   * @param isSalesLeader (optional) 是否是销售经理
   * @return Success
   */
  getLogistics(
    selectPeriod: string | undefined,
    groupName: string | undefined,
    userId: number | undefined,
    isSalesLeader: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<LogisticsDto> {
    let url_ = this.baseUrl + '/api/services/app/Dashboard/GetLogistics?';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (groupName === null) throw new Error("The parameter 'groupName' cannot be null.");
    else if (groupName !== undefined)
      url_ += 'groupName=' + encodeURIComponent('' + groupName) + '&';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    if (isSalesLeader === null) throw new Error("The parameter 'isSalesLeader' cannot be null.");
    else if (isSalesLeader !== undefined)
      url_ += 'isSalesLeader=' + encodeURIComponent('' + isSalesLeader) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetLogistics(_response);
      });
  }

  protected processGetLogistics(response: AxiosResponse): Promise<LogisticsDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LogisticsDto.fromJS(resultData200, _mappings);
      return Promise.resolve<LogisticsDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<LogisticsDto>(null as any);
  }

  /**
   * 销售信息统计
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param groupName (optional) 小组名称
   * @param userId (optional) 人员Id
   * @param isSalesLeader (optional) 是否是销售经理
   * @return Success
   */
  getSales(
    selectPeriod: string | undefined,
    groupName: string | undefined,
    userId: number | undefined,
    isSalesLeader: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<SalesDto> {
    let url_ = this.baseUrl + '/api/services/app/Dashboard/GetSales?';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (groupName === null) throw new Error("The parameter 'groupName' cannot be null.");
    else if (groupName !== undefined)
      url_ += 'groupName=' + encodeURIComponent('' + groupName) + '&';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    if (isSalesLeader === null) throw new Error("The parameter 'isSalesLeader' cannot be null.");
    else if (isSalesLeader !== undefined)
      url_ += 'isSalesLeader=' + encodeURIComponent('' + isSalesLeader) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetSales(_response);
      });
  }

  protected processGetSales(response: AxiosResponse): Promise<SalesDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = SalesDto.fromJS(resultData200, _mappings);
      return Promise.resolve<SalesDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<SalesDto>(null as any);
  }
}

export class DashboardReportServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 首页统计信息
   * @param searchScene (optional) 查询场景 0:全部 1:我负责的 2:下属负责的 3:本人及下属
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @return Success
   */
  getDashboardReportDto(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DashboardReportDto> {
    let url_ = this.baseUrl + '/api/services/app/DashboardReport/GetDashboardReportDto?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDashboardReportDto(_response);
      });
  }

  protected processGetDashboardReportDto(response: AxiosResponse): Promise<DashboardReportDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DashboardReportDto.fromJS(resultData200, _mappings);
      return Promise.resolve<DashboardReportDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DashboardReportDto>(null as any);
  }

  /**
   * 待办事项
   * @return Success
   */
  getToDoLists(cancelToken?: CancelToken | undefined): Promise<ToDoList[]> {
    let url_ = this.baseUrl + '/api/services/app/DashboardReport/GetToDoLists';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToDoLists(_response);
      });
  }

  protected processGetToDoLists(response: AxiosResponse): Promise<ToDoList[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(ToDoList.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<ToDoList[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ToDoList[]>(null as any);
  }
}

export class DicItemServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除DicItem的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/DicItem/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改业务字典的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateDicItemInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/DicItem/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除业务字典信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/DicItem/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取DicItemListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<DicItemListDto> {
    let url_ = this.baseUrl + '/api/services/app/DicItem/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<DicItemListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DicItemListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<DicItemListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DicItemListDto>(null as any);
  }

  /**
   * 跟进字典编码和值获取实体
   * @param dicCode (optional)
   * @param dicValue (optional)
   * @return Success
   */
  getEntity(
    dicCode: string | undefined,
    dicValue: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DicItemListDto> {
    let url_ = this.baseUrl + '/api/services/app/DicItem/GetEntity?';
    if (dicCode === null) throw new Error("The parameter 'dicCode' cannot be null.");
    else if (dicCode !== undefined) url_ += 'dicCode=' + encodeURIComponent('' + dicCode) + '&';
    if (dicValue === null) throw new Error("The parameter 'dicValue' cannot be null.");
    else if (dicValue !== undefined) url_ += 'dicValue=' + encodeURIComponent('' + dicValue) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEntity(_response);
      });
  }

  protected processGetEntity(response: AxiosResponse): Promise<DicItemListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DicItemListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<DicItemListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DicItemListDto>(null as any);
  }

  /**
   * 获取编辑 业务字典
   * @param id (optional)
   * @param dicCode (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    dicCode: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetDicItemForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/DicItem/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    if (dicCode === null) throw new Error("The parameter 'dicCode' cannot be null.");
    else if (dicCode !== undefined) url_ += 'dicCode=' + encodeURIComponent('' + dicCode) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetDicItemForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetDicItemForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetDicItemForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetDicItemForEditOutput>(null as any);
  }

  /**
   * 根据字典代码获取字典列表
   * @param dicCode (optional)
   * @return Success
   */
  getListByDicCode(
    dicCode: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DicItemListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/DicItem/GetListByDicCode?';
    if (dicCode === null) throw new Error("The parameter 'dicCode' cannot be null.");
    else if (dicCode !== undefined) url_ += 'dicCode=' + encodeURIComponent('' + dicCode) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetListByDicCode(_response);
      });
  }

  protected processGetListByDicCode(response: AxiosResponse): Promise<DicItemListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(DicItemListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<DicItemListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DicItemListDto[]>(null as any);
  }

  /**
   * 获取业务字典的分页列表信息
   * @param dicCode (optional) 字典代码
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    dicCode: string | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfDicItemListDto> {
    let url_ = this.baseUrl + '/api/services/app/DicItem/GetPaged?';
    if (dicCode === null) throw new Error("The parameter 'dicCode' cannot be null.");
    else if (dicCode !== undefined) url_ += 'dicCode=' + encodeURIComponent('' + dicCode) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfDicItemListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfDicItemListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfDicItemListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfDicItemListDto>(null as any);
  }
}

export class DispatchingServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 选择该派单信息
   * @param orderVehicleId (optional)
   * @param body (optional)
   * @return Success
   */
  chooseTheDispatching(
    orderVehicleId: number | undefined,
    body: DispatchedVehicleAndUserDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Dispatching/ChooseTheDispatching?';
    if (orderVehicleId === null) throw new Error("The parameter 'orderVehicleId' cannot be null.");
    else if (orderVehicleId !== undefined)
      url_ += 'orderVehicleId=' + encodeURIComponent('' + orderVehicleId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processChooseTheDispatching(_response);
      });
  }

  protected processChooseTheDispatching(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 获取日历上的数据
   * @return Success
   */
  getCalendarDatas(cancelToken?: CancelToken | undefined): Promise<DailySchedulingDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Dispatching/GetCalendarDatas';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCalendarDatas(_response);
      });
  }

  protected processGetCalendarDatas(response: AxiosResponse): Promise<DailySchedulingDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(DailySchedulingDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<DailySchedulingDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DailySchedulingDto[]>(null as any);
  }

  /**
   * 获取待安排订单记录
   * @param startDate (optional) 开始时间
   * @param endDate (optional) 开始时间
   * @return Success
   */
  getDailySchedulingList(
    startDate: dayjs.Dayjs | undefined,
    endDate: dayjs.Dayjs | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DailySchedulingDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Dispatching/GetDailySchedulingList?';
    if (startDate === null) throw new Error("The parameter 'startDate' cannot be null.");
    else if (startDate !== undefined)
      url_ +=
        'startDate=' + encodeURIComponent(startDate ? '' + startDate.toISOString() : '') + '&';
    if (endDate === null) throw new Error("The parameter 'endDate' cannot be null.");
    else if (endDate !== undefined)
      url_ += 'endDate=' + encodeURIComponent(endDate ? '' + endDate.toISOString() : '') + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDailySchedulingList(_response);
      });
  }

  protected processGetDailySchedulingList(response: AxiosResponse): Promise<DailySchedulingDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(DailySchedulingDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<DailySchedulingDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DailySchedulingDto[]>(null as any);
  }

  /**
   * 待派单的订单和车辆需求列表
   * @param filterText (optional)
   * @param startDate (optional)
   * @param endDate (optional)
   * @return Success
   */
  getDispatchedOrderVehicleList(
    filterText: string | undefined,
    startDate: dayjs.Dayjs | undefined,
    endDate: dayjs.Dayjs | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DispatchedOrderVehicleDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Dispatching/GetDispatchedOrderVehicleList?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (startDate === null) throw new Error("The parameter 'startDate' cannot be null.");
    else if (startDate !== undefined)
      url_ +=
        'startDate=' + encodeURIComponent(startDate ? '' + startDate.toISOString() : '') + '&';
    if (endDate === null) throw new Error("The parameter 'endDate' cannot be null.");
    else if (endDate !== undefined)
      url_ += 'endDate=' + encodeURIComponent(endDate ? '' + endDate.toISOString() : '') + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDispatchedOrderVehicleList(_response);
      });
  }

  protected processGetDispatchedOrderVehicleList(
    response: AxiosResponse,
  ): Promise<DispatchedOrderVehicleDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(DispatchedOrderVehicleDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<DispatchedOrderVehicleDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DispatchedOrderVehicleDto[]>(null as any);
  }

  /**
   * 调度-符合条件的车辆人员信息
   * @param orderVehicleId (optional)
   * @param orderType (optional)
   * @return Success
   */
  getMatchConditionVehicleAndUserList(
    orderVehicleId: number | undefined,
    orderType: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DispatchedVehicleAndUserDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Dispatching/GetMatchConditionVehicleAndUserList?';
    if (orderVehicleId === null) throw new Error("The parameter 'orderVehicleId' cannot be null.");
    else if (orderVehicleId !== undefined)
      url_ += 'orderVehicleId=' + encodeURIComponent('' + orderVehicleId) + '&';
    if (orderType === null) throw new Error("The parameter 'orderType' cannot be null.");
    else if (orderType !== undefined)
      url_ += 'orderType=' + encodeURIComponent('' + orderType) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetMatchConditionVehicleAndUserList(_response);
      });
  }

  protected processGetMatchConditionVehicleAndUserList(
    response: AxiosResponse,
  ): Promise<DispatchedVehicleAndUserDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(DispatchedVehicleAndUserDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<DispatchedVehicleAndUserDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DispatchedVehicleAndUserDto[]>(null as any);
  }

  /**
   * 调度-符合条件的车辆人员信息
   * @param orderVehicleId (optional)
   * @param orderType (optional)
   * @return Success
   */
  getMatchConditionVehicleAndUserList11(
    orderVehicleId: number | undefined,
    orderType: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DispatchedVehicleAndUserDto[]> {
    let url_ =
      this.baseUrl + '/api/services/app/Dispatching/GetMatchConditionVehicleAndUserList11?';
    if (orderVehicleId === null) throw new Error("The parameter 'orderVehicleId' cannot be null.");
    else if (orderVehicleId !== undefined)
      url_ += 'orderVehicleId=' + encodeURIComponent('' + orderVehicleId) + '&';
    if (orderType === null) throw new Error("The parameter 'orderType' cannot be null.");
    else if (orderType !== undefined)
      url_ += 'orderType=' + encodeURIComponent('' + orderType) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetMatchConditionVehicleAndUserList11(_response);
      });
  }

  protected processGetMatchConditionVehicleAndUserList11(
    response: AxiosResponse,
  ): Promise<DispatchedVehicleAndUserDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(DispatchedVehicleAndUserDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<DispatchedVehicleAndUserDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DispatchedVehicleAndUserDto[]>(null as any);
  }

  /**
   * @param state (optional)
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    state: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfDispatchedDoneOrderVehicleDto> {
    let url_ = this.baseUrl + '/api/services/app/Dispatching/GetPaged?';
    if (state === null) throw new Error("The parameter 'state' cannot be null.");
    else if (state !== undefined) url_ += 'state=' + encodeURIComponent('' + state) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfDispatchedDoneOrderVehicleDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfDispatchedDoneOrderVehicleDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfDispatchedDoneOrderVehicleDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfDispatchedDoneOrderVehicleDto>(null as any);
  }

  /**
   * 重新派单
   * @param orderVehicleId (optional)
   * @return Success
   */
  resetTheDispatching(
    orderVehicleId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Dispatching/ResetTheDispatching?';
    if (orderVehicleId === null) throw new Error("The parameter 'orderVehicleId' cannot be null.");
    else if (orderVehicleId !== undefined)
      url_ += 'orderVehicleId=' + encodeURIComponent('' + orderVehicleId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processResetTheDispatching(_response);
      });
  }

  protected processResetTheDispatching(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  updateDispatchedDoneOrderVehicleCost(
    body: OrderVehicleCost | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Dispatching/UpdateDispatchedDoneOrderVehicleCost';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateDispatchedDoneOrderVehicleCost(_response);
      });
  }

  protected processUpdateDispatchedDoneOrderVehicleCost(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 更新派单状态
   * @param orderVehicleId (optional)
   * @param state (optional)
   * @return Success
   */
  updateTheDispatchingState(
    orderVehicleId: number | undefined,
    state: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Dispatching/UpdateTheDispatchingState?';
    if (orderVehicleId === null) throw new Error("The parameter 'orderVehicleId' cannot be null.");
    else if (orderVehicleId !== undefined)
      url_ += 'orderVehicleId=' + encodeURIComponent('' + orderVehicleId) + '&';
    if (state === null) throw new Error("The parameter 'state' cannot be null.");
    else if (state !== undefined) url_ += 'state=' + encodeURIComponent('' + state) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'PUT',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateTheDispatchingState(_response);
      });
  }

  protected processUpdateTheDispatchingState(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }
}

export class DispatchOrderServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 审核派单
   * @param body (optional)
   * @return Success
   */
  approveDispatch(
    body: ApproveInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/DispatchOrder/ApproveDispatch';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processApproveDispatch(_response);
      });
  }

  protected processApproveDispatch(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 批量删除DispatchOrder的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/DispatchOrder/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改派单的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateDispatchOrderInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/DispatchOrder/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除派单信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/DispatchOrder/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取DispatchOrderListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DispatchOrderListDto> {
    let url_ = this.baseUrl + '/api/services/app/DispatchOrder/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<DispatchOrderListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DispatchOrderListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<DispatchOrderListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DispatchOrderListDto>(null as any);
  }

  /**
   * 派单详情
   * @param id (optional)
   * @return Success
   */
  getDetailsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DispatchDetailDto> {
    let url_ = this.baseUrl + '/api/services/app/DispatchOrder/GetDetailsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDetailsById(_response);
      });
  }

  protected processGetDetailsById(response: AxiosResponse): Promise<DispatchDetailDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DispatchDetailDto.fromJS(resultData200, _mappings);
      return Promise.resolve<DispatchDetailDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DispatchDetailDto>(null as any);
  }

  /**
   * 获取分享的派单详情
   * @param id (optional)
   * @return Success
   */
  getDispatchOrderShareDetailsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DispatchShareDetailDto> {
    let url_ = this.baseUrl + '/api/services/app/DispatchOrder/GetDispatchOrderShareDetailsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDispatchOrderShareDetailsById(_response);
      });
  }

  protected processGetDispatchOrderShareDetailsById(
    response: AxiosResponse,
  ): Promise<DispatchShareDetailDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DispatchShareDetailDto.fromJS(resultData200, _mappings);
      return Promise.resolve<DispatchShareDetailDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DispatchShareDetailDto>(null as any);
  }

  /**
   * 获取编辑 派单
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetDispatchOrderForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/DispatchOrder/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetDispatchOrderForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetDispatchOrderForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetDispatchOrderForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetDispatchOrderForEditOutput>(null as any);
  }

  /**
   * 获取入库用到数据
   * @param id (optional)
   * @return Success
   */
  getInStorageFieldById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DispatchDetailDto> {
    let url_ = this.baseUrl + '/api/services/app/DispatchOrder/GetInStorageFieldById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetInStorageFieldById(_response);
      });
  }

  protected processGetInStorageFieldById(response: AxiosResponse): Promise<DispatchDetailDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DispatchDetailDto.fromJS(resultData200, _mappings);
      return Promise.resolve<DispatchDetailDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DispatchDetailDto>(null as any);
  }

  /**
   * 获取派单的分页列表信息
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param customerState (optional) 客户当前状态
   * @param receiveApprove (optional) 审批是否同意接收 并且没有派单记录
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    customerState: CustomerState | undefined,
    receiveApprove: ReceiveApprove | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfDispatchOrderListDto> {
    let url_ = this.baseUrl + '/api/services/app/DispatchOrder/GetPaged?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (customerState === null) throw new Error("The parameter 'customerState' cannot be null.");
    else if (customerState !== undefined)
      url_ += 'customerState=' + encodeURIComponent('' + customerState) + '&';
    if (receiveApprove === null) throw new Error("The parameter 'receiveApprove' cannot be null.");
    else if (receiveApprove !== undefined)
      url_ += 'receiveApprove=' + encodeURIComponent('' + receiveApprove) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfDispatchOrderListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfDispatchOrderListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfDispatchOrderListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfDispatchOrderListDto>(null as any);
  }

  /**
   * 导出合同为excel文件
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param customerState (optional) 客户当前状态
   * @param receiveApprove (optional) 审批是否同意接收 并且没有派单记录
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getToExcelFile(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    customerState: CustomerState | undefined,
    receiveApprove: ReceiveApprove | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/DispatchOrder/GetToExcelFile?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (customerState === null) throw new Error("The parameter 'customerState' cannot be null.");
    else if (customerState !== undefined)
      url_ += 'customerState=' + encodeURIComponent('' + customerState) + '&';
    if (receiveApprove === null) throw new Error("The parameter 'receiveApprove' cannot be null.");
    else if (receiveApprove !== undefined)
      url_ += 'receiveApprove=' + encodeURIComponent('' + receiveApprove) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 重新派单
   * @param dispatchId (optional)
   * @return Success
   */
  restartDispatch(
    dispatchId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/DispatchOrder/RestartDispatch?';
    if (dispatchId === null) throw new Error("The parameter 'dispatchId' cannot be null.");
    else if (dispatchId !== undefined)
      url_ += 'dispatchId=' + encodeURIComponent('' + dispatchId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRestartDispatch(_response);
      });
  }

  protected processRestartDispatch(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }
}

export class DriverServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除Driver的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Driver/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改司机管理的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateDriverInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Driver/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除司机管理信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Driver/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取DriverListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<DriverListDto> {
    let url_ = this.baseUrl + '/api/services/app/Driver/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<DriverListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DriverListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<DriverListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DriverListDto>(null as any);
  }

  /**
   * 获取驾驶员、押运员前十条信息
   * @param logisticsCompanyId (optional)
   * @param filterText (optional) 驾驶员、押运员名称
   * @param supercargo (optional) false：司机  true：押运员
   * @return Success
   */
  getDriverList(
    logisticsCompanyId: number | undefined,
    filterText: string | undefined,
    supercargo: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DriverListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Driver/GetDriverList?';
    if (logisticsCompanyId === null)
      throw new Error("The parameter 'logisticsCompanyId' cannot be null.");
    else if (logisticsCompanyId !== undefined)
      url_ += 'logisticsCompanyId=' + encodeURIComponent('' + logisticsCompanyId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (supercargo === null) throw new Error("The parameter 'supercargo' cannot be null.");
    else if (supercargo !== undefined)
      url_ += 'supercargo=' + encodeURIComponent('' + supercargo) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDriverList(_response);
      });
  }

  protected processGetDriverList(response: AxiosResponse): Promise<DriverListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(DriverListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<DriverListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DriverListDto[]>(null as any);
  }

  /**
   * 获取编辑 司机管理
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetDriverForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Driver/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetDriverForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetDriverForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetDriverForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetDriverForEditOutput>(null as any);
  }

  /**
   * 获取司机管理的分页列表信息
   * @param supercargo (optional) 是否是押运员
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    supercargo: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfDriverListDto> {
    let url_ = this.baseUrl + '/api/services/app/Driver/GetPaged?';
    if (supercargo === null) throw new Error("The parameter 'supercargo' cannot be null.");
    else if (supercargo !== undefined)
      url_ += 'supercargo=' + encodeURIComponent('' + supercargo) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfDriverListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfDriverListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfDriverListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfDriverListDto>(null as any);
  }

  /**
   * 导出司机管理为excel文件
   * @param supercargo (optional) 是否是押运员
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getToExcelFile(
    supercargo: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Driver/GetToExcelFile?';
    if (supercargo === null) throw new Error("The parameter 'supercargo' cannot be null.");
    else if (supercargo !== undefined)
      url_ += 'supercargo=' + encodeURIComponent('' + supercargo) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class DypSecretReportServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除DypSecretReport的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/DypSecretReport/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改电话记录详情的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateDypSecretReportInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/DypSecretReport/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除电话记录详情信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/DypSecretReport/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取DypSecretReportListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DypSecretReportListDto> {
    let url_ = this.baseUrl + '/api/services/app/DypSecretReport/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<DypSecretReportListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DypSecretReportListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<DypSecretReportListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DypSecretReportListDto>(null as any);
  }

  /**
   * 获取编辑 电话记录详情
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetDypSecretReportForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/DypSecretReport/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetDypSecretReportForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetDypSecretReportForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetDypSecretReportForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetDypSecretReportForEditOutput>(null as any);
  }

  /**
   * 获取电话记录详情的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfDypSecretReportListDto> {
    let url_ = this.baseUrl + '/api/services/app/DypSecretReport/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfDypSecretReportListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfDypSecretReportListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfDypSecretReportListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfDypSecretReportListDto>(null as any);
  }

  /**
   * 根据记录Id获取电话记录下载链接
   * @param secretReportId (optional)
   * @return Success
   */
  getRecordFileDetails(
    secretReportId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/DypSecretReport/GetRecordFileDetails?';
    if (secretReportId === null) throw new Error("The parameter 'secretReportId' cannot be null.");
    else if (secretReportId !== undefined)
      url_ += 'secretReportId=' + encodeURIComponent('' + secretReportId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetRecordFileDetails(_response);
      });
  }

  protected processGetRecordFileDetails(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }

  /**
   * 导出电话记录详情为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/DypSecretReport/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class EditionServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  createOrUpdateEdition(
    body: CreateOrUpdateEditionDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Edition/CreateOrUpdateEdition';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateEdition(_response);
      });
  }

  protected processCreateOrUpdateEdition(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  deleteEdition(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Edition/DeleteEdition?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteEdition(_response);
      });
  }

  protected processDeleteEdition(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param selectedEditionId (optional)
   * @param addAllItem (optional)
   * @param onlyFreeItems (optional)
   * @return Success
   */
  getEditionComboboxItems(
    selectedEditionId: number | undefined,
    addAllItem: boolean | undefined,
    onlyFreeItems: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<SubscribableEditionComboboxItemDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Edition/GetEditionComboboxItems?';
    if (selectedEditionId === null)
      throw new Error("The parameter 'selectedEditionId' cannot be null.");
    else if (selectedEditionId !== undefined)
      url_ += 'selectedEditionId=' + encodeURIComponent('' + selectedEditionId) + '&';
    if (addAllItem === null) throw new Error("The parameter 'addAllItem' cannot be null.");
    else if (addAllItem !== undefined)
      url_ += 'addAllItem=' + encodeURIComponent('' + addAllItem) + '&';
    if (onlyFreeItems === null) throw new Error("The parameter 'onlyFreeItems' cannot be null.");
    else if (onlyFreeItems !== undefined)
      url_ += 'onlyFreeItems=' + encodeURIComponent('' + onlyFreeItems) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEditionComboboxItems(_response);
      });
  }

  protected processGetEditionComboboxItems(
    response: AxiosResponse,
  ): Promise<SubscribableEditionComboboxItemDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(SubscribableEditionComboboxItemDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<SubscribableEditionComboboxItemDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<SubscribableEditionComboboxItemDto[]>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  getEditionForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetEditionEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Edition/GetEditionForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEditionForEdit(_response);
      });
  }

  protected processGetEditionForEdit(response: AxiosResponse): Promise<GetEditionEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetEditionEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetEditionEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetEditionEditOutput>(null as any);
  }

  /**
   * @return Success
   */
  getEditions(cancelToken?: CancelToken | undefined): Promise<ListResultDtoOfEditionListDto> {
    let url_ = this.baseUrl + '/api/services/app/Edition/GetEditions';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEditions(_response);
      });
  }

  protected processGetEditions(response: AxiosResponse): Promise<ListResultDtoOfEditionListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ListResultDtoOfEditionListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ListResultDtoOfEditionListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ListResultDtoOfEditionListDto>(null as any);
  }

  /**
   * @param editionId (optional)
   * @return Success
   */
  getTenantCount(
    editionId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<number> {
    let url_ = this.baseUrl + '/api/services/app/Edition/GetTenantCount?';
    if (editionId === null) throw new Error("The parameter 'editionId' cannot be null.");
    else if (editionId !== undefined)
      url_ += 'editionId=' + encodeURIComponent('' + editionId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTenantCount(_response);
      });
  }

  protected processGetTenantCount(response: AxiosResponse): Promise<number> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<number>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<number>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  moveTenantsToAnotherEdition(
    body: MoveTenantsToAnotherEditionDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Edition/MoveTenantsToAnotherEdition';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processMoveTenantsToAnotherEdition(_response);
      });
  }

  protected processMoveTenantsToAnotherEdition(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class EnquiryServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除Enquiry的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改企业询价的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateEnquiryInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除企业询价信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取EnquiryListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<EnquiryListDto> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<EnquiryListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = EnquiryListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<EnquiryListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EnquiryListDto>(null as any);
  }

  /**
   * 报价详情
   * @param id (optional)
   * @return Success
   */
  getDetailsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<EnquiryDetailListDto> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry/GetDetailsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDetailsById(_response);
      });
  }

  protected processGetDetailsById(response: AxiosResponse): Promise<EnquiryDetailListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = EnquiryDetailListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<EnquiryDetailListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EnquiryDetailListDto>(null as any);
  }

  /**
   * 获取编辑 企业询价
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetEnquiryForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetEnquiryForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetEnquiryForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetEnquiryForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetEnquiryForEditOutput>(null as any);
  }

  /**
   * 获取企业询价的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfEnquiryListDto> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfEnquiryListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfEnquiryListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfEnquiryListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfEnquiryListDto>(null as any);
  }

  /**
   * 导出企业询价为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class Enquiry_BidServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除Enquiry_Bid的方法
   * @param id (optional)
   * @return Success
   */
  allBidDelete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_Bid/AllBidDelete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAllBidDelete(_response);
      });
  }

  protected processAllBidDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除Enquiry_Bid的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_Bid/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改产废企业报价的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateEnquiry_BidInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_Bid/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除产废企业报价信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_Bid/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除Enquiry_Bid的方法
   * @param body (optional)
   * @return Success
   */
  enquiryBidPrice(
    body: EnquiryBidEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_Bid/EnquiryBidPrice';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processEnquiryBidPrice(_response);
      });
  }

  protected processEnquiryBidPrice(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取Enquiry_BidListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Enquiry_BidListDto> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_Bid/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<Enquiry_BidListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Enquiry_BidListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Enquiry_BidListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Enquiry_BidListDto>(null as any);
  }

  /**
   * 报价详情
   * @param id (optional)
   * @return Success
   */
  getDetailsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Enquiry_BidListDto> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_Bid/GetDetailsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDetailsById(_response);
      });
  }

  protected processGetDetailsById(response: AxiosResponse): Promise<Enquiry_BidListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Enquiry_BidListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Enquiry_BidListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Enquiry_BidListDto>(null as any);
  }

  /**
   * 获取编辑 产废企业报价
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetEnquiry_BidForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_Bid/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetEnquiry_BidForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetEnquiry_BidForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetEnquiry_BidForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetEnquiry_BidForEditOutput>(null as any);
  }

  /**
   * 获取产废企业报价的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfEnquiry_BidListDto> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_Bid/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfEnquiry_BidListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfEnquiry_BidListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfEnquiry_BidListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfEnquiry_BidListDto>(null as any);
  }

  /**
   * 导出产废企业报价为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_Bid/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 批量删除Enquiry_Bid的方法
   * @param enquiryHWId (optional)
   * @param enquiryId (optional)
   * @return Success
   */
  singleBidDelete(
    enquiryHWId: number | undefined,
    enquiryId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_Bid/SingleBidDelete?';
    if (enquiryHWId === null) throw new Error("The parameter 'enquiryHWId' cannot be null.");
    else if (enquiryHWId !== undefined)
      url_ += 'enquiryHWId=' + encodeURIComponent('' + enquiryHWId) + '&';
    if (enquiryId === null) throw new Error("The parameter 'enquiryId' cannot be null.");
    else if (enquiryId !== undefined)
      url_ += 'enquiryId=' + encodeURIComponent('' + enquiryId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSingleBidDelete(_response);
      });
  }

  protected processSingleBidDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class Enquiry_HWServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除Enquiry_HW的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_HW/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改企业询价危废信息的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateEnquiry_HWInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_HW/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除企业询价危废信息信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_HW/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取Enquiry_HWListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Enquiry_HWListDto> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_HW/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<Enquiry_HWListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Enquiry_HWListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Enquiry_HWListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Enquiry_HWListDto>(null as any);
  }

  /**
   * 获取编辑 企业询价危废信息
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetEnquiry_HWForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_HW/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetEnquiry_HWForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetEnquiry_HWForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetEnquiry_HWForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetEnquiry_HWForEditOutput>(null as any);
  }

  /**
   * 获取企业询价危废信息的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfEnquiry_HWListDto> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_HW/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfEnquiry_HWListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfEnquiry_HWListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfEnquiry_HWListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfEnquiry_HWListDto>(null as any);
  }

  /**
   * 导出企业询价危废信息为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Enquiry_HW/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class GaoDeServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  getGaodePaths(cancelToken?: CancelToken | undefined): Promise<GaodeResponse> {
    let url_ = this.baseUrl + '/api/services/app/GaoDe/GetGaodePaths';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetGaodePaths(_response);
      });
  }

  protected processGetGaodePaths(response: AxiosResponse): Promise<GaodeResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GaodeResponse.fromJS(resultData200, _mappings);
      return Promise.resolve<GaodeResponse>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GaodeResponse>(null as any);
  }
}

export class GPSServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 通过指定车辆id获取GPSListDto信息
   * @param vehicleId (optional)
   * @return Success
   */
  getByVehicleId(
    vehicleId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GPSListDto> {
    let url_ = this.baseUrl + '/api/services/app/GPS/GetByVehicleId?';
    if (vehicleId === null) throw new Error("The parameter 'vehicleId' cannot be null.");
    else if (vehicleId !== undefined)
      url_ += 'vehicleId=' + encodeURIComponent('' + vehicleId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetByVehicleId(_response);
      });
  }

  protected processGetByVehicleId(response: AxiosResponse): Promise<GPSListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GPSListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<GPSListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GPSListDto>(null as any);
  }

  /**
   * 查询所有车辆的位置
   * @return Success
   */
  getVehicleGPSList(cancelToken?: CancelToken | undefined): Promise<GPSListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/GPS/GetVehicleGPSList';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetVehicleGPSList(_response);
      });
  }

  protected processGetVehicleGPSList(response: AxiosResponse): Promise<GPSListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(GPSListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<GPSListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GPSListDto[]>(null as any);
  }

  /**
   * 获取车辆的运动轨迹
   * @param vehicleId (optional)
   * @param startTime (optional)
   * @param endTime (optional)
   * @return Success
   */
  getVehicleRunLine(
    vehicleId: number | undefined,
    startTime: dayjs.Dayjs | undefined,
    endTime: dayjs.Dayjs | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GPSListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/GPS/GetVehicleRunLine?';
    if (vehicleId === null) throw new Error("The parameter 'vehicleId' cannot be null.");
    else if (vehicleId !== undefined)
      url_ += 'vehicleId=' + encodeURIComponent('' + vehicleId) + '&';
    if (startTime === null) throw new Error("The parameter 'startTime' cannot be null.");
    else if (startTime !== undefined)
      url_ +=
        'startTime=' + encodeURIComponent(startTime ? '' + startTime.toISOString() : '') + '&';
    if (endTime === null) throw new Error("The parameter 'endTime' cannot be null.");
    else if (endTime !== undefined)
      url_ += 'endTime=' + encodeURIComponent(endTime ? '' + endTime.toISOString() : '') + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetVehicleRunLine(_response);
      });
  }

  protected processGetVehicleRunLine(response: AxiosResponse): Promise<GPSListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(GPSListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<GPSListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GPSListDto[]>(null as any);
  }
}

export class HostCachingServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  clearAllCaches(cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/HostCaching/ClearAllCaches';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processClearAllCaches(_response);
      });
  }

  protected processClearAllCaches(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  clearCache(
    body: EntityDtoOfString | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/HostCaching/ClearCache';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processClearCache(_response);
      });
  }

  protected processClearCache(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  getAllCaches(cancelToken?: CancelToken | undefined): Promise<ListResultDtoOfHostCacheDto> {
    let url_ = this.baseUrl + '/api/services/app/HostCaching/GetAllCaches';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllCaches(_response);
      });
  }

  protected processGetAllCaches(response: AxiosResponse): Promise<ListResultDtoOfHostCacheDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ListResultDtoOfHostCacheDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ListResultDtoOfHostCacheDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ListResultDtoOfHostCacheDto>(null as any);
  }
}

export class HostSettingsServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  getAllSettings(cancelToken?: CancelToken | undefined): Promise<HostSettingsEditDto> {
    let url_ = this.baseUrl + '/api/services/app/HostSettings/GetAllSettings';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllSettings(_response);
      });
  }

  protected processGetAllSettings(response: AxiosResponse): Promise<HostSettingsEditDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = HostSettingsEditDto.fromJS(resultData200, _mappings);
      return Promise.resolve<HostSettingsEditDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<HostSettingsEditDto>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  sendTestEmail(
    body: SendTestEmailInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/HostSettings/SendTestEmail';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSendTestEmail(_response);
      });
  }

  protected processSendTestEmail(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  updateAllSettings(
    body: HostSettingsEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/HostSettings/UpdateAllSettings';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateAllSettings(_response);
      });
  }

  protected processUpdateAllSettings(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class HWCenterRemoteServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 获取处置企业可以处置的危废详情信息
   * @param entName (optional)
   * @return Success
   */
  getDisposalEntCanWastCodeDetails(
    entName: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DisposalEntWastCodeDetails> {
    let url_ = this.baseUrl + '/api/services/app/HWCenterRemote/GetDisposalEntCanWastCodeDetails?';
    if (entName === null) throw new Error("The parameter 'entName' cannot be null.");
    else if (entName !== undefined) url_ += 'entName=' + encodeURIComponent('' + entName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDisposalEntCanWastCodeDetails(_response);
      });
  }

  protected processGetDisposalEntCanWastCodeDetails(
    response: AxiosResponse,
  ): Promise<DisposalEntWastCodeDetails> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DisposalEntWastCodeDetails.fromJS(resultData200, _mappings);
      return Promise.resolve<DisposalEntWastCodeDetails>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DisposalEntWastCodeDetails>(null as any);
  }
}

export class InStorageServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除InStorage的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/InStorage/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改入库的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateInStorageInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/InStorage/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除入库信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/InStorage/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取InStorageListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<InStorageListDto> {
    let url_ = this.baseUrl + '/api/services/app/InStorage/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<InStorageListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = InStorageListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<InStorageListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<InStorageListDto>(null as any);
  }

  /**
   * 派单详情
   * @param id (optional)
   * @return Success
   */
  getDetailsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<InStorageDetailDto> {
    let url_ = this.baseUrl + '/api/services/app/InStorage/GetDetailsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDetailsById(_response);
      });
  }

  protected processGetDetailsById(response: AxiosResponse): Promise<InStorageDetailDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = InStorageDetailDto.fromJS(resultData200, _mappings);
      return Promise.resolve<InStorageDetailDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<InStorageDetailDto>(null as any);
  }

  /**
   * 获取编辑 入库
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetInStorageForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/InStorage/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetInStorageForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetInStorageForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetInStorageForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetInStorageForEditOutput>(null as any);
  }

  /**
   * 获取入库的分页列表信息
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param customerState (optional) 客户当前状态
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    customerState: CustomerState | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfInStorageListDto> {
    let url_ = this.baseUrl + '/api/services/app/InStorage/GetPaged?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (customerState === null) throw new Error("The parameter 'customerState' cannot be null.");
    else if (customerState !== undefined)
      url_ += 'customerState=' + encodeURIComponent('' + customerState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfInStorageListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfInStorageListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfInStorageListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfInStorageListDto>(null as any);
  }

  /**
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param customerState (optional) 客户当前状态
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getToExcelFile(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    customerState: CustomerState | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/InStorage/GetToExcelFile?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (customerState === null) throw new Error("The parameter 'customerState' cannot be null.");
    else if (customerState !== undefined)
      url_ += 'customerState=' + encodeURIComponent('' + customerState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class InvalidUserExporterServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  exportToFile(
    body: ImportUserDto[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/InvalidUserExporter/ExportToFile';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processExportToFile(_response);
      });
  }

  protected processExportToFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class Invoice_FinanceServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除Invoice_Finance的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Finance/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改财务开票的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateInvoice_FinanceInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Finance/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除财务开票信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Finance/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取Invoice_FinanceListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Invoice_FinanceListDto> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Finance/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<Invoice_FinanceListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Invoice_FinanceListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Invoice_FinanceListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Invoice_FinanceListDto>(null as any);
  }

  /**
   * 派单详情
   * @param id (optional)
   * @return Success
   */
  getDetailsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Invoice_FinanceDetailDto> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Finance/GetDetailsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDetailsById(_response);
      });
  }

  protected processGetDetailsById(response: AxiosResponse): Promise<Invoice_FinanceDetailDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Invoice_FinanceDetailDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Invoice_FinanceDetailDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Invoice_FinanceDetailDto>(null as any);
  }

  /**
   * 获取编辑 财务开票
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetInvoice_FinanceForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Finance/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetInvoice_FinanceForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetInvoice_FinanceForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetInvoice_FinanceForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetInvoice_FinanceForEditOutput>(null as any);
  }

  /**
   * 获取财务开票的分页列表信息
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfInvoice_FinanceListDto> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Finance/GetPaged?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfInvoice_FinanceListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfInvoice_FinanceListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfInvoice_FinanceListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfInvoice_FinanceListDto>(null as any);
  }

  /**
   * 导出为excel文件
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getToExcelFile(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Finance/GetToExcelFile?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class Invoice_SalesServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 审核开票
   * @param body (optional)
   * @return Success
   */
  approveDispatch(
    body: ApproveInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Sales/ApproveDispatch';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processApproveDispatch(_response);
      });
  }

  protected processApproveDispatch(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 批量删除Invoice_Sales的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Sales/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改销售开票管理的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateInvoice_SalesInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Sales/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除销售开票管理信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Sales/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取Invoice_SalesListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Invoice_SalesListDto> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Sales/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<Invoice_SalesListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Invoice_SalesListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Invoice_SalesListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Invoice_SalesListDto>(null as any);
  }

  /**
   * 根据入库列表 获取开票详情
   * @param id (optional)
   * @return Success
   */
  getDetailsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<InvoiceSalesDetails> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Sales/GetDetailsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDetailsById(_response);
      });
  }

  protected processGetDetailsById(response: AxiosResponse): Promise<InvoiceSalesDetails> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = InvoiceSalesDetails.fromJS(resultData200, _mappings);
      return Promise.resolve<InvoiceSalesDetails>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<InvoiceSalesDetails>(null as any);
  }

  /**
   * 获取编辑 销售开票管理
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetInvoice_SalesForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Sales/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetInvoice_SalesForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetInvoice_SalesForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetInvoice_SalesForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetInvoice_SalesForEditOutput>(null as any);
  }

  /**
   * 根据入库列表 获取开票详情
   * @param inStorageIdList (optional)
   * @return Success
   */
  getInvoiceSalesDetailsByInStorages(
    inStorageIdList: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Invoice_SalesDetailDto> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Sales/GetInvoiceSalesDetailsByInStorages?';
    if (inStorageIdList === null)
      throw new Error("The parameter 'inStorageIdList' cannot be null.");
    else if (inStorageIdList !== undefined)
      inStorageIdList &&
        inStorageIdList.forEach((item) => {
          url_ += 'inStorageIdList=' + encodeURIComponent('' + item) + '&';
        });
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetInvoiceSalesDetailsByInStorages(_response);
      });
  }

  protected processGetInvoiceSalesDetailsByInStorages(
    response: AxiosResponse,
  ): Promise<Invoice_SalesDetailDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Invoice_SalesDetailDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Invoice_SalesDetailDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Invoice_SalesDetailDto>(null as any);
  }

  /**
   * 获取销售开票管理的分页列表信息
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param approveState (optional) 状态
   * @param isInvoiced (optional) 是否排除已财务开票
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    approveState: ApproveState | undefined,
    isInvoiced: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfInvoice_SalesListDto> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Sales/GetPaged?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (approveState === null) throw new Error("The parameter 'approveState' cannot be null.");
    else if (approveState !== undefined)
      url_ += 'approveState=' + encodeURIComponent('' + approveState) + '&';
    if (isInvoiced === null) throw new Error("The parameter 'isInvoiced' cannot be null.");
    else if (isInvoiced !== undefined)
      url_ += 'isInvoiced=' + encodeURIComponent('' + isInvoiced) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfInvoice_SalesListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfInvoice_SalesListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfInvoice_SalesListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfInvoice_SalesListDto>(null as any);
  }

  /**
   * 导出为excel文件
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param approveState (optional) 状态
   * @param isInvoiced (optional) 是否排除已财务开票
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getToExcelFile(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    approveState: ApproveState | undefined,
    isInvoiced: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Sales/GetToExcelFile?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (approveState === null) throw new Error("The parameter 'approveState' cannot be null.");
    else if (approveState !== undefined)
      url_ += 'approveState=' + encodeURIComponent('' + approveState) + '&';
    if (isInvoiced === null) throw new Error("The parameter 'isInvoiced' cannot be null.");
    else if (isInvoiced !== undefined)
      url_ += 'isInvoiced=' + encodeURIComponent('' + isInvoiced) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 待开票查询分页服务
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param approveState (optional) 状态
   * @param isInvoiced (optional) 是否排除已财务开票
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWaitInvoicePaged(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    approveState: ApproveState | undefined,
    isInvoiced: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfInvoice_SalesListDto> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Sales/GetWaitInvoicePaged?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (approveState === null) throw new Error("The parameter 'approveState' cannot be null.");
    else if (approveState !== undefined)
      url_ += 'approveState=' + encodeURIComponent('' + approveState) + '&';
    if (isInvoiced === null) throw new Error("The parameter 'isInvoiced' cannot be null.");
    else if (isInvoiced !== undefined)
      url_ += 'isInvoiced=' + encodeURIComponent('' + isInvoiced) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWaitInvoicePaged(_response);
      });
  }

  protected processGetWaitInvoicePaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfInvoice_SalesListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfInvoice_SalesListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfInvoice_SalesListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfInvoice_SalesListDto>(null as any);
  }

  /**
   * 重新申请开票
   * @param invoiceSalesId (optional)
   * @return Success
   */
  restartDispatch(
    invoiceSalesId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Invoice_Sales/RestartDispatch?';
    if (invoiceSalesId === null) throw new Error("The parameter 'invoiceSalesId' cannot be null.");
    else if (invoiceSalesId !== undefined)
      url_ += 'invoiceSalesId=' + encodeURIComponent('' + invoiceSalesId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRestartDispatch(_response);
      });
  }

  protected processRestartDispatch(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }
}

export class InvoiceInformationServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除InvoiceInformation的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/InvoiceInformation/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改开票资料的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateInvoiceInformationInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/InvoiceInformation/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除开票资料信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/InvoiceInformation/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取InvoiceInformationListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<InvoiceInformationListDto> {
    let url_ = this.baseUrl + '/api/services/app/InvoiceInformation/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<InvoiceInformationListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = InvoiceInformationListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<InvoiceInformationListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<InvoiceInformationListDto>(null as any);
  }

  /**
   * 获取编辑 开票资料
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetInvoiceInformationForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/InvoiceInformation/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(
    response: AxiosResponse,
  ): Promise<GetInvoiceInformationForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetInvoiceInformationForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetInvoiceInformationForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetInvoiceInformationForEditOutput>(null as any);
  }

  /**
   * 获取开票信息前十条
   * @param filterText (optional) 企业名称和税号
   * @return Success
   */
  getInvoiceInformationList(
    filterText: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<InvoiceInformationListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/InvoiceInformation/GetInvoiceInformationList?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetInvoiceInformationList(_response);
      });
  }

  protected processGetInvoiceInformationList(
    response: AxiosResponse,
  ): Promise<InvoiceInformationListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(InvoiceInformationListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<InvoiceInformationListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<InvoiceInformationListDto[]>(null as any);
  }

  /**
   * 获取开票资料的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfInvoiceInformationListDto> {
    let url_ = this.baseUrl + '/api/services/app/InvoiceInformation/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfInvoiceInformationListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfInvoiceInformationListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfInvoiceInformationListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfInvoiceInformationListDto>(null as any);
  }

  /**
   * 导出为excel文件
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getToExcelFile(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/InvoiceInformation/GetToExcelFile?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class LanguageServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Language/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  createOrUpdateLanguage(
    body: CreateOrUpdateLanguageInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Language/CreateOrUpdateLanguage';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateLanguage(_response);
      });
  }

  protected processCreateOrUpdateLanguage(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  deleteLanguage(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Language/DeleteLanguage?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteLanguage(_response);
      });
  }

  protected processDeleteLanguage(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  getLanguageForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetLanguageForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Language/GetLanguageForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetLanguageForEdit(_response);
      });
  }

  protected processGetLanguageForEdit(response: AxiosResponse): Promise<GetLanguageForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetLanguageForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetLanguageForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetLanguageForEditOutput>(null as any);
  }

  /**
   * @return Success
   */
  getLanguages(cancelToken?: CancelToken | undefined): Promise<GetLanguagesOutput> {
    let url_ = this.baseUrl + '/api/services/app/Language/GetLanguages';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetLanguages(_response);
      });
  }

  protected processGetLanguages(response: AxiosResponse): Promise<GetLanguagesOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetLanguagesOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetLanguagesOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetLanguagesOutput>(null as any);
  }

  /**
   * @param sourceName 语言名称
   * @param baseLanguageName (optional) 原语言名称
   * @param targetLanguageName 目标语言名称
   * @param targetValueFilter (optional) 目标值过滤
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getLanguageTexts(
    sourceName: string,
    baseLanguageName: string | undefined,
    targetLanguageName: string,
    targetValueFilter: string | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfLanguageTextListDto> {
    let url_ = this.baseUrl + '/api/services/app/Language/GetLanguageTexts?';
    if (sourceName === undefined || sourceName === null)
      throw new Error("The parameter 'sourceName' must be defined and cannot be null.");
    else url_ += 'sourceName=' + encodeURIComponent('' + sourceName) + '&';
    if (baseLanguageName === null)
      throw new Error("The parameter 'baseLanguageName' cannot be null.");
    else if (baseLanguageName !== undefined)
      url_ += 'baseLanguageName=' + encodeURIComponent('' + baseLanguageName) + '&';
    if (targetLanguageName === undefined || targetLanguageName === null)
      throw new Error("The parameter 'targetLanguageName' must be defined and cannot be null.");
    else url_ += 'targetLanguageName=' + encodeURIComponent('' + targetLanguageName) + '&';
    if (targetValueFilter === null)
      throw new Error("The parameter 'targetValueFilter' cannot be null.");
    else if (targetValueFilter !== undefined)
      url_ += 'targetValueFilter=' + encodeURIComponent('' + targetValueFilter) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetLanguageTexts(_response);
      });
  }

  protected processGetLanguageTexts(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfLanguageTextListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfLanguageTextListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfLanguageTextListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfLanguageTextListDto>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  setDefaultLanguage(
    body: SetDefaultLanguageInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Language/SetDefaultLanguage';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSetDefaultLanguage(_response);
      });
  }

  protected processSetDefaultLanguage(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 修改语言的文本内容
   * @param body (optional)
   * @return Success
   */
  updateLanguageText(
    body: UpdateLanguageTextInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Language/UpdateLanguageText';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateLanguageText(_response);
      });
  }

  protected processUpdateLanguageText(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class LogisticsCompanyServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除LogisticsCompany的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/LogisticsCompany/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改物流公司的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateLogisticsCompanyInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/LogisticsCompany/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除物流公司信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/LogisticsCompany/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取LogisticsCompanyListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<LogisticsCompanyListDto> {
    let url_ = this.baseUrl + '/api/services/app/LogisticsCompany/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<LogisticsCompanyListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LogisticsCompanyListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<LogisticsCompanyListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<LogisticsCompanyListDto>(null as any);
  }

  /**
   * 获取编辑 物流公司
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetLogisticsCompanyForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/LogisticsCompany/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetLogisticsCompanyForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetLogisticsCompanyForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetLogisticsCompanyForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetLogisticsCompanyForEditOutput>(null as any);
  }

  /**
   * 获取物流公司前十条
   * @param filterText (optional) 企业名称和税号
   * @return Success
   */
  getInvoiceInformationList(
    filterText: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<LogisticsCompanyListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/LogisticsCompany/GetInvoiceInformationList?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetInvoiceInformationList(_response);
      });
  }

  protected processGetInvoiceInformationList(
    response: AxiosResponse,
  ): Promise<LogisticsCompanyListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(LogisticsCompanyListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<LogisticsCompanyListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<LogisticsCompanyListDto[]>(null as any);
  }

  /**
   * 获取物流公司的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfLogisticsCompanyListDto> {
    let url_ = this.baseUrl + '/api/services/app/LogisticsCompany/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfLogisticsCompanyListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfLogisticsCompanyListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfLogisticsCompanyListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfLogisticsCompanyListDto>(null as any);
  }

  /**
   * 导出物流公司为excel文件
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getToExcelFile(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/LogisticsCompany/GetToExcelFile?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class NewsListServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除NewsList的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/NewsList/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: NewsListEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/NewsList/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/NewsList/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取NewsListListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<NewsListListDto> {
    let url_ = this.baseUrl + '/api/services/app/NewsList/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<NewsListListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NewsListListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<NewsListListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<NewsListListDto>(null as any);
  }

  /**
   * 获取最新的一笔资讯
   * @return Success
   */
  getLatestNews(cancelToken?: CancelToken | undefined): Promise<NewsListListDto> {
    let url_ = this.baseUrl + '/api/services/app/NewsList/GetLatestNews';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetLatestNews(_response);
      });
  }

  protected processGetLatestNews(response: AxiosResponse): Promise<NewsListListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NewsListListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<NewsListListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<NewsListListDto>(null as any);
  }

  /**
   * 获取的分页列表信息
   * @param isRead (optional) 是否已读，true：已读，false：未读
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    isRead: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfNewsListListDto> {
    let url_ = this.baseUrl + '/api/services/app/NewsList/GetPaged?';
    if (isRead === null) throw new Error("The parameter 'isRead' cannot be null.");
    else if (isRead !== undefined) url_ += 'isRead=' + encodeURIComponent('' + isRead) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfNewsListListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfNewsListListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfNewsListListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfNewsListListDto>(null as any);
  }

  /**
   * 标记已读
   * @param body (optional)
   * @return Success
   */
  readNews(
    body: EntityDtoOfInt64 | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/NewsList/ReadNews';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processReadNews(_response);
      });
  }

  protected processReadNews(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class NotificationServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 删除通知
   * @param id (optional)
   * @return Success
   */
  deleteNotification(id: string | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Notification/DeleteNotification?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteNotification(_response);
      });
  }

  protected processDeleteNotification(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  getNotificationSettings(
    cancelToken?: CancelToken | undefined,
  ): Promise<GetNotificationSettingsOutput> {
    let url_ = this.baseUrl + '/api/services/app/Notification/GetNotificationSettings';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetNotificationSettings(_response);
      });
  }

  protected processGetNotificationSettings(
    response: AxiosResponse,
  ): Promise<GetNotificationSettingsOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetNotificationSettingsOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetNotificationSettingsOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetNotificationSettingsOutput>(null as any);
  }

  /**
   * @param state (optional) 是否阅读枚举 0是未读 1是已经阅读
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPagedUserNotifications(
    state: UserNotificationState | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetNotificationsOutput> {
    let url_ = this.baseUrl + '/api/services/app/Notification/GetPagedUserNotifications?';
    if (state === null) throw new Error("The parameter 'state' cannot be null.");
    else if (state !== undefined) url_ += 'state=' + encodeURIComponent('' + state) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPagedUserNotifications(_response);
      });
  }

  protected processGetPagedUserNotifications(
    response: AxiosResponse,
  ): Promise<GetNotificationsOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetNotificationsOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetNotificationsOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetNotificationsOutput>(null as any);
  }

  /**
   * @return Success
   */
  getUnReadCount(cancelToken?: CancelToken | undefined): Promise<number> {
    let url_ = this.baseUrl + '/api/services/app/Notification/GetUnReadCount';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUnReadCount(_response);
      });
  }

  protected processGetUnReadCount(response: AxiosResponse): Promise<number> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<number>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<number>(null as any);
  }

  /**
   * @param tenantId (optional)
   * @param userId (optional)
   * @param state (optional)
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @param sorting (optional)
   * @param startDate (optional)
   * @param endDate (optional)
   * @return Success
   */
  getUserNotifications(
    tenantId: number | undefined,
    userId: number | undefined,
    state: UserNotificationState | undefined,
    skipCount: number | undefined,
    maxResultCount: number | undefined,
    sorting: string | undefined,
    startDate: dayjs.Dayjs | undefined,
    endDate: dayjs.Dayjs | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<UserNotification[]> {
    let url_ = this.baseUrl + '/api/services/app/Notification/GetUserNotifications?';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    if (state === null) throw new Error("The parameter 'state' cannot be null.");
    else if (state !== undefined) url_ += 'state=' + encodeURIComponent('' + state) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (startDate === null) throw new Error("The parameter 'startDate' cannot be null.");
    else if (startDate !== undefined)
      url_ +=
        'startDate=' + encodeURIComponent(startDate ? '' + startDate.toISOString() : '') + '&';
    if (endDate === null) throw new Error("The parameter 'endDate' cannot be null.");
    else if (endDate !== undefined)
      url_ += 'endDate=' + encodeURIComponent(endDate ? '' + endDate.toISOString() : '') + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUserNotifications(_response);
      });
  }

  protected processGetUserNotifications(response: AxiosResponse): Promise<UserNotification[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(UserNotification.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<UserNotification[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<UserNotification[]>(null as any);
  }

  /**
   * @param tenantId (optional)
   * @param userId (optional)
   * @param state (optional)
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @param sorting (optional)
   * @param startDate (optional)
   * @param endDate (optional)
   * @return Success
   */
  getUserNotificationsWithNotifications(
    tenantId: number | undefined,
    userId: number | undefined,
    state: UserNotificationState | undefined,
    skipCount: number | undefined,
    maxResultCount: number | undefined,
    sorting: string | undefined,
    startDate: dayjs.Dayjs | undefined,
    endDate: dayjs.Dayjs | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<UserNotificationInfoWithNotificationInfo[]> {
    let url_ =
      this.baseUrl + '/api/services/app/Notification/GetUserNotificationsWithNotifications?';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    if (state === null) throw new Error("The parameter 'state' cannot be null.");
    else if (state !== undefined) url_ += 'state=' + encodeURIComponent('' + state) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (startDate === null) throw new Error("The parameter 'startDate' cannot be null.");
    else if (startDate !== undefined)
      url_ +=
        'startDate=' + encodeURIComponent(startDate ? '' + startDate.toISOString() : '') + '&';
    if (endDate === null) throw new Error("The parameter 'endDate' cannot be null.");
    else if (endDate !== undefined)
      url_ += 'endDate=' + encodeURIComponent(endDate ? '' + endDate.toISOString() : '') + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUserNotificationsWithNotifications(_response);
      });
  }

  protected processGetUserNotificationsWithNotifications(
    response: AxiosResponse,
  ): Promise<UserNotificationInfoWithNotificationInfo[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(UserNotificationInfoWithNotificationInfo.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<UserNotificationInfoWithNotificationInfo[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<UserNotificationInfoWithNotificationInfo[]>(null as any);
  }

  /**
   * @return Success
   */
  makeAllUserNotificationsAsRead(cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Notification/MakeAllUserNotificationsAsRead';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processMakeAllUserNotificationsAsRead(_response);
      });
  }

  protected processMakeAllUserNotificationsAsRead(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  makeNotificationAsRead(
    body: EntityDtoOfGuid | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Notification/MakeNotificationAsRead';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processMakeNotificationAsRead(_response);
      });
  }

  protected processMakeNotificationAsRead(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param msg (optional)
   * @param tenantId (optional)
   * @param userId (optional)
   * @return Success
   */
  sendNoticeToUser(
    msg: string | undefined,
    tenantId: number | undefined,
    userId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Notification/SendNoticeToUser?';
    if (msg === null) throw new Error("The parameter 'msg' cannot be null.");
    else if (msg !== undefined) url_ += 'msg=' + encodeURIComponent('' + msg) + '&';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSendNoticeToUser(_response);
      });
  }

  protected processSendNoticeToUser(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 更新消息设置
   * @param body (optional)
   * @return Success
   */
  updateNotificationSettings(
    body: UpdateNotificationSettingsInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Notification/UpdateNotificationSettings';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateNotificationSettings(_response);
      });
  }

  protected processUpdateNotificationSettings(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class OcrServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param imgPath (optional)
   * @return Success
   */
  getBusinessLicense(
    imgPath: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Business_license> {
    let url_ = this.baseUrl + '/api/services/app/Ocr/GetBusinessLicense?';
    if (imgPath === null) throw new Error("The parameter 'imgPath' cannot be null.");
    else if (imgPath !== undefined) url_ += 'imgPath=' + encodeURIComponent('' + imgPath) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetBusinessLicense(_response);
      });
  }

  protected processGetBusinessLicense(response: AxiosResponse): Promise<Business_license> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Business_license.fromJS(resultData200, _mappings);
      return Promise.resolve<Business_license>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Business_license>(null as any);
  }
}

export class Order_OrderServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除Order_Order的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除Oder_detail的方法
   * @param body (optional)
   * @return Success
   */
  batchOrderDetailDelete(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/BatchOrderDetailDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchOrderDetailDelete(_response);
      });
  }

  protected processBatchOrderDetailDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除车辆信息的方法
   * @param body (optional)
   * @return Success
   */
  batchVehicleDelete(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/BatchVehicleDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchVehicleDelete(_response);
      });
  }

  protected processBatchVehicleDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改主订单的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateOrder_OrderInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除主订单信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 获取所有子订单
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getAllSonList(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Order_OrderDetailListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetAllSonList?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllSonList(_response);
      });
  }

  protected processGetAllSonList(response: AxiosResponse): Promise<Order_OrderDetailListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(Order_OrderDetailListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Order_OrderDetailListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Order_OrderDetailListDto[]>(null as any);
  }

  /**
   * 通过指定id获取Order_OrderListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Order_OrderListDto> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<Order_OrderListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Order_OrderListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Order_OrderListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Order_OrderListDto>(null as any);
  }

  /**
   * 司机押运员订单详情
   * @param orderDetailId (optional)
   * @return Success
   */
  getDriverOrEscortOrderDetailById(
    orderDetailId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DriverOrEscortOrderDto> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetDriverOrEscortOrderDetailById?';
    if (orderDetailId === null) throw new Error("The parameter 'orderDetailId' cannot be null.");
    else if (orderDetailId !== undefined)
      url_ += 'orderDetailId=' + encodeURIComponent('' + orderDetailId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDriverOrEscortOrderDetailById(_response);
      });
  }

  protected processGetDriverOrEscortOrderDetailById(
    response: AxiosResponse,
  ): Promise<DriverOrEscortOrderDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DriverOrEscortOrderDto.fromJS(resultData200, _mappings);
      return Promise.resolve<DriverOrEscortOrderDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DriverOrEscortOrderDto>(null as any);
  }

  /**
   * 司机押运员订单列表
   * @param startDateTime (optional) 开始时间
   * @param endDateTime (optional) 结束时间
   * @param state (optional) 状态   1:待执行 2:运输中 3:已完成  5:未完成（1:待执行 2:运输中）
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getDriverOrEscortOrderList(
    startDateTime: dayjs.Dayjs | undefined,
    endDateTime: dayjs.Dayjs | undefined,
    state: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfDriverOrEscortOrderDto> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetDriverOrEscortOrderList?';
    if (startDateTime === null) throw new Error("The parameter 'startDateTime' cannot be null.");
    else if (startDateTime !== undefined)
      url_ +=
        'startDateTime=' +
        encodeURIComponent(startDateTime ? '' + startDateTime.toISOString() : '') +
        '&';
    if (endDateTime === null) throw new Error("The parameter 'endDateTime' cannot be null.");
    else if (endDateTime !== undefined)
      url_ +=
        'endDateTime=' +
        encodeURIComponent(endDateTime ? '' + endDateTime.toISOString() : '') +
        '&';
    if (state === null) throw new Error("The parameter 'state' cannot be null.");
    else if (state !== undefined) url_ += 'state=' + encodeURIComponent('' + state) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDriverOrEscortOrderList(_response);
      });
  }

  protected processGetDriverOrEscortOrderList(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfDriverOrEscortOrderDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfDriverOrEscortOrderDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfDriverOrEscortOrderDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfDriverOrEscortOrderDto>(null as any);
  }

  /**
   * 导出子订单列表
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getExcelForSonOrderFromPlatform(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetExcelForSonOrderFromPlatform?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetExcelForSonOrderFromPlatform(_response);
      });
  }

  protected processGetExcelForSonOrderFromPlatform(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 获取编辑 主订单
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetOrder_OrderForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetOrder_OrderForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetOrder_OrderForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetOrder_OrderForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetOrder_OrderForEditOutput>(null as any);
  }

  /**
   * 获取详细订单下车辆详情
   * @param id (optional)
   * @return Success
   */
  getOrderVehicleById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Order_VehiclesListDto> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetOrderVehicleById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrderVehicleById(_response);
      });
  }

  protected processGetOrderVehicleById(response: AxiosResponse): Promise<Order_VehiclesListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Order_VehiclesListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Order_VehiclesListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Order_VehiclesListDto>(null as any);
  }

  /**
   * 获取主订单的分页列表信息
   * @param selfCreate (optional) 本地创建 true:兰陵万里创建  false:运费系统同步
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    selfCreate: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfOrder_OrderListDto> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetPaged?';
    if (selfCreate === null) throw new Error("The parameter 'selfCreate' cannot be null.");
    else if (selfCreate !== undefined)
      url_ += 'selfCreate=' + encodeURIComponent('' + selfCreate) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfOrder_OrderListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfOrder_OrderListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfOrder_OrderListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfOrder_OrderListDto>(null as any);
  }

  /**
   * 简版订单查询列表
   * @param orderVehicleId (optional)
   * @return Success
   */
  getSampleOrderDetailById(
    orderVehicleId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Simple_OrderDetailDto> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetSampleOrderDetailById?';
    if (orderVehicleId === null) throw new Error("The parameter 'orderVehicleId' cannot be null.");
    else if (orderVehicleId !== undefined)
      url_ += 'orderVehicleId=' + encodeURIComponent('' + orderVehicleId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetSampleOrderDetailById(_response);
      });
  }

  protected processGetSampleOrderDetailById(
    response: AxiosResponse,
  ): Promise<Simple_OrderDetailDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Simple_OrderDetailDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Simple_OrderDetailDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Simple_OrderDetailDto>(null as any);
  }

  /**
   * 简版订单查询列表
   * @param searchDate (optional) 查询的日期，默认当天
   * @param vehicleHeadNumber (optional) 车头号码
   * @return Success
   */
  getSampleOrderList(
    searchDate: dayjs.Dayjs | undefined,
    vehicleHeadNumber: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Simple_OrderListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetSampleOrderList?';
    if (searchDate === null) throw new Error("The parameter 'searchDate' cannot be null.");
    else if (searchDate !== undefined)
      url_ +=
        'searchDate=' + encodeURIComponent(searchDate ? '' + searchDate.toISOString() : '') + '&';
    if (vehicleHeadNumber === null)
      throw new Error("The parameter 'vehicleHeadNumber' cannot be null.");
    else if (vehicleHeadNumber !== undefined)
      url_ += 'vehicleHeadNumber=' + encodeURIComponent('' + vehicleHeadNumber) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetSampleOrderList(_response);
      });
  }

  protected processGetSampleOrderList(response: AxiosResponse): Promise<Simple_OrderListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(Simple_OrderListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Simple_OrderListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Simple_OrderListDto[]>(null as any);
  }

  /**
   * 简版订单查询列表
   * @param searchDate (optional) 查询的日期，默认当天
   * @param vehicleHeadNumber (optional) 车头号码
   * @return Success
   */
  getSampleOrderList1(
    searchDate: dayjs.Dayjs | undefined,
    vehicleHeadNumber: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Simple_OrderListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetSampleOrderList1?';
    if (searchDate === null) throw new Error("The parameter 'searchDate' cannot be null.");
    else if (searchDate !== undefined)
      url_ +=
        'searchDate=' + encodeURIComponent(searchDate ? '' + searchDate.toISOString() : '') + '&';
    if (vehicleHeadNumber === null)
      throw new Error("The parameter 'vehicleHeadNumber' cannot be null.");
    else if (vehicleHeadNumber !== undefined)
      url_ += 'vehicleHeadNumber=' + encodeURIComponent('' + vehicleHeadNumber) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetSampleOrderList1(_response);
      });
  }

  protected processGetSampleOrderList1(response: AxiosResponse): Promise<Simple_OrderListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(Simple_OrderListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Simple_OrderListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Simple_OrderListDto[]>(null as any);
  }

  /**
   * 根据车头ID、时间范围，获取左侧订单结束时间、右侧订单开始时间。和左侧订单的车挂、司机、押运员信息
   * @param vehicleId (optional)
   * @param minDateTime (optional)
   * @param maxDateTime (optional)
   * @return Success
   */
  getSampleOrderTimeRange(
    vehicleId: number | undefined,
    minDateTime: dayjs.Dayjs | undefined,
    maxDateTime: dayjs.Dayjs | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Simple_OrderTimeRangeDto> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetSampleOrderTimeRange?';
    if (vehicleId === null) throw new Error("The parameter 'vehicleId' cannot be null.");
    else if (vehicleId !== undefined)
      url_ += 'vehicleId=' + encodeURIComponent('' + vehicleId) + '&';
    if (minDateTime === null) throw new Error("The parameter 'minDateTime' cannot be null.");
    else if (minDateTime !== undefined)
      url_ +=
        'minDateTime=' +
        encodeURIComponent(minDateTime ? '' + minDateTime.toISOString() : '') +
        '&';
    if (maxDateTime === null) throw new Error("The parameter 'maxDateTime' cannot be null.");
    else if (maxDateTime !== undefined)
      url_ +=
        'maxDateTime=' +
        encodeURIComponent(maxDateTime ? '' + maxDateTime.toISOString() : '') +
        '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetSampleOrderTimeRange(_response);
      });
  }

  protected processGetSampleOrderTimeRange(
    response: AxiosResponse,
  ): Promise<Simple_OrderTimeRangeDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Simple_OrderTimeRangeDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Simple_OrderTimeRangeDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Simple_OrderTimeRangeDto>(null as any);
  }

  /**
   * 通过指定id获取子订单详情
   * @param id (optional)
   * @return Success
   */
  getSonOrderById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Order_OrderDetailListDto> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetSonOrderById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetSonOrderById(_response);
      });
  }

  protected processGetSonOrderById(response: AxiosResponse): Promise<Order_OrderDetailListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Order_OrderDetailListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Order_OrderDetailListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Order_OrderDetailListDto>(null as any);
  }

  /**
   * 【平台专用】通过指定id获取子订单详情
   * @param id (optional)
   * @return Success
   */
  getSonOrderByIdFromPlatform(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Order_OrderDetailListDto> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetSonOrderByIdFromPlatform?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetSonOrderByIdFromPlatform(_response);
      });
  }

  protected processGetSonOrderByIdFromPlatform(
    response: AxiosResponse,
  ): Promise<Order_OrderDetailListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Order_OrderDetailListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Order_OrderDetailListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Order_OrderDetailListDto>(null as any);
  }

  /**
   * 获取子订单的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getSonPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfOrder_OrderDetailListDto> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetSonPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetSonPaged(_response);
      });
  }

  protected processGetSonPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfOrder_OrderDetailListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfOrder_OrderDetailListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfOrder_OrderDetailListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfOrder_OrderDetailListDto>(null as any);
  }

  /**
   * 【平台专用】获取子订单的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getSonPagedFromPlatform(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfOrder_OrderDetailListDto> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/GetSonPagedFromPlatform?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetSonPagedFromPlatform(_response);
      });
  }

  protected processGetSonPagedFromPlatform(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfOrder_OrderDetailListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfOrder_OrderDetailListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfOrder_OrderDetailListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfOrder_OrderDetailListDto>(null as any);
  }

  /**
   * 地点格式化
   * @param body (optional)
   * @return Success
   */
  loadingPointStrFormart(
    body: Transability_LoadingUnloadingPoint | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/LoadingPointStrFormart';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processLoadingPointStrFormart(_response);
      });
  }

  protected processLoadingPointStrFormart(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }

  /**
   * 添加或者修改主订单的公共方法
   * @param body (optional)
   * @return Success
   */
  simpleOrderCreateOrUpdate(
    body: Simple_OrderDetailEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/SimpleOrderCreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSimpleOrderCreateOrUpdate(_response);
      });
  }

  protected processSimpleOrderCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除可视化订单信息
   * @param body (optional)
   * @return Success
   */
  simpleOrderDelete(
    body: EntityDtoOfInt64 | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Order_Order/SimpleOrderDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSimpleOrderDelete(_response);
      });
  }

  protected processSimpleOrderDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class OrganizationUnitServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 添加角色 组织关联
   * @param body (optional)
   * @return Success
   */
  addRoles(
    body: RolesToOrganizationUnitInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/AddRoles';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAddRoles(_response);
      });
  }

  protected processAddRoles(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  addUsers(
    body: UsersToOrganizationUnitInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/AddUsers';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAddUsers(_response);
      });
  }

  protected processAddUsers(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量从组织中移除角色
   * @param organizationUnitId (optional)
   * @param body (optional)
   * @return Success
   */
  batchRemoveRoleFromOrganizationUnit(
    organizationUnitId: number | undefined,
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ =
      this.baseUrl + '/api/services/app/OrganizationUnit/BatchRemoveRoleFromOrganizationUnit?';
    if (organizationUnitId === null)
      throw new Error("The parameter 'organizationUnitId' cannot be null.");
    else if (organizationUnitId !== undefined)
      url_ += 'organizationUnitId=' + encodeURIComponent('' + organizationUnitId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchRemoveRoleFromOrganizationUnit(_response);
      });
  }

  protected processBatchRemoveRoleFromOrganizationUnit(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量从组织中移除用户
   * @param organizationUnitId (optional) 组织机构Id
   * @param body (optional) 用户Id列表
   * @return Success
   */
  batchRemoveUserFromOrganizationUnit(
    organizationUnitId: number | undefined,
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ =
      this.baseUrl + '/api/services/app/OrganizationUnit/BatchRemoveUserFromOrganizationUnit?';
    if (organizationUnitId === null)
      throw new Error("The parameter 'organizationUnitId' cannot be null.");
    else if (organizationUnitId !== undefined)
      url_ += 'organizationUnitId=' + encodeURIComponent('' + organizationUnitId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchRemoveUserFromOrganizationUnit(_response);
      });
  }

  protected processBatchRemoveUserFromOrganizationUnit(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  create(
    body: CreateOrganizationUnitInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<OrganizationUnitListDto> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/Create';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<OrganizationUnitListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = OrganizationUnitListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<OrganizationUnitListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<OrganizationUnitListDto>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  findRoles(
    body: FindUsersInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfNameValueDto> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/FindRoles';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processFindRoles(_response);
      });
  }

  protected processFindRoles(response: AxiosResponse): Promise<PagedResultDtoOfNameValueDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfNameValueDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfNameValueDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfNameValueDto>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  findUsers(
    body: FindUsersInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfNameValueDto> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/FindUsers';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processFindUsers(_response);
      });
  }

  protected processFindUsers(response: AxiosResponse): Promise<PagedResultDtoOfNameValueDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfNameValueDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfNameValueDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfNameValueDto>(null as any);
  }

  /**
   * @return Success
   */
  getAllOrganizationUnitList(
    cancelToken?: CancelToken | undefined,
  ): Promise<ListResultDtoOfOrganizationUnitListDto> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/GetAllOrganizationUnitList';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllOrganizationUnitList(_response);
      });
  }

  protected processGetAllOrganizationUnitList(
    response: AxiosResponse,
  ): Promise<ListResultDtoOfOrganizationUnitListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ListResultDtoOfOrganizationUnitListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ListResultDtoOfOrganizationUnitListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ListResultDtoOfOrganizationUnitListDto>(null as any);
  }

  /**
   * 获取角色列表
   * @param id (optional)
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPagedOrganizationUnitRoles(
    id: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfOrganizationUnitRoleListDto> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/GetPagedOrganizationUnitRoles?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPagedOrganizationUnitRoles(_response);
      });
  }

  protected processGetPagedOrganizationUnitRoles(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfOrganizationUnitRoleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfOrganizationUnitRoleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfOrganizationUnitRoleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfOrganizationUnitRoleListDto>(null as any);
  }

  /**
   * @param id (optional)
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPagedOrganizationUnitUsers(
    id: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfOrganizationUnitUserListDto> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/GetPagedOrganizationUnitUsers?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPagedOrganizationUnitUsers(_response);
      });
  }

  protected processGetPagedOrganizationUnitUsers(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfOrganizationUnitUserListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfOrganizationUnitUserListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfOrganizationUnitUserListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfOrganizationUnitUserListDto>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  isInOrganizationUnit(
    body: UserToOrganizationUnitInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/IsInOrganizationUnit';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processIsInOrganizationUnit(_response);
      });
  }

  protected processIsInOrganizationUnit(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  move(
    body: MoveOrganizationUnitInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<OrganizationUnitListDto> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/Move';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processMove(_response);
      });
  }

  protected processMove(response: AxiosResponse): Promise<OrganizationUnitListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = OrganizationUnitListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<OrganizationUnitListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<OrganizationUnitListDto>(null as any);
  }

  /**
   * 删除 角色 组织关联
   * @param roleId (optional)
   * @param organizationUnitId (optional)
   * @return Success
   */
  removeRole(
    roleId: number | undefined,
    organizationUnitId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/RemoveRole?';
    if (roleId === null) throw new Error("The parameter 'roleId' cannot be null.");
    else if (roleId !== undefined) url_ += 'roleId=' + encodeURIComponent('' + roleId) + '&';
    if (organizationUnitId === null)
      throw new Error("The parameter 'organizationUnitId' cannot be null.");
    else if (organizationUnitId !== undefined)
      url_ += 'organizationUnitId=' + encodeURIComponent('' + organizationUnitId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRemoveRole(_response);
      });
  }

  protected processRemoveRole(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param userId (optional)
   * @param organizationUnitId (optional)
   * @return Success
   */
  removeUser(
    userId: number | undefined,
    organizationUnitId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/RemoveUser?';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    if (organizationUnitId === null)
      throw new Error("The parameter 'organizationUnitId' cannot be null.");
    else if (organizationUnitId !== undefined)
      url_ += 'organizationUnitId=' + encodeURIComponent('' + organizationUnitId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRemoveUser(_response);
      });
  }

  protected processRemoveUser(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 判断角色是否在当前组织
   * @param body (optional)
   * @return Success
   */
  rolesIsInOrganizationUnit(
    body: RoleToOrganizationUnitInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/RolesIsInOrganizationUnit';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRolesIsInOrganizationUnit(_response);
      });
  }

  protected processRolesIsInOrganizationUnit(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  update(
    body: UpdateOrganizationUnitInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<OrganizationUnitListDto> {
    let url_ = this.baseUrl + '/api/services/app/OrganizationUnit/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<OrganizationUnitListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = OrganizationUnitListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<OrganizationUnitListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<OrganizationUnitListDto>(null as any);
  }
}

export class PaymentCollectionServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除PaymentCollection的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/PaymentCollection/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改回款的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdatePaymentCollectionInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/PaymentCollection/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除回款信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/PaymentCollection/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取PaymentCollectionListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PaymentCollectionListDto> {
    let url_ = this.baseUrl + '/api/services/app/PaymentCollection/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<PaymentCollectionListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PaymentCollectionListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PaymentCollectionListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PaymentCollectionListDto>(null as any);
  }

  /**
   * 回款详情
   * @param id (optional)
   * @return Success
   */
  getDetailsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PaymentCollectionDetailtDto> {
    let url_ = this.baseUrl + '/api/services/app/PaymentCollection/GetDetailsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDetailsById(_response);
      });
  }

  protected processGetDetailsById(response: AxiosResponse): Promise<PaymentCollectionDetailtDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PaymentCollectionDetailtDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PaymentCollectionDetailtDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PaymentCollectionDetailtDto>(null as any);
  }

  /**
   * 获取编辑 回款
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetPaymentCollectionForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/PaymentCollection/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetPaymentCollectionForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetPaymentCollectionForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetPaymentCollectionForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetPaymentCollectionForEditOutput>(null as any);
  }

  /**
   * 获取回款的分页列表信息
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfPaymentCollectionListDto> {
    let url_ = this.baseUrl + '/api/services/app/PaymentCollection/GetPaged?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfPaymentCollectionListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfPaymentCollectionListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfPaymentCollectionListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfPaymentCollectionListDto>(null as any);
  }

  /**
   * 导出excel文件
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getToExcelFile(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/PaymentCollection/GetToExcelFile?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class PermissionServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  getAllPermissions(
    cancelToken?: CancelToken | undefined,
  ): Promise<ListResultDtoOfFlatPermissionWithLevelDto> {
    let url_ = this.baseUrl + '/api/services/app/Permission/GetAllPermissions';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllPermissions(_response);
      });
  }

  protected processGetAllPermissions(
    response: AxiosResponse,
  ): Promise<ListResultDtoOfFlatPermissionWithLevelDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ListResultDtoOfFlatPermissionWithLevelDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ListResultDtoOfFlatPermissionWithLevelDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ListResultDtoOfFlatPermissionWithLevelDto>(null as any);
  }

  /**
   * @return Success
   */
  getAllPermissionsTree(
    cancelToken?: CancelToken | undefined,
  ): Promise<ListResultDtoOfTreePermissionDto> {
    let url_ = this.baseUrl + '/api/services/app/Permission/GetAllPermissionsTree';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllPermissionsTree(_response);
      });
  }

  protected processGetAllPermissionsTree(
    response: AxiosResponse,
  ): Promise<ListResultDtoOfTreePermissionDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ListResultDtoOfTreePermissionDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ListResultDtoOfTreePermissionDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ListResultDtoOfTreePermissionDto>(null as any);
  }
}

export class ProfileServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  changeLanguage(
    body: ChangeUserLanguageDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Profile/ChangeLanguage';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processChangeLanguage(_response);
      });
  }

  protected processChangeLanguage(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  changePassword(
    body: ChangePasswordInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Profile/ChangePassword';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processChangePassword(_response);
      });
  }

  protected processChangePassword(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除用户头像
   * @param profilePictureId (optional) 头像ID
   * @return Success
   */
  deleteProfilePictureById(
    profilePictureId: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Profile/DeleteProfilePictureById?';
    if (profilePictureId === null)
      throw new Error("The parameter 'profilePictureId' cannot be null.");
    else if (profilePictureId !== undefined)
      url_ += 'profilePictureId=' + encodeURIComponent('' + profilePictureId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteProfilePictureById(_response);
      });
  }

  protected processDeleteProfilePictureById(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 获取当前的个人信息
   * @return Success
   */
  getCurrentUserProfileForEdit(
    cancelToken?: CancelToken | undefined,
  ): Promise<CurrentUserProfileEditDto> {
    let url_ = this.baseUrl + '/api/services/app/Profile/GetCurrentUserProfileForEdit';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCurrentUserProfileForEdit(_response);
      });
  }

  protected processGetCurrentUserProfileForEdit(
    response: AxiosResponse,
  ): Promise<CurrentUserProfileEditDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = CurrentUserProfileEditDto.fromJS(resultData200, _mappings);
      return Promise.resolve<CurrentUserProfileEditDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CurrentUserProfileEditDto>(null as any);
  }

  /**
   * @param profilePictureId (optional)
   * @return Success
   */
  getProfilePictureById(
    profilePictureId: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetProfilePictureOutputDto> {
    let url_ = this.baseUrl + '/api/services/app/Profile/GetProfilePictureById?';
    if (profilePictureId === null)
      throw new Error("The parameter 'profilePictureId' cannot be null.");
    else if (profilePictureId !== undefined)
      url_ += 'profilePictureId=' + encodeURIComponent('' + profilePictureId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetProfilePictureById(_response);
      });
  }

  protected processGetProfilePictureById(
    response: AxiosResponse,
  ): Promise<GetProfilePictureOutputDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetProfilePictureOutputDto.fromJS(resultData200, _mappings);
      return Promise.resolve<GetProfilePictureOutputDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetProfilePictureOutputDto>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  updateCurrentUserProfile(
    body: CurrentUserProfileEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Profile/UpdateCurrentUserProfile';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateCurrentUserProfile(_response);
      });
  }

  protected processUpdateCurrentUserProfile(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  updateProfilePicture(
    body: UpdateProfilePictureInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Profile/UpdateProfilePicture';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateProfilePicture(_response);
      });
  }

  protected processUpdateProfilePicture(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class PurchaseServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  createPay(
    body: PurchasePayInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/Purchase/CreatePay';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreatePay(_response);
      });
  }

  protected processCreatePay(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }

  /**
   * @return Success
   */
  getRandom3(cancelToken?: CancelToken | undefined): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/Purchase/GetRandom3';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetRandom3(_response);
      });
  }

  protected processGetRandom3(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }
}

export class QuotationServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 审核报价单
   * @param body (optional)
   * @return Success
   */
  approveQuotation(
    body: ApproveInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Quotation/ApproveQuotation';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processApproveQuotation(_response);
      });
  }

  protected processApproveQuotation(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 批量删除Quotation的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Quotation/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改报价的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateQuotationInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Quotation/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除报价信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Quotation/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取QuotationListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<QuotationListDto> {
    let url_ = this.baseUrl + '/api/services/app/Quotation/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<QuotationListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = QuotationListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<QuotationListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<QuotationListDto>(null as any);
  }

  /**
   * 报价详情
   * @param id (optional)
   * @return Success
   */
  getDetailsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<QuotationDetailListDto> {
    let url_ = this.baseUrl + '/api/services/app/Quotation/GetDetailsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDetailsById(_response);
      });
  }

  protected processGetDetailsById(response: AxiosResponse): Promise<QuotationDetailListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = QuotationDetailListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<QuotationDetailListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<QuotationDetailListDto>(null as any);
  }

  /**
   * 获取编辑 报价
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetQuotationForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Quotation/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetQuotationForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetQuotationForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetQuotationForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetQuotationForEditOutput>(null as any);
  }

  /**
   * 获取报价的分页列表信息
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param customerState (optional) 客户当前状态
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    customerState: CustomerState | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfQuotationListDto> {
    let url_ = this.baseUrl + '/api/services/app/Quotation/GetPaged?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (customerState === null) throw new Error("The parameter 'customerState' cannot be null.");
    else if (customerState !== undefined)
      url_ += 'customerState=' + encodeURIComponent('' + customerState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfQuotationListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfQuotationListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfQuotationListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfQuotationListDto>(null as any);
  }

  /**
   * 导出报价为excel文件
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param customerState (optional) 客户当前状态
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getToExcelFile(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    customerState: CustomerState | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Quotation/GetToExcelFile?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (customerState === null) throw new Error("The parameter 'customerState' cannot be null.");
    else if (customerState !== undefined)
      url_ += 'customerState=' + encodeURIComponent('' + customerState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 重新报价
   * @param quotationId (optional)
   * @return Success
   */
  restartQuotation(
    quotationId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Quotation/RestartQuotation?';
    if (quotationId === null) throw new Error("The parameter 'quotationId' cannot be null.");
    else if (quotationId !== undefined)
      url_ += 'quotationId=' + encodeURIComponent('' + quotationId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRestartQuotation(_response);
      });
  }

  protected processRestartQuotation(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }
}

export class RoleServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除角色
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Role/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateRoleInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Role/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Role/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 服务于前端RoleComboxComponent 组件信息，
   * @param permission (optional) 权限名称
   * @return Success
   */
  getAll(
    permission: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<ListResultDtoOfRoleListDto> {
    let url_ = this.baseUrl + '/api/services/app/Role/GetAll?';
    if (permission === null) throw new Error("The parameter 'permission' cannot be null.");
    else if (permission !== undefined)
      url_ += 'permission=' + encodeURIComponent('' + permission) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAll(_response);
      });
  }

  protected processGetAll(response: AxiosResponse): Promise<ListResultDtoOfRoleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ListResultDtoOfRoleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ListResultDtoOfRoleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ListResultDtoOfRoleListDto>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetRoleForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Role/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetRoleForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetRoleForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetRoleForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetRoleForEditOutput>(null as any);
  }

  /**
   * @param permissionNames (optional) 权限名称
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    permissionNames: string[] | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfRoleListDto> {
    let url_ = this.baseUrl + '/api/services/app/Role/GetPaged?';
    if (permissionNames === null)
      throw new Error("The parameter 'permissionNames' cannot be null.");
    else if (permissionNames !== undefined)
      permissionNames &&
        permissionNames.forEach((item) => {
          url_ += 'permissionNames=' + encodeURIComponent('' + item) + '&';
        });
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfRoleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfRoleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfRoleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfRoleListDto>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  getRoleForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetRoleForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Role/GetRoleForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetRoleForEdit(_response);
      });
  }

  protected processGetRoleForEdit(response: AxiosResponse): Promise<GetRoleForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetRoleForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetRoleForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetRoleForEditOutput>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  updatePermissions(
    body: UpdateRolePermissionsInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Role/UpdatePermissions';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdatePermissions(_response);
      });
  }

  protected processUpdatePermissions(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class SamplingServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 审核化验单+检验结果
   * @param body (optional)
   * @return Success
   */
  approveSamplingAndLaboratory(
    body: ApproveInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Sampling/ApproveSamplingAndLaboratory';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processApproveSamplingAndLaboratory(_response);
      });
  }

  protected processApproveSamplingAndLaboratory(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 送样，批量创建送样记录
   * @param body (optional)
   * @return Success
   */
  batchCreateSampling(
    body: SamplingEditDto[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Sampling/BatchCreateSampling';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchCreateSampling(_response);
      });
  }

  protected processBatchCreateSampling(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 批量删除Sampling的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Sampling/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增实验室检测结果
   * @param body (optional)
   * @return Success
   */
  createLaboratoryResult(
    body: LaboratoryManageDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Sampling/CreateLaboratoryResult';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateLaboratoryResult(_response);
      });
  }

  protected processCreateLaboratoryResult(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 添加或者修改取样的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateSamplingInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Sampling/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除取样信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Sampling/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取SamplingListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<SamplingListDto> {
    let url_ = this.baseUrl + '/api/services/app/Sampling/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<SamplingListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = SamplingListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<SamplingListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<SamplingListDto>(null as any);
  }

  /**
   * 样品详情
   * @param id (optional)
   * @return Success
   */
  getDetailsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<SamplingListDto> {
    let url_ = this.baseUrl + '/api/services/app/Sampling/GetDetailsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDetailsById(_response);
      });
  }

  protected processGetDetailsById(response: AxiosResponse): Promise<SamplingListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = SamplingListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<SamplingListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<SamplingListDto>(null as any);
  }

  /**
   * 获取编辑 取样
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetSamplingForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Sampling/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetSamplingForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetSamplingForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetSamplingForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetSamplingForEditOutput>(null as any);
  }

  /**
   * 获取化验管理信息
   * @param id (optional)
   * @return Success
   */
  getLaboratoryDetailsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<LaboratoryManageDto> {
    let url_ = this.baseUrl + '/api/services/app/Sampling/GetLaboratoryDetailsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetLaboratoryDetailsById(_response);
      });
  }

  protected processGetLaboratoryDetailsById(response: AxiosResponse): Promise<LaboratoryManageDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LaboratoryManageDto.fromJS(resultData200, _mappings);
      return Promise.resolve<LaboratoryManageDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<LaboratoryManageDto>(null as any);
  }

  /**
   * 获取取样的分页列表信息
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param isSampling (optional) true:送样 false:检测
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    isSampling: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfSamplingListDto> {
    let url_ = this.baseUrl + '/api/services/app/Sampling/GetPaged?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (isSampling === null) throw new Error("The parameter 'isSampling' cannot be null.");
    else if (isSampling !== undefined)
      url_ += 'isSampling=' + encodeURIComponent('' + isSampling) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfSamplingListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfSamplingListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfSamplingListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfSamplingListDto>(null as any);
  }

  /**
   * 导出 excel文件
   * @param searchScene (optional) 查询场景
   * @param selectPeriod (optional) 查询周期0 :今天 1 :昨天 2 :本周 3 :上周 4 :本月 5 :上月 6 :本季度 7 :上季度 8 :本年 9 :去年
   * @param isSampling (optional) true:送样 false:检测
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getToExcelFile(
    searchScene: string | undefined,
    selectPeriod: string | undefined,
    isSampling: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Sampling/GetToExcelFile?';
    if (searchScene === null) throw new Error("The parameter 'searchScene' cannot be null.");
    else if (searchScene !== undefined)
      url_ += 'searchScene=' + encodeURIComponent('' + searchScene) + '&';
    if (selectPeriod === null) throw new Error("The parameter 'selectPeriod' cannot be null.");
    else if (selectPeriod !== undefined)
      url_ += 'selectPeriod=' + encodeURIComponent('' + selectPeriod) + '&';
    if (isSampling === null) throw new Error("The parameter 'isSampling' cannot be null.");
    else if (isSampling !== undefined)
      url_ += 'isSampling=' + encodeURIComponent('' + isSampling) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 重新申请送样
   * @param samplingId (optional)
   * @return Success
   */
  restartSampling(
    samplingId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Sampling/RestartSampling?';
    if (samplingId === null) throw new Error("The parameter 'samplingId' cannot be null.");
    else if (samplingId !== undefined)
      url_ += 'samplingId=' + encodeURIComponent('' + samplingId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRestartSampling(_response);
      });
  }

  protected processRestartSampling(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }
}

export class SessionServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  getCurrentLoginInformations(
    cancelToken?: CancelToken | undefined,
  ): Promise<GetCurrentLoginInformationsOutput> {
    let url_ = this.baseUrl + '/api/services/app/Session/GetCurrentLoginInformations';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCurrentLoginInformations(_response);
      });
  }

  protected processGetCurrentLoginInformations(
    response: AxiosResponse,
  ): Promise<GetCurrentLoginInformationsOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetCurrentLoginInformationsOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetCurrentLoginInformationsOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetCurrentLoginInformationsOutput>(null as any);
  }

  /**
   * @return Success
   */
  getUserConfigurations(cancelToken?: CancelToken | undefined): Promise<AbpUserConfigurationDto> {
    let url_ = this.baseUrl + '/api/services/app/Session/GetUserConfigurations';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUserConfigurations(_response);
      });
  }

  protected processGetUserConfigurations(
    response: AxiosResponse,
  ): Promise<AbpUserConfigurationDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AbpUserConfigurationDto.fromJS(resultData200, _mappings);
      return Promise.resolve<AbpUserConfigurationDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AbpUserConfigurationDto>(null as any);
  }

  /**
   * @return Success
   */
  updateUserSignInToken(
    cancelToken?: CancelToken | undefined,
  ): Promise<UpdateUserSignInTokenOutput> {
    let url_ = this.baseUrl + '/api/services/app/Session/UpdateUserSignInToken';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'PUT',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateUserSignInToken(_response);
      });
  }

  protected processUpdateUserSignInToken(
    response: AxiosResponse,
  ): Promise<UpdateUserSignInTokenOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = UpdateUserSignInTokenOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<UpdateUserSignInTokenOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<UpdateUserSignInTokenOutput>(null as any);
  }
}

export class SettingsAppServiceBaseServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  sendTestEmail(
    body: SendTestEmailInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/SettingsAppServiceBase/SendTestEmail';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSendTestEmail(_response);
      });
  }

  protected processSendTestEmail(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class SMSServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 发送验证码
   * @param body (optional)
   * @return Success
   */
  sendSmsAliyun(
    body: SendSms | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/SMS/SendSmsAliyun';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSendSmsAliyun(_response);
      });
  }

  protected processSendSmsAliyun(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 验证手机验证码
   * @param phoneNo (optional)
   * @param code (optional)
   * @return Success
   */
  verifySmsCode(
    phoneNo: string | undefined,
    code: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/SMS/VerifySmsCode?';
    if (phoneNo === null) throw new Error("The parameter 'phoneNo' cannot be null.");
    else if (phoneNo !== undefined) url_ += 'phoneNo=' + encodeURIComponent('' + phoneNo) + '&';
    if (code === null) throw new Error("The parameter 'code' cannot be null.");
    else if (code !== undefined) url_ += 'code=' + encodeURIComponent('' + code) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processVerifySmsCode(_response);
      });
  }

  protected processVerifySmsCode(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }
}

export class TenantServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: EntityDto[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  create(
    body: CreateTenantInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/Create';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 获取处置租户列表（不分页）
   * @return Success
   */
  getDisposalTenantsList(cancelToken?: CancelToken | undefined): Promise<TenantListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/GetDisposalTenantsList';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDisposalTenantsList(_response);
      });
  }

  protected processGetDisposalTenantsList(response: AxiosResponse): Promise<TenantListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(TenantListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<TenantListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<TenantListDto[]>(null as any);
  }

  /**
   * 获取处置租户
   * @param disposalTenantId (optional) 处置企业租户ID
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getDisposalTenantsPaged(
    disposalTenantId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfTenantListDto> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/GetDisposalTenantsPaged?';
    if (disposalTenantId === null)
      throw new Error("The parameter 'disposalTenantId' cannot be null.");
    else if (disposalTenantId !== undefined)
      url_ += 'disposalTenantId=' + encodeURIComponent('' + disposalTenantId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDisposalTenantsPaged(_response);
      });
  }

  protected processGetDisposalTenantsPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfTenantListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfTenantListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfTenantListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfTenantListDto>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<TenantEditDto> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<TenantEditDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = TenantEditDto.fromJS(resultData200, _mappings);
      return Promise.resolve<TenantEditDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<TenantEditDto>(null as any);
  }

  /**
   * @param subscriptionStart (optional)
   * @param subscriptionEnd (optional)
   * @param creationDateStart (optional)
   * @param creationDateEnd (optional)
   * @param editionId (optional)
   * @param tenantType (optional)
   * @param isExclusiveEnt (optional) 是否是专属企业
   * @param isAgentEnt (optional) 是否是中介企业
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    subscriptionStart: dayjs.Dayjs | undefined,
    subscriptionEnd: dayjs.Dayjs | undefined,
    creationDateStart: dayjs.Dayjs | undefined,
    creationDateEnd: dayjs.Dayjs | undefined,
    editionId: number | undefined,
    tenantType: number | undefined,
    isExclusiveEnt: boolean | undefined,
    isAgentEnt: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfTenantListDto> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/GetPaged?';
    if (subscriptionStart === null)
      throw new Error("The parameter 'subscriptionStart' cannot be null.");
    else if (subscriptionStart !== undefined)
      url_ +=
        'subscriptionStart=' +
        encodeURIComponent(subscriptionStart ? '' + subscriptionStart.toISOString() : '') +
        '&';
    if (subscriptionEnd === null)
      throw new Error("The parameter 'subscriptionEnd' cannot be null.");
    else if (subscriptionEnd !== undefined)
      url_ +=
        'subscriptionEnd=' +
        encodeURIComponent(subscriptionEnd ? '' + subscriptionEnd.toISOString() : '') +
        '&';
    if (creationDateStart === null)
      throw new Error("The parameter 'creationDateStart' cannot be null.");
    else if (creationDateStart !== undefined)
      url_ +=
        'creationDateStart=' +
        encodeURIComponent(creationDateStart ? '' + creationDateStart.toISOString() : '') +
        '&';
    if (creationDateEnd === null)
      throw new Error("The parameter 'creationDateEnd' cannot be null.");
    else if (creationDateEnd !== undefined)
      url_ +=
        'creationDateEnd=' +
        encodeURIComponent(creationDateEnd ? '' + creationDateEnd.toISOString() : '') +
        '&';
    if (editionId === null) throw new Error("The parameter 'editionId' cannot be null.");
    else if (editionId !== undefined)
      url_ += 'editionId=' + encodeURIComponent('' + editionId) + '&';
    if (tenantType === null) throw new Error("The parameter 'tenantType' cannot be null.");
    else if (tenantType !== undefined)
      url_ += 'tenantType=' + encodeURIComponent('' + tenantType) + '&';
    if (isExclusiveEnt === null) throw new Error("The parameter 'isExclusiveEnt' cannot be null.");
    else if (isExclusiveEnt !== undefined)
      url_ += 'isExclusiveEnt=' + encodeURIComponent('' + isExclusiveEnt) + '&';
    if (isAgentEnt === null) throw new Error("The parameter 'isAgentEnt' cannot be null.");
    else if (isAgentEnt !== undefined)
      url_ += 'isAgentEnt=' + encodeURIComponent('' + isAgentEnt) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfTenantListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfTenantListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfTenantListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfTenantListDto>(null as any);
  }

  /**
   * 获取租户信息
   * @param id (optional)
   * @return Success
   */
  getTenantbyId(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<TenantEditDto> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/GetTenantbyId?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTenantbyId(_response);
      });
  }

  protected processGetTenantbyId(response: AxiosResponse): Promise<TenantEditDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = TenantEditDto.fromJS(resultData200, _mappings);
      return Promise.resolve<TenantEditDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<TenantEditDto>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  getTenantFeaturesForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetTenantFeaturesEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/GetTenantFeaturesForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTenantFeaturesForEdit(_response);
      });
  }

  protected processGetTenantFeaturesForEdit(
    response: AxiosResponse,
  ): Promise<GetTenantFeaturesEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetTenantFeaturesEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetTenantFeaturesEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetTenantFeaturesEditOutput>(null as any);
  }

  /**
   * 获取各类型租户
   * @param tenantType (optional) 租户类型
   * @param orderId (optional) 货单ID
   * @param isExclusiveEnt (optional) 是否是专属企业
   * @param cantonCode (optional) 行政区
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getTenantsPaged(
    tenantType: number | undefined,
    orderId: number | undefined,
    isExclusiveEnt: boolean | undefined,
    cantonCode: string | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<TenantListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/GetTenantsPaged?';
    if (tenantType === null) throw new Error("The parameter 'tenantType' cannot be null.");
    else if (tenantType !== undefined)
      url_ += 'tenantType=' + encodeURIComponent('' + tenantType) + '&';
    if (orderId === null) throw new Error("The parameter 'orderId' cannot be null.");
    else if (orderId !== undefined) url_ += 'orderId=' + encodeURIComponent('' + orderId) + '&';
    if (isExclusiveEnt === null) throw new Error("The parameter 'isExclusiveEnt' cannot be null.");
    else if (isExclusiveEnt !== undefined)
      url_ += 'isExclusiveEnt=' + encodeURIComponent('' + isExclusiveEnt) + '&';
    if (cantonCode === null) throw new Error("The parameter 'cantonCode' cannot be null.");
    else if (cantonCode !== undefined)
      url_ += 'cantonCode=' + encodeURIComponent('' + cantonCode) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTenantsPaged(_response);
      });
  }

  protected processGetTenantsPaged(response: AxiosResponse): Promise<TenantListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(TenantListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<TenantListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<TenantListDto[]>(null as any);
  }

  /**
   * 获取物流租户
   * @param disposalTenantId (optional) 处置企业租户ID
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlTenantsPaged(
    disposalTenantId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfTenantListDto> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/GetWlTenantsPaged?';
    if (disposalTenantId === null)
      throw new Error("The parameter 'disposalTenantId' cannot be null.");
    else if (disposalTenantId !== undefined)
      url_ += 'disposalTenantId=' + encodeURIComponent('' + disposalTenantId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlTenantsPaged(_response);
      });
  }

  protected processGetWlTenantsPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfTenantListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfTenantListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfTenantListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfTenantListDto>(null as any);
  }

  /**
   * 标记专属企业
   * @param tenantId (optional)
   * @param marked (optional)
   * @return Success
   */
  markExclusiveEnt(
    tenantId: number | undefined,
    marked: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/MarkExclusiveEnt?';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (marked === null) throw new Error("The parameter 'marked' cannot be null.");
    else if (marked !== undefined) url_ += 'marked=' + encodeURIComponent('' + marked) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processMarkExclusiveEnt(_response);
      });
  }

  protected processMarkExclusiveEnt(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  resetTenantSpecificFeatures(
    body: EntityDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/ResetTenantSpecificFeatures';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processResetTenantSpecificFeatures(_response);
      });
  }

  protected processResetTenantSpecificFeatures(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 为企业选择经理
   * @param tenantId (optional)
   * @param userId (optional)
   * @return Success
   */
  selectPlatformManagers(
    tenantId: number | undefined,
    userId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/SelectPlatformManagers?';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSelectPlatformManagers(_response);
      });
  }

  protected processSelectPlatformManagers(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  unlockTenantAdmin(
    body: EntityDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/UnlockTenantAdmin';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUnlockTenantAdmin(_response);
      });
  }

  protected processUnlockTenantAdmin(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  update(body: TenantEditDto | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/Update';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  updateTenantFeatures(
    body: UpdateTenantFeaturesInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Tenant/UpdateTenantFeatures';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateTenantFeatures(_response);
      });
  }

  protected processUpdateTenantFeatures(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class TenantRegistrationServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 注册租户信息
   * @param body (optional)
   * @return Success
   */
  registerTenant(
    body: CreateTenantDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<RegisterTenantResultDto> {
    let url_ = this.baseUrl + '/api/services/app/TenantRegistration/RegisterTenant';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRegisterTenant(_response);
      });
  }

  protected processRegisterTenant(response: AxiosResponse): Promise<RegisterTenantResultDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = RegisterTenantResultDto.fromJS(resultData200, _mappings);
      return Promise.resolve<RegisterTenantResultDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<RegisterTenantResultDto>(null as any);
  }
}

export class TenantSettingsServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  clearCustomCss(cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/TenantSettings/ClearCustomCss';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processClearCustomCss(_response);
      });
  }

  protected processClearCustomCss(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  clearLogo(cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/TenantSettings/ClearLogo';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processClearLogo(_response);
      });
  }

  protected processClearLogo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 获取所有设置
   * @return Success
   */
  getAllSettings(cancelToken?: CancelToken | undefined): Promise<TenantSettingsEditDto> {
    let url_ = this.baseUrl + '/api/services/app/TenantSettings/GetAllSettings';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllSettings(_response);
      });
  }

  protected processGetAllSettings(response: AxiosResponse): Promise<TenantSettingsEditDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = TenantSettingsEditDto.fromJS(resultData200, _mappings);
      return Promise.resolve<TenantSettingsEditDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<TenantSettingsEditDto>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  sendTestEmail(
    body: SendTestEmailInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/TenantSettings/SendTestEmail';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSendTestEmail(_response);
      });
  }

  protected processSendTestEmail(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 更新所有设置
   * @param body (optional)
   * @return Success
   */
  updateAllSettings(
    body: TenantSettingsEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/TenantSettings/UpdateAllSettings';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateAllSettings(_response);
      });
  }

  protected processUpdateAllSettings(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class TimingServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param selectedTimezoneId (optional)
   * @return Success
   */
  getTimezoneComboboxItems(
    selectedTimezoneId: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<ComboboxItemDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Timing/GetTimezoneComboboxItems?';
    if (selectedTimezoneId === null)
      throw new Error("The parameter 'selectedTimezoneId' cannot be null.");
    else if (selectedTimezoneId !== undefined)
      url_ += 'selectedTimezoneId=' + encodeURIComponent('' + selectedTimezoneId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTimezoneComboboxItems(_response);
      });
  }

  protected processGetTimezoneComboboxItems(response: AxiosResponse): Promise<ComboboxItemDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(ComboboxItemDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<ComboboxItemDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ComboboxItemDto[]>(null as any);
  }

  /**
   * @return Success
   */
  getTimezones(
    defaultTimezoneScope: SettingScopes,
    cancelToken?: CancelToken | undefined,
  ): Promise<ListResultDtoOfNameValueDto> {
    let url_ = this.baseUrl + '/api/services/app/Timing/GetTimezones?';
    if (defaultTimezoneScope === undefined || defaultTimezoneScope === null)
      throw new Error("The parameter 'defaultTimezoneScope' must be defined and cannot be null.");
    else url_ += 'defaultTimezoneScope=' + encodeURIComponent('' + defaultTimezoneScope) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTimezones(_response);
      });
  }

  protected processGetTimezones(response: AxiosResponse): Promise<ListResultDtoOfNameValueDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ListResultDtoOfNameValueDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ListResultDtoOfNameValueDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ListResultDtoOfNameValueDto>(null as any);
  }
}

export class Transability_BaseServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除运力信息
   * @param body (optional)
   * @return Success
   */
  batchCapacityDelete(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/BatchCapacityDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchCapacityDelete(_response);
      });
  }

  protected processBatchCapacityDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除Transability_User的方法
   * @param body (optional)
   * @return Success
   */
  batchDriverDelete(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/BatchDriverDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDriverDelete(_response);
      });
  }

  protected processBatchDriverDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除Transability_User的方法
   * @param body (optional)
   * @return Success
   */
  batchSupercargoDelete(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/BatchSupercargoDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchSupercargoDelete(_response);
      });
  }

  protected processBatchSupercargoDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 检查车头或车挂车牌号是否存在
   * @param body (optional)
   * @return Success
   */
  checkCarNumber(
    body: CarNumberInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/CheckCarNumber';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCheckCarNumber(_response);
      });
  }

  protected processCheckCarNumber(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 添加或者修改运力信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateCapacity(
    body: CapacityListDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/CreateOrUpdateCapacity';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateCapacity(_response);
      });
  }

  protected processCreateOrUpdateCapacity(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改司机和押运员的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdateDriver(
    body: Transability_UserListDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/CreateOrUpdateDriver';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateDriver(_response);
      });
  }

  protected processCreateOrUpdateDriver(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改司机和押运员的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdateSupercargo(
    body: Transability_UserListDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/CreateOrUpdateSupercargo';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateSupercargo(_response);
      });
  }

  protected processCreateOrUpdateSupercargo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除运力信息
   * @param id (optional)
   * @return Success
   */
  deleteCapacity(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/DeleteCapacity?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteCapacity(_response);
      });
  }

  protected processDeleteCapacity(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除司机和押运员信息
   * @param id (optional)
   * @return Success
   */
  deleteDriver(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/DeleteDriver?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteDriver(_response);
      });
  }

  protected processDeleteDriver(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除司机和押运员信息
   * @param id (optional)
   * @return Success
   */
  deleteSupercargo(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/DeleteSupercargo?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteSupercargo(_response);
      });
  }

  protected processDeleteSupercargo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 司机离职
   * @param id (optional)
   * @return Success
   */
  driverLeave(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/DriverLeave?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDriverLeave(_response);
      });
  }

  protected processDriverLeave(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取运力信息信息
   * @param id (optional)
   * @return Success
   */
  getCapacityById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<CapacityListDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/GetCapacityById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCapacityById(_response);
      });
  }

  protected processGetCapacityById(response: AxiosResponse): Promise<CapacityListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = CapacityListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<CapacityListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<CapacityListDto>(null as any);
  }

  /**
   * 获取运力信息的分页列表信息
   * @param vehicleTypeId (optional) 车辆类型Id
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getCapacityPaged(
    vehicleTypeId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfCapacityListDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/GetCapacityPaged?';
    if (vehicleTypeId === null) throw new Error("The parameter 'vehicleTypeId' cannot be null.");
    else if (vehicleTypeId !== undefined)
      url_ += 'vehicleTypeId=' + encodeURIComponent('' + vehicleTypeId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCapacityPaged(_response);
      });
  }

  protected processGetCapacityPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfCapacityListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfCapacityListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfCapacityListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfCapacityListDto>(null as any);
  }

  /**
   * 通过指定id获取Transability_UserListDto信息
   * @param id (optional)
   * @return Success
   */
  getDriverById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Transability_UserListDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/GetDriverById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDriverById(_response);
      });
  }

  protected processGetDriverById(response: AxiosResponse): Promise<Transability_UserListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Transability_UserListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Transability_UserListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Transability_UserListDto>(null as any);
  }

  /**
   * 查询司机 列表
   * @param userName (optional)
   * @return Success
   */
  getDriverList(
    userName: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Transability_UserListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/GetDriverList?';
    if (userName === null) throw new Error("The parameter 'userName' cannot be null.");
    else if (userName !== undefined) url_ += 'userName=' + encodeURIComponent('' + userName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDriverList(_response);
      });
  }

  protected processGetDriverList(response: AxiosResponse): Promise<Transability_UserListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(Transability_UserListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Transability_UserListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Transability_UserListDto[]>(null as any);
  }

  /**
   * 获取司机和押运员的分页列表信息
   * @param leave (optional) 是否已离职：在职:false 离职:true
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getDriverPaged(
    leave: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfTransability_UserListDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/GetDriverPaged?';
    if (leave === null) throw new Error("The parameter 'leave' cannot be null.");
    else if (leave !== undefined) url_ += 'leave=' + encodeURIComponent('' + leave) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDriverPaged(_response);
      });
  }

  protected processGetDriverPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfTransability_UserListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfTransability_UserListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfTransability_UserListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfTransability_UserListDto>(null as any);
  }

  /**
   * 通过指定id获取Transability_UserListDto信息
   * @param id (optional)
   * @return Success
   */
  getSupercargoById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Transability_UserListDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/GetSupercargoById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetSupercargoById(_response);
      });
  }

  protected processGetSupercargoById(response: AxiosResponse): Promise<Transability_UserListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Transability_UserListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Transability_UserListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Transability_UserListDto>(null as any);
  }

  /**
   * 押运员列表
   * @param userName (optional)
   * @return Success
   */
  getSupercargoList(
    userName: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Transability_UserListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/GetSupercargoList?';
    if (userName === null) throw new Error("The parameter 'userName' cannot be null.");
    else if (userName !== undefined) url_ += 'userName=' + encodeURIComponent('' + userName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetSupercargoList(_response);
      });
  }

  protected processGetSupercargoList(response: AxiosResponse): Promise<Transability_UserListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(Transability_UserListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Transability_UserListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Transability_UserListDto[]>(null as any);
  }

  /**
   * 获取司机和押运员的分页列表信息
   * @param leave (optional) 是否已离职：在职:false 离职:true
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getSupercargoPaged(
    leave: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfTransability_UserListDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/GetSupercargoPaged?';
    if (leave === null) throw new Error("The parameter 'leave' cannot be null.");
    else if (leave !== undefined) url_ += 'leave=' + encodeURIComponent('' + leave) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetSupercargoPaged(_response);
      });
  }

  protected processGetSupercargoPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfTransability_UserListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfTransability_UserListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfTransability_UserListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfTransability_UserListDto>(null as any);
  }

  /**
   * 查询车辆列表
   * @param vehicleNumber (optional)
   * @param vehicle (optional)
   * @param fullCar (optional) 整车
   * @param vehicleTypeId (optional) 车辆类型
   * @return Success
   */
  getVehicleAndTrailerList(
    vehicleNumber: string | undefined,
    vehicle: boolean | undefined,
    fullCar: boolean | undefined,
    vehicleTypeId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Transability_VehicleListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/GetVehicleAndTrailerList?';
    if (vehicleNumber === null) throw new Error("The parameter 'vehicleNumber' cannot be null.");
    else if (vehicleNumber !== undefined)
      url_ += 'vehicleNumber=' + encodeURIComponent('' + vehicleNumber) + '&';
    if (vehicle === null) throw new Error("The parameter 'vehicle' cannot be null.");
    else if (vehicle !== undefined) url_ += 'vehicle=' + encodeURIComponent('' + vehicle) + '&';
    if (fullCar === null) throw new Error("The parameter 'fullCar' cannot be null.");
    else if (fullCar !== undefined) url_ += 'fullCar=' + encodeURIComponent('' + fullCar) + '&';
    if (vehicleTypeId === null) throw new Error("The parameter 'vehicleTypeId' cannot be null.");
    else if (vehicleTypeId !== undefined)
      url_ += 'vehicleTypeId=' + encodeURIComponent('' + vehicleTypeId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetVehicleAndTrailerList(_response);
      });
  }

  protected processGetVehicleAndTrailerList(
    response: AxiosResponse,
  ): Promise<Transability_VehicleListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(Transability_VehicleListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Transability_VehicleListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Transability_VehicleListDto[]>(null as any);
  }

  /**
   * 通过指定id获取Transability_VehicleListDto信息
   * @param id (optional)
   * @return Success
   */
  getVehicleById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Transability_VehicleListDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/GetVehicleById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetVehicleById(_response);
      });
  }

  protected processGetVehicleById(response: AxiosResponse): Promise<Transability_VehicleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Transability_VehicleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Transability_VehicleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Transability_VehicleListDto>(null as any);
  }

  /**
   * 获取车头管理的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getVehiclePaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfTransability_VehicleListDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/GetVehiclePaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetVehiclePaged(_response);
      });
  }

  protected processGetVehiclePaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfTransability_VehicleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfTransability_VehicleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfTransability_VehicleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfTransability_VehicleListDto>(null as any);
  }

  /**
   * 通过指定id获取Transability_VehicleListDto信息
   * @param id (optional)
   * @return Success
   */
  getVehicleTrailerById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Transability_VehicleListDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/GetVehicleTrailerById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetVehicleTrailerById(_response);
      });
  }

  protected processGetVehicleTrailerById(
    response: AxiosResponse,
  ): Promise<Transability_VehicleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Transability_VehicleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Transability_VehicleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Transability_VehicleListDto>(null as any);
  }

  /**
   * 获取车头管理的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getVehicleTrailerPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfTransability_VehicleListDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/GetVehicleTrailerPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetVehicleTrailerPaged(_response);
      });
  }

  protected processGetVehicleTrailerPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfTransability_VehicleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfTransability_VehicleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfTransability_VehicleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfTransability_VehicleListDto>(null as any);
  }

  /**
   * 释放运力资源
   * @param capacityId (optional)
   * @return Success
   */
  releaseCapacity(
    capacityId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/ReleaseCapacity?';
    if (capacityId === null) throw new Error("The parameter 'capacityId' cannot be null.");
    else if (capacityId !== undefined)
      url_ += 'capacityId=' + encodeURIComponent('' + capacityId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processReleaseCapacity(_response);
      });
  }

  protected processReleaseCapacity(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 押运员离职
   * @param id (optional)
   * @return Success
   */
  supercargoLeave(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/SupercargoLeave?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSupercargoLeave(_response);
      });
  }

  protected processSupercargoLeave(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除Transability_Vehicle的方法
   * @param body (optional)
   * @return Success
   */
  vehicleBatchDelete(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/VehicleBatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processVehicleBatchDelete(_response);
      });
  }

  protected processVehicleBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改车辆管理的公共方法
   * @param body (optional)
   * @return Success
   */
  vehicleCreateOrUpdate(
    body: Transability_VehicleListDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/VehicleCreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processVehicleCreateOrUpdate(_response);
      });
  }

  protected processVehicleCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除车辆管理信息
   * @param id (optional)
   * @return Success
   */
  vehicleDelete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/VehicleDelete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processVehicleDelete(_response);
      });
  }

  protected processVehicleDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除Transability_Vehicle的方法
   * @param body (optional)
   * @return Success
   */
  vehicleTrailerBatchDelete(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/VehicleTrailerBatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processVehicleTrailerBatchDelete(_response);
      });
  }

  protected processVehicleTrailerBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改车辆管理的公共方法
   * @param body (optional)
   * @return Success
   */
  vehicleTrailerCreateOrUpdate(
    body: Transability_VehicleListDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/VehicleTrailerCreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processVehicleTrailerCreateOrUpdate(_response);
      });
  }

  protected processVehicleTrailerCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除车辆管理信息
   * @param id (optional)
   * @return Success
   */
  vehicleTrailerDelete(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Base/VehicleTrailerDelete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processVehicleTrailerDelete(_response);
      });
  }

  protected processVehicleTrailerDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class Transability_CustomerServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除Transability_Customer的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Customer/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改客户的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateTransability_CustomerInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Customer/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改装卸点信息
   * @param body (optional)
   * @return Success
   */
  customerPointCreateOrUpdate(
    body: Transability_LoadingUnloadingPointEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Customer/CustomerPointCreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCustomerPointCreateOrUpdate(_response);
      });
  }

  protected processCustomerPointCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除装卸点信息
   * @param body (optional)
   * @return Success
   */
  customerPointDelete(
    body: EntityDtoOfInt64 | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Customer/CustomerPointDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCustomerPointDelete(_response);
      });
  }

  protected processCustomerPointDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除客户信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Customer/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取Transability_CustomerListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Transability_CustomerListDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Customer/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<Transability_CustomerListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Transability_CustomerListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<Transability_CustomerListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Transability_CustomerListDto>(null as any);
  }

  /**
   * 获取客户列表
   * @param customerName (optional)
   * @return Success
   */
  getCustomerList(
    customerName: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Transability_CustomerListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Customer/GetCustomerList?';
    if (customerName === null) throw new Error("The parameter 'customerName' cannot be null.");
    else if (customerName !== undefined)
      url_ += 'customerName=' + encodeURIComponent('' + customerName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCustomerList(_response);
      });
  }

  protected processGetCustomerList(
    response: AxiosResponse,
  ): Promise<Transability_CustomerListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(Transability_CustomerListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Transability_CustomerListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Transability_CustomerListDto[]>(null as any);
  }

  /**
   * 获取客户装卸点列表信息
   * @param customerId (optional)
   * @return Success
   */
  getCustomerPointList(
    customerId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<Transability_LoadingUnloadingPointListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Customer/GetCustomerPointList?';
    if (customerId === null) throw new Error("The parameter 'customerId' cannot be null.");
    else if (customerId !== undefined)
      url_ += 'customerId=' + encodeURIComponent('' + customerId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCustomerPointList(_response);
      });
  }

  protected processGetCustomerPointList(
    response: AxiosResponse,
  ): Promise<Transability_LoadingUnloadingPointListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(Transability_LoadingUnloadingPointListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Transability_LoadingUnloadingPointListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<Transability_LoadingUnloadingPointListDto[]>(null as any);
  }

  /**
   * 获取客户的分页列表信息
   * @param isBindCustomer (optional) 是否有客户
   * @param cantonCode (optional) 行政区编码
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getCustomerPointPaged(
    isBindCustomer: boolean | undefined,
    cantonCode: string | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfTransability_LoadingUnloadingPointListDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Customer/GetCustomerPointPaged?';
    if (isBindCustomer === null) throw new Error("The parameter 'isBindCustomer' cannot be null.");
    else if (isBindCustomer !== undefined)
      url_ += 'isBindCustomer=' + encodeURIComponent('' + isBindCustomer) + '&';
    if (cantonCode === null) throw new Error("The parameter 'cantonCode' cannot be null.");
    else if (cantonCode !== undefined)
      url_ += 'cantonCode=' + encodeURIComponent('' + cantonCode) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCustomerPointPaged(_response);
      });
  }

  protected processGetCustomerPointPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfTransability_LoadingUnloadingPointListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfTransability_LoadingUnloadingPointListDto.fromJS(
        resultData200,
        _mappings,
      );
      return Promise.resolve<PagedResultDtoOfTransability_LoadingUnloadingPointListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfTransability_LoadingUnloadingPointListDto>(null as any);
  }

  /**
   * 获取编辑 客户
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetTransability_CustomerForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Customer/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(
    response: AxiosResponse,
  ): Promise<GetTransability_CustomerForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetTransability_CustomerForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetTransability_CustomerForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetTransability_CustomerForEditOutput>(null as any);
  }

  /**
   * 通过腾讯地图或者点位名称模糊获取地图相关信息
   * @param urlOrPointName (optional)
   * @return Success
   */
  getMapDetails(
    urlOrPointName: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<MapDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Customer/GetMapDetails?';
    if (urlOrPointName === null) throw new Error("The parameter 'urlOrPointName' cannot be null.");
    else if (urlOrPointName !== undefined)
      url_ += 'urlOrPointName=' + encodeURIComponent('' + urlOrPointName) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetMapDetails(_response);
      });
  }

  protected processGetMapDetails(response: AxiosResponse): Promise<MapDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = MapDto.fromJS(resultData200, _mappings);
      return Promise.resolve<MapDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<MapDto>(null as any);
  }

  /**
   * 获取客户的分页列表信息
   * @param industryCode (optional) 行业编码
   * @param cantonCode (optional) 行政区编码
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    industryCode: string | undefined,
    cantonCode: string | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfTransability_CustomerListDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Customer/GetPaged?';
    if (industryCode === null) throw new Error("The parameter 'industryCode' cannot be null.");
    else if (industryCode !== undefined)
      url_ += 'industryCode=' + encodeURIComponent('' + industryCode) + '&';
    if (cantonCode === null) throw new Error("The parameter 'cantonCode' cannot be null.");
    else if (cantonCode !== undefined)
      url_ += 'cantonCode=' + encodeURIComponent('' + cantonCode) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfTransability_CustomerListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfTransability_CustomerListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfTransability_CustomerListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfTransability_CustomerListDto>(null as any);
  }

  /**
   * 导出客户为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Transability_Customer/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }
}

export class UpdateVersionServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除UpdateVersion的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/UpdateVersion/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改更新版本的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateUpdateVersionInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/UpdateVersion/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除更新版本信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/UpdateVersion/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取UpdateVersionListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<UpdateVersionListDto> {
    let url_ = this.baseUrl + '/api/services/app/UpdateVersion/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<UpdateVersionListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = UpdateVersionListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<UpdateVersionListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<UpdateVersionListDto>(null as any);
  }

  /**
   * 当前用户是否已读过最新的更新报告
   * @return Success
   */
  getCurrentUserReadedTheNewUpdateLog(cancelToken?: CancelToken | undefined): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/UpdateVersion/GetCurrentUserReadedTheNewUpdateLog';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCurrentUserReadedTheNewUpdateLog(_response);
      });
  }

  protected processGetCurrentUserReadedTheNewUpdateLog(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 获取编辑 更新版本
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetUpdateVersionForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/UpdateVersion/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetUpdateVersionForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetUpdateVersionForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetUpdateVersionForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetUpdateVersionForEditOutput>(null as any);
  }

  /**
   * 获取更新版本的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfUpdateVersionListDto> {
    let url_ = this.baseUrl + '/api/services/app/UpdateVersion/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfUpdateVersionListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfUpdateVersionListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfUpdateVersionListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfUpdateVersionListDto>(null as any);
  }

  /**
   * 导出更新版本为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/UpdateVersion/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 获取更新详情
   * @return Success
   */
  getUpdateDetails(cancelToken?: CancelToken | undefined): Promise<UpdateDetailDto[]> {
    let url_ = this.baseUrl + '/api/services/app/UpdateVersion/GetUpdateDetails';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUpdateDetails(_response);
      });
  }

  protected processGetUpdateDetails(response: AxiosResponse): Promise<UpdateDetailDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(UpdateDetailDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<UpdateDetailDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<UpdateDetailDto[]>(null as any);
  }
}

export class UserServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除用户
   * @param body (optional) 用户Id列表
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/User/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateUserInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/User/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/User/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 修改用户信息
   * @param id (optional)
   * @return Success
   */
  getForEditTree(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetUserForEditTreeOutput> {
    let url_ = this.baseUrl + '/api/services/app/User/GetForEditTree?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEditTree(_response);
      });
  }

  protected processGetForEditTree(response: AxiosResponse): Promise<GetUserForEditTreeOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetUserForEditTreeOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetUserForEditTreeOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetUserForEditTreeOutput>(null as any);
  }

  /**
   * 分页获取所有用户
   * @param permission (optional) 权限
   * @param role (optional) 检索角色Id列表
   * @param isEmailConfirmed (optional) 是否已验证邮箱
   * @param isActive (optional) 是否已激活
   * @param onlyLockedUsers (optional) 仅被锁定的用户
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    permission: string[] | undefined,
    role: number[] | undefined,
    isEmailConfirmed: boolean | undefined,
    isActive: boolean | undefined,
    onlyLockedUsers: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfUserListDto> {
    let url_ = this.baseUrl + '/api/services/app/User/GetPaged?';
    if (permission === null) throw new Error("The parameter 'permission' cannot be null.");
    else if (permission !== undefined)
      permission &&
        permission.forEach((item) => {
          url_ += 'permission=' + encodeURIComponent('' + item) + '&';
        });
    if (role === null) throw new Error("The parameter 'role' cannot be null.");
    else if (role !== undefined)
      role &&
        role.forEach((item) => {
          url_ += 'role=' + encodeURIComponent('' + item) + '&';
        });
    if (isEmailConfirmed === null)
      throw new Error("The parameter 'isEmailConfirmed' cannot be null.");
    else if (isEmailConfirmed !== undefined)
      url_ += 'isEmailConfirmed=' + encodeURIComponent('' + isEmailConfirmed) + '&';
    if (isActive === null) throw new Error("The parameter 'isActive' cannot be null.");
    else if (isActive !== undefined) url_ += 'isActive=' + encodeURIComponent('' + isActive) + '&';
    if (onlyLockedUsers === null)
      throw new Error("The parameter 'onlyLockedUsers' cannot be null.");
    else if (onlyLockedUsers !== undefined)
      url_ += 'onlyLockedUsers=' + encodeURIComponent('' + onlyLockedUsers) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfUserListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfUserListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfUserListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfUserListDto>(null as any);
  }

  /**
   * 用户的权限编辑
   * @param id (optional)
   * @return Success
   */
  getPermissionsTreeForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetUserPermissionsTreeForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/User/GetPermissionsTreeForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPermissionsTreeForEdit(_response);
      });
  }

  protected processGetPermissionsTreeForEdit(
    response: AxiosResponse,
  ): Promise<GetUserPermissionsTreeForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetUserPermissionsTreeForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetUserPermissionsTreeForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetUserPermissionsTreeForEditOutput>(null as any);
  }

  /**
   * 获取物流经理和客户经理
   * @param roleType (optional) 角色类型，1：客户经理，2：物流经理
   * @return Success
   */
  getPlatformManagers(
    roleType: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<UserListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/User/GetPlatformManagers?';
    if (roleType === null) throw new Error("The parameter 'roleType' cannot be null.");
    else if (roleType !== undefined) url_ += 'roleType=' + encodeURIComponent('' + roleType) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPlatformManagers(_response);
      });
  }

  protected processGetPlatformManagers(response: AxiosResponse): Promise<UserListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(UserListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<UserListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<UserListDto[]>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  getUserForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetUserForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/User/GetUserForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUserForEdit(_response);
      });
  }

  protected processGetUserForEdit(response: AxiosResponse): Promise<GetUserForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetUserForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetUserForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetUserForEditOutput>(null as any);
  }

  /**
   * 获取当前用户的信息
   * @param key (optional)
   * @return Success
   */
  getUserInfo(
    key: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<UserLoginInfoDto> {
    let url_ = this.baseUrl + '/api/services/app/User/GetUserInfo?';
    if (key === null) throw new Error("The parameter 'key' cannot be null.");
    else if (key !== undefined) url_ += 'key=' + encodeURIComponent('' + key) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUserInfo(_response);
      });
  }

  protected processGetUserInfo(response: AxiosResponse): Promise<UserLoginInfoDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = UserLoginInfoDto.fromJS(resultData200, _mappings);
      return Promise.resolve<UserLoginInfoDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<UserLoginInfoDto>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  getUserPermissionsForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetUserPermissionsForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/User/GetUserPermissionsForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUserPermissionsForEdit(_response);
      });
  }

  protected processGetUserPermissionsForEdit(
    response: AxiosResponse,
  ): Promise<GetUserPermissionsForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetUserPermissionsForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetUserPermissionsForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetUserPermissionsForEditOutput>(null as any);
  }

  /**
   * 获取用户导出信息
   * @param permission (optional) 权限
   * @param role (optional) 检索角色Id列表
   * @param isEmailConfirmed (optional) 是否已验证邮箱
   * @param isActive (optional) 是否已激活
   * @param onlyLockedUsers (optional) 仅被锁定的用户
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getUsersToExcel(
    permission: string[] | undefined,
    role: number[] | undefined,
    isEmailConfirmed: boolean | undefined,
    isActive: boolean | undefined,
    onlyLockedUsers: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/User/GetUsersToExcel?';
    if (permission === null) throw new Error("The parameter 'permission' cannot be null.");
    else if (permission !== undefined)
      permission &&
        permission.forEach((item) => {
          url_ += 'permission=' + encodeURIComponent('' + item) + '&';
        });
    if (role === null) throw new Error("The parameter 'role' cannot be null.");
    else if (role !== undefined)
      role &&
        role.forEach((item) => {
          url_ += 'role=' + encodeURIComponent('' + item) + '&';
        });
    if (isEmailConfirmed === null)
      throw new Error("The parameter 'isEmailConfirmed' cannot be null.");
    else if (isEmailConfirmed !== undefined)
      url_ += 'isEmailConfirmed=' + encodeURIComponent('' + isEmailConfirmed) + '&';
    if (isActive === null) throw new Error("The parameter 'isActive' cannot be null.");
    else if (isActive !== undefined) url_ += 'isActive=' + encodeURIComponent('' + isActive) + '&';
    if (onlyLockedUsers === null)
      throw new Error("The parameter 'onlyLockedUsers' cannot be null.");
    else if (onlyLockedUsers !== undefined)
      url_ += 'onlyLockedUsers=' + encodeURIComponent('' + onlyLockedUsers) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUsersToExcel(_response);
      });
  }

  protected processGetUsersToExcel(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 重置全部用户密码
   * @return Success
   */
  resetAllUserPassword(cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/User/ResetAllUserPassword';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processResetAllUserPassword(_response);
      });
  }

  protected processResetAllUserPassword(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  resetPassword(
    body: NullableIdDtoOfInt64 | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/User/ResetPassword';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processResetPassword(_response);
      });
  }

  protected processResetPassword(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  resetSpecificPermissions(
    body: EntityDtoOfInt64 | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/User/ResetSpecificPermissions';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processResetSpecificPermissions(_response);
      });
  }

  protected processResetSpecificPermissions(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  unlock(body: EntityDtoOfInt64 | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/User/Unlock';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUnlock(_response);
      });
  }

  protected processUnlock(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  updatePermissions(
    body: UpdateUserPermissionsInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/User/UpdatePermissions';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdatePermissions(_response);
      });
  }

  protected processUpdatePermissions(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 更新用户CID
   * @param cid (optional)
   * @return Success
   */
  updateUserCid(cid: string | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/User/UpdateUserCid?';
    if (cid === null) throw new Error("The parameter 'cid' cannot be null.");
    else if (cid !== undefined) url_ += 'cid=' + encodeURIComponent('' + cid) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'PUT',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateUserCid(_response);
      });
  }

  protected processUpdateUserCid(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 改变客户端连接状态
   * @param isValidate (optional)
   * @return Success
   */
  validateConnectUser(
    isValidate: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/User/ValidateConnectUser?';
    if (isValidate === null) throw new Error("The parameter 'isValidate' cannot be null.");
    else if (isValidate !== undefined)
      url_ += 'isValidate=' + encodeURIComponent('' + isValidate) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processValidateConnectUser(_response);
      });
  }

  protected processValidateConnectUser(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class UserLinkServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @param sorting (optional)
   * @return Success
   */
  getLinkedUsers(
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    sorting: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfLinkedUserDto> {
    let url_ = this.baseUrl + '/api/services/app/UserLink/GetLinkedUsers?';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetLinkedUsers(_response);
      });
  }

  protected processGetLinkedUsers(response: AxiosResponse): Promise<PagedResultDtoOfLinkedUserDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfLinkedUserDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfLinkedUserDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfLinkedUserDto>(null as any);
  }

  /**
   * @return Success
   */
  getRecentlyUsedLinkedUsers(
    cancelToken?: CancelToken | undefined,
  ): Promise<ListResultDtoOfLinkedUserDto> {
    let url_ = this.baseUrl + '/api/services/app/UserLink/GetRecentlyUsedLinkedUsers';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetRecentlyUsedLinkedUsers(_response);
      });
  }

  protected processGetRecentlyUsedLinkedUsers(
    response: AxiosResponse,
  ): Promise<ListResultDtoOfLinkedUserDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ListResultDtoOfLinkedUserDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ListResultDtoOfLinkedUserDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ListResultDtoOfLinkedUserDto>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  linkToUser(
    body: LinkToUserInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/UserLink/LinkToUser';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processLinkToUser(_response);
      });
  }

  protected processLinkToUser(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  unlinkUser(
    body: UnlinkUserInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/UserLink/UnlinkUser';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUnlinkUser(_response);
      });
  }

  protected processUnlinkUser(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class UserLoginServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  getRecentUserLoginAttempts(
    cancelToken?: CancelToken | undefined,
  ): Promise<ListResultDtoOfUserLoginAttemptDto> {
    let url_ = this.baseUrl + '/api/services/app/UserLogin/GetRecentUserLoginAttempts';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetRecentUserLoginAttempts(_response);
      });
  }

  protected processGetRecentUserLoginAttempts(
    response: AxiosResponse,
  ): Promise<ListResultDtoOfUserLoginAttemptDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ListResultDtoOfUserLoginAttemptDto.fromJS(resultData200, _mappings);
      return Promise.resolve<ListResultDtoOfUserLoginAttemptDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ListResultDtoOfUserLoginAttemptDto>(null as any);
  }
}

export class VehicleServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除Vehicle的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Vehicle/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改车辆管理的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateVehicleInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Vehicle/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除车辆管理信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/Vehicle/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取VehicleListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<VehicleListDto> {
    let url_ = this.baseUrl + '/api/services/app/Vehicle/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<VehicleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = VehicleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<VehicleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<VehicleListDto>(null as any);
  }

  /**
   * 获取编辑 车辆管理
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetVehicleForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/Vehicle/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetVehicleForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetVehicleForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetVehicleForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetVehicleForEditOutput>(null as any);
  }

  /**
   * 获取车辆管理的分页列表信息
   * @param logisticsCompanyId (optional) 物流公司id
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    logisticsCompanyId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfVehicleListDto> {
    let url_ = this.baseUrl + '/api/services/app/Vehicle/GetPaged?';
    if (logisticsCompanyId === null)
      throw new Error("The parameter 'logisticsCompanyId' cannot be null.");
    else if (logisticsCompanyId !== undefined)
      url_ += 'logisticsCompanyId=' + encodeURIComponent('' + logisticsCompanyId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfVehicleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfVehicleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfVehicleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfVehicleListDto>(null as any);
  }

  /**
   * 获取车辆分享详情
   * @param vehicleId (optional) 车辆信息Id
   * @param driverId (optional) 司机Id
   * @param supercargoId (optional) 押运员Id
   * @return Success
   */
  getShareVehicleDetails(
    vehicleId: number | undefined,
    driverId: number | undefined,
    supercargoId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<VehicleShareDetailDto> {
    let url_ = this.baseUrl + '/api/services/app/Vehicle/GetShareVehicleDetails?';
    if (vehicleId === null) throw new Error("The parameter 'vehicleId' cannot be null.");
    else if (vehicleId !== undefined)
      url_ += 'vehicleId=' + encodeURIComponent('' + vehicleId) + '&';
    if (driverId === null) throw new Error("The parameter 'driverId' cannot be null.");
    else if (driverId !== undefined) url_ += 'driverId=' + encodeURIComponent('' + driverId) + '&';
    if (supercargoId === null) throw new Error("The parameter 'supercargoId' cannot be null.");
    else if (supercargoId !== undefined)
      url_ += 'supercargoId=' + encodeURIComponent('' + supercargoId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetShareVehicleDetails(_response);
      });
  }

  protected processGetShareVehicleDetails(response: AxiosResponse): Promise<VehicleShareDetailDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = VehicleShareDetailDto.fromJS(resultData200, _mappings);
      return Promise.resolve<VehicleShareDetailDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<VehicleShareDetailDto>(null as any);
  }

  /**
   * 导出为excel文件
   * @param logisticsCompanyId (optional) 物流公司id
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getToExcelFile(
    logisticsCompanyId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/Vehicle/GetToExcelFile?';
    if (logisticsCompanyId === null)
      throw new Error("The parameter 'logisticsCompanyId' cannot be null.");
    else if (logisticsCompanyId !== undefined)
      url_ += 'logisticsCompanyId=' + encodeURIComponent('' + logisticsCompanyId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 获取车辆信息前十条
   * @param filterText (optional) 车牌号和物流公司
   * @return Success
   */
  getVehicleList(
    filterText: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<VehicleListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/Vehicle/GetVehicleList?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetVehicleList(_response);
      });
  }

  protected processGetVehicleList(response: AxiosResponse): Promise<VehicleListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(VehicleListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<VehicleListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<VehicleListDto[]>(null as any);
  }
}

export class WebSiteLogServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 下载日志文件压缩包
   * @return Success
   */
  downloadWebLogs(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/WebSiteLog/DownloadWebLogs';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDownloadWebLogs(_response);
      });
  }

  protected processDownloadWebLogs(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 获取最新的网站日志信息
   * @return Success
   */
  getLatestWebLogs(cancelToken?: CancelToken | undefined): Promise<GetLatestWebLogsOutput> {
    let url_ = this.baseUrl + '/api/services/app/WebSiteLog/GetLatestWebLogs';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetLatestWebLogs(_response);
      });
  }

  protected processGetLatestWebLogs(response: AxiosResponse): Promise<GetLatestWebLogsOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetLatestWebLogsOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetLatestWebLogsOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetLatestWebLogsOutput>(null as any);
  }
}

export class WechatAppConfigServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 批量删除WechatAppConfig的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WechatAppConfig/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 添加或者修改WechatAppConfig的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateWechatAppConfigInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WechatAppConfig/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除WechatAppConfig信息的方法
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WechatAppConfig/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 通过指定id获取WechatAppConfigListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WechatAppConfigListDto> {
    let url_ = this.baseUrl + '/api/services/app/WechatAppConfig/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<WechatAppConfigListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WechatAppConfigListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WechatAppConfigListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WechatAppConfigListDto>(null as any);
  }

  /**
   * 获取编辑 WechatAppConfig
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetWechatAppConfigForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/WechatAppConfig/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetWechatAppConfigForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetWechatAppConfigForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetWechatAppConfigForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetWechatAppConfigForEditOutput>(null as any);
  }

  /**
   * 获取WechatAppConfig的分页列表信息
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWechatAppConfigListDto> {
    let url_ = this.baseUrl + '/api/services/app/WechatAppConfig/GetPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWechatAppConfigListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWechatAppConfigListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWechatAppConfigListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWechatAppConfigListDto>(null as any);
  }

  /**
   * 将wechat app注入到容器,如果已注入则刷新注入
   * @param appId (optional)
   * @return Success
   */
  registerWechatApp(
    appId: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WechatAppConfig/RegisterWechatApp?';
    if (appId === null) throw new Error("The parameter 'appId' cannot be null.");
    else if (appId !== undefined) url_ += 'appId=' + encodeURIComponent('' + appId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRegisterWechatApp(_response);
      });
  }

  protected processRegisterWechatApp(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class WechatMediaServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  createOtherrMaterial(cancelToken?: CancelToken | undefined): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/WechatMedia/CreateOtherrMaterial';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOtherrMaterial(_response);
      });
  }

  protected processCreateOtherrMaterial(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }

  /**
   * @param appId (optional)
   * @param mediaId (optional)
   * @return Success
   */
  delete(
    appId: string | undefined,
    mediaId: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WechatMedia/Delete?';
    if (appId === null) throw new Error("The parameter 'appId' cannot be null.");
    else if (appId !== undefined) url_ += 'appId=' + encodeURIComponent('' + appId) + '&';
    if (mediaId === null) throw new Error("The parameter 'mediaId' cannot be null.");
    else if (mediaId !== undefined) url_ += 'mediaId=' + encodeURIComponent('' + mediaId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  getImageTextMaterialPaged(
    body: GetImageTextMaterialsInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfMediaList_News_Item> {
    let url_ = this.baseUrl + '/api/services/app/WechatMedia/GetImageTextMaterialPaged';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetImageTextMaterialPaged(_response);
      });
  }

  protected processGetImageTextMaterialPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfMediaList_News_Item> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfMediaList_News_Item.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfMediaList_News_Item>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfMediaList_News_Item>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  getOtherMaterialPaged(
    body: GetOtherMaterialsInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfMediaList_Others_Item> {
    let url_ = this.baseUrl + '/api/services/app/WechatMedia/GetOtherMaterialPaged';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOtherMaterialPaged(_response);
      });
  }

  protected processGetOtherMaterialPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfMediaList_Others_Item> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfMediaList_Others_Item.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfMediaList_Others_Item>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfMediaList_Others_Item>(null as any);
  }
}

export class WechatMenuAppSeviceServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  createOrWechatEditMenu(
    body: CreateOrEditWechatMenuInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WechatMenuAppSevice/CreateOrWechatEditMenu';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrWechatEditMenu(_response);
      });
  }

  protected processCreateOrWechatEditMenu(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param appId (optional)
   * @param menuConditionalId (optional)
   * @return Success
   */
  deleteMenuConditional(
    appId: string | undefined,
    menuConditionalId: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WechatMenuAppSevice/DeleteMenuConditional?';
    if (appId === null) throw new Error("The parameter 'appId' cannot be null.");
    else if (appId !== undefined) url_ += 'appId=' + encodeURIComponent('' + appId) + '&';
    if (menuConditionalId === null)
      throw new Error("The parameter 'menuConditionalId' cannot be null.");
    else if (menuConditionalId !== undefined)
      url_ += 'menuConditionalId=' + encodeURIComponent('' + menuConditionalId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteMenuConditional(_response);
      });
  }

  protected processDeleteMenuConditional(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param appId (optional)
   * @return Success
   */
  getMenuForEdit(
    appId: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetWechatMenuForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/WechatMenuAppSevice/GetMenuForEdit?';
    if (appId === null) throw new Error("The parameter 'appId' cannot be null.");
    else if (appId !== undefined) url_ += 'appId=' + encodeURIComponent('' + appId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetMenuForEdit(_response);
      });
  }

  protected processGetMenuForEdit(response: AxiosResponse): Promise<GetWechatMenuForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetWechatMenuForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetWechatMenuForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetWechatMenuForEditOutput>(null as any);
  }
}

export class WeixinJSSDKServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param userId (optional)
   * @return Success
   */
  generateQrCode(
    userId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<AuthQrModel> {
    let url_ = this.baseUrl + '/api/services/app/WeixinJSSDK/GenerateQrCode?';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGenerateQrCode(_response);
      });
  }

  protected processGenerateQrCode(response: AxiosResponse): Promise<AuthQrModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AuthQrModel.fromJS(resultData200, _mappings);
      return Promise.resolve<AuthQrModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AuthQrModel>(null as any);
  }

  /**
   * @param url (optional)
   * @return Success
   */
  getJsSdkConfig(
    url: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<JsSdkUiPackage> {
    let url_ = this.baseUrl + '/api/services/app/WeixinJSSDK/GetJsSdkConfig?';
    if (url === null) throw new Error("The parameter 'url' cannot be null.");
    else if (url !== undefined) url_ += 'url=' + encodeURIComponent('' + url) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetJsSdkConfig(_response);
      });
  }

  protected processGetJsSdkConfig(response: AxiosResponse): Promise<JsSdkUiPackage> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = JsSdkUiPackage.fromJS(resultData200, _mappings);
      return Promise.resolve<JsSdkUiPackage>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<JsSdkUiPackage>(null as any);
  }
}

export class WlExtendApiServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 新增或删除抢单运力信息
   * @param body (optional)
   * @return Success
   */
  addOrDeleteBidCapacity(
    body: BidCapacityInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/WlExtendApi/AddOrDeleteBidCapacity';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAddOrDeleteBidCapacity(_response);
      });
  }

  protected processAddOrDeleteBidCapacity(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }

  /**
   * 删除货单抢单信息
   * @param id (optional)
   * @return Success
   */
  deleteOrderBid(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlExtendApi/DeleteOrderBid?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteOrderBid(_response);
      });
  }

  protected processDeleteOrderBid(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 获取货单明细
   * @param id (optional)
   * @param token (optional)
   * @return Success
   */
  getOrderById(
    id: number | undefined,
    token: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlExtendApi/GetOrderById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    if (token === null) throw new Error("The parameter 'token' cannot be null.");
    else if (token !== undefined) url_ += 'token=' + encodeURIComponent('' + token) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrderById(_response);
      });
  }

  protected processGetOrderById(response: AxiosResponse): Promise<WlOrderFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlOrderFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlOrderFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderFormListDto>(null as any);
  }

  /**
   * 获取货单列表
   * @param startTime (optional)
   * @param endTime (optional)
   * @param token (optional)
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getOrderPaged(
    startTime: dayjs.Dayjs | undefined,
    endTime: dayjs.Dayjs | undefined,
    token: string | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlOrderFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlExtendApi/GetOrderPaged?';
    if (startTime === null) throw new Error("The parameter 'startTime' cannot be null.");
    else if (startTime !== undefined)
      url_ +=
        'startTime=' + encodeURIComponent(startTime ? '' + startTime.toISOString() : '') + '&';
    if (endTime === null) throw new Error("The parameter 'endTime' cannot be null.");
    else if (endTime !== undefined)
      url_ += 'endTime=' + encodeURIComponent(endTime ? '' + endTime.toISOString() : '') + '&';
    if (token === null) throw new Error("The parameter 'token' cannot be null.");
    else if (token !== undefined) url_ += 'token=' + encodeURIComponent('' + token) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrderPaged(_response);
      });
  }

  protected processGetOrderPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlOrderFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlOrderFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlOrderFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlOrderFormListDto>(null as any);
  }

  /**
   * 物流用户抢单
   * @param body (optional)
   * @return Success
   */
  orderBiding(
    body: WlOrderBidingInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlExtendApi/OrderBiding';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processOrderBiding(_response);
      });
  }

  protected processOrderBiding(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class WlOrderFormServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 快速添加运力信息
   * @param body (optional)
   * @return Success
   */
  addCapacityFast(
    body: AddCapacityFastInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/AddCapacityFast';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAddCapacityFast(_response);
      });
  }

  protected processAddCapacityFast(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】新增或删除抢单运力信息
   * @param body (optional)
   * @return Success
   */
  addOrDeleteBidCapacity(
    body: BidCapacityInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/AddOrDeleteBidCapacity';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAddOrDeleteBidCapacity(_response);
      });
  }

  protected processAddOrDeleteBidCapacity(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }

  /**
   * 【客户经理】调整原始价格
   * @param body (optional)
   * @return Success
   */
  adjustOriginalPrice(
    body: AdjustOriginalPriceInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/AdjustOriginalPrice';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAdjustOriginalPrice(_response);
      });
  }

  protected processAdjustOriginalPrice(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【物流经理】调整价差
   * @param body (optional)
   * @return Success
   */
  adjustPrice(
    body: AdjustPriceInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/AdjustPrice';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAdjustPrice(_response);
      });
  }

  protected processAdjustPrice(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 审核报价单
   * @param body (optional)
   * @return Success
   */
  approveWlOrderForm(
    body: ApproveInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/ApproveWlOrderForm';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processApproveWlOrderForm(_response);
      });
  }

  protected processApproveWlOrderForm(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 为司机分配用户
   * @param userId (optional) 物流用户
   * @param driverId (optional) 对于司机
   * @return Success
   */
  assignUserIdToDriver(
    userId: number | undefined,
    driverId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/AssignUserIdToDriver?';
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined) url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
    if (driverId === null) throw new Error("The parameter 'driverId' cannot be null.");
    else if (driverId !== undefined) url_ += 'driverId=' + encodeURIComponent('' + driverId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAssignUserIdToDriver(_response);
      });
  }

  protected processAssignUserIdToDriver(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【定时任务】自动更新货单状态（是否超期）
   * @return Success
   */
  autoUpdateOrder(cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/AutoUpdateOrder';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAutoUpdateOrder(_response);
      });
  }

  protected processAutoUpdateOrder(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】批量删除WlOrderForm的方法
   * @param body (optional)
   * @return Success
   */
  batchDelete(body: number[] | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDelete';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDelete(_response);
      });
  }

  protected processBatchDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除货单抢单信息
   * @param body (optional)
   * @return Success
   */
  batchDeleteOrderBid(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteOrderBid';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteOrderBid(_response);
      });
  }

  protected processBatchDeleteOrderBid(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】批量删除运力信息
   * @param body (optional)
   * @return Success
   */
  batchDeleteWlBaseCapacity(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteWlBaseCapacity';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteWlBaseCapacity(_response);
      });
  }

  protected processBatchDeleteWlBaseCapacity(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】批量删除司机信息
   * @param body (optional)
   * @return Success
   */
  batchDeleteWlBaseDriver(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteWlBaseDriver';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteWlBaseDriver(_response);
      });
  }

  protected processBatchDeleteWlBaseDriver(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】批量删除押运信息
   * @param body (optional)
   * @return Success
   */
  batchDeleteWlBaseSupercargo(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteWlBaseSupercargo';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteWlBaseSupercargo(_response);
      });
  }

  protected processBatchDeleteWlBaseSupercargo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】批量删除车头信息
   * @param body (optional)
   * @return Success
   */
  batchDeleteWlBaseVehicle(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteWlBaseVehicle';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteWlBaseVehicle(_response);
      });
  }

  protected processBatchDeleteWlBaseVehicle(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】批量删除车挂信息
   * @param body (optional)
   * @return Success
   */
  batchDeleteWlBaseVehicleTrailer(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteWlBaseVehicleTrailer';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteWlBaseVehicleTrailer(_response);
      });
  }

  protected processBatchDeleteWlBaseVehicleTrailer(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除空车上报信息
   * @param body (optional)
   * @return Success
   */
  batchDeleteWlEmptyVehicle(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteWlEmptyVehicle';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteWlEmptyVehicle(_response);
      });
  }

  protected processBatchDeleteWlEmptyVehicle(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除空车预约信息
   * @param body (optional)
   * @return Success
   */
  batchDeleteWlEmptyVehicleReserve(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteWlEmptyVehicleReserve';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteWlEmptyVehicleReserve(_response);
      });
  }

  protected processBatchDeleteWlEmptyVehicleReserve(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】批量删除物流推送信息
   * @param body (optional)
   * @return Success
   */
  batchDeleteWlOrderPush(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteWlOrderPush';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteWlOrderPush(_response);
      });
  }

  protected processBatchDeleteWlOrderPush(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】批量删除
   * @param body (optional)
   * @return Success
   */
  batchDeleteWlOrderPushByOrderId(
    body: BatchDeleteWlOrderPushDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteWlOrderPushByOrderId';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteWlOrderPushByOrderId(_response);
      });
  }

  protected processBatchDeleteWlOrderPushByOrderId(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除询价单报价信息
   * @param body (optional)
   * @return Success
   */
  batchDeleteWlOrderQuote(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteWlOrderQuote';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteWlOrderQuote(_response);
      });
  }

  protected processBatchDeleteWlOrderQuote(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除货单状态信息
   * @param body (optional)
   * @return Success
   */
  batchDeleteWlOrderState(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteWlOrderState';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteWlOrderState(_response);
      });
  }

  protected processBatchDeleteWlOrderState(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除危废信息
   * @param body (optional)
   * @return Success
   */
  batchDeleteWlOrderWaste(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteWlOrderWaste';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteWlOrderWaste(_response);
      });
  }

  protected processBatchDeleteWlOrderWaste(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量删除询价单信息
   * @param body (optional)
   * @return Success
   */
  batchDeleteWlQuoteForm(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteWlQuoteForm';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteWlQuoteForm(_response);
      });
  }

  protected processBatchDeleteWlQuoteForm(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】批量删除运输信息
   * @param body (optional)
   * @return Success
   */
  batchDeleteWlTransportInfo(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BatchDeleteWlTransportInfo';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBatchDeleteWlTransportInfo(_response);
      });
  }

  protected processBatchDeleteWlTransportInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 将物流租户绑定到处置租户
   * @param disposalId (optional)
   * @param body (optional)
   * @return Success
   */
  bindLogisticsToDisposal(
    disposalId: number | undefined,
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/BindLogisticsToDisposal?';
    if (disposalId === null) throw new Error("The parameter 'disposalId' cannot be null.");
    else if (disposalId !== undefined)
      url_ += 'disposalId=' + encodeURIComponent('' + disposalId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processBindLogisticsToDisposal(_response);
      });
  }

  protected processBindLogisticsToDisposal(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 货单取消
   * @param body (optional)
   * @return Success
   */
  cancelOrder(
    body: EntityDtoOfInt64 | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CancelOrder';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCancelOrder(_response);
      });
  }

  protected processCancelOrder(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 物流端撤销对账
   * @param id (optional)
   * @return Success
   */
  cancelStatement(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CancelStatement?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCancelStatement(_response);
      });
  }

  protected processCancelStatement(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 物流企业取消空车上报
   * @param body (optional)
   * @return Success
   */
  cancelWlEmptyVehicleById(
    body: EntityDtoOfInt64 | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CancelWlEmptyVehicleById';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCancelWlEmptyVehicleById(_response);
      });
  }

  protected processCancelWlEmptyVehicleById(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 检查车头或车挂车牌号是否存在
   * @param body (optional)
   * @return Success
   */
  checkCarNumber(
    body: CarNumberInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CheckCarNumber';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCheckCarNumber(_response);
      });
  }

  protected processCheckCarNumber(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 处置端确认对账
   * @param id (optional) 对账（货单）ID
   * @return Success
   */
  confirmStatement(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/ConfirmStatement?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processConfirmStatement(_response);
      });
  }

  protected processConfirmStatement(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】添加或者修改货单的公共方法
   * @param body (optional)
   * @return Success
   */
  createOrUpdate(
    body: CreateOrUpdateWlOrderFormInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdate(_response);
      });
  }

  protected processCreateOrUpdate(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】新增或更新货单抢单信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateOrderBid(
    body: WlOrderBidEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdateOrderBid';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateOrderBid(_response);
      });
  }

  protected processCreateOrUpdateOrderBid(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增或更新货单跟进
   * @param body (optional)
   * @return Success
   */
  createOrUpdateOrderFollow(
    body: WlOrderFollowEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdateOrderFollow';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateOrderFollow(_response);
      });
  }

  protected processCreateOrUpdateOrderFollow(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增或修改询价单
   * @param body (optional)
   * @return Success
   */
  createOrUpdateQuoteForm(
    body: WlQuoteFormInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdateQuoteForm';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateQuoteForm(_response);
      });
  }

  protected processCreateOrUpdateQuoteForm(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】新增或更新运力信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateWlBaseCapacity(
    body: WlBaseCapacityInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdateWlBaseCapacity';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateWlBaseCapacity(_response);
      });
  }

  protected processCreateOrUpdateWlBaseCapacity(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】新增或更新司机信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateWlBaseDriver(
    body: WlBaseDriverInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdateWlBaseDriver';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateWlBaseDriver(_response);
      });
  }

  protected processCreateOrUpdateWlBaseDriver(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】新增或更新押运信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateWlBaseSupercargo(
    body: WlBaseSupercargoInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdateWlBaseSupercargo';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateWlBaseSupercargo(_response);
      });
  }

  protected processCreateOrUpdateWlBaseSupercargo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】新增或更新车头信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateWlBaseVehicle(
    body: WlBaseVehicleInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdateWlBaseVehicle';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateWlBaseVehicle(_response);
      });
  }

  protected processCreateOrUpdateWlBaseVehicle(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】新增或更新车挂信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateWlBaseVehicleTrailer(
    body: WlBaseVehicleTrailerInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdateWlBaseVehicleTrailer';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateWlBaseVehicleTrailer(_response);
      });
  }

  protected processCreateOrUpdateWlBaseVehicleTrailer(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增或更新空车上报信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateWlEmptyVehicle(
    body: WlEmptyVehicleInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdateWlEmptyVehicle';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateWlEmptyVehicle(_response);
      });
  }

  protected processCreateOrUpdateWlEmptyVehicle(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 空车每日推荐
   * @param body (optional)
   * @return Success
   */
  createOrUpdateWlEmptyVehicleDay(
    body: WlEmptyVehicleDayInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdateWlEmptyVehicleDay';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateWlEmptyVehicleDay(_response);
      });
  }

  protected processCreateOrUpdateWlEmptyVehicleDay(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增或更新询价单报价信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateWlOrderQuote(
    body: WlOrderQuoteInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdateWlOrderQuote';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateWlOrderQuote(_response);
      });
  }

  protected processCreateOrUpdateWlOrderQuote(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增或更新货单状态信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateWlOrderState(
    body: WlOrderStateInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdateWlOrderState';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateWlOrderState(_response);
      });
  }

  protected processCreateOrUpdateWlOrderState(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增或更新危废信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateWlOrderWaste(
    body: WlOrderWasteInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdateWlOrderWaste';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateWlOrderWaste(_response);
      });
  }

  protected processCreateOrUpdateWlOrderWaste(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】新增或更新运输信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateWlTransportInfo(
    body: WlTransportInfoInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateOrUpdateWlTransportInfo';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateWlTransportInfo(_response);
      });
  }

  protected processCreateOrUpdateWlTransportInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】新增货单推送信息
   * @param body (optional)
   * @return Success
   */
  createWlOrderPush(
    body: WlOrderPushInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateWlOrderPush';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateWlOrderPush(_response);
      });
  }

  protected processCreateWlOrderPush(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】新增询价单推送信息
   * @param body (optional)
   * @return Success
   */
  createWlQuotePush(
    body: WlOrderPushInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/CreateWlQuotePush';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateWlQuotePush(_response);
      });
  }

  protected processCreateWlQuotePush(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】删除货单信息
   * @param id (optional)
   * @return Success
   */
  delete(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/Delete?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除货单抢单信息
   * @param id (optional)
   * @return Success
   */
  deleteOrderBid(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteOrderBid?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteOrderBid(_response);
      });
  }

  protected processDeleteOrderBid(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除货单跟进
   * @param id (optional)
   * @return Success
   */
  deleteOrderFollow(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteOrderFollow?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteOrderFollow(_response);
      });
  }

  protected processDeleteOrderFollow(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】删除运力信息
   * @param id (optional)
   * @return Success
   */
  deleteWlBaseCapacity(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteWlBaseCapacity?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteWlBaseCapacity(_response);
      });
  }

  protected processDeleteWlBaseCapacity(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】删除司机信息
   * @param id (optional)
   * @return Success
   */
  deleteWlBaseDriver(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteWlBaseDriver?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteWlBaseDriver(_response);
      });
  }

  protected processDeleteWlBaseDriver(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】删除押运信息
   * @param id (optional)
   * @return Success
   */
  deleteWlBaseSupercargo(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteWlBaseSupercargo?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteWlBaseSupercargo(_response);
      });
  }

  protected processDeleteWlBaseSupercargo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】删除车头信息
   * @param id (optional)
   * @return Success
   */
  deleteWlBaseVehicle(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteWlBaseVehicle?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteWlBaseVehicle(_response);
      });
  }

  protected processDeleteWlBaseVehicle(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】删除车挂信息
   * @param id (optional)
   * @return Success
   */
  deleteWlBaseVehicleTrailer(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteWlBaseVehicleTrailer?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteWlBaseVehicleTrailer(_response);
      });
  }

  protected processDeleteWlBaseVehicleTrailer(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除空车上报信息
   * @param id (optional)
   * @return Success
   */
  deleteWlEmptyVehicle(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteWlEmptyVehicle?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteWlEmptyVehicle(_response);
      });
  }

  protected processDeleteWlEmptyVehicle(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除空车每日推荐
   * @param id (optional)
   * @return Success
   */
  deleteWlEmptyVehicleDay(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteWlEmptyVehicleDay?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteWlEmptyVehicleDay(_response);
      });
  }

  protected processDeleteWlEmptyVehicleDay(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除空车预约信息
   * @param id (optional)
   * @return Success
   */
  deleteWlEmptyVehicleReserve(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteWlEmptyVehicleReserve?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteWlEmptyVehicleReserve(_response);
      });
  }

  protected processDeleteWlEmptyVehicleReserve(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】删除物流推送信息
   * @param id (optional)
   * @return Success
   */
  deleteWlOrderPush(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteWlOrderPush?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteWlOrderPush(_response);
      });
  }

  protected processDeleteWlOrderPush(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除询价单报价信息
   * @param id (optional)
   * @return Success
   */
  deleteWlOrderQuote(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteWlOrderQuote?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteWlOrderQuote(_response);
      });
  }

  protected processDeleteWlOrderQuote(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除货单状态信息
   * @param id (optional)
   * @return Success
   */
  deleteWlOrderState(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteWlOrderState?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteWlOrderState(_response);
      });
  }

  protected processDeleteWlOrderState(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除危废信息
   * @param id (optional)
   * @return Success
   */
  deleteWlOrderWaste(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteWlOrderWaste?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteWlOrderWaste(_response);
      });
  }

  protected processDeleteWlOrderWaste(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除询价单信息
   * @param id (optional)
   * @return Success
   */
  deleteWlQuoteForm(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteWlQuoteForm?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteWlQuoteForm(_response);
      });
  }

  protected processDeleteWlQuoteForm(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】删除运输信息
   * @param id (optional)
   * @return Success
   */
  deleteWlTransportInfo(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/DeleteWlTransportInfo?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteWlTransportInfo(_response);
      });
  }

  protected processDeleteWlTransportInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 空车预约
   * @param body (optional) 空车ID
   * @return Success
   */
  emptyVehicleReserve(
    body: EntityDtoOfInt64 | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/EmptyVehicleReserve';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processEmptyVehicleReserve(_response);
      });
  }

  protected processEmptyVehicleReserve(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 空车预约审核
   * @param id (optional) 预约id
   * @param status (optional) 审核状态，1：预约成功，2：预约失败
   * @param remark (optional)
   * @return Success
   */
  emptyVehicleReserveApprove(
    id: number | undefined,
    status: number | undefined,
    remark: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/EmptyVehicleReserveApprove?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    if (status === null) throw new Error("The parameter 'status' cannot be null.");
    else if (status !== undefined) url_ += 'status=' + encodeURIComponent('' + status) + '&';
    if (remark === null) throw new Error("The parameter 'remark' cannot be null.");
    else if (remark !== undefined) url_ += 'remark=' + encodeURIComponent('' + remark) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processEmptyVehicleReserveApprove(_response);
      });
  }

  protected processEmptyVehicleReserveApprove(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 导出每日空车列表
   * @param body (optional) 记录ID
   * @return Success
   */
  exportExcelForEmptyVehicleDay(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/ExportExcelForEmptyVehicleDay';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processExportExcelForEmptyVehicleDay(_response);
      });
  }

  protected processExportExcelForEmptyVehicleDay(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 导出货单对账单
   * @param body (optional) 对账单（货单）ID
   * @return Success
   */
  exportExcelForStatementOrder(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/ExportExcelForStatementOrder';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processExportExcelForStatementOrder(_response);
      });
  }

  protected processExportExcelForStatementOrder(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 导出运单对账单
   * @param body (optional) 对账单（货单）ID
   * @return Success
   */
  exportExcelForStatementTrans(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/ExportExcelForStatementTrans';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processExportExcelForStatementTrans(_response);
      });
  }

  protected processExportExcelForStatementTrans(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  findUsers(
    body: CommonLookupFindUsersInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfNameValueDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/FindUsers';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processFindUsers(_response);
      });
  }

  protected processFindUsers(response: AxiosResponse): Promise<PagedResultDtoOfNameValueDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfNameValueDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfNameValueDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfNameValueDto>(null as any);
  }

  /**
   * 通过指定id获取WlOrderFormListDto信息
   * @param id (optional)
   * @return Success
   */
  getById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetById(_response);
      });
  }

  protected processGetById(response: AxiosResponse): Promise<WlOrderFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlOrderFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlOrderFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderFormListDto>(null as any);
  }

  /**
   * 【物流经理】获取数据统计
   * @return Success
   */
  getDataStates(cancelToken?: CancelToken | undefined): Promise<DataStatesDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetDataStates';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDataStates(_response);
      });
  }

  protected processGetDataStates(response: AxiosResponse): Promise<DataStatesDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataStatesDto.fromJS(resultData200, _mappings);
      return Promise.resolve<DataStatesDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DataStatesDto>(null as any);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  getDetailsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetDetailsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDetailsById(_response);
      });
  }

  protected processGetDetailsById(response: AxiosResponse): Promise<WlOrderFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlOrderFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlOrderFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderFormListDto>(null as any);
  }

  /**
   * 处置企业获取空车推荐
   * @param isRead (optional) 是否读，false：未读，true：已读
   * @return Success
   */
  getEmptyVehicleRecommendList(
    isRead: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlEmptyVehicleRecommendListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetEmptyVehicleRecommendList?';
    if (isRead === null) throw new Error("The parameter 'isRead' cannot be null.");
    else if (isRead !== undefined) url_ += 'isRead=' + encodeURIComponent('' + isRead) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetEmptyVehicleRecommendList(_response);
      });
  }

  protected processGetEmptyVehicleRecommendList(
    response: AxiosResponse,
  ): Promise<WlEmptyVehicleRecommendListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(WlEmptyVehicleRecommendListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<WlEmptyVehicleRecommendListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlEmptyVehicleRecommendListDto[]>(null as any);
  }

  /**
   * 导出货单
   * @param startTime (optional)
   * @param endTime (optional)
   * @param formState (optional) 审核状态：0：未审核，1：审核通过，2：审核不通过
   * @param isMyGoods (optional) 是否是关于自己的货单
   * @param tenantId (optional) 租户
   * @param bidState (optional) 抢单状态，1：抢单中，2：抢单成功，3：抢单失败
   * @param isFromPush (optional) 是否来自推送
   * @param isSpecialOrder (optional) 是否是专车单，false：不是，true：是
   * @param isManagerApproved (optional) 物流经理审核
   * @param createStartTime (optional)
   * @param createEndTime (optional)
   * @param orderState (optional) 单据状态，0：抢单中，1：抢单成功，2：抢单失败，3：货单结束，4：货单取消
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getExcelForOrderForm(
    startTime: dayjs.Dayjs | undefined,
    endTime: dayjs.Dayjs | undefined,
    formState: number | undefined,
    isMyGoods: boolean | undefined,
    tenantId: number | undefined,
    bidState: number | undefined,
    isFromPush: boolean | undefined,
    isSpecialOrder: boolean | undefined,
    isManagerApproved: boolean | undefined,
    createStartTime: dayjs.Dayjs | undefined,
    createEndTime: dayjs.Dayjs | undefined,
    orderState: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetExcelForOrderForm?';
    if (startTime === null) throw new Error("The parameter 'startTime' cannot be null.");
    else if (startTime !== undefined)
      url_ +=
        'startTime=' + encodeURIComponent(startTime ? '' + startTime.toISOString() : '') + '&';
    if (endTime === null) throw new Error("The parameter 'endTime' cannot be null.");
    else if (endTime !== undefined)
      url_ += 'endTime=' + encodeURIComponent(endTime ? '' + endTime.toISOString() : '') + '&';
    if (formState === null) throw new Error("The parameter 'formState' cannot be null.");
    else if (formState !== undefined)
      url_ += 'formState=' + encodeURIComponent('' + formState) + '&';
    if (isMyGoods === null) throw new Error("The parameter 'isMyGoods' cannot be null.");
    else if (isMyGoods !== undefined)
      url_ += 'isMyGoods=' + encodeURIComponent('' + isMyGoods) + '&';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (bidState === null) throw new Error("The parameter 'bidState' cannot be null.");
    else if (bidState !== undefined) url_ += 'bidState=' + encodeURIComponent('' + bidState) + '&';
    if (isFromPush === null) throw new Error("The parameter 'isFromPush' cannot be null.");
    else if (isFromPush !== undefined)
      url_ += 'isFromPush=' + encodeURIComponent('' + isFromPush) + '&';
    if (isSpecialOrder === null) throw new Error("The parameter 'isSpecialOrder' cannot be null.");
    else if (isSpecialOrder !== undefined)
      url_ += 'isSpecialOrder=' + encodeURIComponent('' + isSpecialOrder) + '&';
    if (isManagerApproved === null)
      throw new Error("The parameter 'isManagerApproved' cannot be null.");
    else if (isManagerApproved !== undefined)
      url_ += 'isManagerApproved=' + encodeURIComponent('' + isManagerApproved) + '&';
    if (createStartTime === null)
      throw new Error("The parameter 'createStartTime' cannot be null.");
    else if (createStartTime !== undefined)
      url_ +=
        'createStartTime=' +
        encodeURIComponent(createStartTime ? '' + createStartTime.toISOString() : '') +
        '&';
    if (createEndTime === null) throw new Error("The parameter 'createEndTime' cannot be null.");
    else if (createEndTime !== undefined)
      url_ +=
        'createEndTime=' +
        encodeURIComponent(createEndTime ? '' + createEndTime.toISOString() : '') +
        '&';
    if (orderState === null) throw new Error("The parameter 'orderState' cannot be null.");
    else if (orderState !== undefined)
      url_ += 'orderState=' + encodeURIComponent('' + orderState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetExcelForOrderForm(_response);
      });
  }

  protected processGetExcelForOrderForm(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 导出运单
   * @param transState (optional) 运单状态，1：运单开始，2：运单结束
   * @param createStartTime (optional)
   * @param createEndTime (optional)
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getExcelForTransForm(
    transState: number | undefined,
    createStartTime: dayjs.Dayjs | undefined,
    createEndTime: dayjs.Dayjs | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetExcelForTransForm?';
    if (transState === null) throw new Error("The parameter 'transState' cannot be null.");
    else if (transState !== undefined)
      url_ += 'transState=' + encodeURIComponent('' + transState) + '&';
    if (createStartTime === null)
      throw new Error("The parameter 'createStartTime' cannot be null.");
    else if (createStartTime !== undefined)
      url_ +=
        'createStartTime=' +
        encodeURIComponent(createStartTime ? '' + createStartTime.toISOString() : '') +
        '&';
    if (createEndTime === null) throw new Error("The parameter 'createEndTime' cannot be null.");
    else if (createEndTime !== undefined)
      url_ +=
        'createEndTime=' +
        encodeURIComponent(createEndTime ? '' + createEndTime.toISOString() : '') +
        '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetExcelForTransForm(_response);
      });
  }

  protected processGetExcelForTransForm(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 获取编辑 货单
   * @param id (optional)
   * @return Success
   */
  getForEdit(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetWlOrderFormForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetForEdit?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetForEdit(_response);
      });
  }

  protected processGetForEdit(response: AxiosResponse): Promise<GetWlOrderFormForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetWlOrderFormForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetWlOrderFormForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetWlOrderFormForEditOutput>(null as any);
  }

  /**
   * 处置获取处置企业绑定的物流企业
   * @param disposalTenantId (optional) 处置企业ID
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getMyBindWlTenantsPaged(
    disposalTenantId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfEnterpriseForTenantListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetMyBindWlTenantsPaged?';
    if (disposalTenantId === null)
      throw new Error("The parameter 'disposalTenantId' cannot be null.");
    else if (disposalTenantId !== undefined)
      url_ += 'disposalTenantId=' + encodeURIComponent('' + disposalTenantId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetMyBindWlTenantsPaged(_response);
      });
  }

  protected processGetMyBindWlTenantsPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfEnterpriseForTenantListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfEnterpriseForTenantListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfEnterpriseForTenantListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfEnterpriseForTenantListDto>(null as any);
  }

  /**
   * 获取租户企业详细信息
   * @param id (optional)
   * @return Success
   */
  getMyTenantsById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<EnterpriseForTenantListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetMyTenantsById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetMyTenantsById(_response);
      });
  }

  protected processGetMyTenantsById(response: AxiosResponse): Promise<EnterpriseForTenantListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = EnterpriseForTenantListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<EnterpriseForTenantListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<EnterpriseForTenantListDto>(null as any);
  }

  /**
   * 获取自己负责的租户企业信息
   * @param orderId (optional) 货单ID
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getMyTenantsPaged(
    orderId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfEnterpriseForTenantListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetMyTenantsPaged?';
    if (orderId === null) throw new Error("The parameter 'orderId' cannot be null.");
    else if (orderId !== undefined) url_ += 'orderId=' + encodeURIComponent('' + orderId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetMyTenantsPaged(_response);
      });
  }

  protected processGetMyTenantsPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfEnterpriseForTenantListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfEnterpriseForTenantListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfEnterpriseForTenantListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfEnterpriseForTenantListDto>(null as any);
  }

  /**
   * 获取货单抢单信息
   * @param id (optional)
   * @return Success
   */
  getOrderBidById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderBidListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetOrderBidById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrderBidById(_response);
      });
  }

  protected processGetOrderBidById(response: AxiosResponse): Promise<WlOrderBidListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlOrderBidListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlOrderBidListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderBidListDto>(null as any);
  }

  /**
   * 货单抢单信息列表
   * @param orderId (optional) 货单主键
   * @param startTime (optional) 抢单开始时间
   * @param endTime (optional) 抢单结束时间
   * @param sysUserId (optional) 平台第三方发布
   * @param bidState (optional) 抢单状态
   * @param tenantId (optional) 租户
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getOrderBidPaged(
    orderId: number | undefined,
    startTime: dayjs.Dayjs | undefined,
    endTime: dayjs.Dayjs | undefined,
    sysUserId: number | undefined,
    bidState: number | undefined,
    tenantId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlOrderBidListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetOrderBidPaged?';
    if (orderId === null) throw new Error("The parameter 'orderId' cannot be null.");
    else if (orderId !== undefined) url_ += 'orderId=' + encodeURIComponent('' + orderId) + '&';
    if (startTime === null) throw new Error("The parameter 'startTime' cannot be null.");
    else if (startTime !== undefined)
      url_ +=
        'startTime=' + encodeURIComponent(startTime ? '' + startTime.toISOString() : '') + '&';
    if (endTime === null) throw new Error("The parameter 'endTime' cannot be null.");
    else if (endTime !== undefined)
      url_ += 'endTime=' + encodeURIComponent(endTime ? '' + endTime.toISOString() : '') + '&';
    if (sysUserId === null) throw new Error("The parameter 'sysUserId' cannot be null.");
    else if (sysUserId !== undefined)
      url_ += 'sysUserId=' + encodeURIComponent('' + sysUserId) + '&';
    if (bidState === null) throw new Error("The parameter 'bidState' cannot be null.");
    else if (bidState !== undefined) url_ += 'bidState=' + encodeURIComponent('' + bidState) + '&';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrderBidPaged(_response);
      });
  }

  protected processGetOrderBidPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlOrderBidListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlOrderBidListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlOrderBidListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlOrderBidListDto>(null as any);
  }

  /**
   * 从询价单转换为货单实体
   * @param id (optional)
   * @return Success
   */
  getOrderDtoFromQuoteId(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetWlOrderFormForEditOutput> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetOrderDtoFromQuoteId?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrderDtoFromQuoteId(_response);
      });
  }

  protected processGetOrderDtoFromQuoteId(
    response: AxiosResponse,
  ): Promise<GetWlOrderFormForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetWlOrderFormForEditOutput.fromJS(resultData200, _mappings);
      return Promise.resolve<GetWlOrderFormForEditOutput>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetWlOrderFormForEditOutput>(null as any);
  }

  /**
   * 获取货单跟进详情
   * @param id (optional)
   * @return Success
   */
  getOrderFollowById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderFollowListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetOrderFollowById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrderFollowById(_response);
      });
  }

  protected processGetOrderFollowById(response: AxiosResponse): Promise<WlOrderFollowListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlOrderFollowListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlOrderFollowListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderFollowListDto>(null as any);
  }

  /**
   * 获取货单跟进列表
   * @param orderId (optional)
   * @return Success
   */
  getOrderFollowListById(
    orderId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderFollowListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetOrderFollowListById?';
    if (orderId === null) throw new Error("The parameter 'orderId' cannot be null.");
    else if (orderId !== undefined) url_ += 'orderId=' + encodeURIComponent('' + orderId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrderFollowListById(_response);
      });
  }

  protected processGetOrderFollowListById(
    response: AxiosResponse,
  ): Promise<WlOrderFollowListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(WlOrderFollowListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<WlOrderFollowListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderFollowListDto[]>(null as any);
  }

  /**
   * 根据询价单获取货单明细
   * @param id (optional)
   * @return Success
   */
  getOrderFormByQuoteId(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetOrderFormByQuoteId?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrderFormByQuoteId(_response);
      });
  }

  protected processGetOrderFormByQuoteId(response: AxiosResponse): Promise<WlOrderFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlOrderFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlOrderFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderFormListDto>(null as any);
  }

  /**
   * 获取货单进度列表
   * @param orderId (optional)
   * @return Success
   */
  getOrderLogById(
    orderId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderLogListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetOrderLogById?';
    if (orderId === null) throw new Error("The parameter 'orderId' cannot be null.");
    else if (orderId !== undefined) url_ += 'orderId=' + encodeURIComponent('' + orderId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrderLogById(_response);
      });
  }

  protected processGetOrderLogById(response: AxiosResponse): Promise<WlOrderLogListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(WlOrderLogListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<WlOrderLogListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderLogListDto[]>(null as any);
  }

  /**
   * 获取货单的分页列表信息
   * @param startTime (optional)
   * @param endTime (optional)
   * @param formState (optional) 审核状态：0：未审核，1：审核通过，2：审核不通过
   * @param isMyGoods (optional) 是否是关于自己的货单
   * @param tenantId (optional) 租户
   * @param bidState (optional) 抢单状态，1：抢单中，2：抢单成功，3：抢单失败
   * @param isFromPush (optional) 是否来自推送
   * @param isSpecialOrder (optional) 是否是专车单，false：不是，true：是
   * @param isManagerApproved (optional) 物流经理审核
   * @param createStartTime (optional)
   * @param createEndTime (optional)
   * @param orderState (optional) 单据状态，0：抢单中，1：抢单成功，2：抢单失败，3：货单结束，4：货单取消
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getPaged(
    startTime: dayjs.Dayjs | undefined,
    endTime: dayjs.Dayjs | undefined,
    formState: number | undefined,
    isMyGoods: boolean | undefined,
    tenantId: number | undefined,
    bidState: number | undefined,
    isFromPush: boolean | undefined,
    isSpecialOrder: boolean | undefined,
    isManagerApproved: boolean | undefined,
    createStartTime: dayjs.Dayjs | undefined,
    createEndTime: dayjs.Dayjs | undefined,
    orderState: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlOrderFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetPaged?';
    if (startTime === null) throw new Error("The parameter 'startTime' cannot be null.");
    else if (startTime !== undefined)
      url_ +=
        'startTime=' + encodeURIComponent(startTime ? '' + startTime.toISOString() : '') + '&';
    if (endTime === null) throw new Error("The parameter 'endTime' cannot be null.");
    else if (endTime !== undefined)
      url_ += 'endTime=' + encodeURIComponent(endTime ? '' + endTime.toISOString() : '') + '&';
    if (formState === null) throw new Error("The parameter 'formState' cannot be null.");
    else if (formState !== undefined)
      url_ += 'formState=' + encodeURIComponent('' + formState) + '&';
    if (isMyGoods === null) throw new Error("The parameter 'isMyGoods' cannot be null.");
    else if (isMyGoods !== undefined)
      url_ += 'isMyGoods=' + encodeURIComponent('' + isMyGoods) + '&';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (bidState === null) throw new Error("The parameter 'bidState' cannot be null.");
    else if (bidState !== undefined) url_ += 'bidState=' + encodeURIComponent('' + bidState) + '&';
    if (isFromPush === null) throw new Error("The parameter 'isFromPush' cannot be null.");
    else if (isFromPush !== undefined)
      url_ += 'isFromPush=' + encodeURIComponent('' + isFromPush) + '&';
    if (isSpecialOrder === null) throw new Error("The parameter 'isSpecialOrder' cannot be null.");
    else if (isSpecialOrder !== undefined)
      url_ += 'isSpecialOrder=' + encodeURIComponent('' + isSpecialOrder) + '&';
    if (isManagerApproved === null)
      throw new Error("The parameter 'isManagerApproved' cannot be null.");
    else if (isManagerApproved !== undefined)
      url_ += 'isManagerApproved=' + encodeURIComponent('' + isManagerApproved) + '&';
    if (createStartTime === null)
      throw new Error("The parameter 'createStartTime' cannot be null.");
    else if (createStartTime !== undefined)
      url_ +=
        'createStartTime=' +
        encodeURIComponent(createStartTime ? '' + createStartTime.toISOString() : '') +
        '&';
    if (createEndTime === null) throw new Error("The parameter 'createEndTime' cannot be null.");
    else if (createEndTime !== undefined)
      url_ +=
        'createEndTime=' +
        encodeURIComponent(createEndTime ? '' + createEndTime.toISOString() : '') +
        '&';
    if (orderState === null) throw new Error("The parameter 'orderState' cannot be null.");
    else if (orderState !== undefined)
      url_ += 'orderState=' + encodeURIComponent('' + orderState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaged(_response);
      });
  }

  protected processGetPaged(response: AxiosResponse): Promise<PagedResultDtoOfWlOrderFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlOrderFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlOrderFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlOrderFormListDto>(null as any);
  }

  /**
   * 获取询价单明细
   * @param id (optional)
   * @return Success
   */
  getQuoteFormById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlQuoteFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetQuoteFormById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetQuoteFormById(_response);
      });
  }

  protected processGetQuoteFormById(response: AxiosResponse): Promise<WlQuoteFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlQuoteFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlQuoteFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlQuoteFormListDto>(null as any);
  }

  /**
   * 获取询价单的分页列表信息
   * @param startTime (optional) 询价单发布开始时间
   * @param endTime (optional) 询价单发布结束时间
   * @param shippingStartTime (optional) 询价单装货开始时间
   * @param shippingEndTime (optional) 询价单装货结束时间
   * @param quoteState (optional) 确认报价状态，1：询价中，2：已报价
   * @param wlQuoteState (optional) 报价状态，1：待确认，2：已确认，3：未采纳
   * @param isMyGoods (optional) 是否是关于自己的询价单
   * @param isFromPush (optional) 是否来自推送
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getQuotePaged(
    startTime: dayjs.Dayjs | undefined,
    endTime: dayjs.Dayjs | undefined,
    shippingStartTime: dayjs.Dayjs | undefined,
    shippingEndTime: dayjs.Dayjs | undefined,
    quoteState: number | undefined,
    wlQuoteState: number | undefined,
    isMyGoods: boolean | undefined,
    isFromPush: boolean | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlQuoteFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetQuotePaged?';
    if (startTime === null) throw new Error("The parameter 'startTime' cannot be null.");
    else if (startTime !== undefined)
      url_ +=
        'startTime=' + encodeURIComponent(startTime ? '' + startTime.toISOString() : '') + '&';
    if (endTime === null) throw new Error("The parameter 'endTime' cannot be null.");
    else if (endTime !== undefined)
      url_ += 'endTime=' + encodeURIComponent(endTime ? '' + endTime.toISOString() : '') + '&';
    if (shippingStartTime === null)
      throw new Error("The parameter 'shippingStartTime' cannot be null.");
    else if (shippingStartTime !== undefined)
      url_ +=
        'shippingStartTime=' +
        encodeURIComponent(shippingStartTime ? '' + shippingStartTime.toISOString() : '') +
        '&';
    if (shippingEndTime === null)
      throw new Error("The parameter 'shippingEndTime' cannot be null.");
    else if (shippingEndTime !== undefined)
      url_ +=
        'shippingEndTime=' +
        encodeURIComponent(shippingEndTime ? '' + shippingEndTime.toISOString() : '') +
        '&';
    if (quoteState === null) throw new Error("The parameter 'quoteState' cannot be null.");
    else if (quoteState !== undefined)
      url_ += 'quoteState=' + encodeURIComponent('' + quoteState) + '&';
    if (wlQuoteState === null) throw new Error("The parameter 'wlQuoteState' cannot be null.");
    else if (wlQuoteState !== undefined)
      url_ += 'wlQuoteState=' + encodeURIComponent('' + wlQuoteState) + '&';
    if (isMyGoods === null) throw new Error("The parameter 'isMyGoods' cannot be null.");
    else if (isMyGoods !== undefined)
      url_ += 'isMyGoods=' + encodeURIComponent('' + isMyGoods) + '&';
    if (isFromPush === null) throw new Error("The parameter 'isFromPush' cannot be null.");
    else if (isFromPush !== undefined)
      url_ += 'isFromPush=' + encodeURIComponent('' + isFromPush) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetQuotePaged(_response);
      });
  }

  protected processGetQuotePaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlQuoteFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlQuoteFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlQuoteFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlQuoteFormListDto>(null as any);
  }

  /**
   * 获取对账单明细
   * @param id (optional)
   * @return Success
   */
  getStatementById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlStatementListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetStatementById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetStatementById(_response);
      });
  }

  protected processGetStatementById(response: AxiosResponse): Promise<WlStatementListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlStatementListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlStatementListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlStatementListDto>(null as any);
  }

  /**
   * 获取对账单明细的明细
   * @param id (optional)
   * @return Success
   */
  getStatementDetailById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlStatementDetailListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetStatementDetailById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetStatementDetailById(_response);
      });
  }

  protected processGetStatementDetailById(
    response: AxiosResponse,
  ): Promise<WlStatementDetailListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlStatementDetailListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlStatementDetailListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlStatementDetailListDto>(null as any);
  }

  /**
   * 获取对账单明细（运单）列表
   * @param statementTime (optional) 指定年月
   * @param beginTime (optional) 查询开始时间
   * @param endTime (optional) 查询结束时间
   * @param status (optional) 对账单状态，0：未对账，1：对账中，2：已完成
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getStatementDetailPaged(
    statementTime: dayjs.Dayjs | undefined,
    beginTime: dayjs.Dayjs | undefined,
    endTime: dayjs.Dayjs | undefined,
    status: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlStatementDetailListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetStatementDetailPaged?';
    if (statementTime === null) throw new Error("The parameter 'statementTime' cannot be null.");
    else if (statementTime !== undefined)
      url_ +=
        'statementTime=' +
        encodeURIComponent(statementTime ? '' + statementTime.toISOString() : '') +
        '&';
    if (beginTime === null) throw new Error("The parameter 'beginTime' cannot be null.");
    else if (beginTime !== undefined)
      url_ +=
        'beginTime=' + encodeURIComponent(beginTime ? '' + beginTime.toISOString() : '') + '&';
    if (endTime === null) throw new Error("The parameter 'endTime' cannot be null.");
    else if (endTime !== undefined)
      url_ += 'endTime=' + encodeURIComponent(endTime ? '' + endTime.toISOString() : '') + '&';
    if (status === null) throw new Error("The parameter 'status' cannot be null.");
    else if (status !== undefined) url_ += 'status=' + encodeURIComponent('' + status) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetStatementDetailPaged(_response);
      });
  }

  protected processGetStatementDetailPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlStatementDetailListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlStatementDetailListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlStatementDetailListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlStatementDetailListDto>(null as any);
  }

  /**
   * 获取对账单（货单）列表
   * @param statementTime (optional)
   * @param beginTime (optional) 查询开始时间
   * @param endTime (optional) 查询结束时间
   * @param status (optional) 对账单状态，0：未完成，1：已完成
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getStatementPaged(
    statementTime: dayjs.Dayjs | undefined,
    beginTime: dayjs.Dayjs | undefined,
    endTime: dayjs.Dayjs | undefined,
    status: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlStatementListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetStatementPaged?';
    if (statementTime === null) throw new Error("The parameter 'statementTime' cannot be null.");
    else if (statementTime !== undefined)
      url_ +=
        'statementTime=' +
        encodeURIComponent(statementTime ? '' + statementTime.toISOString() : '') +
        '&';
    if (beginTime === null) throw new Error("The parameter 'beginTime' cannot be null.");
    else if (beginTime !== undefined)
      url_ +=
        'beginTime=' + encodeURIComponent(beginTime ? '' + beginTime.toISOString() : '') + '&';
    if (endTime === null) throw new Error("The parameter 'endTime' cannot be null.");
    else if (endTime !== undefined)
      url_ += 'endTime=' + encodeURIComponent(endTime ? '' + endTime.toISOString() : '') + '&';
    if (status === null) throw new Error("The parameter 'status' cannot be null.");
    else if (status !== undefined) url_ += 'status=' + encodeURIComponent('' + status) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetStatementPaged(_response);
      });
  }

  protected processGetStatementPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlStatementListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlStatementListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlStatementListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlStatementListDto>(null as any);
  }

  /**
   * 获取TMS推荐运力信息
   * @param body (optional)
   * @return Success
   */
  getTMSRecommendVehicle(
    body: RecommendVehicleInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetTMSRecommendVehicle';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTMSRecommendVehicle(_response);
      });
  }

  protected processGetTMSRecommendVehicle(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }

  /**
   * 导出货单为excel文件
   * @return Success
   */
  getToExcelFile(cancelToken?: CancelToken | undefined): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetToExcelFile';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetToExcelFile(_response);
      });
  }

  protected processGetToExcelFile(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 获取运单详情
   * @param id (optional)
   * @return Success
   */
  getTransFormDetailById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlTransFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetTransFormDetailById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTransFormDetailById(_response);
      });
  }

  protected processGetTransFormDetailById(response: AxiosResponse): Promise<WlTransFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlTransFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlTransFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlTransFormListDto>(null as any);
  }

  /**
   * 获取运单列表
   * @param transState (optional) 运单状态，1：运单开始，2：运单结束
   * @param createStartTime (optional)
   * @param createEndTime (optional)
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getTransFormPaged(
    transState: number | undefined,
    createStartTime: dayjs.Dayjs | undefined,
    createEndTime: dayjs.Dayjs | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlTransFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetTransFormPaged?';
    if (transState === null) throw new Error("The parameter 'transState' cannot be null.");
    else if (transState !== undefined)
      url_ += 'transState=' + encodeURIComponent('' + transState) + '&';
    if (createStartTime === null)
      throw new Error("The parameter 'createStartTime' cannot be null.");
    else if (createStartTime !== undefined)
      url_ +=
        'createStartTime=' +
        encodeURIComponent(createStartTime ? '' + createStartTime.toISOString() : '') +
        '&';
    if (createEndTime === null) throw new Error("The parameter 'createEndTime' cannot be null.");
    else if (createEndTime !== undefined)
      url_ +=
        'createEndTime=' +
        encodeURIComponent(createEndTime ? '' + createEndTime.toISOString() : '') +
        '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTransFormPaged(_response);
      });
  }

  protected processGetTransFormPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlTransFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlTransFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlTransFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlTransFormListDto>(null as any);
  }

  /**
   * 【物流司机专用】获取物流司机运单列表
   * @param transState (optional) 状态，0：进行中，1：已完成
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getTransFormPagedForDriver(
    transState: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlTransportInfoListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetTransFormPagedForDriver?';
    if (transState === null) throw new Error("The parameter 'transState' cannot be null.");
    else if (transState !== undefined)
      url_ += 'transState=' + encodeURIComponent('' + transState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTransFormPagedForDriver(_response);
      });
  }

  protected processGetTransFormPagedForDriver(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlTransportInfoListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlTransportInfoListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlTransportInfoListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlTransportInfoListDto>(null as any);
  }

  /**
   * 【平台专用】获取运单的分页列表信息
   * @param startTime (optional)
   * @param endTime (optional)
   * @param transType (optional) 运单类型，1：运行中，2：已完成
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getTransInfoPaged(
    startTime: dayjs.Dayjs | undefined,
    endTime: dayjs.Dayjs | undefined,
    transType: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlOrderFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetTransInfoPaged?';
    if (startTime === null) throw new Error("The parameter 'startTime' cannot be null.");
    else if (startTime !== undefined)
      url_ +=
        'startTime=' + encodeURIComponent(startTime ? '' + startTime.toISOString() : '') + '&';
    if (endTime === null) throw new Error("The parameter 'endTime' cannot be null.");
    else if (endTime !== undefined)
      url_ += 'endTime=' + encodeURIComponent(endTime ? '' + endTime.toISOString() : '') + '&';
    if (transType === null) throw new Error("The parameter 'transType' cannot be null.");
    else if (transType !== undefined)
      url_ += 'transType=' + encodeURIComponent('' + transType) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetTransInfoPaged(_response);
      });
  }

  protected processGetTransInfoPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlOrderFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlOrderFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlOrderFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlOrderFormListDto>(null as any);
  }

  /**
   * 获取车辆轨迹
   * @param vehicleId (optional)
   * @param startTime (optional)
   * @param endTime (optional)
   * @return Success
   */
  getVehicleRoute(
    vehicleId: number | undefined,
    startTime: dayjs.Dayjs | undefined,
    endTime: dayjs.Dayjs | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<VehicleRouteDto[]> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetVehicleRoute?';
    if (vehicleId === null) throw new Error("The parameter 'vehicleId' cannot be null.");
    else if (vehicleId !== undefined)
      url_ += 'vehicleId=' + encodeURIComponent('' + vehicleId) + '&';
    if (startTime === null) throw new Error("The parameter 'startTime' cannot be null.");
    else if (startTime !== undefined)
      url_ +=
        'startTime=' + encodeURIComponent(startTime ? '' + startTime.toISOString() : '') + '&';
    if (endTime === null) throw new Error("The parameter 'endTime' cannot be null.");
    else if (endTime !== undefined)
      url_ += 'endTime=' + encodeURIComponent(endTime ? '' + endTime.toISOString() : '') + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetVehicleRoute(_response);
      });
  }

  protected processGetVehicleRoute(response: AxiosResponse): Promise<VehicleRouteDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(VehicleRouteDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<VehicleRouteDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<VehicleRouteDto[]>(null as any);
  }

  /**
   * 【平台专用】获取运力详细信息
   * @param id (optional)
   * @return Success
   */
  getWlBaseCapacityById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlBaseCapacityListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlBaseCapacityById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlBaseCapacityById(_response);
      });
  }

  protected processGetWlBaseCapacityById(response: AxiosResponse): Promise<WlBaseCapacityListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlBaseCapacityListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlBaseCapacityListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlBaseCapacityListDto>(null as any);
  }

  /**
   * 【平台专用】获取运力分页信息
   * @param tenantId (optional) 租户
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlBaseCapacityPaged(
    tenantId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlBaseCapacityListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlBaseCapacityPaged?';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlBaseCapacityPaged(_response);
      });
  }

  protected processGetWlBaseCapacityPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlBaseCapacityListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlBaseCapacityListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlBaseCapacityListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlBaseCapacityListDto>(null as any);
  }

  /**
   * 【平台专用】获取司机详细信息
   * @param id (optional)
   * @return Success
   */
  getWlBaseDriverById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlBaseDriverListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlBaseDriverById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlBaseDriverById(_response);
      });
  }

  protected processGetWlBaseDriverById(response: AxiosResponse): Promise<WlBaseDriverListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlBaseDriverListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlBaseDriverListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlBaseDriverListDto>(null as any);
  }

  /**
   * 【平台专用】获取司机分页信息
   * @param name (optional) 姓名
   * @param phone (optional) 手机号
   * @param certificate (optional) 从业资格证
   * @param isAvailable (optional) 是否空闲可用，true：空闲，false：不空闲
   * @param tenantId (optional) 租户
   * @param iDCard (optional) 身份证
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlBaseDriverPaged(
    name: string | undefined,
    phone: string | undefined,
    certificate: string | undefined,
    isAvailable: boolean | undefined,
    tenantId: number | undefined,
    iDCard: string | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlBaseDriverListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlBaseDriverPaged?';
    if (name === null) throw new Error("The parameter 'name' cannot be null.");
    else if (name !== undefined) url_ += 'name=' + encodeURIComponent('' + name) + '&';
    if (phone === null) throw new Error("The parameter 'phone' cannot be null.");
    else if (phone !== undefined) url_ += 'phone=' + encodeURIComponent('' + phone) + '&';
    if (certificate === null) throw new Error("The parameter 'certificate' cannot be null.");
    else if (certificate !== undefined)
      url_ += 'certificate=' + encodeURIComponent('' + certificate) + '&';
    if (isAvailable === null) throw new Error("The parameter 'isAvailable' cannot be null.");
    else if (isAvailable !== undefined)
      url_ += 'isAvailable=' + encodeURIComponent('' + isAvailable) + '&';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (iDCard === null) throw new Error("The parameter 'iDCard' cannot be null.");
    else if (iDCard !== undefined) url_ += 'iDCard=' + encodeURIComponent('' + iDCard) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlBaseDriverPaged(_response);
      });
  }

  protected processGetWlBaseDriverPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlBaseDriverListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlBaseDriverListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlBaseDriverListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlBaseDriverListDto>(null as any);
  }

  /**
   * 【平台专用】获取押运详细信息
   * @param id (optional)
   * @return Success
   */
  getWlBaseSupercargoById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlBaseSupercargoListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlBaseSupercargoById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlBaseSupercargoById(_response);
      });
  }

  protected processGetWlBaseSupercargoById(
    response: AxiosResponse,
  ): Promise<WlBaseSupercargoListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlBaseSupercargoListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlBaseSupercargoListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlBaseSupercargoListDto>(null as any);
  }

  /**
   * 【平台专用】获取押运分页信息
   * @param name (optional) 姓名
   * @param phone (optional) 手机号码
   * @param certificate (optional) 从业资格证
   * @param isAvailable (optional) 是否空闲可用，true：空闲，false：不空闲
   * @param tenantId (optional) 租户
   * @param iDCard (optional) 身份证
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlBaseSupercargoPaged(
    name: string | undefined,
    phone: string | undefined,
    certificate: string | undefined,
    isAvailable: boolean | undefined,
    tenantId: number | undefined,
    iDCard: string | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlBaseSupercargoListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlBaseSupercargoPaged?';
    if (name === null) throw new Error("The parameter 'name' cannot be null.");
    else if (name !== undefined) url_ += 'name=' + encodeURIComponent('' + name) + '&';
    if (phone === null) throw new Error("The parameter 'phone' cannot be null.");
    else if (phone !== undefined) url_ += 'phone=' + encodeURIComponent('' + phone) + '&';
    if (certificate === null) throw new Error("The parameter 'certificate' cannot be null.");
    else if (certificate !== undefined)
      url_ += 'certificate=' + encodeURIComponent('' + certificate) + '&';
    if (isAvailable === null) throw new Error("The parameter 'isAvailable' cannot be null.");
    else if (isAvailable !== undefined)
      url_ += 'isAvailable=' + encodeURIComponent('' + isAvailable) + '&';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (iDCard === null) throw new Error("The parameter 'iDCard' cannot be null.");
    else if (iDCard !== undefined) url_ += 'iDCard=' + encodeURIComponent('' + iDCard) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlBaseSupercargoPaged(_response);
      });
  }

  protected processGetWlBaseSupercargoPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlBaseSupercargoListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlBaseSupercargoListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlBaseSupercargoListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlBaseSupercargoListDto>(null as any);
  }

  /**
   * 【平台专用】获取车头详细信息
   * @param id (optional)
   * @return Success
   */
  getWlBaseVehicleById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlBaseVehicleListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlBaseVehicleById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlBaseVehicleById(_response);
      });
  }

  protected processGetWlBaseVehicleById(response: AxiosResponse): Promise<WlBaseVehicleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlBaseVehicleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlBaseVehicleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlBaseVehicleListDto>(null as any);
  }

  /**
   * 【平台专用】获取车头分页信息
   * @param number (optional) 车牌号
   * @param policy (optional) 保险单
   * @param driverLicense (optional) 车头行驶证
   * @param roadTransportLicense (optional) 道路运输经营许可证
   * @param hastrailer (optional) 是否包含挂车
   * @param isAvailable (optional) 是否空闲可用，true：空闲，false：不空闲
   * @param tenantId (optional) 租户
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlBaseVehiclePaged(
    number: string | undefined,
    policy: string | undefined,
    driverLicense: string | undefined,
    roadTransportLicense: string | undefined,
    hastrailer: boolean | undefined,
    isAvailable: boolean | undefined,
    tenantId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlBaseVehicleListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlBaseVehiclePaged?';
    if (number === null) throw new Error("The parameter 'number' cannot be null.");
    else if (number !== undefined) url_ += 'number=' + encodeURIComponent('' + number) + '&';
    if (policy === null) throw new Error("The parameter 'policy' cannot be null.");
    else if (policy !== undefined) url_ += 'policy=' + encodeURIComponent('' + policy) + '&';
    if (driverLicense === null) throw new Error("The parameter 'driverLicense' cannot be null.");
    else if (driverLicense !== undefined)
      url_ += 'driverLicense=' + encodeURIComponent('' + driverLicense) + '&';
    if (roadTransportLicense === null)
      throw new Error("The parameter 'roadTransportLicense' cannot be null.");
    else if (roadTransportLicense !== undefined)
      url_ += 'roadTransportLicense=' + encodeURIComponent('' + roadTransportLicense) + '&';
    if (hastrailer === null) throw new Error("The parameter 'hastrailer' cannot be null.");
    else if (hastrailer !== undefined)
      url_ += 'hastrailer=' + encodeURIComponent('' + hastrailer) + '&';
    if (isAvailable === null) throw new Error("The parameter 'isAvailable' cannot be null.");
    else if (isAvailable !== undefined)
      url_ += 'isAvailable=' + encodeURIComponent('' + isAvailable) + '&';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlBaseVehiclePaged(_response);
      });
  }

  protected processGetWlBaseVehiclePaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlBaseVehicleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlBaseVehicleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlBaseVehicleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlBaseVehicleListDto>(null as any);
  }

  /**
   * 【平台专用】获取车挂详细信息
   * @param id (optional)
   * @return Success
   */
  getWlBaseVehicleTrailerById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlBaseVehicleTrailerListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlBaseVehicleTrailerById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlBaseVehicleTrailerById(_response);
      });
  }

  protected processGetWlBaseVehicleTrailerById(
    response: AxiosResponse,
  ): Promise<WlBaseVehicleTrailerListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlBaseVehicleTrailerListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlBaseVehicleTrailerListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlBaseVehicleTrailerListDto>(null as any);
  }

  /**
   * 【平台专用】获取车挂分页信息
   * @param number (optional) 车牌号
   * @param policy (optional) 保险单
   * @param driverLicense (optional) 车头行驶证
   * @param roadTransportLicense (optional) 道路运输经营许可证
   * @param vehicleType (optional) 车型选择
   * @param isAvailable (optional) 是否空闲可用，true：空闲，false：不空闲
   * @param tenantId (optional) 租户
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlBaseVehicleTrailerPaged(
    number: string | undefined,
    policy: string | undefined,
    driverLicense: string | undefined,
    roadTransportLicense: string | undefined,
    vehicleType: string | undefined,
    isAvailable: boolean | undefined,
    tenantId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlBaseVehicleTrailerListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlBaseVehicleTrailerPaged?';
    if (number === null) throw new Error("The parameter 'number' cannot be null.");
    else if (number !== undefined) url_ += 'number=' + encodeURIComponent('' + number) + '&';
    if (policy === null) throw new Error("The parameter 'policy' cannot be null.");
    else if (policy !== undefined) url_ += 'policy=' + encodeURIComponent('' + policy) + '&';
    if (driverLicense === null) throw new Error("The parameter 'driverLicense' cannot be null.");
    else if (driverLicense !== undefined)
      url_ += 'driverLicense=' + encodeURIComponent('' + driverLicense) + '&';
    if (roadTransportLicense === null)
      throw new Error("The parameter 'roadTransportLicense' cannot be null.");
    else if (roadTransportLicense !== undefined)
      url_ += 'roadTransportLicense=' + encodeURIComponent('' + roadTransportLicense) + '&';
    if (vehicleType === null) throw new Error("The parameter 'vehicleType' cannot be null.");
    else if (vehicleType !== undefined)
      url_ += 'vehicleType=' + encodeURIComponent('' + vehicleType) + '&';
    if (isAvailable === null) throw new Error("The parameter 'isAvailable' cannot be null.");
    else if (isAvailable !== undefined)
      url_ += 'isAvailable=' + encodeURIComponent('' + isAvailable) + '&';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlBaseVehicleTrailerPaged(_response);
      });
  }

  protected processGetWlBaseVehicleTrailerPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlBaseVehicleTrailerListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlBaseVehicleTrailerListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlBaseVehicleTrailerListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlBaseVehicleTrailerListDto>(null as any);
  }

  /**
   * 获取空车上报详细信息
   * @param id (optional)
   * @return Success
   */
  getWlEmptyVehicleById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlEmptyVehicleListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlEmptyVehicleById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlEmptyVehicleById(_response);
      });
  }

  protected processGetWlEmptyVehicleById(response: AxiosResponse): Promise<WlEmptyVehicleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlEmptyVehicleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlEmptyVehicleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlEmptyVehicleListDto>(null as any);
  }

  /**
   * 每日空车详细信息
   * @param id (optional)
   * @return Success
   */
  getWlEmptyVehicleDayById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlEmptyVehicleDayListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlEmptyVehicleDayById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlEmptyVehicleDayById(_response);
      });
  }

  protected processGetWlEmptyVehicleDayById(
    response: AxiosResponse,
  ): Promise<WlEmptyVehicleDayListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlEmptyVehicleDayListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlEmptyVehicleDayListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlEmptyVehicleDayListDto>(null as any);
  }

  /**
   * 记录只是否存在
   * @param recordId (optional) 记录主键
   * @return Success
   */
  getWlEmptyVehicleDayIsExist(
    recordId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<boolean> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlEmptyVehicleDayIsExist?';
    if (recordId === null) throw new Error("The parameter 'recordId' cannot be null.");
    else if (recordId !== undefined) url_ += 'recordId=' + encodeURIComponent('' + recordId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlEmptyVehicleDayIsExist(_response);
      });
  }

  protected processGetWlEmptyVehicleDayIsExist(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<boolean>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<boolean>(null as any);
  }

  /**
   * 每日空车的分页列表信息
   * @param emptyDate (optional) 空车日期
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlEmptyVehicleDayPaged(
    emptyDate: dayjs.Dayjs | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlEmptyVehicleDayListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlEmptyVehicleDayPaged?';
    if (emptyDate === null) throw new Error("The parameter 'emptyDate' cannot be null.");
    else if (emptyDate !== undefined)
      url_ +=
        'emptyDate=' + encodeURIComponent(emptyDate ? '' + emptyDate.toISOString() : '') + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlEmptyVehicleDayPaged(_response);
      });
  }

  protected processGetWlEmptyVehicleDayPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlEmptyVehicleDayListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlEmptyVehicleDayListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlEmptyVehicleDayListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlEmptyVehicleDayListDto>(null as any);
  }

  /**
   * 获取空车上报分页信息
   * @param beginEmptyTime (optional) 空车起始时间
   * @param endEmptyTime (optional) 空车结束时间
   * @param isMyReserve (optional) 是否我的预约
   * @param reserveStatus (optional) 预约状态，0：预约中，1：预约成功，2：预约失败
   * @param hasReserve (optional) 是否预约，true：有预约，false：没预约
   * @param tenantId (optional) 租户ID
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlEmptyVehiclePaged(
    beginEmptyTime: dayjs.Dayjs | undefined,
    endEmptyTime: dayjs.Dayjs | undefined,
    isMyReserve: boolean | undefined,
    reserveStatus: number | undefined,
    hasReserve: boolean | undefined,
    tenantId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlEmptyVehicleListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlEmptyVehiclePaged?';
    if (beginEmptyTime === null) throw new Error("The parameter 'beginEmptyTime' cannot be null.");
    else if (beginEmptyTime !== undefined)
      url_ +=
        'beginEmptyTime=' +
        encodeURIComponent(beginEmptyTime ? '' + beginEmptyTime.toISOString() : '') +
        '&';
    if (endEmptyTime === null) throw new Error("The parameter 'endEmptyTime' cannot be null.");
    else if (endEmptyTime !== undefined)
      url_ +=
        'endEmptyTime=' +
        encodeURIComponent(endEmptyTime ? '' + endEmptyTime.toISOString() : '') +
        '&';
    if (isMyReserve === null) throw new Error("The parameter 'isMyReserve' cannot be null.");
    else if (isMyReserve !== undefined)
      url_ += 'isMyReserve=' + encodeURIComponent('' + isMyReserve) + '&';
    if (reserveStatus === null) throw new Error("The parameter 'reserveStatus' cannot be null.");
    else if (reserveStatus !== undefined)
      url_ += 'reserveStatus=' + encodeURIComponent('' + reserveStatus) + '&';
    if (hasReserve === null) throw new Error("The parameter 'hasReserve' cannot be null.");
    else if (hasReserve !== undefined)
      url_ += 'hasReserve=' + encodeURIComponent('' + hasReserve) + '&';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlEmptyVehiclePaged(_response);
      });
  }

  protected processGetWlEmptyVehiclePaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlEmptyVehicleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlEmptyVehicleListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlEmptyVehicleListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlEmptyVehicleListDto>(null as any);
  }

  /**
   * 获取空车预约详细信息
   * @param id (optional)
   * @return Success
   */
  getWlEmptyVehicleReserveById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlEmptyVehicleReserveListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlEmptyVehicleReserveById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlEmptyVehicleReserveById(_response);
      });
  }

  protected processGetWlEmptyVehicleReserveById(
    response: AxiosResponse,
  ): Promise<WlEmptyVehicleReserveListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlEmptyVehicleReserveListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlEmptyVehicleReserveListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlEmptyVehicleReserveListDto>(null as any);
  }

  /**
   * 获取空车预约分页信息
   * @param beginReserveTime (optional) 预约起始时间
   * @param endReserveTime (optional) 预约结束时间
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlEmptyVehicleReservePaged(
    beginReserveTime: dayjs.Dayjs | undefined,
    endReserveTime: dayjs.Dayjs | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlEmptyVehicleReserveListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlEmptyVehicleReservePaged?';
    if (beginReserveTime === null)
      throw new Error("The parameter 'beginReserveTime' cannot be null.");
    else if (beginReserveTime !== undefined)
      url_ +=
        'beginReserveTime=' +
        encodeURIComponent(beginReserveTime ? '' + beginReserveTime.toISOString() : '') +
        '&';
    if (endReserveTime === null) throw new Error("The parameter 'endReserveTime' cannot be null.");
    else if (endReserveTime !== undefined)
      url_ +=
        'endReserveTime=' +
        encodeURIComponent(endReserveTime ? '' + endReserveTime.toISOString() : '') +
        '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlEmptyVehicleReservePaged(_response);
      });
  }

  protected processGetWlEmptyVehicleReservePaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlEmptyVehicleReserveListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlEmptyVehicleReserveListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlEmptyVehicleReserveListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlEmptyVehicleReserveListDto>(null as any);
  }

  /**
   * 客户经理处置端APP货单列表，展示货单和车次
   * @param startTime (optional) 装货时间开始
   * @param endTime (optional) 装货时间结束
   * @param orderState (optional) 单据状态，0：抢单中，1：抢单成功，2：抢单失败，3：货单结束，4：货单取消
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlOrderFormPaged(
    startTime: dayjs.Dayjs | undefined,
    endTime: dayjs.Dayjs | undefined,
    orderState: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlOrderFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlOrderFormPaged?';
    if (startTime === null) throw new Error("The parameter 'startTime' cannot be null.");
    else if (startTime !== undefined)
      url_ +=
        'startTime=' + encodeURIComponent(startTime ? '' + startTime.toISOString() : '') + '&';
    if (endTime === null) throw new Error("The parameter 'endTime' cannot be null.");
    else if (endTime !== undefined)
      url_ += 'endTime=' + encodeURIComponent(endTime ? '' + endTime.toISOString() : '') + '&';
    if (orderState === null) throw new Error("The parameter 'orderState' cannot be null.");
    else if (orderState !== undefined)
      url_ += 'orderState=' + encodeURIComponent('' + orderState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlOrderFormPaged(_response);
      });
  }

  protected processGetWlOrderFormPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlOrderFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlOrderFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlOrderFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlOrderFormListDto>(null as any);
  }

  /**
   * 【平台专用】获取物流推送信息
   * @param id (optional)
   * @return Success
   */
  getWlOrderPushById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderPushListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlOrderPushById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlOrderPushById(_response);
      });
  }

  protected processGetWlOrderPushById(response: AxiosResponse): Promise<WlOrderPushListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlOrderPushListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlOrderPushListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderPushListDto>(null as any);
  }

  /**
   * 【平台专用】获取货单推送信息
   * @param orderId (optional) 货单主键
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlOrderPushPaged(
    orderId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlOrderPushListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlOrderPushPaged?';
    if (orderId === null) throw new Error("The parameter 'orderId' cannot be null.");
    else if (orderId !== undefined) url_ += 'orderId=' + encodeURIComponent('' + orderId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlOrderPushPaged(_response);
      });
  }

  protected processGetWlOrderPushPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlOrderPushListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlOrderPushListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlOrderPushListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlOrderPushListDto>(null as any);
  }

  /**
   * 获取询价单报价信息
   * @param id (optional)
   * @return Success
   */
  getWlOrderQuoteById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderQuoteListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlOrderQuoteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlOrderQuoteById(_response);
      });
  }

  protected processGetWlOrderQuoteById(response: AxiosResponse): Promise<WlOrderQuoteListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlOrderQuoteListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlOrderQuoteListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderQuoteListDto>(null as any);
  }

  /**
   * 获取询价单报价分页信息
   * @param quoteId (optional) 询价主键
   * @param quoteTime (optional) 报价时间
   * @param quoteState (optional) 报价状态，1：待确认，2：已确认，3：未采纳
   * @param sysUserId (optional) 平台第三方发布
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlOrderQuotePaged(
    quoteId: number | undefined,
    quoteTime: dayjs.Dayjs | undefined,
    quoteState: number | undefined,
    sysUserId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlOrderQuoteListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlOrderQuotePaged?';
    if (quoteId === null) throw new Error("The parameter 'quoteId' cannot be null.");
    else if (quoteId !== undefined) url_ += 'quoteId=' + encodeURIComponent('' + quoteId) + '&';
    if (quoteTime === null) throw new Error("The parameter 'quoteTime' cannot be null.");
    else if (quoteTime !== undefined)
      url_ +=
        'quoteTime=' + encodeURIComponent(quoteTime ? '' + quoteTime.toISOString() : '') + '&';
    if (quoteState === null) throw new Error("The parameter 'quoteState' cannot be null.");
    else if (quoteState !== undefined)
      url_ += 'quoteState=' + encodeURIComponent('' + quoteState) + '&';
    if (sysUserId === null) throw new Error("The parameter 'sysUserId' cannot be null.");
    else if (sysUserId !== undefined)
      url_ += 'sysUserId=' + encodeURIComponent('' + sysUserId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlOrderQuotePaged(_response);
      });
  }

  protected processGetWlOrderQuotePaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlOrderQuoteListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlOrderQuoteListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlOrderQuoteListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlOrderQuoteListDto>(null as any);
  }

  /**
   * 获取询价单报价信息
   * @param id (optional)
   * @return Success
   */
  getWlOrderStateById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderStateListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlOrderStateById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlOrderStateById(_response);
      });
  }

  protected processGetWlOrderStateById(response: AxiosResponse): Promise<WlOrderStateListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlOrderStateListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlOrderStateListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderStateListDto>(null as any);
  }

  /**
   * 获取询价单报价分页信息
   * @param orderId (optional) 询价主键
   * @param stateType (optional) 货单状态
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlOrderStatePaged(
    orderId: number | undefined,
    stateType: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlOrderStateListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlOrderStatePaged?';
    if (orderId === null) throw new Error("The parameter 'orderId' cannot be null.");
    else if (orderId !== undefined) url_ += 'orderId=' + encodeURIComponent('' + orderId) + '&';
    if (stateType === null) throw new Error("The parameter 'stateType' cannot be null.");
    else if (stateType !== undefined)
      url_ += 'stateType=' + encodeURIComponent('' + stateType) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlOrderStatePaged(_response);
      });
  }

  protected processGetWlOrderStatePaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlOrderStateListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlOrderStateListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlOrderStateListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlOrderStateListDto>(null as any);
  }

  /**
   * 获取危废信息
   * @param id (optional)
   * @return Success
   */
  getWlOrderWasteById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderWasteListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlOrderWasteById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlOrderWasteById(_response);
      });
  }

  protected processGetWlOrderWasteById(response: AxiosResponse): Promise<WlOrderWasteListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlOrderWasteListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlOrderWasteListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderWasteListDto>(null as any);
  }

  /**
   * 【平台专用】获取询价单推送信息
   * @param quoteId (optional) 询价单主键
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlQuotePushPaged(
    quoteId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlOrderPushListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlQuotePushPaged?';
    if (quoteId === null) throw new Error("The parameter 'quoteId' cannot be null.");
    else if (quoteId !== undefined) url_ += 'quoteId=' + encodeURIComponent('' + quoteId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlQuotePushPaged(_response);
      });
  }

  protected processGetWlQuotePushPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlOrderPushListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlOrderPushListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlOrderPushListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlOrderPushListDto>(null as any);
  }

  /**
   * 【平台专用】获取运输详细信息
   * @param id (optional)
   * @return Success
   */
  getWlTransportInfoById(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlTransportInfoListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlTransportInfoById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlTransportInfoById(_response);
      });
  }

  protected processGetWlTransportInfoById(
    response: AxiosResponse,
  ): Promise<WlTransportInfoListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = WlTransportInfoListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<WlTransportInfoListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlTransportInfoListDto>(null as any);
  }

  /**
   * 【平台专用】获取运输分页信息
   * @param transId (optional) 运单主键
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getWlTransportInfoPaged(
    transId: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlTransportInfoListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/GetWlTransportInfoPaged?';
    if (transId === null) throw new Error("The parameter 'transId' cannot be null.");
    else if (transId !== undefined) url_ += 'transId=' + encodeURIComponent('' + transId) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetWlTransportInfoPaged(_response);
      });
  }

  protected processGetWlTransportInfoPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlTransportInfoListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlTransportInfoListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlTransportInfoListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlTransportInfoListDto>(null as any);
  }

  /**
   * 隐藏车次信息
   * @param id (optional)
   * @return Success
   */
  hideTransportInfo(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/HideTransportInfo?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processHideTransportInfo(_response);
      });
  }

  protected processHideTransportInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 物流端发起对账
   * @param id (optional) 对账明细（运单）ID
   * @return Success
   */
  initiateStatement(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/InitiateStatement?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processInitiateStatement(_response);
      });
  }

  protected processInitiateStatement(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【物流端专用】货单抢单
   * @param body (optional)
   * @return Success
   */
  orderBiding(
    body: OrderBidingInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/OrderBiding';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processOrderBiding(_response);
      });
  }

  protected processOrderBiding(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】为货单选择抢单
   * @param id (optional)
   * @return Success
   */
  orderBidingSelect(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/OrderBidingSelect?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processOrderBidingSelect(_response);
      });
  }

  protected processOrderBidingSelect(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 物流用户抢单
   * @param body (optional)
   * @return Success
   */
  orderBidingTMS(
    body: WlOrderBidingTMSInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/OrderBidingTMS';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processOrderBidingTMS(_response);
      });
  }

  protected processOrderBidingTMS(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 客户经理手动结束货单
   * @param id (optional)
   * @return Success
   */
  orderFinishSelect(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/OrderFinishSelect?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processOrderFinishSelect(_response);
      });
  }

  protected processOrderFinishSelect(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 将询价推荐给处置企业
   * @param id (optional)
   * @return Success
   */
  orderQuotePushById(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/OrderQuotePushById?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processOrderQuotePushById(_response);
      });
  }

  protected processOrderQuotePushById(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 处置企业标记空车推荐为已读
   * @param body (optional)
   * @return Success
   */
  readEmptyVehicleRecommend(
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/ReadEmptyVehicleRecommend';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processReadEmptyVehicleRecommend(_response);
      });
  }

  protected processReadEmptyVehicleRecommend(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 处置端驳回对账
   * @param id (optional) 对账明细（运单）ID
   * @return Success
   */
  rejectStatement(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/RejectStatement?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRejectStatement(_response);
      });
  }

  protected processRejectStatement(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 是否释放专车单到公共池
   * @param id (optional) 专车单ID
   * @param isReleased (optional) 是否释放
   * @return Success
   */
  releaseOrderToPublic(
    id: number | undefined,
    isReleased: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/ReleaseOrderToPublic?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    if (isReleased === null) throw new Error("The parameter 'isReleased' cannot be null.");
    else if (isReleased !== undefined)
      url_ += 'isReleased=' + encodeURIComponent('' + isReleased) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processReleaseOrderToPublic(_response);
      });
  }

  protected processReleaseOrderToPublic(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 选择司机用户
   * @param tenantId (optional)
   * @param hasUserId (optional)
   * @return Success
   */
  selectAvaliableDrivers(
    tenantId: number | undefined,
    hasUserId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<DriverUserDto[]> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/SelectAvaliableDrivers?';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (hasUserId === null) throw new Error("The parameter 'hasUserId' cannot be null.");
    else if (hasUserId !== undefined)
      url_ += 'hasUserId=' + encodeURIComponent('' + hasUserId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSelectAvaliableDrivers(_response);
      });
  }

  protected processSelectAvaliableDrivers(response: AxiosResponse): Promise<DriverUserDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(DriverUserDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<DriverUserDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<DriverUserDto[]>(null as any);
  }

  /**
   * @param orderId (optional)
   * @param bidId (optional)
   * @return Success
   */
  selectBidEnt(
    orderId: number | undefined,
    bidId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/SelectBidEnt?';
    if (orderId === null) throw new Error("The parameter 'orderId' cannot be null.");
    else if (orderId !== undefined) url_ += 'orderId=' + encodeURIComponent('' + orderId) + '&';
    if (bidId === null) throw new Error("The parameter 'bidId' cannot be null.");
    else if (bidId !== undefined) url_ += 'bidId=' + encodeURIComponent('' + bidId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSelectBidEnt(_response);
      });
  }

  protected processSelectBidEnt(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 【平台专用】客户经理确认询价单报价
   * @param id (optional)
   * @return Success
   */
  selectQuotePrice(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/SelectQuotePrice?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSelectQuotePrice(_response);
      });
  }

  protected processSelectQuotePrice(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 为询价单选择一个报价
   * @param body (optional)
   * @return Success
   */
  selectQuotePriceV2(
    body: SelectQuoteInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/SelectQuotePriceV2';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSelectQuotePriceV2(_response);
      });
  }

  protected processSelectQuotePriceV2(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 发送手机通知
   * @param body (optional)
   * @return Success
   */
  sendPhoneNotification(
    body: SendPhoneNotificationDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/SendPhoneNotification';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSendPhoneNotification(_response);
      });
  }

  protected processSendPhoneNotification(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 设置是否是 兰陵万里 的货单
   * @param body (optional)
   * @return Success
   */
  setOrderForLLWL(
    body: OrderForLLWL | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/SetOrderForLLWL';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSetOrderForLLWL(_response);
      });
  }

  protected processSetOrderForLLWL(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 显示车次信息
   * @param id (optional)
   * @return Success
   */
  showTransportInfo(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/ShowTransportInfo?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processShowTransportInfo(_response);
      });
  }

  protected processShowTransportInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  testMessage(cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/TestMessage';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processTestMessage(_response);
      });
  }

  protected processTestMessage(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  testNotification(cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/TestNotification';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processTestNotification(_response);
      });
  }

  protected processTestNotification(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 取消物流租户绑定到处置租户
   * @param disposalId (optional)
   * @param logisticsId (optional)
   * @return Success
   */
  unBindLogisticsToDisposal(
    disposalId: number | undefined,
    logisticsId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/UnBindLogisticsToDisposal?';
    if (disposalId === null) throw new Error("The parameter 'disposalId' cannot be null.");
    else if (disposalId !== undefined)
      url_ += 'disposalId=' + encodeURIComponent('' + disposalId) + '&';
    if (logisticsId === null) throw new Error("The parameter 'logisticsId' cannot be null.");
    else if (logisticsId !== undefined)
      url_ += 'logisticsId=' + encodeURIComponent('' + logisticsId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUnBindLogisticsToDisposal(_response);
      });
  }

  protected processUnBindLogisticsToDisposal(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量取消物流租户绑定到处置租户
   * @param disposalId (optional)
   * @param body (optional)
   * @return Success
   */
  unBindLogisticsToDisposalBatch(
    disposalId: number | undefined,
    body: number[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/UnBindLogisticsToDisposalBatch?';
    if (disposalId === null) throw new Error("The parameter 'disposalId' cannot be null.");
    else if (disposalId !== undefined)
      url_ += 'disposalId=' + encodeURIComponent('' + disposalId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUnBindLogisticsToDisposalBatch(_response);
      });
  }

  protected processUnBindLogisticsToDisposalBatch(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 更新租户企业信息
   * @param body (optional)
   * @return Success
   */
  updateEnterpriseFromTenant(
    body: EnterpriseEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/UpdateEnterpriseFromTenant';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateEnterpriseFromTenant(_response);
      });
  }

  protected processUpdateEnterpriseFromTenant(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 修改对账单车辆信息
   * @param body (optional)
   * @return Success
   */
  updateStatementVehicle(
    body: UpdateStatementVehicleDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlOrderForm/UpdateStatementVehicle';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateStatementVehicle(_response);
      });
  }

  protected processUpdateStatementVehicle(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class WlStatementServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 总经理审核
   * @param body (optional)
   * @return Success
   */
  approveForGM(
    body: ApproveForKHDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/ApproveForGM';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processApproveForGM(_response);
      });
  }

  protected processApproveForGM(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 客户经理审核
   * @param body (optional)
   * @return Success
   */
  approveForKH(
    body: ApproveForKHDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/ApproveForKH';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processApproveForKH(_response);
      });
  }

  protected processApproveForKH(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 物流经理审核
   * @param body (optional)
   * @return Success
   */
  approveForWl(
    body: ApproveForWlDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/ApproveForWl';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processApproveForWl(_response);
      });
  }

  protected processApproveForWl(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 新增或修改开票信息
   * @param body (optional)
   * @return Success
   */
  createOrUpdateBillingInfo(
    body: LsStatementBillingEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/CreateOrUpdateBillingInfo';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateBillingInfo(_response);
      });
  }

  protected processCreateOrUpdateBillingInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 增加开票子记录
   * @param body (optional)
   * @return Success
   */
  createOrUpdateSubBillingInfo(
    body: LsStatementBillingReceiveEditDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/CreateOrUpdateSubBillingInfo';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateOrUpdateSubBillingInfo(_response);
      });
  }

  protected processCreateOrUpdateSubBillingInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除开票信息
   * @param id (optional)
   * @return Success
   */
  deleteBillInfo(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/DeleteBillInfo?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteBillInfo(_response);
      });
  }

  protected processDeleteBillInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 物流经理删除对账单
   * @param statementId (optional)
   * @return Success
   */
  deleteStatement(
    statementId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/DeleteStatement?';
    if (statementId === null) throw new Error("The parameter 'statementId' cannot be null.");
    else if (statementId !== undefined)
      url_ += 'statementId=' + encodeURIComponent('' + statementId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteStatement(_response);
      });
  }

  protected processDeleteStatement(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 删除开票子记录
   * @param id (optional)
   * @return Success
   */
  deleteSubBillInfo(id: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/DeleteSubBillInfo?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'DELETE',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteSubBillInfo(_response);
      });
  }

  protected processDeleteSubBillInfo(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 获取开票主记录
   * @param mainBillId (optional)
   * @return Success
   */
  getBillInfo(
    mainBillId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<LsStatementBillingReceiveDto> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/GetBillInfo?';
    if (mainBillId === null) throw new Error("The parameter 'mainBillId' cannot be null.");
    else if (mainBillId !== undefined)
      url_ += 'mainBillId=' + encodeURIComponent('' + mainBillId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetBillInfo(_response);
      });
  }

  protected processGetBillInfo(response: AxiosResponse): Promise<LsStatementBillingReceiveDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LsStatementBillingReceiveDto.fromJS(resultData200, _mappings);
      return Promise.resolve<LsStatementBillingReceiveDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<LsStatementBillingReceiveDto>(null as any);
  }

  /**
   * 获取处置开票信息
   * @param disposalId (optional)
   * @return Success
   */
  getBillInfoFromDisposal(
    disposalId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<LsStatementBillingReceiveDto[]> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/GetBillInfoFromDisposal?';
    if (disposalId === null) throw new Error("The parameter 'disposalId' cannot be null.");
    else if (disposalId !== undefined)
      url_ += 'disposalId=' + encodeURIComponent('' + disposalId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetBillInfoFromDisposal(_response);
      });
  }

  protected processGetBillInfoFromDisposal(
    response: AxiosResponse,
  ): Promise<LsStatementBillingReceiveDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(LsStatementBillingReceiveDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<LsStatementBillingReceiveDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<LsStatementBillingReceiveDto[]>(null as any);
  }

  /**
   * 总经理导出
   * @param disposalId (optional)
   * @return Success
   */
  getExcelForGM(
    disposalId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/GetExcelForGM?';
    if (disposalId === null) throw new Error("The parameter 'disposalId' cannot be null.");
    else if (disposalId !== undefined)
      url_ += 'disposalId=' + encodeURIComponent('' + disposalId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetExcelForGM(_response);
      });
  }

  protected processGetExcelForGM(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 客户经理导出
   * @param disposalId (optional)
   * @return Success
   */
  getExcelForKH(
    disposalId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/GetExcelForKH?';
    if (disposalId === null) throw new Error("The parameter 'disposalId' cannot be null.");
    else if (disposalId !== undefined)
      url_ += 'disposalId=' + encodeURIComponent('' + disposalId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetExcelForKH(_response);
      });
  }

  protected processGetExcelForKH(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 物流经理导出
   * @param statementId (optional)
   * @return Success
   */
  getExcelForWl(
    statementId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<FileDto> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/GetExcelForWl?';
    if (statementId === null) throw new Error("The parameter 'statementId' cannot be null.");
    else if (statementId !== undefined)
      url_ += 'statementId=' + encodeURIComponent('' + statementId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetExcelForWl(_response);
      });
  }

  protected processGetExcelForWl(response: AxiosResponse): Promise<FileDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FileDto.fromJS(resultData200, _mappings);
      return Promise.resolve<FileDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<FileDto>(null as any);
  }

  /**
   * 物流经理选择要对账的货单
   * @param wlTenantId (optional) 物流企业ID
   * @param disposalEntName (optional) 处置企业名称
   * @param beginShippingTime (optional) 开始装货时间
   * @param endShippingTime (optional) 结束装货时间
   * @return Success
   */
  getOrders(
    wlTenantId: number | undefined,
    disposalEntName: string | undefined,
    beginShippingTime: dayjs.Dayjs | undefined,
    endShippingTime: dayjs.Dayjs | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderFormListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/GetOrders?';
    if (wlTenantId === null) throw new Error("The parameter 'wlTenantId' cannot be null.");
    else if (wlTenantId !== undefined)
      url_ += 'wlTenantId=' + encodeURIComponent('' + wlTenantId) + '&';
    if (disposalEntName === null)
      throw new Error("The parameter 'disposalEntName' cannot be null.");
    else if (disposalEntName !== undefined)
      url_ += 'disposalEntName=' + encodeURIComponent('' + disposalEntName) + '&';
    if (beginShippingTime === null)
      throw new Error("The parameter 'beginShippingTime' cannot be null.");
    else if (beginShippingTime !== undefined)
      url_ +=
        'beginShippingTime=' +
        encodeURIComponent(beginShippingTime ? '' + beginShippingTime.toISOString() : '') +
        '&';
    if (endShippingTime === null)
      throw new Error("The parameter 'endShippingTime' cannot be null.");
    else if (endShippingTime !== undefined)
      url_ +=
        'endShippingTime=' +
        encodeURIComponent(endShippingTime ? '' + endShippingTime.toISOString() : '') +
        '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrders(_response);
      });
  }

  protected processGetOrders(response: AxiosResponse): Promise<WlOrderFormListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(WlOrderFormListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<WlOrderFormListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderFormListDto[]>(null as any);
  }

  /**
   * 查询该对账单下所有的货单信息
   * @param statementId (optional)
   * @return Success
   */
  getOrdersByStatement(
    statementId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<WlOrderFormListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/GetOrdersByStatement?';
    if (statementId === null) throw new Error("The parameter 'statementId' cannot be null.");
    else if (statementId !== undefined)
      url_ += 'statementId=' + encodeURIComponent('' + statementId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrdersByStatement(_response);
      });
  }

  protected processGetOrdersByStatement(response: AxiosResponse): Promise<WlOrderFormListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(WlOrderFormListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<WlOrderFormListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<WlOrderFormListDto[]>(null as any);
  }

  /**
   * 获取对账单明细
   * @param statementId (optional)
   * @return Success
   */
  getStatementDetail(
    statementId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<LsStatementListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/GetStatementDetail?';
    if (statementId === null) throw new Error("The parameter 'statementId' cannot be null.");
    else if (statementId !== undefined)
      url_ += 'statementId=' + encodeURIComponent('' + statementId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetStatementDetail(_response);
      });
  }

  protected processGetStatementDetail(response: AxiosResponse): Promise<LsStatementListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LsStatementListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<LsStatementListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<LsStatementListDto>(null as any);
  }

  /**
   * 总经理获取处置企业对账单明细
   * @param id (optional)
   * @return Success
   */
  getStatementDetailForGM(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<LsStatementDisposalListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/GetStatementDetailForGM?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetStatementDetailForGM(_response);
      });
  }

  protected processGetStatementDetailForGM(
    response: AxiosResponse,
  ): Promise<LsStatementDisposalListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LsStatementDisposalListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<LsStatementDisposalListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<LsStatementDisposalListDto>(null as any);
  }

  /**
   * 客户经理获取处置企业对账单明细
   * @param id (optional)
   * @return Success
   */
  getStatementDetailForKH(
    id: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<LsStatementDisposalListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/GetStatementDetailForKH?';
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined) url_ += 'id=' + encodeURIComponent('' + id) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetStatementDetailForKH(_response);
      });
  }

  protected processGetStatementDetailForKH(
    response: AxiosResponse,
  ): Promise<LsStatementDisposalListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LsStatementDisposalListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<LsStatementDisposalListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<LsStatementDisposalListDto>(null as any);
  }

  /**
   * 总经理获取对账单列表
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getStatementForGMPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfLsStatementDisposalListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/GetStatementForGMPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetStatementForGMPaged(_response);
      });
  }

  protected processGetStatementForGMPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfLsStatementDisposalListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfLsStatementDisposalListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfLsStatementDisposalListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfLsStatementDisposalListDto>(null as any);
  }

  /**
   * 客户经理获取对账单列表
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getStatementForKHPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfLsStatementDisposalListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/GetStatementForKHPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetStatementForKHPaged(_response);
      });
  }

  protected processGetStatementForKHPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfLsStatementDisposalListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfLsStatementDisposalListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfLsStatementDisposalListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfLsStatementDisposalListDto>(null as any);
  }

  /**
   * 获取对账单列表
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getStatementPaged(
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfLsStatementListDto> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/GetStatementPaged?';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetStatementPaged(_response);
      });
  }

  protected processGetStatementPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfLsStatementListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfLsStatementListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfLsStatementListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfLsStatementListDto>(null as any);
  }

  /**
   * 获取开票子记录
   * @param mainBillId (optional)
   * @return Success
   */
  getSubBillInfo(
    mainBillId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<LsStatementBillingReceiveListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/GetSubBillInfo?';
    if (mainBillId === null) throw new Error("The parameter 'mainBillId' cannot be null.");
    else if (mainBillId !== undefined)
      url_ += 'mainBillId=' + encodeURIComponent('' + mainBillId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetSubBillInfo(_response);
      });
  }

  protected processGetSubBillInfo(
    response: AxiosResponse,
  ): Promise<LsStatementBillingReceiveListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(LsStatementBillingReceiveListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<LsStatementBillingReceiveListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<LsStatementBillingReceiveListDto[]>(null as any);
  }

  /**
   * 总经理驳回
   * @param body (optional)
   * @return Success
   */
  rejectForGM(
    body: ApproveForKHDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/RejectForGM';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRejectForGM(_response);
      });
  }

  protected processRejectForGM(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 客户经理驳回
   * @param body (optional)
   * @return Success
   */
  rejectForKH(
    body: ApproveForKHDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/RejectForKH';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRejectForKH(_response);
      });
  }

  protected processRejectForKH(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 为处置企业选择待开票物流企业
   * @param body (optional)
   * @return Success
   */
  selectBilledWlEnt(
    body: SelectBilledWlEntDto | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/SelectBilledWlEnt';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSelectBilledWlEnt(_response);
      });
  }

  protected processSelectBilledWlEnt(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 选择对账的货单
   * @param body (optional)
   * @return Success
   */
  selectOrders(
    body: SelectOrdersInput | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/SelectOrders';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSelectOrders(_response);
      });
  }

  protected processSelectOrders(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * 批量更改价格
   * @param body (optional)
   * @return Success
   */
  updatePriceAll(
    body: UpdatePriceDto[] | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/WlStatement/UpdatePriceAll';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'PUT',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdatePriceAll(_response);
      });
  }

  protected processUpdatePriceAll(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class WXMiniProgramServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 优先从缓存中取GetAccess
   * @return Success
   */
  getAccessTokenCache(cancelToken?: CancelToken | undefined): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/WXMiniProgram/GetAccessTokenCache';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAccessTokenCache(_response);
      });
  }

  protected processGetAccessTokenCache(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }

  /**
   * 获取微信小程序的OpenID
   * @param code (optional)
   * @param second (optional) 第二个小程序
   * @return Success
   */
  getOpenid(
    code: string | undefined,
    second: boolean | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<GetOpenidRestult> {
    let url_ = this.baseUrl + '/api/services/app/WXMiniProgram/GetOpenid?';
    if (code === null) throw new Error("The parameter 'code' cannot be null.");
    else if (code !== undefined) url_ += 'code=' + encodeURIComponent('' + code) + '&';
    if (second === null) throw new Error("The parameter 'second' cannot be null.");
    else if (second !== undefined) url_ += 'second=' + encodeURIComponent('' + second) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOpenid(_response);
      });
  }

  protected processGetOpenid(response: AxiosResponse): Promise<GetOpenidRestult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetOpenidRestult.fromJS(resultData200, _mappings);
      return Promise.resolve<GetOpenidRestult>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<GetOpenidRestult>(null as any);
  }

  /**
   * 获取小程序二维码
   * @param token (optional)
   * @param scene (optional)
   * @param page (optional)
   * @return Success
   */
  getQrcode(
    token: string | undefined,
    scene: string | undefined,
    page: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<string> {
    let url_ = this.baseUrl + '/api/services/app/WXMiniProgram/GetQrcode?';
    if (token === null) throw new Error("The parameter 'token' cannot be null.");
    else if (token !== undefined) url_ += 'token=' + encodeURIComponent('' + token) + '&';
    if (scene === null) throw new Error("The parameter 'scene' cannot be null.");
    else if (scene !== undefined) url_ += 'scene=' + encodeURIComponent('' + scene) + '&';
    if (page === null) throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined) url_ += 'page=' + encodeURIComponent('' + page) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetQrcode(_response);
      });
  }

  protected processGetQrcode(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;

      return Promise.resolve<string>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<string>(null as any);
  }
}

export class YFServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * 获取绑定GPS正在进行中的订单信息
   * @return Success
   */
  getAllBindGPSOrders(cancelToken?: CancelToken | undefined): Promise<BalanceNeedListDto[]> {
    let url_ = this.baseUrl + '/api/services/app/YF/GetAllBindGPSOrders';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllBindGPSOrders(_response);
      });
  }

  protected processGetAllBindGPSOrders(response: AxiosResponse): Promise<BalanceNeedListDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(BalanceNeedListDto.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<BalanceNeedListDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<BalanceNeedListDto[]>(null as any);
  }

  /**
   * 从缓存中获取所有绑定GPS的车辆Id列表
   * @return Success
   */
  getBindGPSVehicleIdsCache(cancelToken?: CancelToken | undefined): Promise<number[]> {
    let url_ = this.baseUrl + '/api/services/app/YF/GetBindGPSVehicleIdsCache';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetBindGPSVehicleIdsCache(_response);
      });
  }

  protected processGetBindGPSVehicleIdsCache(response: AxiosResponse): Promise<number[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(item);
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<number[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<number[]>(null as any);
  }

  /**
   * 获取货单的分页列表信息
   * @param startTime (optional)
   * @param endTime (optional)
   * @param formState (optional) 审核状态：0：未审核，1：审核通过，2：审核不通过
   * @param isMyGoods (optional) 是否是关于自己的货单
   * @param tenantId (optional) 租户
   * @param bidState (optional) 抢单状态，1：抢单中，2：抢单成功，3：抢单失败
   * @param isFromPush (optional) 是否来自推送
   * @param isSpecialOrder (optional) 是否是专车单，false：不是，true：是
   * @param isManagerApproved (optional) 物流经理审核
   * @param createStartTime (optional)
   * @param createEndTime (optional)
   * @param orderState (optional) 单据状态，0：抢单中，1：抢单成功，2：抢单失败，3：货单结束，4：货单取消
   * @param filterText (optional)
   * @param sorting (optional)
   * @param maxResultCount (optional)
   * @param skipCount (optional)
   * @return Success
   */
  getOrderFormPaged(
    startTime: dayjs.Dayjs | undefined,
    endTime: dayjs.Dayjs | undefined,
    formState: number | undefined,
    isMyGoods: boolean | undefined,
    tenantId: number | undefined,
    bidState: number | undefined,
    isFromPush: boolean | undefined,
    isSpecialOrder: boolean | undefined,
    isManagerApproved: boolean | undefined,
    createStartTime: dayjs.Dayjs | undefined,
    createEndTime: dayjs.Dayjs | undefined,
    orderState: number | undefined,
    filterText: string | undefined,
    sorting: string | undefined,
    maxResultCount: number | undefined,
    skipCount: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<PagedResultDtoOfWlOrderFormListDto> {
    let url_ = this.baseUrl + '/api/services/app/YF/GetOrderFormPaged?';
    if (startTime === null) throw new Error("The parameter 'startTime' cannot be null.");
    else if (startTime !== undefined)
      url_ +=
        'startTime=' + encodeURIComponent(startTime ? '' + startTime.toISOString() : '') + '&';
    if (endTime === null) throw new Error("The parameter 'endTime' cannot be null.");
    else if (endTime !== undefined)
      url_ += 'endTime=' + encodeURIComponent(endTime ? '' + endTime.toISOString() : '') + '&';
    if (formState === null) throw new Error("The parameter 'formState' cannot be null.");
    else if (formState !== undefined)
      url_ += 'formState=' + encodeURIComponent('' + formState) + '&';
    if (isMyGoods === null) throw new Error("The parameter 'isMyGoods' cannot be null.");
    else if (isMyGoods !== undefined)
      url_ += 'isMyGoods=' + encodeURIComponent('' + isMyGoods) + '&';
    if (tenantId === null) throw new Error("The parameter 'tenantId' cannot be null.");
    else if (tenantId !== undefined) url_ += 'tenantId=' + encodeURIComponent('' + tenantId) + '&';
    if (bidState === null) throw new Error("The parameter 'bidState' cannot be null.");
    else if (bidState !== undefined) url_ += 'bidState=' + encodeURIComponent('' + bidState) + '&';
    if (isFromPush === null) throw new Error("The parameter 'isFromPush' cannot be null.");
    else if (isFromPush !== undefined)
      url_ += 'isFromPush=' + encodeURIComponent('' + isFromPush) + '&';
    if (isSpecialOrder === null) throw new Error("The parameter 'isSpecialOrder' cannot be null.");
    else if (isSpecialOrder !== undefined)
      url_ += 'isSpecialOrder=' + encodeURIComponent('' + isSpecialOrder) + '&';
    if (isManagerApproved === null)
      throw new Error("The parameter 'isManagerApproved' cannot be null.");
    else if (isManagerApproved !== undefined)
      url_ += 'isManagerApproved=' + encodeURIComponent('' + isManagerApproved) + '&';
    if (createStartTime === null)
      throw new Error("The parameter 'createStartTime' cannot be null.");
    else if (createStartTime !== undefined)
      url_ +=
        'createStartTime=' +
        encodeURIComponent(createStartTime ? '' + createStartTime.toISOString() : '') +
        '&';
    if (createEndTime === null) throw new Error("The parameter 'createEndTime' cannot be null.");
    else if (createEndTime !== undefined)
      url_ +=
        'createEndTime=' +
        encodeURIComponent(createEndTime ? '' + createEndTime.toISOString() : '') +
        '&';
    if (orderState === null) throw new Error("The parameter 'orderState' cannot be null.");
    else if (orderState !== undefined)
      url_ += 'orderState=' + encodeURIComponent('' + orderState) + '&';
    if (filterText === null) throw new Error("The parameter 'filterText' cannot be null.");
    else if (filterText !== undefined)
      url_ += 'filterText=' + encodeURIComponent('' + filterText) + '&';
    if (sorting === null) throw new Error("The parameter 'sorting' cannot be null.");
    else if (sorting !== undefined) url_ += 'sorting=' + encodeURIComponent('' + sorting) + '&';
    if (maxResultCount === null) throw new Error("The parameter 'maxResultCount' cannot be null.");
    else if (maxResultCount !== undefined)
      url_ += 'maxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
    if (skipCount === null) throw new Error("The parameter 'skipCount' cannot be null.");
    else if (skipCount !== undefined)
      url_ += 'skipCount=' + encodeURIComponent('' + skipCount) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetOrderFormPaged(_response);
      });
  }

  protected processGetOrderFormPaged(
    response: AxiosResponse,
  ): Promise<PagedResultDtoOfWlOrderFormListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfWlOrderFormListDto.fromJS(resultData200, _mappings);
      return Promise.resolve<PagedResultDtoOfWlOrderFormListDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<PagedResultDtoOfWlOrderFormListDto>(null as any);
  }

  /**
   * 运费报价单中标后生成TMS订单信息
   * @param orderId (optional) 货单Id
   * @param orderBidId (optional) 报价单Id
   * @return Success
   */
  yFOrderCallback(
    orderId: number | undefined,
    orderBidId: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/services/app/YF/YFOrderCallback?';
    if (orderId === null) throw new Error("The parameter 'orderId' cannot be null.");
    else if (orderId !== undefined) url_ += 'orderId=' + encodeURIComponent('' + orderId) + '&';
    if (orderBidId === null) throw new Error("The parameter 'orderBidId' cannot be null.");
    else if (orderBidId !== undefined)
      url_ += 'orderBidId=' + encodeURIComponent('' + orderBidId) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processYFOrderCallback(_response);
      });
  }

  protected processYFOrderCallback(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class TokenAuthServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  activateAccount(
    body: ActivateAccountModel | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<ActivateAccountResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/ActivateAccount';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processActivateAccount(_response);
      });
  }

  protected processActivateAccount(response: AxiosResponse): Promise<ActivateAccountResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ActivateAccountResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<ActivateAccountResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ActivateAccountResultModel>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  appAuthenticate(
    body: AuthenticateModelExt | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<AuthenticateResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/AppAuthenticate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAppAuthenticate(_response);
      });
  }

  protected processAppAuthenticate(response: AxiosResponse): Promise<AuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AuthenticateResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<AuthenticateResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AuthenticateResultModel>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  appAuthenticateForAPPWL(
    body: AuthenticateModelExt | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<AuthenticateResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/AppAuthenticateForAPPWL';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAppAuthenticateForAPPWL(_response);
      });
  }

  protected processAppAuthenticateForAPPWL(
    response: AxiosResponse,
  ): Promise<AuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AuthenticateResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<AuthenticateResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AuthenticateResultModel>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  appAuthenticateForAPPWLDriver(
    body: AuthenticateModelExt | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<AuthenticateResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/AppAuthenticateForAPPWLDriver';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAppAuthenticateForAPPWLDriver(_response);
      });
  }

  protected processAppAuthenticateForAPPWLDriver(
    response: AxiosResponse,
  ): Promise<AuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AuthenticateResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<AuthenticateResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AuthenticateResultModel>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  appAuthenticateForPlatform(
    body: AuthenticateModelExt | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<AuthenticateResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/AppAuthenticateForPlatform';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAppAuthenticateForPlatform(_response);
      });
  }

  protected processAppAuthenticateForPlatform(
    response: AxiosResponse,
  ): Promise<AuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AuthenticateResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<AuthenticateResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AuthenticateResultModel>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  authenticate(
    body: AuthenticateModel | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<AuthenticateResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/Authenticate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAuthenticate(_response);
      });
  }

  protected processAuthenticate(response: AxiosResponse): Promise<AuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AuthenticateResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<AuthenticateResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AuthenticateResultModel>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  authenticateByTelePhone(
    body: AuthenticateModelExt | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<AuthenticateResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/AuthenticateByTelePhone';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAuthenticateByTelePhone(_response);
      });
  }

  protected processAuthenticateByTelePhone(
    response: AxiosResponse,
  ): Promise<AuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AuthenticateResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<AuthenticateResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AuthenticateResultModel>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  authenticateByUnionId(
    body: AuthenticateModelExtUni | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<AuthenticateResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/AuthenticateByUnionId';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAuthenticateByUnionId(_response);
      });
  }

  protected processAuthenticateByUnionId(
    response: AxiosResponse,
  ): Promise<AuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AuthenticateResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<AuthenticateResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AuthenticateResultModel>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  authenticateByUnionIdV2(
    body: AuthenticateModelExtUni | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<AuthenticateResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/AuthenticateByUnionIdV2';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAuthenticateByUnionIdV2(_response);
      });
  }

  protected processAuthenticateByUnionIdV2(
    response: AxiosResponse,
  ): Promise<AuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AuthenticateResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<AuthenticateResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AuthenticateResultModel>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  externalAuthenticate(
    body: ExternalAuthenticateModel | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<ExternalAuthenticateResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/ExternalAuthenticate';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processExternalAuthenticate(_response);
      });
  }

  protected processExternalAuthenticate(
    response: AxiosResponse,
  ): Promise<ExternalAuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ExternalAuthenticateResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<ExternalAuthenticateResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ExternalAuthenticateResultModel>(null as any);
  }

  /**
   * @param name (optional)
   * @param tid (optional)
   * @return Success
   */
  generateVerification(
    name: string | undefined,
    tid: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/TokenAuth/GenerateVerification?';
    if (name === null) throw new Error("The parameter 'name' cannot be null.");
    else if (name !== undefined) url_ += 'name=' + encodeURIComponent('' + name) + '&';
    if (tid === null) throw new Error("The parameter 'tid' cannot be null.");
    else if (tid !== undefined) url_ += 'tid=' + encodeURIComponent('' + tid) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGenerateVerification(_response);
      });
  }

  protected processGenerateVerification(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  getCurrentTenantInfo(cancelToken?: CancelToken | undefined): Promise<AuthenticateResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/GetCurrentTenantInfo';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetCurrentTenantInfo(_response);
      });
  }

  protected processGetCurrentTenantInfo(response: AxiosResponse): Promise<AuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AuthenticateResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<AuthenticateResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AuthenticateResultModel>(null as any);
  }

  /**
   * @return Success
   */
  getExternalAuthenticationProviders(
    cancelToken?: CancelToken | undefined,
  ): Promise<ExternalLoginProviderInfoModel[]> {
    let url_ = this.baseUrl + '/api/TokenAuth/GetExternalAuthenticationProviders';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetExternalAuthenticationProviders(_response);
      });
  }

  protected processGetExternalAuthenticationProviders(
    response: AxiosResponse,
  ): Promise<ExternalLoginProviderInfoModel[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(ExternalLoginProviderInfoModel.fromJS(item, _mappings));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<ExternalLoginProviderInfoModel[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ExternalLoginProviderInfoModel[]>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  getPhoneNoAndBindingLogin(
    body: AuthenticateModelExtUni | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<AuthenticateResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/GetPhoneNoAndBindingLogin';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPhoneNoAndBindingLogin(_response);
      });
  }

  protected processGetPhoneNoAndBindingLogin(
    response: AxiosResponse,
  ): Promise<AuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AuthenticateResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<AuthenticateResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AuthenticateResultModel>(null as any);
  }

  /**
   * @param impersonationToken (optional)
   * @return Success
   */
  impersonatedAuthenticate(
    impersonationToken: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<ImpersonatedAuthenticateResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/ImpersonatedAuthenticate?';
    if (impersonationToken === null)
      throw new Error("The parameter 'impersonationToken' cannot be null.");
    else if (impersonationToken !== undefined)
      url_ += 'impersonationToken=' + encodeURIComponent('' + impersonationToken) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processImpersonatedAuthenticate(_response);
      });
  }

  protected processImpersonatedAuthenticate(
    response: AxiosResponse,
  ): Promise<ImpersonatedAuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ImpersonatedAuthenticateResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<ImpersonatedAuthenticateResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<ImpersonatedAuthenticateResultModel>(null as any);
  }

  /**
   * @param switchAccountToken (optional)
   * @return Success
   */
  linkedAccountAuthenticate(
    switchAccountToken: string | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<SwitchedAccountAuthenticateResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/LinkedAccountAuthenticate?';
    if (switchAccountToken === null)
      throw new Error("The parameter 'switchAccountToken' cannot be null.");
    else if (switchAccountToken !== undefined)
      url_ += 'switchAccountToken=' + encodeURIComponent('' + switchAccountToken) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'POST',
      url: url_,
      headers: {
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processLinkedAccountAuthenticate(_response);
      });
  }

  protected processLinkedAccountAuthenticate(
    response: AxiosResponse,
  ): Promise<SwitchedAccountAuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = SwitchedAccountAuthenticateResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<SwitchedAccountAuthenticateResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<SwitchedAccountAuthenticateResultModel>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  userRegister(
    body: UserRegisterModel | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<AuthenticateResultModel> {
    let url_ = this.baseUrl + '/api/TokenAuth/UserRegister';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: 'POST',
      url: url_,
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'text/plain',
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUserRegister(_response);
      });
  }

  protected processUserRegister(response: AxiosResponse): Promise<AuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    let _mappings: { source: any; target: any }[] = [];
    if (status === 200) {
      const _responseText = response.data.result;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AuthenticateResultModel.fromJS(resultData200, _mappings);
      return Promise.resolve<AuthenticateResultModel>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<AuthenticateResultModel>(null as any);
  }
}

export class VerificationServiceProxy {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param name (optional)
   * @param t (optional)
   * @param tid (optional)
   * @return Success
   */
  generateCaptcha(
    name: string | undefined,
    t: CaptchaType | undefined,
    tid: number | undefined,
    cancelToken?: CancelToken | undefined,
  ): Promise<void> {
    let url_ = this.baseUrl + '/api/Verification/GenerateCaptcha?';
    if (name === null) throw new Error("The parameter 'name' cannot be null.");
    else if (name !== undefined) url_ += 'name=' + encodeURIComponent('' + name) + '&';
    if (t === null) throw new Error("The parameter 't' cannot be null.");
    else if (t !== undefined) url_ += 't=' + encodeURIComponent('' + t) + '&';
    if (tid === null) throw new Error("The parameter 'tid' cannot be null.");
    else if (tid !== undefined) url_ += 'tid=' + encodeURIComponent('' + tid) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: AxiosRequestConfig = {
      method: 'GET',
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGenerateCaptcha(_response);
      });
  }

  protected processGenerateCaptcha(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === 'object') {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data.result;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data.result;
      return throwException(
        'An unexpected server error occurred.',
        status,
        _responseText,
        _headers,
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class ActivateEmailInput {
  userId!: number;
  confirmationCode!: string | undefined;
  /** Encrypted values for {TenantId}, {UserId} and {ConfirmationCode} */
  c!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.confirmationCode = _data['confirmationCode'];
      this.c = _data['c'];
    }
  }

  static fromJS(data: any, _mappings?: any): ActivateEmailInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ActivateEmailInput>(data, _mappings, ActivateEmailInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['confirmationCode'] = this.confirmationCode;
    data['c'] = this.c;
    return data;
  }

  clone(): ActivateEmailInput {
    const json = this.toJSON();
    let result = new ActivateEmailInput();
    result.init(json);
    return result;
  }
}

export class ImpersonateOutput {
  impersonationToken!: string | undefined;
  tenancyName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.impersonationToken = _data['impersonationToken'];
      this.tenancyName = _data['tenancyName'];
    }
  }

  static fromJS(data: any, _mappings?: any): ImpersonateOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ImpersonateOutput>(data, _mappings, ImpersonateOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['impersonationToken'] = this.impersonationToken;
    data['tenancyName'] = this.tenancyName;
    return data;
  }

  clone(): ImpersonateOutput {
    const json = this.toJSON();
    let result = new ImpersonateOutput();
    result.init(json);
    return result;
  }
}

export class ImpersonateInput {
  tenantId!: number | undefined;
  userId!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.userId = _data['userId'];
    }
  }

  static fromJS(data: any, _mappings?: any): ImpersonateInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ImpersonateInput>(data, _mappings, ImpersonateInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['userId'] = this.userId;
    return data;
  }

  clone(): ImpersonateInput {
    const json = this.toJSON();
    let result = new ImpersonateInput();
    result.init(json);
    return result;
  }
}

/** ��֤�⻧�����Ƿ���� */
export class IsTenantAvailableInput {
  tenancyName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenancyName = _data['tenancyName'];
    }
  }

  static fromJS(data: any, _mappings?: any): IsTenantAvailableInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<IsTenantAvailableInput>(data, _mappings, IsTenantAvailableInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenancyName'] = this.tenancyName;
    return data;
  }

  clone(): IsTenantAvailableInput {
    const json = this.toJSON();
    let result = new IsTenantAvailableInput();
    result.init(json);
    return result;
  }
}

export enum TenantAvailabilityState {
  Available = 'Available',
  InActive = 'InActive',
  NotFound = 'NotFound',
}

export class IsTenantAvailableOutput {
  state!: TenantAvailabilityState;
  tenantId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.state = _data['state'];
      this.tenantId = _data['tenantId'];
    }
  }

  static fromJS(data: any, _mappings?: any): IsTenantAvailableOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<IsTenantAvailableOutput>(data, _mappings, IsTenantAvailableOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['state'] = this.state;
    data['tenantId'] = this.tenantId;
    return data;
  }

  clone(): IsTenantAvailableOutput {
    const json = this.toJSON();
    let result = new IsTenantAvailableOutput();
    result.init(json);
    return result;
  }
}

export class RegisterInput {
  userName!: string | undefined;
  emailAddress!: string | undefined;
  password!: string | undefined;
  /** 验证码 */
  verificationCode!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.userName = _data['userName'];
      this.emailAddress = _data['emailAddress'];
      this.password = _data['password'];
      this.verificationCode = _data['verificationCode'];
    }
  }

  static fromJS(data: any, _mappings?: any): RegisterInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<RegisterInput>(data, _mappings, RegisterInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userName'] = this.userName;
    data['emailAddress'] = this.emailAddress;
    data['password'] = this.password;
    data['verificationCode'] = this.verificationCode;
    return data;
  }

  clone(): RegisterInput {
    const json = this.toJSON();
    let result = new RegisterInput();
    result.init(json);
    return result;
  }
}

export class RegisterOutput {
  canLogin!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.canLogin = _data['canLogin'];
    }
  }

  static fromJS(data: any, _mappings?: any): RegisterOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<RegisterOutput>(data, _mappings, RegisterOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['canLogin'] = this.canLogin;
    return data;
  }

  clone(): RegisterOutput {
    const json = this.toJSON();
    let result = new RegisterOutput();
    result.init(json);
    return result;
  }
}

export class ResetPasswordInput {
  userId!: number;
  resetCode!: string | undefined;
  password!: string | undefined;
  returnUrl!: string | undefined;
  singleSignIn!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.resetCode = _data['resetCode'];
      this.password = _data['password'];
      this.returnUrl = _data['returnUrl'];
      this.singleSignIn = _data['singleSignIn'];
    }
  }

  static fromJS(data: any, _mappings?: any): ResetPasswordInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ResetPasswordInput>(data, _mappings, ResetPasswordInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['resetCode'] = this.resetCode;
    data['password'] = this.password;
    data['returnUrl'] = this.returnUrl;
    data['singleSignIn'] = this.singleSignIn;
    return data;
  }

  clone(): ResetPasswordInput {
    const json = this.toJSON();
    let result = new ResetPasswordInput();
    result.init(json);
    return result;
  }
}

export class ResetPasswordOutput {
  canLogin!: boolean;
  userName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.canLogin = _data['canLogin'];
      this.userName = _data['userName'];
    }
  }

  static fromJS(data: any, _mappings?: any): ResetPasswordOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ResetPasswordOutput>(data, _mappings, ResetPasswordOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['canLogin'] = this.canLogin;
    data['userName'] = this.userName;
    return data;
  }

  clone(): ResetPasswordOutput {
    const json = this.toJSON();
    let result = new ResetPasswordOutput();
    result.init(json);
    return result;
  }
}

export class ResolveTenantIdInput {
  c!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.c = _data['c'];
    }
  }

  static fromJS(data: any, _mappings?: any): ResolveTenantIdInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ResolveTenantIdInput>(data, _mappings, ResolveTenantIdInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['c'] = this.c;
    return data;
  }

  clone(): ResolveTenantIdInput {
    const json = this.toJSON();
    let result = new ResolveTenantIdInput();
    result.init(json);
    return result;
  }
}

export class SendEmailActivationLinkInput {
  emailAddress!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.emailAddress = _data['emailAddress'];
    }
  }

  static fromJS(data: any, _mappings?: any): SendEmailActivationLinkInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SendEmailActivationLinkInput>(
      data,
      _mappings,
      SendEmailActivationLinkInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['emailAddress'] = this.emailAddress;
    return data;
  }

  clone(): SendEmailActivationLinkInput {
    const json = this.toJSON();
    let result = new SendEmailActivationLinkInput();
    result.init(json);
    return result;
  }
}

export class SendPasswordResetCodeInput {
  emailAddress!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.emailAddress = _data['emailAddress'];
    }
  }

  static fromJS(data: any, _mappings?: any): SendPasswordResetCodeInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SendPasswordResetCodeInput>(data, _mappings, SendPasswordResetCodeInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['emailAddress'] = this.emailAddress;
    return data;
  }

  clone(): SendPasswordResetCodeInput {
    const json = this.toJSON();
    let result = new SendPasswordResetCodeInput();
    result.init(json);
    return result;
  }
}

export class SwitchToLinkedAccountInput {
  targetTenantId!: number | undefined;
  targetUserId!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.targetTenantId = _data['targetTenantId'];
      this.targetUserId = _data['targetUserId'];
    }
  }

  static fromJS(data: any, _mappings?: any): SwitchToLinkedAccountInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SwitchToLinkedAccountInput>(data, _mappings, SwitchToLinkedAccountInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['targetTenantId'] = this.targetTenantId;
    data['targetUserId'] = this.targetUserId;
    return data;
  }

  clone(): SwitchToLinkedAccountInput {
    const json = this.toJSON();
    let result = new SwitchToLinkedAccountInput();
    result.init(json);
    return result;
  }
}

export class SwitchToLinkedAccountOutput {
  switchAccountToken!: string | undefined;
  tenancyName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.switchAccountToken = _data['switchAccountToken'];
      this.tenancyName = _data['tenancyName'];
    }
  }

  static fromJS(data: any, _mappings?: any): SwitchToLinkedAccountOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SwitchToLinkedAccountOutput>(
      data,
      _mappings,
      SwitchToLinkedAccountOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['switchAccountToken'] = this.switchAccountToken;
    data['tenancyName'] = this.tenancyName;
    return data;
  }

  clone(): SwitchToLinkedAccountOutput {
    const json = this.toJSON();
    let result = new SwitchToLinkedAccountOutput();
    result.init(json);
    return result;
  }
}

export class CrmDictItems {
  categoryCode!: string | undefined;
  dicCode!: string | undefined;
  dicValue!: string | undefined;
  sn!: number;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  customData!: string | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.categoryCode = _data['categoryCode'];
      this.dicCode = _data['dicCode'];
      this.dicValue = _data['dicValue'];
      this.sn = _data['sn'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.customData = _data['customData'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): CrmDictItems | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CrmDictItems>(data, _mappings, CrmDictItems);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['categoryCode'] = this.categoryCode;
    data['dicCode'] = this.dicCode;
    data['dicValue'] = this.dicValue;
    data['sn'] = this.sn;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['customData'] = this.customData;
    data['id'] = this.id;
    return data;
  }

  clone(): CrmDictItems {
    const json = this.toJSON();
    let result = new CrmDictItems();
    result.init(json);
    return result;
  }
}

/** 订单详情结算列表 Erinyes.TMS.Order_Vehicles */
export class Order_VehiclesAccountsListDto {
  /** 多装 */
  multiLoadingPoints!: boolean;
  /** 多卸 */
  multiUnLoadingPoints!: boolean;
  /** 核算金额 */
  accountsCost!: number | undefined;
  /** 核算说明 */
  accountsRemark!: string | undefined;
  /** 运费备注信息 */
  carriageRemark!: string | undefined;
  id!: number | undefined;
  /** 订单车辆编号 */
  orderVehicleNo!: string | undefined;
  /** 用来表格编辑控件的开关行 */
  extId!: number | undefined;
  /** 订单详情id */
  orderDetailId!: number | undefined;
  orderDetailNo!: string | undefined;
  /** 开始时间 */
  startTime!: dayjs.Dayjs | undefined;
  /** 完成时间 */
  endTime!: dayjs.Dayjs | undefined;
  /** 计划装货时间 */
  planLoadingTime!: dayjs.Dayjs | undefined;
  /** 计划到货时间 */
  planUnloadingTime!: dayjs.Dayjs | undefined;
  /** 车辆类型(字典) */
  vehicleTypeId!: number | undefined;
  vehicleType!: CrmDictItems;
  vehicleTypeName!: string | undefined;
  /** 提货点名称 */
  loadingPointName!: string | undefined;
  /** 送货点名称 */
  unLoadingPointName!: string | undefined;
  /** 车头 */
  vehicleHeadId!: number | undefined;
  /** 车头车牌号码 */
  vehicleHeadNumber!: string | undefined;
  /** 车挂 */
  vehicleTailId!: number | undefined;
  /** 车挂车牌号码 */
  vehicleTailNumber!: string | undefined;
  /** 司机 */
  userDriverId!: number | undefined;
  /** 司机名称 */
  driverName!: string | undefined;
  /** 押运员 */
  userEscortId!: number | undefined;
  /** 押运员名称 */
  escortName!: string | undefined;
  /** 车辆状态 0:空闲 1:返程  2:过夜 */
  vehicleState!: number | undefined;
  /** 空驶、节省里程 */
  emptyMileage!: number | undefined;
  /** 状态 0:待调度 1:待执行 2:运输中 3:已完成 */
  state!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 需要的车辆数 */
  count!: number;
  /** 订单类型 0:普通 1:拼车 2:多趟 */
  orderType!: number;
  /** 拼车或者多趟车辆订单id */
  carPoolOrderVehicleId!: number | undefined;
  /** 拼车或者多趟编号 */
  carPoolOrderNo!: string | undefined;
  /** 多趟顺序 */
  multiPassSN!: number | undefined;
  /** 运费 */
  carriage!: number | undefined;
  /** 滞留费 */
  demurrage!: number | undefined;
  /** 装卸费 */
  loadingUnloadingCost!: number | undefined;
  /** 过磅费 */
  weighingCost!: number | undefined;
  /** 其它费用 */
  otherCost!: number | undefined;
  /** 折扣 */
  discount!: number | undefined;
  /** 减免 */
  reduction!: number | undefined;
  /** 管理费 */
  manageCost!: number | undefined;
  /** 总费用 */
  totalCost!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.multiLoadingPoints = _data['multiLoadingPoints'];
      this.multiUnLoadingPoints = _data['multiUnLoadingPoints'];
      this.accountsCost = _data['accountsCost'];
      this.accountsRemark = _data['accountsRemark'];
      this.carriageRemark = _data['carriageRemark'];
      this.id = _data['id'];
      this.orderVehicleNo = _data['orderVehicleNo'];
      this.extId = _data['extId'];
      this.orderDetailId = _data['orderDetailId'];
      this.orderDetailNo = _data['orderDetailNo'];
      this.startTime = _data['startTime'] ? dayjs(_data['startTime'].toString()) : <any>undefined;
      this.endTime = _data['endTime'] ? dayjs(_data['endTime'].toString()) : <any>undefined;
      this.planLoadingTime = _data['planLoadingTime']
        ? dayjs(_data['planLoadingTime'].toString())
        : <any>undefined;
      this.planUnloadingTime = _data['planUnloadingTime']
        ? dayjs(_data['planUnloadingTime'].toString())
        : <any>undefined;
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleType = _data['vehicleType']
        ? CrmDictItems.fromJS(_data['vehicleType'], _mappings)
        : <any>undefined;
      this.vehicleTypeName = _data['vehicleTypeName'];
      this.loadingPointName = _data['loadingPointName'];
      this.unLoadingPointName = _data['unLoadingPointName'];
      this.vehicleHeadId = _data['vehicleHeadId'];
      this.vehicleHeadNumber = _data['vehicleHeadNumber'];
      this.vehicleTailId = _data['vehicleTailId'];
      this.vehicleTailNumber = _data['vehicleTailNumber'];
      this.userDriverId = _data['userDriverId'];
      this.driverName = _data['driverName'];
      this.userEscortId = _data['userEscortId'];
      this.escortName = _data['escortName'];
      this.vehicleState = _data['vehicleState'];
      this.emptyMileage = _data['emptyMileage'];
      this.state = _data['state'];
      this.remark = _data['remark'];
      this.count = _data['count'];
      this.orderType = _data['orderType'];
      this.carPoolOrderVehicleId = _data['carPoolOrderVehicleId'];
      this.carPoolOrderNo = _data['carPoolOrderNo'];
      this.multiPassSN = _data['multiPassSN'];
      this.carriage = _data['carriage'];
      this.demurrage = _data['demurrage'];
      this.loadingUnloadingCost = _data['loadingUnloadingCost'];
      this.weighingCost = _data['weighingCost'];
      this.otherCost = _data['otherCost'];
      this.discount = _data['discount'];
      this.reduction = _data['reduction'];
      this.manageCost = _data['manageCost'];
      this.totalCost = _data['totalCost'];
    }
  }

  static fromJS(data: any, _mappings?: any): Order_VehiclesAccountsListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Order_VehiclesAccountsListDto>(
      data,
      _mappings,
      Order_VehiclesAccountsListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['multiLoadingPoints'] = this.multiLoadingPoints;
    data['multiUnLoadingPoints'] = this.multiUnLoadingPoints;
    data['accountsCost'] = this.accountsCost;
    data['accountsRemark'] = this.accountsRemark;
    data['carriageRemark'] = this.carriageRemark;
    data['id'] = this.id;
    data['orderVehicleNo'] = this.orderVehicleNo;
    data['extId'] = this.extId;
    data['orderDetailId'] = this.orderDetailId;
    data['orderDetailNo'] = this.orderDetailNo;
    data['startTime'] = this.startTime ? this.startTime.toISOString() : <any>undefined;
    data['endTime'] = this.endTime ? this.endTime.toISOString() : <any>undefined;
    data['planLoadingTime'] = this.planLoadingTime
      ? this.planLoadingTime.toISOString()
      : <any>undefined;
    data['planUnloadingTime'] = this.planUnloadingTime
      ? this.planUnloadingTime.toISOString()
      : <any>undefined;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleType'] = this.vehicleType ? this.vehicleType.toJSON() : <any>undefined;
    data['vehicleTypeName'] = this.vehicleTypeName;
    data['loadingPointName'] = this.loadingPointName;
    data['unLoadingPointName'] = this.unLoadingPointName;
    data['vehicleHeadId'] = this.vehicleHeadId;
    data['vehicleHeadNumber'] = this.vehicleHeadNumber;
    data['vehicleTailId'] = this.vehicleTailId;
    data['vehicleTailNumber'] = this.vehicleTailNumber;
    data['userDriverId'] = this.userDriverId;
    data['driverName'] = this.driverName;
    data['userEscortId'] = this.userEscortId;
    data['escortName'] = this.escortName;
    data['vehicleState'] = this.vehicleState;
    data['emptyMileage'] = this.emptyMileage;
    data['state'] = this.state;
    data['remark'] = this.remark;
    data['count'] = this.count;
    data['orderType'] = this.orderType;
    data['carPoolOrderVehicleId'] = this.carPoolOrderVehicleId;
    data['carPoolOrderNo'] = this.carPoolOrderNo;
    data['multiPassSN'] = this.multiPassSN;
    data['carriage'] = this.carriage;
    data['demurrage'] = this.demurrage;
    data['loadingUnloadingCost'] = this.loadingUnloadingCost;
    data['weighingCost'] = this.weighingCost;
    data['otherCost'] = this.otherCost;
    data['discount'] = this.discount;
    data['reduction'] = this.reduction;
    data['manageCost'] = this.manageCost;
    data['totalCost'] = this.totalCost;
    return data;
  }

  clone(): Order_VehiclesAccountsListDto {
    const json = this.toJSON();
    let result = new Order_VehiclesAccountsListDto();
    result.init(json);
    return result;
  }
}

/** 对账开票的列表DTO Erinyes.TMS.Accounts_Balance */
export class Accounts_BalanceEditDto {
  /** Id */
  id!: number | undefined;
  /** 账单编号 */
  balanceNo!: string | undefined;
  /** 年 */
  year!: number;
  /** 月 */
  month!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 折扣 */
  discount!: number | undefined;
  /** 减免 */
  reduction!: number | undefined;
  /** 管理费 */
  manageCost!: number | undefined;
  /** 应收费用 */
  receivableCost!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 订单车辆、结算详情 */
  vehiclesAccountsList!: Order_VehiclesAccountsListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.balanceNo = _data['balanceNo'];
      this.year = _data['year'];
      this.month = _data['month'];
      this.customerName = _data['customerName'];
      this.customerId = _data['customerId'];
      this.discount = _data['discount'];
      this.reduction = _data['reduction'];
      this.manageCost = _data['manageCost'];
      this.receivableCost = _data['receivableCost'];
      this.remark = _data['remark'];
      if (Array.isArray(_data['vehiclesAccountsList'])) {
        this.vehiclesAccountsList = [] as any;
        for (let item of _data['vehiclesAccountsList'])
          this.vehiclesAccountsList!.push(Order_VehiclesAccountsListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_BalanceEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_BalanceEditDto>(data, _mappings, Accounts_BalanceEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['balanceNo'] = this.balanceNo;
    data['year'] = this.year;
    data['month'] = this.month;
    data['customerName'] = this.customerName;
    data['customerId'] = this.customerId;
    data['discount'] = this.discount;
    data['reduction'] = this.reduction;
    data['manageCost'] = this.manageCost;
    data['receivableCost'] = this.receivableCost;
    data['remark'] = this.remark;
    if (Array.isArray(this.vehiclesAccountsList)) {
      data['vehiclesAccountsList'] = [];
      for (let item of this.vehiclesAccountsList) data['vehiclesAccountsList'].push(item.toJSON());
    }
    return data;
  }

  clone(): Accounts_BalanceEditDto {
    const json = this.toJSON();
    let result = new Accounts_BalanceEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateAccounts_BalanceInput {
  accounts_Balance!: Accounts_BalanceEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.accounts_Balance = _data['accounts_Balance']
        ? Accounts_BalanceEditDto.fromJS(_data['accounts_Balance'], _mappings)
        : new Accounts_BalanceEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateAccounts_BalanceInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateAccounts_BalanceInput>(
      data,
      _mappings,
      CreateOrUpdateAccounts_BalanceInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accounts_Balance'] = this.accounts_Balance
      ? this.accounts_Balance.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateAccounts_BalanceInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateAccounts_BalanceInput();
    result.init(json);
    return result;
  }
}

export class App_Enterprise_Ext {
  linkName!: string | undefined;
  posX!: number | undefined;
  posY!: number | undefined;
  ix!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.linkName = _data['linkName'];
      this.posX = _data['posX'];
      this.posY = _data['posY'];
      this.ix = _data['ix'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Enterprise_Ext | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Enterprise_Ext>(data, _mappings, App_Enterprise_Ext);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['linkName'] = this.linkName;
    data['posX'] = this.posX;
    data['posY'] = this.posY;
    data['ix'] = this.ix;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['id'] = this.id;
    return data;
  }

  clone(): App_Enterprise_Ext {
    const json = this.toJSON();
    let result = new App_Enterprise_Ext();
    result.init(json);
    return result;
  }
}

export class UserToken {
  tenantId!: number | undefined;
  userId!: number;
  loginProvider!: string | undefined;
  name!: string | undefined;
  value!: string | undefined;
  expireDate!: dayjs.Dayjs | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.userId = _data['userId'];
      this.loginProvider = _data['loginProvider'];
      this.name = _data['name'];
      this.value = _data['value'];
      this.expireDate = _data['expireDate']
        ? dayjs(_data['expireDate'].toString())
        : <any>undefined;
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserToken | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserToken>(data, _mappings, UserToken);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['userId'] = this.userId;
    data['loginProvider'] = this.loginProvider;
    data['name'] = this.name;
    data['value'] = this.value;
    data['expireDate'] = this.expireDate ? this.expireDate.toISOString() : <any>undefined;
    data['id'] = this.id;
    return data;
  }

  clone(): UserToken {
    const json = this.toJSON();
    let result = new UserToken();
    result.init(json);
    return result;
  }
}

export class UserLogin {
  tenantId!: number | undefined;
  userId!: number;
  loginProvider!: string | undefined;
  providerKey!: string | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.userId = _data['userId'];
      this.loginProvider = _data['loginProvider'];
      this.providerKey = _data['providerKey'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserLogin | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserLogin>(data, _mappings, UserLogin);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['userId'] = this.userId;
    data['loginProvider'] = this.loginProvider;
    data['providerKey'] = this.providerKey;
    data['id'] = this.id;
    return data;
  }

  clone(): UserLogin {
    const json = this.toJSON();
    let result = new UserLogin();
    result.init(json);
    return result;
  }
}

export class UserRole {
  tenantId!: number | undefined;
  userId!: number;
  roleId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.userId = _data['userId'];
      this.roleId = _data['roleId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserRole | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserRole>(data, _mappings, UserRole);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['userId'] = this.userId;
    data['roleId'] = this.roleId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['id'] = this.id;
    return data;
  }

  clone(): UserRole {
    const json = this.toJSON();
    let result = new UserRole();
    result.init(json);
    return result;
  }
}

export class UserClaim {
  tenantId!: number | undefined;
  userId!: number;
  claimType!: string | undefined;
  claimValue!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.userId = _data['userId'];
      this.claimType = _data['claimType'];
      this.claimValue = _data['claimValue'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserClaim | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserClaim>(data, _mappings, UserClaim);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['userId'] = this.userId;
    data['claimType'] = this.claimType;
    data['claimValue'] = this.claimValue;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['id'] = this.id;
    return data;
  }

  clone(): UserClaim {
    const json = this.toJSON();
    let result = new UserClaim();
    result.init(json);
    return result;
  }
}

export class UserPermissionSetting {
  userId!: number;
  tenantId!: number | undefined;
  name!: string | undefined;
  isGranted!: boolean;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.tenantId = _data['tenantId'];
      this.name = _data['name'];
      this.isGranted = _data['isGranted'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserPermissionSetting | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserPermissionSetting>(data, _mappings, UserPermissionSetting);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['tenantId'] = this.tenantId;
    data['name'] = this.name;
    data['isGranted'] = this.isGranted;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['id'] = this.id;
    return data;
  }

  clone(): UserPermissionSetting {
    const json = this.toJSON();
    let result = new UserPermissionSetting();
    result.init(json);
    return result;
  }
}

export class Setting {
  tenantId!: number | undefined;
  userId!: number | undefined;
  name!: string | undefined;
  value!: string | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  lastModifierUserId!: number | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.userId = _data['userId'];
      this.name = _data['name'];
      this.value = _data['value'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Setting | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Setting>(data, _mappings, Setting);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['userId'] = this.userId;
    data['name'] = this.name;
    data['value'] = this.value;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['id'] = this.id;
    return data;
  }

  clone(): Setting {
    const json = this.toJSON();
    let result = new Setting();
    result.init(json);
    return result;
  }
}

export class User {
  signInToken!: string | undefined;
  needToChangeThePassword!: boolean;
  signInTokenExpireTimeUtc!: dayjs.Dayjs | undefined;
  name!: string | undefined;
  profilePictureId!: string | undefined;
  surname!: string | undefined;
  realName!: string | undefined;
  weChatMiniProgramOpenid!: string | undefined;
  weChatOpenid!: string | undefined;
  unionId!: string | undefined;
  weChatNickName!: string | undefined;
  lastLoginTime!: dayjs.Dayjs | undefined;
  entId!: number | undefined;
  ent!: Enterprise_Async;
  tenant!: Tenant;
  tenantType!: number | undefined;
  push_Cid!: string | undefined;
  clientConnectState!: number;
  transabilityDriverId!: number | undefined;
  transabilityEscortId!: number | undefined;
  isLeader!: boolean;
  ownCantons!: string | undefined;
  groupName!: string | undefined;
  normalizedUserName!: string | undefined;
  normalizedEmailAddress!: string | undefined;
  concurrencyStamp!: string | undefined;
  tokens!: UserToken[] | undefined;
  deleterUser!: User;
  creatorUser!: User;
  lastModifierUser!: User;
  authenticationSource!: string | undefined;
  userName!: string | undefined;
  tenantId!: number | undefined;
  emailAddress!: string | undefined;
  readonly fullName!: string | undefined;
  password!: string | undefined;
  emailConfirmationCode!: string | undefined;
  passwordResetCode!: string | undefined;
  lockoutEndDateUtc!: dayjs.Dayjs | undefined;
  accessFailedCount!: number;
  isLockoutEnabled!: boolean;
  phoneNumber!: string | undefined;
  isPhoneNumberConfirmed!: boolean;
  securityStamp!: string | undefined;
  isTwoFactorEnabled!: boolean;
  logins!: UserLogin[] | undefined;
  roles!: UserRole[] | undefined;
  claims!: UserClaim[] | undefined;
  permissions!: UserPermissionSetting[] | undefined;
  settings!: Setting[] | undefined;
  isEmailConfirmed!: boolean;
  isActive!: boolean;
  isDeleted!: boolean;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  lastModifierUserId!: number | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.signInToken = _data['signInToken'];
      this.needToChangeThePassword = _data['needToChangeThePassword'];
      this.signInTokenExpireTimeUtc = _data['signInTokenExpireTimeUtc']
        ? dayjs(_data['signInTokenExpireTimeUtc'].toString())
        : <any>undefined;
      this.name = _data['name'];
      this.profilePictureId = _data['profilePictureId'];
      this.surname = _data['surname'];
      this.realName = _data['realName'];
      this.weChatMiniProgramOpenid = _data['weChatMiniProgramOpenid'];
      this.weChatOpenid = _data['weChatOpenid'];
      this.unionId = _data['unionId'];
      this.weChatNickName = _data['weChatNickName'];
      this.lastLoginTime = _data['lastLoginTime']
        ? dayjs(_data['lastLoginTime'].toString())
        : <any>undefined;
      this.entId = _data['entId'];
      this.ent = _data['ent'] ? Enterprise_Async.fromJS(_data['ent'], _mappings) : <any>undefined;
      this.tenant = _data['tenant'] ? Tenant.fromJS(_data['tenant'], _mappings) : <any>undefined;
      this.tenantType = _data['tenantType'];
      this.push_Cid = _data['push_Cid'];
      this.clientConnectState = _data['clientConnectState'];
      this.transabilityDriverId = _data['transabilityDriverId'];
      this.transabilityEscortId = _data['transabilityEscortId'];
      this.isLeader = _data['isLeader'];
      this.ownCantons = _data['ownCantons'];
      this.groupName = _data['groupName'];
      this.normalizedUserName = _data['normalizedUserName'];
      this.normalizedEmailAddress = _data['normalizedEmailAddress'];
      this.concurrencyStamp = _data['concurrencyStamp'];
      if (Array.isArray(_data['tokens'])) {
        this.tokens = [] as any;
        for (let item of _data['tokens']) this.tokens!.push(UserToken.fromJS(item, _mappings));
      }
      this.deleterUser = _data['deleterUser']
        ? User.fromJS(_data['deleterUser'], _mappings)
        : <any>undefined;
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUser = _data['lastModifierUser']
        ? User.fromJS(_data['lastModifierUser'], _mappings)
        : <any>undefined;
      this.authenticationSource = _data['authenticationSource'];
      this.userName = _data['userName'];
      this.tenantId = _data['tenantId'];
      this.emailAddress = _data['emailAddress'];
      (<any>this).fullName = _data['fullName'];
      this.password = _data['password'];
      this.emailConfirmationCode = _data['emailConfirmationCode'];
      this.passwordResetCode = _data['passwordResetCode'];
      this.lockoutEndDateUtc = _data['lockoutEndDateUtc']
        ? dayjs(_data['lockoutEndDateUtc'].toString())
        : <any>undefined;
      this.accessFailedCount = _data['accessFailedCount'];
      this.isLockoutEnabled = _data['isLockoutEnabled'];
      this.phoneNumber = _data['phoneNumber'];
      this.isPhoneNumberConfirmed = _data['isPhoneNumberConfirmed'];
      this.securityStamp = _data['securityStamp'];
      this.isTwoFactorEnabled = _data['isTwoFactorEnabled'];
      if (Array.isArray(_data['logins'])) {
        this.logins = [] as any;
        for (let item of _data['logins']) this.logins!.push(UserLogin.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['roles'])) {
        this.roles = [] as any;
        for (let item of _data['roles']) this.roles!.push(UserRole.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['claims'])) {
        this.claims = [] as any;
        for (let item of _data['claims']) this.claims!.push(UserClaim.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['permissions'])) {
        this.permissions = [] as any;
        for (let item of _data['permissions'])
          this.permissions!.push(UserPermissionSetting.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['settings'])) {
        this.settings = [] as any;
        for (let item of _data['settings']) this.settings!.push(Setting.fromJS(item, _mappings));
      }
      this.isEmailConfirmed = _data['isEmailConfirmed'];
      this.isActive = _data['isActive'];
      this.isDeleted = _data['isDeleted'];
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): User | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<User>(data, _mappings, User);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['signInToken'] = this.signInToken;
    data['needToChangeThePassword'] = this.needToChangeThePassword;
    data['signInTokenExpireTimeUtc'] = this.signInTokenExpireTimeUtc
      ? this.signInTokenExpireTimeUtc.toISOString()
      : <any>undefined;
    data['name'] = this.name;
    data['profilePictureId'] = this.profilePictureId;
    data['surname'] = this.surname;
    data['realName'] = this.realName;
    data['weChatMiniProgramOpenid'] = this.weChatMiniProgramOpenid;
    data['weChatOpenid'] = this.weChatOpenid;
    data['unionId'] = this.unionId;
    data['weChatNickName'] = this.weChatNickName;
    data['lastLoginTime'] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
    data['entId'] = this.entId;
    data['ent'] = this.ent ? this.ent.toJSON() : <any>undefined;
    data['tenant'] = this.tenant ? this.tenant.toJSON() : <any>undefined;
    data['tenantType'] = this.tenantType;
    data['push_Cid'] = this.push_Cid;
    data['clientConnectState'] = this.clientConnectState;
    data['transabilityDriverId'] = this.transabilityDriverId;
    data['transabilityEscortId'] = this.transabilityEscortId;
    data['isLeader'] = this.isLeader;
    data['ownCantons'] = this.ownCantons;
    data['groupName'] = this.groupName;
    data['normalizedUserName'] = this.normalizedUserName;
    data['normalizedEmailAddress'] = this.normalizedEmailAddress;
    data['concurrencyStamp'] = this.concurrencyStamp;
    if (Array.isArray(this.tokens)) {
      data['tokens'] = [];
      for (let item of this.tokens) data['tokens'].push(item.toJSON());
    }
    data['deleterUser'] = this.deleterUser ? this.deleterUser.toJSON() : <any>undefined;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUser'] = this.lastModifierUser
      ? this.lastModifierUser.toJSON()
      : <any>undefined;
    data['authenticationSource'] = this.authenticationSource;
    data['userName'] = this.userName;
    data['tenantId'] = this.tenantId;
    data['emailAddress'] = this.emailAddress;
    data['fullName'] = this.fullName;
    data['password'] = this.password;
    data['emailConfirmationCode'] = this.emailConfirmationCode;
    data['passwordResetCode'] = this.passwordResetCode;
    data['lockoutEndDateUtc'] = this.lockoutEndDateUtc
      ? this.lockoutEndDateUtc.toISOString()
      : <any>undefined;
    data['accessFailedCount'] = this.accessFailedCount;
    data['isLockoutEnabled'] = this.isLockoutEnabled;
    data['phoneNumber'] = this.phoneNumber;
    data['isPhoneNumberConfirmed'] = this.isPhoneNumberConfirmed;
    data['securityStamp'] = this.securityStamp;
    data['isTwoFactorEnabled'] = this.isTwoFactorEnabled;
    if (Array.isArray(this.logins)) {
      data['logins'] = [];
      for (let item of this.logins) data['logins'].push(item.toJSON());
    }
    if (Array.isArray(this.roles)) {
      data['roles'] = [];
      for (let item of this.roles) data['roles'].push(item.toJSON());
    }
    if (Array.isArray(this.claims)) {
      data['claims'] = [];
      for (let item of this.claims) data['claims'].push(item.toJSON());
    }
    if (Array.isArray(this.permissions)) {
      data['permissions'] = [];
      for (let item of this.permissions) data['permissions'].push(item.toJSON());
    }
    if (Array.isArray(this.settings)) {
      data['settings'] = [];
      for (let item of this.settings) data['settings'].push(item.toJSON());
    }
    data['isEmailConfirmed'] = this.isEmailConfirmed;
    data['isActive'] = this.isActive;
    data['isDeleted'] = this.isDeleted;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['id'] = this.id;
    return data;
  }

  clone(): User {
    const json = this.toJSON();
    let result = new User();
    result.init(json);
    return result;
  }
}

export class CRM_Contact {
  entId!: number | undefined;
  ent!: CRM_Clue;
  contactName!: string | undefined;
  contactPost!: string | undefined;
  contactTel!: string | undefined;
  contactPhone!: string | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.ent = _data['ent'] ? CRM_Clue.fromJS(_data['ent'], _mappings) : <any>undefined;
      this.contactName = _data['contactName'];
      this.contactPost = _data['contactPost'];
      this.contactTel = _data['contactTel'];
      this.contactPhone = _data['contactPhone'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): CRM_Contact | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CRM_Contact>(data, _mappings, CRM_Contact);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['ent'] = this.ent ? this.ent.toJSON() : <any>undefined;
    data['contactName'] = this.contactName;
    data['contactPost'] = this.contactPost;
    data['contactTel'] = this.contactTel;
    data['contactPhone'] = this.contactPhone;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): CRM_Contact {
    const json = this.toJSON();
    let result = new CRM_Contact();
    result.init(json);
    return result;
  }
}

export class CRM_Contract {
  entId!: number | undefined;
  ent!: CRM_Clue;
  contractNo!: string | undefined;
  startDate!: dayjs.Dayjs | undefined;
  endDate!: dayjs.Dayjs | undefined;
  contractFiles!: string | undefined;
  contractState!: number | undefined;
  isInValid!: boolean;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.ent = _data['ent'] ? CRM_Clue.fromJS(_data['ent'], _mappings) : <any>undefined;
      this.contractNo = _data['contractNo'];
      this.startDate = _data['startDate'] ? dayjs(_data['startDate'].toString()) : <any>undefined;
      this.endDate = _data['endDate'] ? dayjs(_data['endDate'].toString()) : <any>undefined;
      this.contractFiles = _data['contractFiles'];
      this.contractState = _data['contractState'];
      this.isInValid = _data['isInValid'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): CRM_Contract | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CRM_Contract>(data, _mappings, CRM_Contract);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['ent'] = this.ent ? this.ent.toJSON() : <any>undefined;
    data['contractNo'] = this.contractNo;
    data['startDate'] = this.startDate ? this.startDate.toISOString() : <any>undefined;
    data['endDate'] = this.endDate ? this.endDate.toISOString() : <any>undefined;
    data['contractFiles'] = this.contractFiles;
    data['contractState'] = this.contractState;
    data['isInValid'] = this.isInValid;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): CRM_Contract {
    const json = this.toJSON();
    let result = new CRM_Contract();
    result.init(json);
    return result;
  }
}

export class CRM_Follow_Record {
  entId!: number | undefined;
  ent!: CRM_Clue;
  recordType!: string | undefined;
  recordTags!: string | undefined;
  recordContent!: string | undefined;
  recordJson!: string | undefined;
  fromId!: number | undefined;
  fromTable!: string | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.ent = _data['ent'] ? CRM_Clue.fromJS(_data['ent'], _mappings) : <any>undefined;
      this.recordType = _data['recordType'];
      this.recordTags = _data['recordTags'];
      this.recordContent = _data['recordContent'];
      this.recordJson = _data['recordJson'];
      this.fromId = _data['fromId'];
      this.fromTable = _data['fromTable'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): CRM_Follow_Record | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CRM_Follow_Record>(data, _mappings, CRM_Follow_Record);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['ent'] = this.ent ? this.ent.toJSON() : <any>undefined;
    data['recordType'] = this.recordType;
    data['recordTags'] = this.recordTags;
    data['recordContent'] = this.recordContent;
    data['recordJson'] = this.recordJson;
    data['fromId'] = this.fromId;
    data['fromTable'] = this.fromTable;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): CRM_Follow_Record {
    const json = this.toJSON();
    let result = new CRM_Follow_Record();
    result.init(json);
    return result;
  }
}

export class CRM_License_Waste {
  licenseId!: number | undefined;
  license!: CRM_License;
  wasteCategoryCode!: string | undefined;
  wasteCategoryName!: string | undefined;
  wasteCode!: string | undefined;
  wasteName!: string | undefined;
  commonName!: string | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.licenseId = _data['licenseId'];
      this.license = _data['license']
        ? CRM_License.fromJS(_data['license'], _mappings)
        : <any>undefined;
      this.wasteCategoryCode = _data['wasteCategoryCode'];
      this.wasteCategoryName = _data['wasteCategoryName'];
      this.wasteCode = _data['wasteCode'];
      this.wasteName = _data['wasteName'];
      this.commonName = _data['commonName'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): CRM_License_Waste | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CRM_License_Waste>(data, _mappings, CRM_License_Waste);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['licenseId'] = this.licenseId;
    data['license'] = this.license ? this.license.toJSON() : <any>undefined;
    data['wasteCategoryCode'] = this.wasteCategoryCode;
    data['wasteCategoryName'] = this.wasteCategoryName;
    data['wasteCode'] = this.wasteCode;
    data['wasteName'] = this.wasteName;
    data['commonName'] = this.commonName;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): CRM_License_Waste {
    const json = this.toJSON();
    let result = new CRM_License_Waste();
    result.init(json);
    return result;
  }
}

export class CRM_License {
  entId!: number | undefined;
  ent!: CRM_Clue;
  wastes!: CRM_License_Waste[] | undefined;
  disposalMethodID!: number | undefined;
  disposalMethod!: CrmDictItems;
  quantity!: number | undefined;
  unit!: string | undefined;
  licenseNo!: string | undefined;
  startTime!: dayjs.Dayjs | undefined;
  endTime!: dayjs.Dayjs | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.ent = _data['ent'] ? CRM_Clue.fromJS(_data['ent'], _mappings) : <any>undefined;
      if (Array.isArray(_data['wastes'])) {
        this.wastes = [] as any;
        for (let item of _data['wastes'])
          this.wastes!.push(CRM_License_Waste.fromJS(item, _mappings));
      }
      this.disposalMethodID = _data['disposalMethodID'];
      this.disposalMethod = _data['disposalMethod']
        ? CrmDictItems.fromJS(_data['disposalMethod'], _mappings)
        : <any>undefined;
      this.quantity = _data['quantity'];
      this.unit = _data['unit'];
      this.licenseNo = _data['licenseNo'];
      this.startTime = _data['startTime'] ? dayjs(_data['startTime'].toString()) : <any>undefined;
      this.endTime = _data['endTime'] ? dayjs(_data['endTime'].toString()) : <any>undefined;
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): CRM_License | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CRM_License>(data, _mappings, CRM_License);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['ent'] = this.ent ? this.ent.toJSON() : <any>undefined;
    if (Array.isArray(this.wastes)) {
      data['wastes'] = [];
      for (let item of this.wastes) data['wastes'].push(item.toJSON());
    }
    data['disposalMethodID'] = this.disposalMethodID;
    data['disposalMethod'] = this.disposalMethod ? this.disposalMethod.toJSON() : <any>undefined;
    data['quantity'] = this.quantity;
    data['unit'] = this.unit;
    data['licenseNo'] = this.licenseNo;
    data['startTime'] = this.startTime ? this.startTime.toISOString() : <any>undefined;
    data['endTime'] = this.endTime ? this.endTime.toISOString() : <any>undefined;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): CRM_License {
    const json = this.toJSON();
    let result = new CRM_License();
    result.init(json);
    return result;
  }
}

export class CRM_Visiting_Plan {
  entId!: number | undefined;
  ent!: CRM_Clue;
  planTime!: dayjs.Dayjs | undefined;
  planTheme!: string | undefined;
  planState!: number | undefined;
  checkPosX!: number | undefined;
  checkPosY!: number | undefined;
  checkAddress!: string | undefined;
  checkPhotos!: string | undefined;
  checkTime!: dayjs.Dayjs | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.ent = _data['ent'] ? CRM_Clue.fromJS(_data['ent'], _mappings) : <any>undefined;
      this.planTime = _data['planTime'] ? dayjs(_data['planTime'].toString()) : <any>undefined;
      this.planTheme = _data['planTheme'];
      this.planState = _data['planState'];
      this.checkPosX = _data['checkPosX'];
      this.checkPosY = _data['checkPosY'];
      this.checkAddress = _data['checkAddress'];
      this.checkPhotos = _data['checkPhotos'];
      this.checkTime = _data['checkTime'] ? dayjs(_data['checkTime'].toString()) : <any>undefined;
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): CRM_Visiting_Plan | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CRM_Visiting_Plan>(data, _mappings, CRM_Visiting_Plan);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['ent'] = this.ent ? this.ent.toJSON() : <any>undefined;
    data['planTime'] = this.planTime ? this.planTime.toISOString() : <any>undefined;
    data['planTheme'] = this.planTheme;
    data['planState'] = this.planState;
    data['checkPosX'] = this.checkPosX;
    data['checkPosY'] = this.checkPosY;
    data['checkAddress'] = this.checkAddress;
    data['checkPhotos'] = this.checkPhotos;
    data['checkTime'] = this.checkTime ? this.checkTime.toISOString() : <any>undefined;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): CRM_Visiting_Plan {
    const json = this.toJSON();
    let result = new CRM_Visiting_Plan();
    result.init(json);
    return result;
  }
}

export class CRM_Clue {
  enterpriseId!: number | undefined;
  enterprise!: Enterprise_Async;
  entNature!: string | undefined;
  followUserId!: number | undefined;
  followUser!: User;
  readonly contacts!: CRM_Contact[] | undefined;
  readonly contracts!: CRM_Contract[] | undefined;
  readonly records!: CRM_Follow_Record[] | undefined;
  readonly licenses!: CRM_License[] | undefined;
  readonly plans!: CRM_Visiting_Plan[] | undefined;
  followState!: number | undefined;
  followTime!: dayjs.Dayjs | undefined;
  validDay!: number | undefined;
  entTags!: string | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enterpriseId = _data['enterpriseId'];
      this.enterprise = _data['enterprise']
        ? Enterprise_Async.fromJS(_data['enterprise'], _mappings)
        : <any>undefined;
      this.entNature = _data['entNature'];
      this.followUserId = _data['followUserId'];
      this.followUser = _data['followUser']
        ? User.fromJS(_data['followUser'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['contacts'])) {
        (<any>this).contacts = [] as any;
        for (let item of _data['contacts'])
          (<any>this).contacts!.push(CRM_Contact.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['contracts'])) {
        (<any>this).contracts = [] as any;
        for (let item of _data['contracts'])
          (<any>this).contracts!.push(CRM_Contract.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['records'])) {
        (<any>this).records = [] as any;
        for (let item of _data['records'])
          (<any>this).records!.push(CRM_Follow_Record.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['licenses'])) {
        (<any>this).licenses = [] as any;
        for (let item of _data['licenses'])
          (<any>this).licenses!.push(CRM_License.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['plans'])) {
        (<any>this).plans = [] as any;
        for (let item of _data['plans'])
          (<any>this).plans!.push(CRM_Visiting_Plan.fromJS(item, _mappings));
      }
      this.followState = _data['followState'];
      this.followTime = _data['followTime']
        ? dayjs(_data['followTime'].toString())
        : <any>undefined;
      this.validDay = _data['validDay'];
      this.entTags = _data['entTags'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): CRM_Clue | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CRM_Clue>(data, _mappings, CRM_Clue);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enterpriseId'] = this.enterpriseId;
    data['enterprise'] = this.enterprise ? this.enterprise.toJSON() : <any>undefined;
    data['entNature'] = this.entNature;
    data['followUserId'] = this.followUserId;
    data['followUser'] = this.followUser ? this.followUser.toJSON() : <any>undefined;
    if (Array.isArray(this.contacts)) {
      data['contacts'] = [];
      for (let item of this.contacts) data['contacts'].push(item.toJSON());
    }
    if (Array.isArray(this.contracts)) {
      data['contracts'] = [];
      for (let item of this.contracts) data['contracts'].push(item.toJSON());
    }
    if (Array.isArray(this.records)) {
      data['records'] = [];
      for (let item of this.records) data['records'].push(item.toJSON());
    }
    if (Array.isArray(this.licenses)) {
      data['licenses'] = [];
      for (let item of this.licenses) data['licenses'].push(item.toJSON());
    }
    if (Array.isArray(this.plans)) {
      data['plans'] = [];
      for (let item of this.plans) data['plans'].push(item.toJSON());
    }
    data['followState'] = this.followState;
    data['followTime'] = this.followTime ? this.followTime.toISOString() : <any>undefined;
    data['validDay'] = this.validDay;
    data['entTags'] = this.entTags;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): CRM_Clue {
    const json = this.toJSON();
    let result = new CRM_Clue();
    result.init(json);
    return result;
  }
}

export enum UnlockType {
  系统初始化 = '系统初始化',
  手动解锁 = '手动解锁',
  定时解锁 = '定时解锁',
}

export class TenantViewedClue {
  entId!: number | undefined;
  ent!: Enterprise_Async;
  unlockType!: UnlockType;
  pageView!: number;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.ent = _data['ent'] ? Enterprise_Async.fromJS(_data['ent'], _mappings) : <any>undefined;
      this.unlockType = _data['unlockType'];
      this.pageView = _data['pageView'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): TenantViewedClue | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TenantViewedClue>(data, _mappings, TenantViewedClue);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['ent'] = this.ent ? this.ent.toJSON() : <any>undefined;
    data['unlockType'] = this.unlockType;
    data['pageView'] = this.pageView;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): TenantViewedClue {
    const json = this.toJSON();
    let result = new TenantViewedClue();
    result.init(json);
    return result;
  }
}

export class Enterprise_HW {
  id!: number;
  entId!: number | undefined;
  ent!: Enterprise_Async;
  octetcode!: string | undefined;
  parentOctetcode!: string | undefined;
  vulgo!: string | undefined;
  direction!: string | undefined;
  transferQuantity!: number | undefined;
  remark!: string | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.entId = _data['entId'];
      this.ent = _data['ent'] ? Enterprise_Async.fromJS(_data['ent'], _mappings) : <any>undefined;
      this.octetcode = _data['octetcode'];
      this.parentOctetcode = _data['parentOctetcode'];
      this.vulgo = _data['vulgo'];
      this.direction = _data['direction'];
      this.transferQuantity = _data['transferQuantity'];
      this.remark = _data['remark'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
    }
  }

  static fromJS(data: any, _mappings?: any): Enterprise_HW | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Enterprise_HW>(data, _mappings, Enterprise_HW);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['entId'] = this.entId;
    data['ent'] = this.ent ? this.ent.toJSON() : <any>undefined;
    data['octetcode'] = this.octetcode;
    data['parentOctetcode'] = this.parentOctetcode;
    data['vulgo'] = this.vulgo;
    data['direction'] = this.direction;
    data['transferQuantity'] = this.transferQuantity;
    data['remark'] = this.remark;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    return data;
  }

  clone(): Enterprise_HW {
    const json = this.toJSON();
    let result = new Enterprise_HW();
    result.init(json);
    return result;
  }
}

export class App_Followup {
  viewClueId!: number | undefined;
  viewClue!: App_Viewclue;
  followUpState!: number | undefined;
  nextContactTime!: dayjs.Dayjs | undefined;
  followContent!: string | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.viewClueId = _data['viewClueId'];
      this.viewClue = _data['viewClue']
        ? App_Viewclue.fromJS(_data['viewClue'], _mappings)
        : <any>undefined;
      this.followUpState = _data['followUpState'];
      this.nextContactTime = _data['nextContactTime']
        ? dayjs(_data['nextContactTime'].toString())
        : <any>undefined;
      this.followContent = _data['followContent'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Followup | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Followup>(data, _mappings, App_Followup);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['viewClueId'] = this.viewClueId;
    data['viewClue'] = this.viewClue ? this.viewClue.toJSON() : <any>undefined;
    data['followUpState'] = this.followUpState;
    data['nextContactTime'] = this.nextContactTime
      ? this.nextContactTime.toISOString()
      : <any>undefined;
    data['followContent'] = this.followContent;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): App_Followup {
    const json = this.toJSON();
    let result = new App_Followup();
    result.init(json);
    return result;
  }
}

export class App_Viewclue {
  entId!: number | undefined;
  ent!: Enterprise_Async;
  readonly app_Followups!: App_Followup[] | undefined;
  unlockTime!: dayjs.Dayjs | undefined;
  followUpState!: number | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.ent = _data['ent'] ? Enterprise_Async.fromJS(_data['ent'], _mappings) : <any>undefined;
      if (Array.isArray(_data['app_Followups'])) {
        (<any>this).app_Followups = [] as any;
        for (let item of _data['app_Followups'])
          (<any>this).app_Followups!.push(App_Followup.fromJS(item, _mappings));
      }
      this.unlockTime = _data['unlockTime']
        ? dayjs(_data['unlockTime'].toString())
        : <any>undefined;
      this.followUpState = _data['followUpState'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Viewclue | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Viewclue>(data, _mappings, App_Viewclue);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['ent'] = this.ent ? this.ent.toJSON() : <any>undefined;
    if (Array.isArray(this.app_Followups)) {
      data['app_Followups'] = [];
      for (let item of this.app_Followups) data['app_Followups'].push(item.toJSON());
    }
    data['unlockTime'] = this.unlockTime ? this.unlockTime.toISOString() : <any>undefined;
    data['followUpState'] = this.followUpState;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): App_Viewclue {
    const json = this.toJSON();
    let result = new App_Viewclue();
    result.init(json);
    return result;
  }
}

export class Enterprise_Contact {
  id!: number;
  entId!: number;
  ent!: Enterprise_Async;
  contactName!: string | undefined;
  defaultFlag!: number | undefined;
  contactNo!: string | undefined;
  contactPost!: string | undefined;
  contactTel!: string | undefined;
  contactPhone!: string | undefined;
  contacteMail!: string | undefined;
  zipCode!: string | undefined;
  mailingAddress!: string | undefined;
  contactFax!: string | undefined;
  infoSource!: string | undefined;
  ix!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.entId = _data['entId'];
      this.ent = _data['ent'] ? Enterprise_Async.fromJS(_data['ent'], _mappings) : <any>undefined;
      this.contactName = _data['contactName'];
      this.defaultFlag = _data['defaultFlag'];
      this.contactNo = _data['contactNo'];
      this.contactPost = _data['contactPost'];
      this.contactTel = _data['contactTel'];
      this.contactPhone = _data['contactPhone'];
      this.contacteMail = _data['contacteMail'];
      this.zipCode = _data['zipCode'];
      this.mailingAddress = _data['mailingAddress'];
      this.contactFax = _data['contactFax'];
      this.infoSource = _data['infoSource'];
      this.ix = _data['ix'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): Enterprise_Contact | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Enterprise_Contact>(data, _mappings, Enterprise_Contact);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['entId'] = this.entId;
    data['ent'] = this.ent ? this.ent.toJSON() : <any>undefined;
    data['contactName'] = this.contactName;
    data['defaultFlag'] = this.defaultFlag;
    data['contactNo'] = this.contactNo;
    data['contactPost'] = this.contactPost;
    data['contactTel'] = this.contactTel;
    data['contactPhone'] = this.contactPhone;
    data['contacteMail'] = this.contacteMail;
    data['zipCode'] = this.zipCode;
    data['mailingAddress'] = this.mailingAddress;
    data['contactFax'] = this.contactFax;
    data['infoSource'] = this.infoSource;
    data['ix'] = this.ix;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    return data;
  }

  clone(): Enterprise_Contact {
    const json = this.toJSON();
    let result = new Enterprise_Contact();
    result.init(json);
    return result;
  }
}

export class Tags {
  tagName!: string | undefined;
  lastUpdateTime!: dayjs.Dayjs | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tagName = _data['tagName'];
      this.lastUpdateTime = _data['lastUpdateTime']
        ? dayjs(_data['lastUpdateTime'].toString())
        : <any>undefined;
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Tags | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Tags>(data, _mappings, Tags);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tagName'] = this.tagName;
    data['lastUpdateTime'] = this.lastUpdateTime
      ? this.lastUpdateTime.toISOString()
      : <any>undefined;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Tags {
    const json = this.toJSON();
    let result = new Tags();
    result.init(json);
    return result;
  }
}

export class Enterprise_Tags {
  entId!: number | undefined;
  ent!: Enterprise_Async;
  tagId!: number | undefined;
  tag!: Tags;
  tags!: string | undefined;
  remark!: string | undefined;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.ent = _data['ent'] ? Enterprise_Async.fromJS(_data['ent'], _mappings) : <any>undefined;
      this.tagId = _data['tagId'];
      this.tag = _data['tag'] ? Tags.fromJS(_data['tag'], _mappings) : <any>undefined;
      this.tags = _data['tags'];
      this.remark = _data['remark'];
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Enterprise_Tags | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Enterprise_Tags>(data, _mappings, Enterprise_Tags);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['ent'] = this.ent ? this.ent.toJSON() : <any>undefined;
    data['tagId'] = this.tagId;
    data['tag'] = this.tag ? this.tag.toJSON() : <any>undefined;
    data['tags'] = this.tags;
    data['remark'] = this.remark;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Enterprise_Tags {
    const json = this.toJSON();
    let result = new Enterprise_Tags();
    result.init(json);
    return result;
  }
}

export class Dic_Industry {
  code!: string | undefined;
  name!: string | undefined;
  parentCode!: string | undefined;
  pinyin!: string | undefined;
  mnemonicCode!: string | undefined;
  level!: number;
  isEndNode!: boolean;
  idx!: number;
  rem!: string | undefined;
  fullCode!: string | undefined;
  fullName!: string | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.code = _data['code'];
      this.name = _data['name'];
      this.parentCode = _data['parentCode'];
      this.pinyin = _data['pinyin'];
      this.mnemonicCode = _data['mnemonicCode'];
      this.level = _data['level'];
      this.isEndNode = _data['isEndNode'];
      this.idx = _data['idx'];
      this.rem = _data['rem'];
      this.fullCode = _data['fullCode'];
      this.fullName = _data['fullName'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Dic_Industry | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Dic_Industry>(data, _mappings, Dic_Industry);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['code'] = this.code;
    data['name'] = this.name;
    data['parentCode'] = this.parentCode;
    data['pinyin'] = this.pinyin;
    data['mnemonicCode'] = this.mnemonicCode;
    data['level'] = this.level;
    data['isEndNode'] = this.isEndNode;
    data['idx'] = this.idx;
    data['rem'] = this.rem;
    data['fullCode'] = this.fullCode;
    data['fullName'] = this.fullName;
    data['id'] = this.id;
    return data;
  }

  clone(): Dic_Industry {
    const json = this.toJSON();
    let result = new Dic_Industry();
    result.init(json);
    return result;
  }
}

export class Dic_Canton {
  code!: string | undefined;
  name!: string | undefined;
  parentCode!: string | undefined;
  parentCanton!: Dic_Canton;
  pinyin!: string | undefined;
  mnemonicCode!: string | undefined;
  level!: number;
  isEndNode!: boolean;
  idx!: number;
  rem!: string | undefined;
  fullCode!: string | undefined;
  fullName!: string | undefined;
  isDeleted!: boolean;
  longitude!: number | undefined;
  latitude!: number | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.code = _data['code'];
      this.name = _data['name'];
      this.parentCode = _data['parentCode'];
      this.parentCanton = _data['parentCanton']
        ? Dic_Canton.fromJS(_data['parentCanton'], _mappings)
        : <any>undefined;
      this.pinyin = _data['pinyin'];
      this.mnemonicCode = _data['mnemonicCode'];
      this.level = _data['level'];
      this.isEndNode = _data['isEndNode'];
      this.idx = _data['idx'];
      this.rem = _data['rem'];
      this.fullCode = _data['fullCode'];
      this.fullName = _data['fullName'];
      this.isDeleted = _data['isDeleted'];
      this.longitude = _data['longitude'];
      this.latitude = _data['latitude'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Dic_Canton | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Dic_Canton>(data, _mappings, Dic_Canton);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['code'] = this.code;
    data['name'] = this.name;
    data['parentCode'] = this.parentCode;
    data['parentCanton'] = this.parentCanton ? this.parentCanton.toJSON() : <any>undefined;
    data['pinyin'] = this.pinyin;
    data['mnemonicCode'] = this.mnemonicCode;
    data['level'] = this.level;
    data['isEndNode'] = this.isEndNode;
    data['idx'] = this.idx;
    data['rem'] = this.rem;
    data['fullCode'] = this.fullCode;
    data['fullName'] = this.fullName;
    data['isDeleted'] = this.isDeleted;
    data['longitude'] = this.longitude;
    data['latitude'] = this.latitude;
    data['id'] = this.id;
    return data;
  }

  clone(): Dic_Canton {
    const json = this.toJSON();
    let result = new Dic_Canton();
    result.init(json);
    return result;
  }
}

export class Dic_EnvIndustry {
  code!: string | undefined;
  name!: string | undefined;
  parentCode!: string | undefined;
  pinyin!: string | undefined;
  mnemonicCode!: string | undefined;
  level!: number;
  isEndNode!: boolean;
  idx!: number;
  rem!: string | undefined;
  fullCode!: string | undefined;
  fullName!: string | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.code = _data['code'];
      this.name = _data['name'];
      this.parentCode = _data['parentCode'];
      this.pinyin = _data['pinyin'];
      this.mnemonicCode = _data['mnemonicCode'];
      this.level = _data['level'];
      this.isEndNode = _data['isEndNode'];
      this.idx = _data['idx'];
      this.rem = _data['rem'];
      this.fullCode = _data['fullCode'];
      this.fullName = _data['fullName'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Dic_EnvIndustry | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Dic_EnvIndustry>(data, _mappings, Dic_EnvIndustry);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['code'] = this.code;
    data['name'] = this.name;
    data['parentCode'] = this.parentCode;
    data['pinyin'] = this.pinyin;
    data['mnemonicCode'] = this.mnemonicCode;
    data['level'] = this.level;
    data['isEndNode'] = this.isEndNode;
    data['idx'] = this.idx;
    data['rem'] = this.rem;
    data['fullCode'] = this.fullCode;
    data['fullName'] = this.fullName;
    data['id'] = this.id;
    return data;
  }

  clone(): Dic_EnvIndustry {
    const json = this.toJSON();
    let result = new Dic_EnvIndustry();
    result.init(json);
    return result;
  }
}

export class Enterprise_Async {
  entExtId!: number | undefined;
  entExt!: App_Enterprise_Ext;
  yfClues!: CRM_Clue[] | undefined;
  readonly tenantViewedClues!: TenantViewedClue[] | undefined;
  readonly enterpriseHWs!: Enterprise_HW[] | undefined;
  readonly appViewClues!: App_Viewclue[] | undefined;
  contacts!: Enterprise_Contact[] | undefined;
  readonly tags!: Enterprise_Tags[] | undefined;
  creditCode!: string | undefined;
  industryId!: number | undefined;
  industry!: Dic_Industry;
  cantonId!: number | undefined;
  canton!: Dic_Canton;
  cantonCode!: string | undefined;
  envIndustryId!: number | undefined;
  envIndustry!: Dic_EnvIndustry;
  website!: string | undefined;
  regNo!: string | undefined;
  orgCode!: string | undefined;
  orgType!: string | undefined;
  issueOrgType!: string | undefined;
  issueOrgName!: string | undefined;
  issueDate!: dayjs.Dayjs | undefined;
  legalName!: string | undefined;
  regName!: string | undefined;
  regType!: string | undefined;
  regAdress!: string | undefined;
  regCapital!: number | undefined;
  regCapitalCur!: string | undefined;
  revCapital!: number | undefined;
  unit!: string | undefined;
  foundDate!: dayjs.Dayjs | undefined;
  startDate!: dayjs.Dayjs | undefined;
  endDate!: dayjs.Dayjs | undefined;
  licenseItems!: string | undefined;
  generalItems!: string | undefined;
  businessScope!: string | undefined;
  businessStatus!: string | undefined;
  logoutDate!: dayjs.Dayjs | undefined;
  revocationDate!: dayjs.Dayjs | undefined;
  idFingerprint!: string | undefined;
  lastInspectionDate!: dayjs.Dayjs | undefined;
  lastInspectionYear!: number | undefined;
  isAudited!: number | undefined;
  ix!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  hasChildHWs!: boolean;
  oldEntId!: number | undefined;
  latitude!: number | undefined;
  longitude!: number | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entExtId = _data['entExtId'];
      this.entExt = _data['entExt']
        ? App_Enterprise_Ext.fromJS(_data['entExt'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['yfClues'])) {
        this.yfClues = [] as any;
        for (let item of _data['yfClues']) this.yfClues!.push(CRM_Clue.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['tenantViewedClues'])) {
        (<any>this).tenantViewedClues = [] as any;
        for (let item of _data['tenantViewedClues'])
          (<any>this).tenantViewedClues!.push(TenantViewedClue.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['enterpriseHWs'])) {
        (<any>this).enterpriseHWs = [] as any;
        for (let item of _data['enterpriseHWs'])
          (<any>this).enterpriseHWs!.push(Enterprise_HW.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['appViewClues'])) {
        (<any>this).appViewClues = [] as any;
        for (let item of _data['appViewClues'])
          (<any>this).appViewClues!.push(App_Viewclue.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['contacts'])) {
        this.contacts = [] as any;
        for (let item of _data['contacts'])
          this.contacts!.push(Enterprise_Contact.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['tags'])) {
        (<any>this).tags = [] as any;
        for (let item of _data['tags'])
          (<any>this).tags!.push(Enterprise_Tags.fromJS(item, _mappings));
      }
      this.creditCode = _data['creditCode'];
      this.industryId = _data['industryId'];
      this.industry = _data['industry']
        ? Dic_Industry.fromJS(_data['industry'], _mappings)
        : <any>undefined;
      this.cantonId = _data['cantonId'];
      this.canton = _data['canton']
        ? Dic_Canton.fromJS(_data['canton'], _mappings)
        : <any>undefined;
      this.cantonCode = _data['cantonCode'];
      this.envIndustryId = _data['envIndustryId'];
      this.envIndustry = _data['envIndustry']
        ? Dic_EnvIndustry.fromJS(_data['envIndustry'], _mappings)
        : <any>undefined;
      this.website = _data['website'];
      this.regNo = _data['regNo'];
      this.orgCode = _data['orgCode'];
      this.orgType = _data['orgType'];
      this.issueOrgType = _data['issueOrgType'];
      this.issueOrgName = _data['issueOrgName'];
      this.issueDate = _data['issueDate'] ? dayjs(_data['issueDate'].toString()) : <any>undefined;
      this.legalName = _data['legalName'];
      this.regName = _data['regName'];
      this.regType = _data['regType'];
      this.regAdress = _data['regAdress'];
      this.regCapital = _data['regCapital'];
      this.regCapitalCur = _data['regCapitalCur'];
      this.revCapital = _data['revCapital'];
      this.unit = _data['unit'];
      this.foundDate = _data['foundDate'] ? dayjs(_data['foundDate'].toString()) : <any>undefined;
      this.startDate = _data['startDate'] ? dayjs(_data['startDate'].toString()) : <any>undefined;
      this.endDate = _data['endDate'] ? dayjs(_data['endDate'].toString()) : <any>undefined;
      this.licenseItems = _data['licenseItems'];
      this.generalItems = _data['generalItems'];
      this.businessScope = _data['businessScope'];
      this.businessStatus = _data['businessStatus'];
      this.logoutDate = _data['logoutDate']
        ? dayjs(_data['logoutDate'].toString())
        : <any>undefined;
      this.revocationDate = _data['revocationDate']
        ? dayjs(_data['revocationDate'].toString())
        : <any>undefined;
      this.idFingerprint = _data['idFingerprint'];
      this.lastInspectionDate = _data['lastInspectionDate']
        ? dayjs(_data['lastInspectionDate'].toString())
        : <any>undefined;
      this.lastInspectionYear = _data['lastInspectionYear'];
      this.isAudited = _data['isAudited'];
      this.ix = _data['ix'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.hasChildHWs = _data['hasChildHWs'];
      this.oldEntId = _data['oldEntId'];
      this.latitude = _data['latitude'];
      this.longitude = _data['longitude'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Enterprise_Async | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Enterprise_Async>(data, _mappings, Enterprise_Async);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entExtId'] = this.entExtId;
    data['entExt'] = this.entExt ? this.entExt.toJSON() : <any>undefined;
    if (Array.isArray(this.yfClues)) {
      data['yfClues'] = [];
      for (let item of this.yfClues) data['yfClues'].push(item.toJSON());
    }
    if (Array.isArray(this.tenantViewedClues)) {
      data['tenantViewedClues'] = [];
      for (let item of this.tenantViewedClues) data['tenantViewedClues'].push(item.toJSON());
    }
    if (Array.isArray(this.enterpriseHWs)) {
      data['enterpriseHWs'] = [];
      for (let item of this.enterpriseHWs) data['enterpriseHWs'].push(item.toJSON());
    }
    if (Array.isArray(this.appViewClues)) {
      data['appViewClues'] = [];
      for (let item of this.appViewClues) data['appViewClues'].push(item.toJSON());
    }
    if (Array.isArray(this.contacts)) {
      data['contacts'] = [];
      for (let item of this.contacts) data['contacts'].push(item.toJSON());
    }
    if (Array.isArray(this.tags)) {
      data['tags'] = [];
      for (let item of this.tags) data['tags'].push(item.toJSON());
    }
    data['creditCode'] = this.creditCode;
    data['industryId'] = this.industryId;
    data['industry'] = this.industry ? this.industry.toJSON() : <any>undefined;
    data['cantonId'] = this.cantonId;
    data['canton'] = this.canton ? this.canton.toJSON() : <any>undefined;
    data['cantonCode'] = this.cantonCode;
    data['envIndustryId'] = this.envIndustryId;
    data['envIndustry'] = this.envIndustry ? this.envIndustry.toJSON() : <any>undefined;
    data['website'] = this.website;
    data['regNo'] = this.regNo;
    data['orgCode'] = this.orgCode;
    data['orgType'] = this.orgType;
    data['issueOrgType'] = this.issueOrgType;
    data['issueOrgName'] = this.issueOrgName;
    data['issueDate'] = this.issueDate ? this.issueDate.toISOString() : <any>undefined;
    data['legalName'] = this.legalName;
    data['regName'] = this.regName;
    data['regType'] = this.regType;
    data['regAdress'] = this.regAdress;
    data['regCapital'] = this.regCapital;
    data['regCapitalCur'] = this.regCapitalCur;
    data['revCapital'] = this.revCapital;
    data['unit'] = this.unit;
    data['foundDate'] = this.foundDate ? this.foundDate.toISOString() : <any>undefined;
    data['startDate'] = this.startDate ? this.startDate.toISOString() : <any>undefined;
    data['endDate'] = this.endDate ? this.endDate.toISOString() : <any>undefined;
    data['licenseItems'] = this.licenseItems;
    data['generalItems'] = this.generalItems;
    data['businessScope'] = this.businessScope;
    data['businessStatus'] = this.businessStatus;
    data['logoutDate'] = this.logoutDate ? this.logoutDate.toISOString() : <any>undefined;
    data['revocationDate'] = this.revocationDate
      ? this.revocationDate.toISOString()
      : <any>undefined;
    data['idFingerprint'] = this.idFingerprint;
    data['lastInspectionDate'] = this.lastInspectionDate
      ? this.lastInspectionDate.toISOString()
      : <any>undefined;
    data['lastInspectionYear'] = this.lastInspectionYear;
    data['isAudited'] = this.isAudited;
    data['ix'] = this.ix;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['hasChildHWs'] = this.hasChildHWs;
    data['oldEntId'] = this.oldEntId;
    data['latitude'] = this.latitude;
    data['longitude'] = this.longitude;
    data['id'] = this.id;
    return data;
  }

  clone(): Enterprise_Async {
    const json = this.toJSON();
    let result = new Enterprise_Async();
    result.init(json);
    return result;
  }
}

export class WlContractedCustomer {
  disposalTenantId!: number | undefined;
  disposalTenant!: Tenant;
  logisticsTenantId!: number | undefined;
  logisticsTenant!: Tenant;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.disposalTenantId = _data['disposalTenantId'];
      this.disposalTenant = _data['disposalTenant']
        ? Tenant.fromJS(_data['disposalTenant'], _mappings)
        : <any>undefined;
      this.logisticsTenantId = _data['logisticsTenantId'];
      this.logisticsTenant = _data['logisticsTenant']
        ? Tenant.fromJS(_data['logisticsTenant'], _mappings)
        : <any>undefined;
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlContractedCustomer | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlContractedCustomer>(data, _mappings, WlContractedCustomer);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['disposalTenantId'] = this.disposalTenantId;
    data['disposalTenant'] = this.disposalTenant ? this.disposalTenant.toJSON() : <any>undefined;
    data['logisticsTenantId'] = this.logisticsTenantId;
    data['logisticsTenant'] = this.logisticsTenant ? this.logisticsTenant.toJSON() : <any>undefined;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlContractedCustomer {
    const json = this.toJSON();
    let result = new WlContractedCustomer();
    result.init(json);
    return result;
  }
}

export class Order_Goods {
  orderDetailId!: number | undefined;
  orderDetail!: Order_OrderDetail;
  goodsTypeId!: number | undefined;
  goodsType!: CrmDictItems;
  goodsName!: string | undefined;
  wasteCode!: string | undefined;
  packagingId!: number | undefined;
  packaging!: CrmDictItems;
  count!: number | undefined;
  netWeight!: number | undefined;
  grossWeight!: number | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderDetailId = _data['orderDetailId'];
      this.orderDetail = _data['orderDetail']
        ? Order_OrderDetail.fromJS(_data['orderDetail'], _mappings)
        : <any>undefined;
      this.goodsTypeId = _data['goodsTypeId'];
      this.goodsType = _data['goodsType']
        ? CrmDictItems.fromJS(_data['goodsType'], _mappings)
        : <any>undefined;
      this.goodsName = _data['goodsName'];
      this.wasteCode = _data['wasteCode'];
      this.packagingId = _data['packagingId'];
      this.packaging = _data['packaging']
        ? CrmDictItems.fromJS(_data['packaging'], _mappings)
        : <any>undefined;
      this.count = _data['count'];
      this.netWeight = _data['netWeight'];
      this.grossWeight = _data['grossWeight'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Order_Goods | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Order_Goods>(data, _mappings, Order_Goods);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderDetailId'] = this.orderDetailId;
    data['orderDetail'] = this.orderDetail ? this.orderDetail.toJSON() : <any>undefined;
    data['goodsTypeId'] = this.goodsTypeId;
    data['goodsType'] = this.goodsType ? this.goodsType.toJSON() : <any>undefined;
    data['goodsName'] = this.goodsName;
    data['wasteCode'] = this.wasteCode;
    data['packagingId'] = this.packagingId;
    data['packaging'] = this.packaging ? this.packaging.toJSON() : <any>undefined;
    data['count'] = this.count;
    data['netWeight'] = this.netWeight;
    data['grossWeight'] = this.grossWeight;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Order_Goods {
    const json = this.toJSON();
    let result = new Order_Goods();
    result.init(json);
    return result;
  }
}

export class Transability_Customer {
  readonly loadingUnloadingPoints!: Transability_LoadingUnloadingPoint[] | undefined;
  entName!: string | undefined;
  industry!: string | undefined;
  entAdress!: string | undefined;
  cantonCode!: string | undefined;
  longitude!: number | undefined;
  latitude!: number | undefined;
  contactName!: string | undefined;
  contactPost!: string | undefined;
  contactPhone!: string | undefined;
  accountPeriod!: number;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['loadingUnloadingPoints'])) {
        (<any>this).loadingUnloadingPoints = [] as any;
        for (let item of _data['loadingUnloadingPoints'])
          (<any>this).loadingUnloadingPoints!.push(
            Transability_LoadingUnloadingPoint.fromJS(item, _mappings),
          );
      }
      this.entName = _data['entName'];
      this.industry = _data['industry'];
      this.entAdress = _data['entAdress'];
      this.cantonCode = _data['cantonCode'];
      this.longitude = _data['longitude'];
      this.latitude = _data['latitude'];
      this.contactName = _data['contactName'];
      this.contactPost = _data['contactPost'];
      this.contactPhone = _data['contactPhone'];
      this.accountPeriod = _data['accountPeriod'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Transability_Customer | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Transability_Customer>(data, _mappings, Transability_Customer);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.loadingUnloadingPoints)) {
      data['loadingUnloadingPoints'] = [];
      for (let item of this.loadingUnloadingPoints)
        data['loadingUnloadingPoints'].push(item.toJSON());
    }
    data['entName'] = this.entName;
    data['industry'] = this.industry;
    data['entAdress'] = this.entAdress;
    data['cantonCode'] = this.cantonCode;
    data['longitude'] = this.longitude;
    data['latitude'] = this.latitude;
    data['contactName'] = this.contactName;
    data['contactPost'] = this.contactPost;
    data['contactPhone'] = this.contactPhone;
    data['accountPeriod'] = this.accountPeriod;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Transability_Customer {
    const json = this.toJSON();
    let result = new Transability_Customer();
    result.init(json);
    return result;
  }
}

export class Transability_LoadingUnloadingPoint {
  customerId!: number | undefined;
  customer!: Transability_Customer;
  contactName!: string | undefined;
  contactPost!: string | undefined;
  contactPhone!: string | undefined;
  contactEmail!: string | undefined;
  adress!: string | undefined;
  pointName!: string | undefined;
  cantonCode!: string | undefined;
  longitude!: number | undefined;
  latitude!: number | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customerId = _data['customerId'];
      this.customer = _data['customer']
        ? Transability_Customer.fromJS(_data['customer'], _mappings)
        : <any>undefined;
      this.contactName = _data['contactName'];
      this.contactPost = _data['contactPost'];
      this.contactPhone = _data['contactPhone'];
      this.contactEmail = _data['contactEmail'];
      this.adress = _data['adress'];
      this.pointName = _data['pointName'];
      this.cantonCode = _data['cantonCode'];
      this.longitude = _data['longitude'];
      this.latitude = _data['latitude'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Transability_LoadingUnloadingPoint | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Transability_LoadingUnloadingPoint>(
      data,
      _mappings,
      Transability_LoadingUnloadingPoint,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customerId'] = this.customerId;
    data['customer'] = this.customer ? this.customer.toJSON() : <any>undefined;
    data['contactName'] = this.contactName;
    data['contactPost'] = this.contactPost;
    data['contactPhone'] = this.contactPhone;
    data['contactEmail'] = this.contactEmail;
    data['adress'] = this.adress;
    data['pointName'] = this.pointName;
    data['cantonCode'] = this.cantonCode;
    data['longitude'] = this.longitude;
    data['latitude'] = this.latitude;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Transability_LoadingUnloadingPoint {
    const json = this.toJSON();
    let result = new Transability_LoadingUnloadingPoint();
    result.init(json);
    return result;
  }
}

export class Order_OrderLoadingUnloadingPoints {
  orderDetailId!: number | undefined;
  orderDetail!: Order_OrderDetail;
  pointId!: number | undefined;
  point!: Transability_LoadingUnloadingPoint;
  isLoadingPoint!: boolean;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderDetailId = _data['orderDetailId'];
      this.orderDetail = _data['orderDetail']
        ? Order_OrderDetail.fromJS(_data['orderDetail'], _mappings)
        : <any>undefined;
      this.pointId = _data['pointId'];
      this.point = _data['point']
        ? Transability_LoadingUnloadingPoint.fromJS(_data['point'], _mappings)
        : <any>undefined;
      this.isLoadingPoint = _data['isLoadingPoint'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Order_OrderLoadingUnloadingPoints | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Order_OrderLoadingUnloadingPoints>(
      data,
      _mappings,
      Order_OrderLoadingUnloadingPoints,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderDetailId'] = this.orderDetailId;
    data['orderDetail'] = this.orderDetail ? this.orderDetail.toJSON() : <any>undefined;
    data['pointId'] = this.pointId;
    data['point'] = this.point ? this.point.toJSON() : <any>undefined;
    data['isLoadingPoint'] = this.isLoadingPoint;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Order_OrderLoadingUnloadingPoints {
    const json = this.toJSON();
    let result = new Order_OrderLoadingUnloadingPoints();
    result.init(json);
    return result;
  }
}

export class Order_Order {
  readonly orderDetails!: Order_OrderDetail[] | undefined;
  customerId!: number | undefined;
  customer!: Transability_Customer;
  sourceType!: number;
  orderNo!: string | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['orderDetails'])) {
        (<any>this).orderDetails = [] as any;
        for (let item of _data['orderDetails'])
          (<any>this).orderDetails!.push(Order_OrderDetail.fromJS(item, _mappings));
      }
      this.customerId = _data['customerId'];
      this.customer = _data['customer']
        ? Transability_Customer.fromJS(_data['customer'], _mappings)
        : <any>undefined;
      this.sourceType = _data['sourceType'];
      this.orderNo = _data['orderNo'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Order_Order | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Order_Order>(data, _mappings, Order_Order);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.orderDetails)) {
      data['orderDetails'] = [];
      for (let item of this.orderDetails) data['orderDetails'].push(item.toJSON());
    }
    data['customerId'] = this.customerId;
    data['customer'] = this.customer ? this.customer.toJSON() : <any>undefined;
    data['sourceType'] = this.sourceType;
    data['orderNo'] = this.orderNo;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Order_Order {
    const json = this.toJSON();
    let result = new Order_Order();
    result.init(json);
    return result;
  }
}

export class Order_OrderDetail {
  readonly goods!: Order_Goods[] | undefined;
  readonly vehicles!: Order_Vehicles[] | undefined;
  readonly orderLoadingUnloadingPoints!: Order_OrderLoadingUnloadingPoints[] | undefined;
  orderId!: number | undefined;
  order!: Order_Order;
  orderNo!: string | undefined;
  planLoadingTime!: dayjs.Dayjs | undefined;
  planUnloadingTime!: dayjs.Dayjs | undefined;
  loadingPointId!: number | undefined;
  loadingPoint!: Transability_LoadingUnloadingPoint;
  multiLoadingPoints!: boolean;
  unLoadingPointId!: number | undefined;
  unLoadingPoint!: Transability_LoadingUnloadingPoint;
  multiUnLoadingPoints!: boolean;
  roundTrip!: boolean;
  goodsDesc!: string | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['goods'])) {
        (<any>this).goods = [] as any;
        for (let item of _data['goods'])
          (<any>this).goods!.push(Order_Goods.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['vehicles'])) {
        (<any>this).vehicles = [] as any;
        for (let item of _data['vehicles'])
          (<any>this).vehicles!.push(Order_Vehicles.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['orderLoadingUnloadingPoints'])) {
        (<any>this).orderLoadingUnloadingPoints = [] as any;
        for (let item of _data['orderLoadingUnloadingPoints'])
          (<any>this).orderLoadingUnloadingPoints!.push(
            Order_OrderLoadingUnloadingPoints.fromJS(item, _mappings),
          );
      }
      this.orderId = _data['orderId'];
      this.order = _data['order'] ? Order_Order.fromJS(_data['order'], _mappings) : <any>undefined;
      this.orderNo = _data['orderNo'];
      this.planLoadingTime = _data['planLoadingTime']
        ? dayjs(_data['planLoadingTime'].toString())
        : <any>undefined;
      this.planUnloadingTime = _data['planUnloadingTime']
        ? dayjs(_data['planUnloadingTime'].toString())
        : <any>undefined;
      this.loadingPointId = _data['loadingPointId'];
      this.loadingPoint = _data['loadingPoint']
        ? Transability_LoadingUnloadingPoint.fromJS(_data['loadingPoint'], _mappings)
        : <any>undefined;
      this.multiLoadingPoints = _data['multiLoadingPoints'];
      this.unLoadingPointId = _data['unLoadingPointId'];
      this.unLoadingPoint = _data['unLoadingPoint']
        ? Transability_LoadingUnloadingPoint.fromJS(_data['unLoadingPoint'], _mappings)
        : <any>undefined;
      this.multiUnLoadingPoints = _data['multiUnLoadingPoints'];
      this.roundTrip = _data['roundTrip'];
      this.goodsDesc = _data['goodsDesc'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Order_OrderDetail | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Order_OrderDetail>(data, _mappings, Order_OrderDetail);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.goods)) {
      data['goods'] = [];
      for (let item of this.goods) data['goods'].push(item.toJSON());
    }
    if (Array.isArray(this.vehicles)) {
      data['vehicles'] = [];
      for (let item of this.vehicles) data['vehicles'].push(item.toJSON());
    }
    if (Array.isArray(this.orderLoadingUnloadingPoints)) {
      data['orderLoadingUnloadingPoints'] = [];
      for (let item of this.orderLoadingUnloadingPoints)
        data['orderLoadingUnloadingPoints'].push(item.toJSON());
    }
    data['orderId'] = this.orderId;
    data['order'] = this.order ? this.order.toJSON() : <any>undefined;
    data['orderNo'] = this.orderNo;
    data['planLoadingTime'] = this.planLoadingTime
      ? this.planLoadingTime.toISOString()
      : <any>undefined;
    data['planUnloadingTime'] = this.planUnloadingTime
      ? this.planUnloadingTime.toISOString()
      : <any>undefined;
    data['loadingPointId'] = this.loadingPointId;
    data['loadingPoint'] = this.loadingPoint ? this.loadingPoint.toJSON() : <any>undefined;
    data['multiLoadingPoints'] = this.multiLoadingPoints;
    data['unLoadingPointId'] = this.unLoadingPointId;
    data['unLoadingPoint'] = this.unLoadingPoint ? this.unLoadingPoint.toJSON() : <any>undefined;
    data['multiUnLoadingPoints'] = this.multiUnLoadingPoints;
    data['roundTrip'] = this.roundTrip;
    data['goodsDesc'] = this.goodsDesc;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Order_OrderDetail {
    const json = this.toJSON();
    let result = new Order_OrderDetail();
    result.init(json);
    return result;
  }
}

export class Accounts_InvoiceInformation {
  customerId!: number | undefined;
  customer!: Transability_Customer;
  customerEntName!: string | undefined;
  entName!: string | undefined;
  taxNumber!: string | undefined;
  address!: string | undefined;
  phoneNo!: string | undefined;
  bankName!: string | undefined;
  accountNumber!: string | undefined;
  ossFileNames!: string | undefined;
  accountPeriod!: number;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customerId = _data['customerId'];
      this.customer = _data['customer']
        ? Transability_Customer.fromJS(_data['customer'], _mappings)
        : <any>undefined;
      this.customerEntName = _data['customerEntName'];
      this.entName = _data['entName'];
      this.taxNumber = _data['taxNumber'];
      this.address = _data['address'];
      this.phoneNo = _data['phoneNo'];
      this.bankName = _data['bankName'];
      this.accountNumber = _data['accountNumber'];
      this.ossFileNames = _data['ossFileNames'];
      this.accountPeriod = _data['accountPeriod'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_InvoiceInformation | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_InvoiceInformation>(
      data,
      _mappings,
      Accounts_InvoiceInformation,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customerId'] = this.customerId;
    data['customer'] = this.customer ? this.customer.toJSON() : <any>undefined;
    data['customerEntName'] = this.customerEntName;
    data['entName'] = this.entName;
    data['taxNumber'] = this.taxNumber;
    data['address'] = this.address;
    data['phoneNo'] = this.phoneNo;
    data['bankName'] = this.bankName;
    data['accountNumber'] = this.accountNumber;
    data['ossFileNames'] = this.ossFileNames;
    data['accountPeriod'] = this.accountPeriod;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Accounts_InvoiceInformation {
    const json = this.toJSON();
    let result = new Accounts_InvoiceInformation();
    result.init(json);
    return result;
  }
}

export class Accounts_BalanceSender {
  senderEntname!: string | undefined;
  senderEntId!: number | undefined;
  accountsInvoiceId!: number | undefined;
  accountsInvoice!: Accounts_Invoice;
  readonly wlTransportInfos!: WlTransportInfo[] | undefined;
  year!: number;
  month!: number;
  balanceNo!: string | undefined;
  discount!: number | undefined;
  reduction!: number | undefined;
  manageCost!: number | undefined;
  receivableCollection!: number | undefined;
  differenceCost!: number | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.senderEntname = _data['senderEntname'];
      this.senderEntId = _data['senderEntId'];
      this.accountsInvoiceId = _data['accountsInvoiceId'];
      this.accountsInvoice = _data['accountsInvoice']
        ? Accounts_Invoice.fromJS(_data['accountsInvoice'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['wlTransportInfos'])) {
        (<any>this).wlTransportInfos = [] as any;
        for (let item of _data['wlTransportInfos'])
          (<any>this).wlTransportInfos!.push(WlTransportInfo.fromJS(item, _mappings));
      }
      this.year = _data['year'];
      this.month = _data['month'];
      this.balanceNo = _data['balanceNo'];
      this.discount = _data['discount'];
      this.reduction = _data['reduction'];
      this.manageCost = _data['manageCost'];
      this.receivableCollection = _data['receivableCollection'];
      this.differenceCost = _data['differenceCost'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_BalanceSender | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_BalanceSender>(data, _mappings, Accounts_BalanceSender);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['senderEntname'] = this.senderEntname;
    data['senderEntId'] = this.senderEntId;
    data['accountsInvoiceId'] = this.accountsInvoiceId;
    data['accountsInvoice'] = this.accountsInvoice ? this.accountsInvoice.toJSON() : <any>undefined;
    if (Array.isArray(this.wlTransportInfos)) {
      data['wlTransportInfos'] = [];
      for (let item of this.wlTransportInfos) data['wlTransportInfos'].push(item.toJSON());
    }
    data['year'] = this.year;
    data['month'] = this.month;
    data['balanceNo'] = this.balanceNo;
    data['discount'] = this.discount;
    data['reduction'] = this.reduction;
    data['manageCost'] = this.manageCost;
    data['receivableCollection'] = this.receivableCollection;
    data['differenceCost'] = this.differenceCost;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Accounts_BalanceSender {
    const json = this.toJSON();
    let result = new Accounts_BalanceSender();
    result.init(json);
    return result;
  }
}

export class Accounts_ReceivableCollection {
  accountsInvoiceId!: number | undefined;
  accountsInvoice!: Accounts_Invoice;
  receivableAmount!: number | undefined;
  receivableTime!: dayjs.Dayjs | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.accountsInvoiceId = _data['accountsInvoiceId'];
      this.accountsInvoice = _data['accountsInvoice']
        ? Accounts_Invoice.fromJS(_data['accountsInvoice'], _mappings)
        : <any>undefined;
      this.receivableAmount = _data['receivableAmount'];
      this.receivableTime = _data['receivableTime']
        ? dayjs(_data['receivableTime'].toString())
        : <any>undefined;
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_ReceivableCollection | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_ReceivableCollection>(
      data,
      _mappings,
      Accounts_ReceivableCollection,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accountsInvoiceId'] = this.accountsInvoiceId;
    data['accountsInvoice'] = this.accountsInvoice ? this.accountsInvoice.toJSON() : <any>undefined;
    data['receivableAmount'] = this.receivableAmount;
    data['receivableTime'] = this.receivableTime
      ? this.receivableTime.toISOString()
      : <any>undefined;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Accounts_ReceivableCollection {
    const json = this.toJSON();
    let result = new Accounts_ReceivableCollection();
    result.init(json);
    return result;
  }
}

export class Accounts_Invoice {
  invoiceInformationId!: number | undefined;
  invoiceInformation!: Accounts_InvoiceInformation;
  readonly accountsBalances!: Accounts_Balance[] | undefined;
  readonly accountsBalanceSender!: Accounts_BalanceSender[] | undefined;
  readonly receivableCollections!: Accounts_ReceivableCollection[] | undefined;
  invoiceNo!: string | undefined;
  invoiceTime!: dayjs.Dayjs | undefined;
  sendTime!: dayjs.Dayjs | undefined;
  expressNo!: string | undefined;
  invoiceAmount!: number | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.invoiceInformationId = _data['invoiceInformationId'];
      this.invoiceInformation = _data['invoiceInformation']
        ? Accounts_InvoiceInformation.fromJS(_data['invoiceInformation'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['accountsBalances'])) {
        (<any>this).accountsBalances = [] as any;
        for (let item of _data['accountsBalances'])
          (<any>this).accountsBalances!.push(Accounts_Balance.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['accountsBalanceSender'])) {
        (<any>this).accountsBalanceSender = [] as any;
        for (let item of _data['accountsBalanceSender'])
          (<any>this).accountsBalanceSender!.push(Accounts_BalanceSender.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['receivableCollections'])) {
        (<any>this).receivableCollections = [] as any;
        for (let item of _data['receivableCollections'])
          (<any>this).receivableCollections!.push(
            Accounts_ReceivableCollection.fromJS(item, _mappings),
          );
      }
      this.invoiceNo = _data['invoiceNo'];
      this.invoiceTime = _data['invoiceTime']
        ? dayjs(_data['invoiceTime'].toString())
        : <any>undefined;
      this.sendTime = _data['sendTime'] ? dayjs(_data['sendTime'].toString()) : <any>undefined;
      this.expressNo = _data['expressNo'];
      this.invoiceAmount = _data['invoiceAmount'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_Invoice | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_Invoice>(data, _mappings, Accounts_Invoice);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['invoiceInformationId'] = this.invoiceInformationId;
    data['invoiceInformation'] = this.invoiceInformation
      ? this.invoiceInformation.toJSON()
      : <any>undefined;
    if (Array.isArray(this.accountsBalances)) {
      data['accountsBalances'] = [];
      for (let item of this.accountsBalances) data['accountsBalances'].push(item.toJSON());
    }
    if (Array.isArray(this.accountsBalanceSender)) {
      data['accountsBalanceSender'] = [];
      for (let item of this.accountsBalanceSender)
        data['accountsBalanceSender'].push(item.toJSON());
    }
    if (Array.isArray(this.receivableCollections)) {
      data['receivableCollections'] = [];
      for (let item of this.receivableCollections)
        data['receivableCollections'].push(item.toJSON());
    }
    data['invoiceNo'] = this.invoiceNo;
    data['invoiceTime'] = this.invoiceTime ? this.invoiceTime.toISOString() : <any>undefined;
    data['sendTime'] = this.sendTime ? this.sendTime.toISOString() : <any>undefined;
    data['expressNo'] = this.expressNo;
    data['invoiceAmount'] = this.invoiceAmount;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Accounts_Invoice {
    const json = this.toJSON();
    let result = new Accounts_Invoice();
    result.init(json);
    return result;
  }
}

export class Accounts_Balance {
  customerId!: number | undefined;
  customer!: Transability_Customer;
  accountsInvoiceId!: number | undefined;
  accountsInvoice!: Accounts_Invoice;
  readonly orderVehicles!: Order_Vehicles[] | undefined;
  year!: number;
  month!: number;
  balanceNo!: string | undefined;
  discount!: number | undefined;
  reduction!: number | undefined;
  manageCost!: number | undefined;
  receivableCost!: number | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customerId = _data['customerId'];
      this.customer = _data['customer']
        ? Transability_Customer.fromJS(_data['customer'], _mappings)
        : <any>undefined;
      this.accountsInvoiceId = _data['accountsInvoiceId'];
      this.accountsInvoice = _data['accountsInvoice']
        ? Accounts_Invoice.fromJS(_data['accountsInvoice'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['orderVehicles'])) {
        (<any>this).orderVehicles = [] as any;
        for (let item of _data['orderVehicles'])
          (<any>this).orderVehicles!.push(Order_Vehicles.fromJS(item, _mappings));
      }
      this.year = _data['year'];
      this.month = _data['month'];
      this.balanceNo = _data['balanceNo'];
      this.discount = _data['discount'];
      this.reduction = _data['reduction'];
      this.manageCost = _data['manageCost'];
      this.receivableCost = _data['receivableCost'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_Balance | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_Balance>(data, _mappings, Accounts_Balance);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customerId'] = this.customerId;
    data['customer'] = this.customer ? this.customer.toJSON() : <any>undefined;
    data['accountsInvoiceId'] = this.accountsInvoiceId;
    data['accountsInvoice'] = this.accountsInvoice ? this.accountsInvoice.toJSON() : <any>undefined;
    if (Array.isArray(this.orderVehicles)) {
      data['orderVehicles'] = [];
      for (let item of this.orderVehicles) data['orderVehicles'].push(item.toJSON());
    }
    data['year'] = this.year;
    data['month'] = this.month;
    data['balanceNo'] = this.balanceNo;
    data['discount'] = this.discount;
    data['reduction'] = this.reduction;
    data['manageCost'] = this.manageCost;
    data['receivableCost'] = this.receivableCost;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Accounts_Balance {
    const json = this.toJSON();
    let result = new Accounts_Balance();
    result.init(json);
    return result;
  }
}

export class WlBaseVehicleTrailer {
  number!: string | undefined;
  policy!: string | undefined;
  driverLicense!: string | undefined;
  roadTransportLicense!: string | undefined;
  vehicleTypeId!: number | undefined;
  vehicleType!: CrmDictItems;
  vehicleRemark!: string | undefined;
  capacity!: number | undefined;
  capacityUnit!: string | undefined;
  wlBaseCapacitys!: WlBaseCapacity[] | undefined;
  tenantId!: number;
  scrapDate!: dayjs.Dayjs | undefined;
  annualReviewValidityDate!: dayjs.Dayjs | undefined;
  roadQualificationValidityDate!: dayjs.Dayjs | undefined;
  drivingLicenseValidityDate!: dayjs.Dayjs | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.number = _data['number'];
      this.policy = _data['policy'];
      this.driverLicense = _data['driverLicense'];
      this.roadTransportLicense = _data['roadTransportLicense'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleType = _data['vehicleType']
        ? CrmDictItems.fromJS(_data['vehicleType'], _mappings)
        : <any>undefined;
      this.vehicleRemark = _data['vehicleRemark'];
      this.capacity = _data['capacity'];
      this.capacityUnit = _data['capacityUnit'];
      if (Array.isArray(_data['wlBaseCapacitys'])) {
        this.wlBaseCapacitys = [] as any;
        for (let item of _data['wlBaseCapacitys'])
          this.wlBaseCapacitys!.push(WlBaseCapacity.fromJS(item, _mappings));
      }
      this.tenantId = _data['tenantId'];
      this.scrapDate = _data['scrapDate'] ? dayjs(_data['scrapDate'].toString()) : <any>undefined;
      this.annualReviewValidityDate = _data['annualReviewValidityDate']
        ? dayjs(_data['annualReviewValidityDate'].toString())
        : <any>undefined;
      this.roadQualificationValidityDate = _data['roadQualificationValidityDate']
        ? dayjs(_data['roadQualificationValidityDate'].toString())
        : <any>undefined;
      this.drivingLicenseValidityDate = _data['drivingLicenseValidityDate']
        ? dayjs(_data['drivingLicenseValidityDate'].toString())
        : <any>undefined;
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseVehicleTrailer | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseVehicleTrailer>(data, _mappings, WlBaseVehicleTrailer);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['number'] = this.number;
    data['policy'] = this.policy;
    data['driverLicense'] = this.driverLicense;
    data['roadTransportLicense'] = this.roadTransportLicense;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleType'] = this.vehicleType ? this.vehicleType.toJSON() : <any>undefined;
    data['vehicleRemark'] = this.vehicleRemark;
    data['capacity'] = this.capacity;
    data['capacityUnit'] = this.capacityUnit;
    if (Array.isArray(this.wlBaseCapacitys)) {
      data['wlBaseCapacitys'] = [];
      for (let item of this.wlBaseCapacitys) data['wlBaseCapacitys'].push(item.toJSON());
    }
    data['tenantId'] = this.tenantId;
    data['scrapDate'] = this.scrapDate ? this.scrapDate.toISOString() : <any>undefined;
    data['annualReviewValidityDate'] = this.annualReviewValidityDate
      ? this.annualReviewValidityDate.toISOString()
      : <any>undefined;
    data['roadQualificationValidityDate'] = this.roadQualificationValidityDate
      ? this.roadQualificationValidityDate.toISOString()
      : <any>undefined;
    data['drivingLicenseValidityDate'] = this.drivingLicenseValidityDate
      ? this.drivingLicenseValidityDate.toISOString()
      : <any>undefined;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlBaseVehicleTrailer {
    const json = this.toJSON();
    let result = new WlBaseVehicleTrailer();
    result.init(json);
    return result;
  }
}

export class WlBaseDriver {
  name!: string | undefined;
  phone!: string | undefined;
  certificate!: string | undefined;
  idCard!: string | undefined;
  wlBaseCapacitys!: WlBaseCapacity[] | undefined;
  tenantId!: number;
  driverUserId!: number | undefined;
  driverUser!: User;
  qualificationCertificateDate!: dayjs.Dayjs | undefined;
  driversLicenseDate!: dayjs.Dayjs | undefined;
  leave!: boolean;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.phone = _data['phone'];
      this.certificate = _data['certificate'];
      this.idCard = _data['idCard'];
      if (Array.isArray(_data['wlBaseCapacitys'])) {
        this.wlBaseCapacitys = [] as any;
        for (let item of _data['wlBaseCapacitys'])
          this.wlBaseCapacitys!.push(WlBaseCapacity.fromJS(item, _mappings));
      }
      this.tenantId = _data['tenantId'];
      this.driverUserId = _data['driverUserId'];
      this.driverUser = _data['driverUser']
        ? User.fromJS(_data['driverUser'], _mappings)
        : <any>undefined;
      this.qualificationCertificateDate = _data['qualificationCertificateDate']
        ? dayjs(_data['qualificationCertificateDate'].toString())
        : <any>undefined;
      this.driversLicenseDate = _data['driversLicenseDate']
        ? dayjs(_data['driversLicenseDate'].toString())
        : <any>undefined;
      this.leave = _data['leave'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseDriver | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseDriver>(data, _mappings, WlBaseDriver);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['phone'] = this.phone;
    data['certificate'] = this.certificate;
    data['idCard'] = this.idCard;
    if (Array.isArray(this.wlBaseCapacitys)) {
      data['wlBaseCapacitys'] = [];
      for (let item of this.wlBaseCapacitys) data['wlBaseCapacitys'].push(item.toJSON());
    }
    data['tenantId'] = this.tenantId;
    data['driverUserId'] = this.driverUserId;
    data['driverUser'] = this.driverUser ? this.driverUser.toJSON() : <any>undefined;
    data['qualificationCertificateDate'] = this.qualificationCertificateDate
      ? this.qualificationCertificateDate.toISOString()
      : <any>undefined;
    data['driversLicenseDate'] = this.driversLicenseDate
      ? this.driversLicenseDate.toISOString()
      : <any>undefined;
    data['leave'] = this.leave;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlBaseDriver {
    const json = this.toJSON();
    let result = new WlBaseDriver();
    result.init(json);
    return result;
  }
}

export class WlBaseSupercargo {
  name!: string | undefined;
  phone!: string | undefined;
  certificate!: string | undefined;
  idCard!: string | undefined;
  wlBaseCapacitys!: WlBaseCapacity[] | undefined;
  tenantId!: number;
  qualificationCertificateDate!: dayjs.Dayjs | undefined;
  driversLicenseDate!: dayjs.Dayjs | undefined;
  leave!: boolean;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.phone = _data['phone'];
      this.certificate = _data['certificate'];
      this.idCard = _data['idCard'];
      if (Array.isArray(_data['wlBaseCapacitys'])) {
        this.wlBaseCapacitys = [] as any;
        for (let item of _data['wlBaseCapacitys'])
          this.wlBaseCapacitys!.push(WlBaseCapacity.fromJS(item, _mappings));
      }
      this.tenantId = _data['tenantId'];
      this.qualificationCertificateDate = _data['qualificationCertificateDate']
        ? dayjs(_data['qualificationCertificateDate'].toString())
        : <any>undefined;
      this.driversLicenseDate = _data['driversLicenseDate']
        ? dayjs(_data['driversLicenseDate'].toString())
        : <any>undefined;
      this.leave = _data['leave'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseSupercargo | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseSupercargo>(data, _mappings, WlBaseSupercargo);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['phone'] = this.phone;
    data['certificate'] = this.certificate;
    data['idCard'] = this.idCard;
    if (Array.isArray(this.wlBaseCapacitys)) {
      data['wlBaseCapacitys'] = [];
      for (let item of this.wlBaseCapacitys) data['wlBaseCapacitys'].push(item.toJSON());
    }
    data['tenantId'] = this.tenantId;
    data['qualificationCertificateDate'] = this.qualificationCertificateDate
      ? this.qualificationCertificateDate.toISOString()
      : <any>undefined;
    data['driversLicenseDate'] = this.driversLicenseDate
      ? this.driversLicenseDate.toISOString()
      : <any>undefined;
    data['leave'] = this.leave;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlBaseSupercargo {
    const json = this.toJSON();
    let result = new WlBaseSupercargo();
    result.init(json);
    return result;
  }
}

export class Order_Vehicles {
  sourceType!: number;
  orderVehicleNo!: string | undefined;
  orderDetailId!: number | undefined;
  orderDetail!: Order_OrderDetail;
  accountsBalanceId!: number | undefined;
  accountsBalance!: Accounts_Balance;
  startTime!: dayjs.Dayjs | undefined;
  endTime!: dayjs.Dayjs | undefined;
  vehicleTypeId!: number | undefined;
  vehicleType!: CrmDictItems;
  vehicleHeadId!: number | undefined;
  vehicleHead!: WlBaseVehicle;
  vehicleTailId!: number | undefined;
  vehicleTail!: WlBaseVehicleTrailer;
  userDriverId!: number | undefined;
  userDriver!: WlBaseDriver;
  userEscortId!: number | undefined;
  userEscort!: WlBaseSupercargo;
  vehicleState!: number | undefined;
  emptyMileage!: number | undefined;
  state!: number | undefined;
  orderType!: number;
  carPoolOrderNo!: string | undefined;
  multiPassSN!: number | undefined;
  carriage!: number | undefined;
  demurrage!: number | undefined;
  loadingUnloadingCost!: number | undefined;
  weighingCost!: number | undefined;
  otherCost!: number | undefined;
  discount!: number | undefined;
  reduction!: number | undefined;
  manageCost!: number | undefined;
  carriageRemark!: string | undefined;
  accountsCost!: number | undefined;
  accountsRemark!: string | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.sourceType = _data['sourceType'];
      this.orderVehicleNo = _data['orderVehicleNo'];
      this.orderDetailId = _data['orderDetailId'];
      this.orderDetail = _data['orderDetail']
        ? Order_OrderDetail.fromJS(_data['orderDetail'], _mappings)
        : <any>undefined;
      this.accountsBalanceId = _data['accountsBalanceId'];
      this.accountsBalance = _data['accountsBalance']
        ? Accounts_Balance.fromJS(_data['accountsBalance'], _mappings)
        : <any>undefined;
      this.startTime = _data['startTime'] ? dayjs(_data['startTime'].toString()) : <any>undefined;
      this.endTime = _data['endTime'] ? dayjs(_data['endTime'].toString()) : <any>undefined;
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleType = _data['vehicleType']
        ? CrmDictItems.fromJS(_data['vehicleType'], _mappings)
        : <any>undefined;
      this.vehicleHeadId = _data['vehicleHeadId'];
      this.vehicleHead = _data['vehicleHead']
        ? WlBaseVehicle.fromJS(_data['vehicleHead'], _mappings)
        : <any>undefined;
      this.vehicleTailId = _data['vehicleTailId'];
      this.vehicleTail = _data['vehicleTail']
        ? WlBaseVehicleTrailer.fromJS(_data['vehicleTail'], _mappings)
        : <any>undefined;
      this.userDriverId = _data['userDriverId'];
      this.userDriver = _data['userDriver']
        ? WlBaseDriver.fromJS(_data['userDriver'], _mappings)
        : <any>undefined;
      this.userEscortId = _data['userEscortId'];
      this.userEscort = _data['userEscort']
        ? WlBaseSupercargo.fromJS(_data['userEscort'], _mappings)
        : <any>undefined;
      this.vehicleState = _data['vehicleState'];
      this.emptyMileage = _data['emptyMileage'];
      this.state = _data['state'];
      this.orderType = _data['orderType'];
      this.carPoolOrderNo = _data['carPoolOrderNo'];
      this.multiPassSN = _data['multiPassSN'];
      this.carriage = _data['carriage'];
      this.demurrage = _data['demurrage'];
      this.loadingUnloadingCost = _data['loadingUnloadingCost'];
      this.weighingCost = _data['weighingCost'];
      this.otherCost = _data['otherCost'];
      this.discount = _data['discount'];
      this.reduction = _data['reduction'];
      this.manageCost = _data['manageCost'];
      this.carriageRemark = _data['carriageRemark'];
      this.accountsCost = _data['accountsCost'];
      this.accountsRemark = _data['accountsRemark'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Order_Vehicles | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Order_Vehicles>(data, _mappings, Order_Vehicles);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['sourceType'] = this.sourceType;
    data['orderVehicleNo'] = this.orderVehicleNo;
    data['orderDetailId'] = this.orderDetailId;
    data['orderDetail'] = this.orderDetail ? this.orderDetail.toJSON() : <any>undefined;
    data['accountsBalanceId'] = this.accountsBalanceId;
    data['accountsBalance'] = this.accountsBalance ? this.accountsBalance.toJSON() : <any>undefined;
    data['startTime'] = this.startTime ? this.startTime.toISOString() : <any>undefined;
    data['endTime'] = this.endTime ? this.endTime.toISOString() : <any>undefined;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleType'] = this.vehicleType ? this.vehicleType.toJSON() : <any>undefined;
    data['vehicleHeadId'] = this.vehicleHeadId;
    data['vehicleHead'] = this.vehicleHead ? this.vehicleHead.toJSON() : <any>undefined;
    data['vehicleTailId'] = this.vehicleTailId;
    data['vehicleTail'] = this.vehicleTail ? this.vehicleTail.toJSON() : <any>undefined;
    data['userDriverId'] = this.userDriverId;
    data['userDriver'] = this.userDriver ? this.userDriver.toJSON() : <any>undefined;
    data['userEscortId'] = this.userEscortId;
    data['userEscort'] = this.userEscort ? this.userEscort.toJSON() : <any>undefined;
    data['vehicleState'] = this.vehicleState;
    data['emptyMileage'] = this.emptyMileage;
    data['state'] = this.state;
    data['orderType'] = this.orderType;
    data['carPoolOrderNo'] = this.carPoolOrderNo;
    data['multiPassSN'] = this.multiPassSN;
    data['carriage'] = this.carriage;
    data['demurrage'] = this.demurrage;
    data['loadingUnloadingCost'] = this.loadingUnloadingCost;
    data['weighingCost'] = this.weighingCost;
    data['otherCost'] = this.otherCost;
    data['discount'] = this.discount;
    data['reduction'] = this.reduction;
    data['manageCost'] = this.manageCost;
    data['carriageRemark'] = this.carriageRemark;
    data['accountsCost'] = this.accountsCost;
    data['accountsRemark'] = this.accountsRemark;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Order_Vehicles {
    const json = this.toJSON();
    let result = new Order_Vehicles();
    result.init(json);
    return result;
  }
}

export class WlOrderBid {
  bidCode!: string | undefined;
  orderId!: number | undefined;
  bidTime!: dayjs.Dayjs | undefined;
  sysUserId!: number | undefined;
  sysUser!: User;
  bidState!: number | undefined;
  bidFrom!: number;
  order!: WlOrderForm;
  orderBidDetails!: WlOrderBidDetail[] | undefined;
  tenantId!: number;
  tenant!: Tenant;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.bidCode = _data['bidCode'];
      this.orderId = _data['orderId'];
      this.bidTime = _data['bidTime'] ? dayjs(_data['bidTime'].toString()) : <any>undefined;
      this.sysUserId = _data['sysUserId'];
      this.sysUser = _data['sysUser'] ? User.fromJS(_data['sysUser'], _mappings) : <any>undefined;
      this.bidState = _data['bidState'];
      this.bidFrom = _data['bidFrom'];
      this.order = _data['order'] ? WlOrderForm.fromJS(_data['order'], _mappings) : <any>undefined;
      if (Array.isArray(_data['orderBidDetails'])) {
        this.orderBidDetails = [] as any;
        for (let item of _data['orderBidDetails'])
          this.orderBidDetails!.push(WlOrderBidDetail.fromJS(item, _mappings));
      }
      this.tenantId = _data['tenantId'];
      this.tenant = _data['tenant'] ? Tenant.fromJS(_data['tenant'], _mappings) : <any>undefined;
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderBid | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderBid>(data, _mappings, WlOrderBid);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['bidCode'] = this.bidCode;
    data['orderId'] = this.orderId;
    data['bidTime'] = this.bidTime ? this.bidTime.toISOString() : <any>undefined;
    data['sysUserId'] = this.sysUserId;
    data['sysUser'] = this.sysUser ? this.sysUser.toJSON() : <any>undefined;
    data['bidState'] = this.bidState;
    data['bidFrom'] = this.bidFrom;
    data['order'] = this.order ? this.order.toJSON() : <any>undefined;
    if (Array.isArray(this.orderBidDetails)) {
      data['orderBidDetails'] = [];
      for (let item of this.orderBidDetails) data['orderBidDetails'].push(item.toJSON());
    }
    data['tenantId'] = this.tenantId;
    data['tenant'] = this.tenant ? this.tenant.toJSON() : <any>undefined;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlOrderBid {
    const json = this.toJSON();
    let result = new WlOrderBid();
    result.init(json);
    return result;
  }
}

export class WlOrderBidDetail {
  orderBidId!: number | undefined;
  capacityId!: number | undefined;
  vehicleId!: number | undefined;
  trailerId!: number | undefined;
  driverId!: number | undefined;
  supercargoId!: number | undefined;
  orderBid!: WlOrderBid;
  driver!: WlBaseDriver;
  supercargo!: WlBaseSupercargo;
  trailer!: WlBaseVehicleTrailer;
  vehicle!: WlBaseVehicle;
  capacity!: WlBaseCapacity;
  tenantId!: number;
  isHiden!: boolean;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderBidId = _data['orderBidId'];
      this.capacityId = _data['capacityId'];
      this.vehicleId = _data['vehicleId'];
      this.trailerId = _data['trailerId'];
      this.driverId = _data['driverId'];
      this.supercargoId = _data['supercargoId'];
      this.orderBid = _data['orderBid']
        ? WlOrderBid.fromJS(_data['orderBid'], _mappings)
        : <any>undefined;
      this.driver = _data['driver']
        ? WlBaseDriver.fromJS(_data['driver'], _mappings)
        : <any>undefined;
      this.supercargo = _data['supercargo']
        ? WlBaseSupercargo.fromJS(_data['supercargo'], _mappings)
        : <any>undefined;
      this.trailer = _data['trailer']
        ? WlBaseVehicleTrailer.fromJS(_data['trailer'], _mappings)
        : <any>undefined;
      this.vehicle = _data['vehicle']
        ? WlBaseVehicle.fromJS(_data['vehicle'], _mappings)
        : <any>undefined;
      this.capacity = _data['capacity']
        ? WlBaseCapacity.fromJS(_data['capacity'], _mappings)
        : <any>undefined;
      this.tenantId = _data['tenantId'];
      this.isHiden = _data['isHiden'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderBidDetail | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderBidDetail>(data, _mappings, WlOrderBidDetail);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderBidId'] = this.orderBidId;
    data['capacityId'] = this.capacityId;
    data['vehicleId'] = this.vehicleId;
    data['trailerId'] = this.trailerId;
    data['driverId'] = this.driverId;
    data['supercargoId'] = this.supercargoId;
    data['orderBid'] = this.orderBid ? this.orderBid.toJSON() : <any>undefined;
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    data['supercargo'] = this.supercargo ? this.supercargo.toJSON() : <any>undefined;
    data['trailer'] = this.trailer ? this.trailer.toJSON() : <any>undefined;
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    data['capacity'] = this.capacity ? this.capacity.toJSON() : <any>undefined;
    data['tenantId'] = this.tenantId;
    data['isHiden'] = this.isHiden;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlOrderBidDetail {
    const json = this.toJSON();
    let result = new WlOrderBidDetail();
    result.init(json);
    return result;
  }
}

export class WlBaseCapacity {
  vehicleId!: number | undefined;
  trailerId!: number | undefined;
  driverId!: number | undefined;
  supercargoId!: number | undefined;
  orderVehicleId!: number | undefined;
  orderVehicle!: Order_Vehicles;
  bcState!: number | undefined;
  driver!: WlBaseDriver;
  supercargo!: WlBaseSupercargo;
  trailer!: WlBaseVehicleTrailer;
  vehicle!: WlBaseVehicle;
  wlOrderBidDetails!: WlOrderBidDetail[] | undefined;
  wlTransportInfos!: WlTransportInfo[] | undefined;
  tenantId!: number;
  tenant!: Tenant;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.vehicleId = _data['vehicleId'];
      this.trailerId = _data['trailerId'];
      this.driverId = _data['driverId'];
      this.supercargoId = _data['supercargoId'];
      this.orderVehicleId = _data['orderVehicleId'];
      this.orderVehicle = _data['orderVehicle']
        ? Order_Vehicles.fromJS(_data['orderVehicle'], _mappings)
        : <any>undefined;
      this.bcState = _data['bcState'];
      this.driver = _data['driver']
        ? WlBaseDriver.fromJS(_data['driver'], _mappings)
        : <any>undefined;
      this.supercargo = _data['supercargo']
        ? WlBaseSupercargo.fromJS(_data['supercargo'], _mappings)
        : <any>undefined;
      this.trailer = _data['trailer']
        ? WlBaseVehicleTrailer.fromJS(_data['trailer'], _mappings)
        : <any>undefined;
      this.vehicle = _data['vehicle']
        ? WlBaseVehicle.fromJS(_data['vehicle'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['wlOrderBidDetails'])) {
        this.wlOrderBidDetails = [] as any;
        for (let item of _data['wlOrderBidDetails'])
          this.wlOrderBidDetails!.push(WlOrderBidDetail.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['wlTransportInfos'])) {
        this.wlTransportInfos = [] as any;
        for (let item of _data['wlTransportInfos'])
          this.wlTransportInfos!.push(WlTransportInfo.fromJS(item, _mappings));
      }
      this.tenantId = _data['tenantId'];
      this.tenant = _data['tenant'] ? Tenant.fromJS(_data['tenant'], _mappings) : <any>undefined;
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseCapacity | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseCapacity>(data, _mappings, WlBaseCapacity);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['vehicleId'] = this.vehicleId;
    data['trailerId'] = this.trailerId;
    data['driverId'] = this.driverId;
    data['supercargoId'] = this.supercargoId;
    data['orderVehicleId'] = this.orderVehicleId;
    data['orderVehicle'] = this.orderVehicle ? this.orderVehicle.toJSON() : <any>undefined;
    data['bcState'] = this.bcState;
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    data['supercargo'] = this.supercargo ? this.supercargo.toJSON() : <any>undefined;
    data['trailer'] = this.trailer ? this.trailer.toJSON() : <any>undefined;
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    if (Array.isArray(this.wlOrderBidDetails)) {
      data['wlOrderBidDetails'] = [];
      for (let item of this.wlOrderBidDetails) data['wlOrderBidDetails'].push(item.toJSON());
    }
    if (Array.isArray(this.wlTransportInfos)) {
      data['wlTransportInfos'] = [];
      for (let item of this.wlTransportInfos) data['wlTransportInfos'].push(item.toJSON());
    }
    data['tenantId'] = this.tenantId;
    data['tenant'] = this.tenant ? this.tenant.toJSON() : <any>undefined;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlBaseCapacity {
    const json = this.toJSON();
    let result = new WlBaseCapacity();
    result.init(json);
    return result;
  }
}

export class WlBaseVehicle {
  number!: string | undefined;
  policy!: string | undefined;
  driverLicense!: string | undefined;
  capacity!: number | undefined;
  capacityUnit!: string | undefined;
  roadTransportLicense!: string | undefined;
  hastrailer!: boolean;
  wlBaseCapacitys!: WlBaseCapacity[] | undefined;
  tenantId!: number;
  vehicleTypeId!: number | undefined;
  vehicleType!: CrmDictItems;
  vehicleRemark!: string | undefined;
  carId!: number | undefined;
  scrapDate!: dayjs.Dayjs | undefined;
  annualReviewValidityDate!: dayjs.Dayjs | undefined;
  roadQualificationValidityDate!: dayjs.Dayjs | undefined;
  drivingLicenseValidityDate!: dayjs.Dayjs | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.number = _data['number'];
      this.policy = _data['policy'];
      this.driverLicense = _data['driverLicense'];
      this.capacity = _data['capacity'];
      this.capacityUnit = _data['capacityUnit'];
      this.roadTransportLicense = _data['roadTransportLicense'];
      this.hastrailer = _data['hastrailer'];
      if (Array.isArray(_data['wlBaseCapacitys'])) {
        this.wlBaseCapacitys = [] as any;
        for (let item of _data['wlBaseCapacitys'])
          this.wlBaseCapacitys!.push(WlBaseCapacity.fromJS(item, _mappings));
      }
      this.tenantId = _data['tenantId'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleType = _data['vehicleType']
        ? CrmDictItems.fromJS(_data['vehicleType'], _mappings)
        : <any>undefined;
      this.vehicleRemark = _data['vehicleRemark'];
      this.carId = _data['carId'];
      this.scrapDate = _data['scrapDate'] ? dayjs(_data['scrapDate'].toString()) : <any>undefined;
      this.annualReviewValidityDate = _data['annualReviewValidityDate']
        ? dayjs(_data['annualReviewValidityDate'].toString())
        : <any>undefined;
      this.roadQualificationValidityDate = _data['roadQualificationValidityDate']
        ? dayjs(_data['roadQualificationValidityDate'].toString())
        : <any>undefined;
      this.drivingLicenseValidityDate = _data['drivingLicenseValidityDate']
        ? dayjs(_data['drivingLicenseValidityDate'].toString())
        : <any>undefined;
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseVehicle | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseVehicle>(data, _mappings, WlBaseVehicle);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['number'] = this.number;
    data['policy'] = this.policy;
    data['driverLicense'] = this.driverLicense;
    data['capacity'] = this.capacity;
    data['capacityUnit'] = this.capacityUnit;
    data['roadTransportLicense'] = this.roadTransportLicense;
    data['hastrailer'] = this.hastrailer;
    if (Array.isArray(this.wlBaseCapacitys)) {
      data['wlBaseCapacitys'] = [];
      for (let item of this.wlBaseCapacitys) data['wlBaseCapacitys'].push(item.toJSON());
    }
    data['tenantId'] = this.tenantId;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleType'] = this.vehicleType ? this.vehicleType.toJSON() : <any>undefined;
    data['vehicleRemark'] = this.vehicleRemark;
    data['carId'] = this.carId;
    data['scrapDate'] = this.scrapDate ? this.scrapDate.toISOString() : <any>undefined;
    data['annualReviewValidityDate'] = this.annualReviewValidityDate
      ? this.annualReviewValidityDate.toISOString()
      : <any>undefined;
    data['roadQualificationValidityDate'] = this.roadQualificationValidityDate
      ? this.roadQualificationValidityDate.toISOString()
      : <any>undefined;
    data['drivingLicenseValidityDate'] = this.drivingLicenseValidityDate
      ? this.drivingLicenseValidityDate.toISOString()
      : <any>undefined;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlBaseVehicle {
    const json = this.toJSON();
    let result = new WlBaseVehicle();
    result.init(json);
    return result;
  }
}

export class Edition {
  name!: string | undefined;
  displayName!: string | undefined;
  isDeleted!: boolean;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  lastModifierUserId!: number | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.displayName = _data['displayName'];
      this.isDeleted = _data['isDeleted'];
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Edition | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Edition>(data, _mappings, Edition);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['displayName'] = this.displayName;
    data['isDeleted'] = this.isDeleted;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['id'] = this.id;
    return data;
  }

  clone(): Edition {
    const json = this.toJSON();
    let result = new Edition();
    result.init(json);
    return result;
  }
}

export class Tenant {
  subscriptionEndUtc!: dayjs.Dayjs | undefined;
  isInTrialPeriod!: boolean;
  customCssId!: string | undefined;
  logoId!: string | undefined;
  logoFileType!: string | undefined;
  canViewHW!: boolean;
  tenantGuid!: string | undefined;
  businessLicenseOss!: string | undefined;
  disposalLicenseOss!: string | undefined;
  entId!: number | undefined;
  ent!: Enterprise_Async;
  licenseNo!: string | undefined;
  sysUserId!: number | undefined;
  roadTransportLicenseOss!: string | undefined;
  tenantType!: number | undefined;
  sysUserName!: string | undefined;
  isExclusiveEnt!: boolean;
  isAgentEnt!: boolean;
  wlContracteds!: WlContractedCustomer[] | undefined;
  wlContractedDisposals!: WlContractedCustomer[] | undefined;
  wlBaseVehicles!: WlBaseVehicle[] | undefined;
  wlBaseVehicleTrailers!: WlBaseVehicleTrailer[] | undefined;
  wlBaseDrivers!: WlBaseDriver[] | undefined;
  wlBaseSupercargos!: WlBaseSupercargo[] | undefined;
  edition!: Edition;
  editionId!: number | undefined;
  creatorUser!: User;
  lastModifierUser!: User;
  deleterUser!: User;
  tenancyName!: string | undefined;
  name!: string | undefined;
  connectionString!: string | undefined;
  isActive!: boolean;
  isDeleted!: boolean;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  lastModifierUserId!: number | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.subscriptionEndUtc = _data['subscriptionEndUtc']
        ? dayjs(_data['subscriptionEndUtc'].toString())
        : <any>undefined;
      this.isInTrialPeriod = _data['isInTrialPeriod'];
      this.customCssId = _data['customCssId'];
      this.logoId = _data['logoId'];
      this.logoFileType = _data['logoFileType'];
      this.canViewHW = _data['canViewHW'];
      this.tenantGuid = _data['tenantGuid'];
      this.businessLicenseOss = _data['businessLicenseOss'];
      this.disposalLicenseOss = _data['disposalLicenseOss'];
      this.entId = _data['entId'];
      this.ent = _data['ent'] ? Enterprise_Async.fromJS(_data['ent'], _mappings) : <any>undefined;
      this.licenseNo = _data['licenseNo'];
      this.sysUserId = _data['sysUserId'];
      this.roadTransportLicenseOss = _data['roadTransportLicenseOss'];
      this.tenantType = _data['tenantType'];
      this.sysUserName = _data['sysUserName'];
      this.isExclusiveEnt = _data['isExclusiveEnt'];
      this.isAgentEnt = _data['isAgentEnt'];
      if (Array.isArray(_data['wlContracteds'])) {
        this.wlContracteds = [] as any;
        for (let item of _data['wlContracteds'])
          this.wlContracteds!.push(WlContractedCustomer.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['wlContractedDisposals'])) {
        this.wlContractedDisposals = [] as any;
        for (let item of _data['wlContractedDisposals'])
          this.wlContractedDisposals!.push(WlContractedCustomer.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['wlBaseVehicles'])) {
        this.wlBaseVehicles = [] as any;
        for (let item of _data['wlBaseVehicles'])
          this.wlBaseVehicles!.push(WlBaseVehicle.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['wlBaseVehicleTrailers'])) {
        this.wlBaseVehicleTrailers = [] as any;
        for (let item of _data['wlBaseVehicleTrailers'])
          this.wlBaseVehicleTrailers!.push(WlBaseVehicleTrailer.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['wlBaseDrivers'])) {
        this.wlBaseDrivers = [] as any;
        for (let item of _data['wlBaseDrivers'])
          this.wlBaseDrivers!.push(WlBaseDriver.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['wlBaseSupercargos'])) {
        this.wlBaseSupercargos = [] as any;
        for (let item of _data['wlBaseSupercargos'])
          this.wlBaseSupercargos!.push(WlBaseSupercargo.fromJS(item, _mappings));
      }
      this.edition = _data['edition']
        ? Edition.fromJS(_data['edition'], _mappings)
        : <any>undefined;
      this.editionId = _data['editionId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUser = _data['lastModifierUser']
        ? User.fromJS(_data['lastModifierUser'], _mappings)
        : <any>undefined;
      this.deleterUser = _data['deleterUser']
        ? User.fromJS(_data['deleterUser'], _mappings)
        : <any>undefined;
      this.tenancyName = _data['tenancyName'];
      this.name = _data['name'];
      this.connectionString = _data['connectionString'];
      this.isActive = _data['isActive'];
      this.isDeleted = _data['isDeleted'];
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Tenant | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Tenant>(data, _mappings, Tenant);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['subscriptionEndUtc'] = this.subscriptionEndUtc
      ? this.subscriptionEndUtc.toISOString()
      : <any>undefined;
    data['isInTrialPeriod'] = this.isInTrialPeriod;
    data['customCssId'] = this.customCssId;
    data['logoId'] = this.logoId;
    data['logoFileType'] = this.logoFileType;
    data['canViewHW'] = this.canViewHW;
    data['tenantGuid'] = this.tenantGuid;
    data['businessLicenseOss'] = this.businessLicenseOss;
    data['disposalLicenseOss'] = this.disposalLicenseOss;
    data['entId'] = this.entId;
    data['ent'] = this.ent ? this.ent.toJSON() : <any>undefined;
    data['licenseNo'] = this.licenseNo;
    data['sysUserId'] = this.sysUserId;
    data['roadTransportLicenseOss'] = this.roadTransportLicenseOss;
    data['tenantType'] = this.tenantType;
    data['sysUserName'] = this.sysUserName;
    data['isExclusiveEnt'] = this.isExclusiveEnt;
    data['isAgentEnt'] = this.isAgentEnt;
    if (Array.isArray(this.wlContracteds)) {
      data['wlContracteds'] = [];
      for (let item of this.wlContracteds) data['wlContracteds'].push(item.toJSON());
    }
    if (Array.isArray(this.wlContractedDisposals)) {
      data['wlContractedDisposals'] = [];
      for (let item of this.wlContractedDisposals)
        data['wlContractedDisposals'].push(item.toJSON());
    }
    if (Array.isArray(this.wlBaseVehicles)) {
      data['wlBaseVehicles'] = [];
      for (let item of this.wlBaseVehicles) data['wlBaseVehicles'].push(item.toJSON());
    }
    if (Array.isArray(this.wlBaseVehicleTrailers)) {
      data['wlBaseVehicleTrailers'] = [];
      for (let item of this.wlBaseVehicleTrailers)
        data['wlBaseVehicleTrailers'].push(item.toJSON());
    }
    if (Array.isArray(this.wlBaseDrivers)) {
      data['wlBaseDrivers'] = [];
      for (let item of this.wlBaseDrivers) data['wlBaseDrivers'].push(item.toJSON());
    }
    if (Array.isArray(this.wlBaseSupercargos)) {
      data['wlBaseSupercargos'] = [];
      for (let item of this.wlBaseSupercargos) data['wlBaseSupercargos'].push(item.toJSON());
    }
    data['edition'] = this.edition ? this.edition.toJSON() : <any>undefined;
    data['editionId'] = this.editionId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUser'] = this.lastModifierUser
      ? this.lastModifierUser.toJSON()
      : <any>undefined;
    data['deleterUser'] = this.deleterUser ? this.deleterUser.toJSON() : <any>undefined;
    data['tenancyName'] = this.tenancyName;
    data['name'] = this.name;
    data['connectionString'] = this.connectionString;
    data['isActive'] = this.isActive;
    data['isDeleted'] = this.isDeleted;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['id'] = this.id;
    return data;
  }

  clone(): Tenant {
    const json = this.toJSON();
    let result = new Tenant();
    result.init(json);
    return result;
  }
}

export class WlOrderQuote {
  quoteId!: number | undefined;
  transportPrice!: number | undefined;
  quoteTime!: dayjs.Dayjs | undefined;
  quoteState!: number | undefined;
  sysUserId!: number | undefined;
  quoteFrom!: number;
  isPushed!: boolean;
  isAccepted!: boolean;
  quote!: WlQuoteForm;
  tenantId!: number;
  tenant!: Tenant;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.quoteId = _data['quoteId'];
      this.transportPrice = _data['transportPrice'];
      this.quoteTime = _data['quoteTime'] ? dayjs(_data['quoteTime'].toString()) : <any>undefined;
      this.quoteState = _data['quoteState'];
      this.sysUserId = _data['sysUserId'];
      this.quoteFrom = _data['quoteFrom'];
      this.isPushed = _data['isPushed'];
      this.isAccepted = _data['isAccepted'];
      this.quote = _data['quote'] ? WlQuoteForm.fromJS(_data['quote'], _mappings) : <any>undefined;
      this.tenantId = _data['tenantId'];
      this.tenant = _data['tenant'] ? Tenant.fromJS(_data['tenant'], _mappings) : <any>undefined;
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderQuote | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderQuote>(data, _mappings, WlOrderQuote);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['quoteId'] = this.quoteId;
    data['transportPrice'] = this.transportPrice;
    data['quoteTime'] = this.quoteTime ? this.quoteTime.toISOString() : <any>undefined;
    data['quoteState'] = this.quoteState;
    data['sysUserId'] = this.sysUserId;
    data['quoteFrom'] = this.quoteFrom;
    data['isPushed'] = this.isPushed;
    data['isAccepted'] = this.isAccepted;
    data['quote'] = this.quote ? this.quote.toJSON() : <any>undefined;
    data['tenantId'] = this.tenantId;
    data['tenant'] = this.tenant ? this.tenant.toJSON() : <any>undefined;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlOrderQuote {
    const json = this.toJSON();
    let result = new WlOrderQuote();
    result.init(json);
    return result;
  }
}

export class WlQuoteWaste {
  quoteId!: number | undefined;
  wasteCode!: string | undefined;
  commonName!: string | undefined;
  transportWeight!: number | undefined;
  unit!: string | undefined;
  packagingId!: number | undefined;
  packaging!: CrmDictItems;
  packRemark!: string | undefined;
  quote!: WlQuoteForm;
  tenantId!: number;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.quoteId = _data['quoteId'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.transportWeight = _data['transportWeight'];
      this.unit = _data['unit'];
      this.packagingId = _data['packagingId'];
      this.packaging = _data['packaging']
        ? CrmDictItems.fromJS(_data['packaging'], _mappings)
        : <any>undefined;
      this.packRemark = _data['packRemark'];
      this.quote = _data['quote'] ? WlQuoteForm.fromJS(_data['quote'], _mappings) : <any>undefined;
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlQuoteWaste | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlQuoteWaste>(data, _mappings, WlQuoteWaste);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['quoteId'] = this.quoteId;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['transportWeight'] = this.transportWeight;
    data['unit'] = this.unit;
    data['packagingId'] = this.packagingId;
    data['packaging'] = this.packaging ? this.packaging.toJSON() : <any>undefined;
    data['packRemark'] = this.packRemark;
    data['quote'] = this.quote ? this.quote.toJSON() : <any>undefined;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlQuoteWaste {
    const json = this.toJSON();
    let result = new WlQuoteWaste();
    result.init(json);
    return result;
  }
}

export class WlOrderPush {
  pushType!: number;
  orderId!: number | undefined;
  quoteId!: number | undefined;
  pushTime!: dayjs.Dayjs | undefined;
  pushMethod!: number;
  pushTenantId!: number | undefined;
  pushTenant!: Tenant;
  sysUserId!: number | undefined;
  sysUser!: User;
  order!: WlOrderForm;
  quote!: WlQuoteForm;
  tenantId!: number;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.pushType = _data['pushType'];
      this.orderId = _data['orderId'];
      this.quoteId = _data['quoteId'];
      this.pushTime = _data['pushTime'] ? dayjs(_data['pushTime'].toString()) : <any>undefined;
      this.pushMethod = _data['pushMethod'];
      this.pushTenantId = _data['pushTenantId'];
      this.pushTenant = _data['pushTenant']
        ? Tenant.fromJS(_data['pushTenant'], _mappings)
        : <any>undefined;
      this.sysUserId = _data['sysUserId'];
      this.sysUser = _data['sysUser'] ? User.fromJS(_data['sysUser'], _mappings) : <any>undefined;
      this.order = _data['order'] ? WlOrderForm.fromJS(_data['order'], _mappings) : <any>undefined;
      this.quote = _data['quote'] ? WlQuoteForm.fromJS(_data['quote'], _mappings) : <any>undefined;
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderPush | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderPush>(data, _mappings, WlOrderPush);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['pushType'] = this.pushType;
    data['orderId'] = this.orderId;
    data['quoteId'] = this.quoteId;
    data['pushTime'] = this.pushTime ? this.pushTime.toISOString() : <any>undefined;
    data['pushMethod'] = this.pushMethod;
    data['pushTenantId'] = this.pushTenantId;
    data['pushTenant'] = this.pushTenant ? this.pushTenant.toJSON() : <any>undefined;
    data['sysUserId'] = this.sysUserId;
    data['sysUser'] = this.sysUser ? this.sysUser.toJSON() : <any>undefined;
    data['order'] = this.order ? this.order.toJSON() : <any>undefined;
    data['quote'] = this.quote ? this.quote.toJSON() : <any>undefined;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlOrderPush {
    const json = this.toJSON();
    let result = new WlOrderPush();
    result.init(json);
    return result;
  }
}

export class WlQuoteForm {
  tenantId!: number;
  tenant!: Tenant;
  quoteCode!: string | undefined;
  senderEntname!: string | undefined;
  senderEntId!: number | undefined;
  senderCantonCode!: string | undefined;
  senderCanton!: Dic_Canton;
  senderAddress!: string | undefined;
  receiverEntname!: string | undefined;
  receiverCantonCode!: string | undefined;
  receiverCanton!: Dic_Canton;
  receiverAddress!: string | undefined;
  senderName!: string | undefined;
  senderPhone!: string | undefined;
  receiverName!: string | undefined;
  receiverPhone!: string | undefined;
  shippingTime!: dayjs.Dayjs | undefined;
  quoteState!: number | undefined;
  vehicleTypeId!: number | undefined;
  vehicleType!: CrmDictItems;
  vehicleTypeRemark!: string | undefined;
  sysUserId!: number | undefined;
  sysUser!: User;
  senderCantonCodeFull!: string | undefined;
  receiverCantonCodeFull!: string | undefined;
  wlOrderQuotes!: WlOrderQuote[] | undefined;
  wlQuoteWastes!: WlQuoteWaste[] | undefined;
  wlOrderPushes!: WlOrderPush[] | undefined;
  isTimeout!: boolean;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.tenant = _data['tenant'] ? Tenant.fromJS(_data['tenant'], _mappings) : <any>undefined;
      this.quoteCode = _data['quoteCode'];
      this.senderEntname = _data['senderEntname'];
      this.senderEntId = _data['senderEntId'];
      this.senderCantonCode = _data['senderCantonCode'];
      this.senderCanton = _data['senderCanton']
        ? Dic_Canton.fromJS(_data['senderCanton'], _mappings)
        : <any>undefined;
      this.senderAddress = _data['senderAddress'];
      this.receiverEntname = _data['receiverEntname'];
      this.receiverCantonCode = _data['receiverCantonCode'];
      this.receiverCanton = _data['receiverCanton']
        ? Dic_Canton.fromJS(_data['receiverCanton'], _mappings)
        : <any>undefined;
      this.receiverAddress = _data['receiverAddress'];
      this.senderName = _data['senderName'];
      this.senderPhone = _data['senderPhone'];
      this.receiverName = _data['receiverName'];
      this.receiverPhone = _data['receiverPhone'];
      this.shippingTime = _data['shippingTime']
        ? dayjs(_data['shippingTime'].toString())
        : <any>undefined;
      this.quoteState = _data['quoteState'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleType = _data['vehicleType']
        ? CrmDictItems.fromJS(_data['vehicleType'], _mappings)
        : <any>undefined;
      this.vehicleTypeRemark = _data['vehicleTypeRemark'];
      this.sysUserId = _data['sysUserId'];
      this.sysUser = _data['sysUser'] ? User.fromJS(_data['sysUser'], _mappings) : <any>undefined;
      this.senderCantonCodeFull = _data['senderCantonCodeFull'];
      this.receiverCantonCodeFull = _data['receiverCantonCodeFull'];
      if (Array.isArray(_data['wlOrderQuotes'])) {
        this.wlOrderQuotes = [] as any;
        for (let item of _data['wlOrderQuotes'])
          this.wlOrderQuotes!.push(WlOrderQuote.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['wlQuoteWastes'])) {
        this.wlQuoteWastes = [] as any;
        for (let item of _data['wlQuoteWastes'])
          this.wlQuoteWastes!.push(WlQuoteWaste.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['wlOrderPushes'])) {
        this.wlOrderPushes = [] as any;
        for (let item of _data['wlOrderPushes'])
          this.wlOrderPushes!.push(WlOrderPush.fromJS(item, _mappings));
      }
      this.isTimeout = _data['isTimeout'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlQuoteForm | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlQuoteForm>(data, _mappings, WlQuoteForm);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['tenant'] = this.tenant ? this.tenant.toJSON() : <any>undefined;
    data['quoteCode'] = this.quoteCode;
    data['senderEntname'] = this.senderEntname;
    data['senderEntId'] = this.senderEntId;
    data['senderCantonCode'] = this.senderCantonCode;
    data['senderCanton'] = this.senderCanton ? this.senderCanton.toJSON() : <any>undefined;
    data['senderAddress'] = this.senderAddress;
    data['receiverEntname'] = this.receiverEntname;
    data['receiverCantonCode'] = this.receiverCantonCode;
    data['receiverCanton'] = this.receiverCanton ? this.receiverCanton.toJSON() : <any>undefined;
    data['receiverAddress'] = this.receiverAddress;
    data['senderName'] = this.senderName;
    data['senderPhone'] = this.senderPhone;
    data['receiverName'] = this.receiverName;
    data['receiverPhone'] = this.receiverPhone;
    data['shippingTime'] = this.shippingTime ? this.shippingTime.toISOString() : <any>undefined;
    data['quoteState'] = this.quoteState;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleType'] = this.vehicleType ? this.vehicleType.toJSON() : <any>undefined;
    data['vehicleTypeRemark'] = this.vehicleTypeRemark;
    data['sysUserId'] = this.sysUserId;
    data['sysUser'] = this.sysUser ? this.sysUser.toJSON() : <any>undefined;
    data['senderCantonCodeFull'] = this.senderCantonCodeFull;
    data['receiverCantonCodeFull'] = this.receiverCantonCodeFull;
    if (Array.isArray(this.wlOrderQuotes)) {
      data['wlOrderQuotes'] = [];
      for (let item of this.wlOrderQuotes) data['wlOrderQuotes'].push(item.toJSON());
    }
    if (Array.isArray(this.wlQuoteWastes)) {
      data['wlQuoteWastes'] = [];
      for (let item of this.wlQuoteWastes) data['wlQuoteWastes'].push(item.toJSON());
    }
    if (Array.isArray(this.wlOrderPushes)) {
      data['wlOrderPushes'] = [];
      for (let item of this.wlOrderPushes) data['wlOrderPushes'].push(item.toJSON());
    }
    data['isTimeout'] = this.isTimeout;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlQuoteForm {
    const json = this.toJSON();
    let result = new WlQuoteForm();
    result.init(json);
    return result;
  }
}

export class WlOrderState {
  orderId!: number | undefined;
  stateType!: number | undefined;
  ix!: number | undefined;
  order!: WlOrderForm;
  tenantId!: number;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
      this.stateType = _data['stateType'];
      this.ix = _data['ix'];
      this.order = _data['order'] ? WlOrderForm.fromJS(_data['order'], _mappings) : <any>undefined;
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderState | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderState>(data, _mappings, WlOrderState);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    data['stateType'] = this.stateType;
    data['ix'] = this.ix;
    data['order'] = this.order ? this.order.toJSON() : <any>undefined;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlOrderState {
    const json = this.toJSON();
    let result = new WlOrderState();
    result.init(json);
    return result;
  }
}

export class WlOrderWaste {
  orderId!: number | undefined;
  wasteCode!: string | undefined;
  commonName!: string | undefined;
  transportWeight!: number | undefined;
  unit!: string | undefined;
  packagingId!: number | undefined;
  packaging!: CrmDictItems;
  packRemark!: string | undefined;
  order!: WlOrderForm;
  tenantId!: number;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.transportWeight = _data['transportWeight'];
      this.unit = _data['unit'];
      this.packagingId = _data['packagingId'];
      this.packaging = _data['packaging']
        ? CrmDictItems.fromJS(_data['packaging'], _mappings)
        : <any>undefined;
      this.packRemark = _data['packRemark'];
      this.order = _data['order'] ? WlOrderForm.fromJS(_data['order'], _mappings) : <any>undefined;
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderWaste | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderWaste>(data, _mappings, WlOrderWaste);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['transportWeight'] = this.transportWeight;
    data['unit'] = this.unit;
    data['packagingId'] = this.packagingId;
    data['packaging'] = this.packaging ? this.packaging.toJSON() : <any>undefined;
    data['packRemark'] = this.packRemark;
    data['order'] = this.order ? this.order.toJSON() : <any>undefined;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlOrderWaste {
    const json = this.toJSON();
    let result = new WlOrderWaste();
    result.init(json);
    return result;
  }
}

export class WlOrderLog {
  tenantId!: number;
  orderId!: number | undefined;
  logType!: number;
  order!: WlOrderForm;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.orderId = _data['orderId'];
      this.logType = _data['logType'];
      this.order = _data['order'] ? WlOrderForm.fromJS(_data['order'], _mappings) : <any>undefined;
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderLog | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderLog>(data, _mappings, WlOrderLog);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['orderId'] = this.orderId;
    data['logType'] = this.logType;
    data['order'] = this.order ? this.order.toJSON() : <any>undefined;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlOrderLog {
    const json = this.toJSON();
    let result = new WlOrderLog();
    result.init(json);
    return result;
  }
}

export class WlOrderFollow {
  tenantId!: number;
  orderId!: number | undefined;
  transportInfoId!: number | undefined;
  followType!: number;
  tags!: string | undefined;
  content!: string | undefined;
  attachment!: string | undefined;
  order!: WlOrderForm;
  transportInfo!: WlTransportInfo;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.orderId = _data['orderId'];
      this.transportInfoId = _data['transportInfoId'];
      this.followType = _data['followType'];
      this.tags = _data['tags'];
      this.content = _data['content'];
      this.attachment = _data['attachment'];
      this.order = _data['order'] ? WlOrderForm.fromJS(_data['order'], _mappings) : <any>undefined;
      this.transportInfo = _data['transportInfo']
        ? WlTransportInfo.fromJS(_data['transportInfo'], _mappings)
        : <any>undefined;
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderFollow | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderFollow>(data, _mappings, WlOrderFollow);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['orderId'] = this.orderId;
    data['transportInfoId'] = this.transportInfoId;
    data['followType'] = this.followType;
    data['tags'] = this.tags;
    data['content'] = this.content;
    data['attachment'] = this.attachment;
    data['order'] = this.order ? this.order.toJSON() : <any>undefined;
    data['transportInfo'] = this.transportInfo ? this.transportInfo.toJSON() : <any>undefined;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlOrderFollow {
    const json = this.toJSON();
    let result = new WlOrderFollow();
    result.init(json);
    return result;
  }
}

export class WlOrderForm {
  quoteId!: number | undefined;
  quote!: WlQuoteForm;
  orderCode!: string | undefined;
  senderEntname!: string | undefined;
  senderEntId!: number | undefined;
  senderCantonCode!: string | undefined;
  senderCanton!: Dic_Canton;
  senderAddress!: string | undefined;
  receiverEntname!: string | undefined;
  receiverCantonCode!: string | undefined;
  receiverCanton!: Dic_Canton;
  receiverAddress!: string | undefined;
  senderName!: string | undefined;
  senderPhone!: string | undefined;
  receiverName!: string | undefined;
  receiverPhone!: string | undefined;
  shippingTime!: dayjs.Dayjs | undefined;
  transportPrice!: number | undefined;
  vehicleTypeId!: number | undefined;
  vehicleType!: CrmDictItems;
  vehicleTypeRemark!: string | undefined;
  content!: string | undefined;
  publishTime!: dayjs.Dayjs | undefined;
  formState!: number | undefined;
  sysUserId!: number | undefined;
  sysUser!: User;
  orderState!: number | undefined;
  transportTime!: dayjs.Dayjs | undefined;
  approveComment!: string | undefined;
  senderCantonCodeFull!: string | undefined;
  receiverCantonCodeFull!: string | undefined;
  approveTime!: dayjs.Dayjs | undefined;
  wlOrderBids!: WlOrderBid[] | undefined;
  wlOrderStates!: WlOrderState[] | undefined;
  wlOrderWastes!: WlOrderWaste[] | undefined;
  wlOrderPushes!: WlOrderPush[] | undefined;
  tenantId!: number;
  tenant!: Tenant;
  transForms!: WlTransForm[] | undefined;
  needVehicleNumber!: number;
  accountTypeId!: number | undefined;
  accountType!: CrmDictItems;
  isTimeout!: boolean;
  longitudeSender!: number | undefined;
  latitudeSender!: number | undefined;
  longitudeReceiver!: number | undefined;
  latitudeReceiver!: number | undefined;
  orderType!: number;
  distanceKilometers!: number | undefined;
  valuationType!: number;
  unitPrice!: number | undefined;
  unit!: string | undefined;
  specialOrderStatus!: number | undefined;
  isSpecialOrderReleased!: boolean | undefined;
  completeTime!: dayjs.Dayjs | undefined;
  priceApproved!: boolean;
  priceDiffTypeID!: number | undefined;
  priceDiffType!: CrmDictItems;
  priceDifference!: number | undefined;
  finalPrice!: number | undefined;
  isBelongLLWL!: boolean;
  orderLogs!: WlOrderLog[] | undefined;
  orderFollows!: WlOrderFollow[] | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.quoteId = _data['quoteId'];
      this.quote = _data['quote'] ? WlQuoteForm.fromJS(_data['quote'], _mappings) : <any>undefined;
      this.orderCode = _data['orderCode'];
      this.senderEntname = _data['senderEntname'];
      this.senderEntId = _data['senderEntId'];
      this.senderCantonCode = _data['senderCantonCode'];
      this.senderCanton = _data['senderCanton']
        ? Dic_Canton.fromJS(_data['senderCanton'], _mappings)
        : <any>undefined;
      this.senderAddress = _data['senderAddress'];
      this.receiverEntname = _data['receiverEntname'];
      this.receiverCantonCode = _data['receiverCantonCode'];
      this.receiverCanton = _data['receiverCanton']
        ? Dic_Canton.fromJS(_data['receiverCanton'], _mappings)
        : <any>undefined;
      this.receiverAddress = _data['receiverAddress'];
      this.senderName = _data['senderName'];
      this.senderPhone = _data['senderPhone'];
      this.receiverName = _data['receiverName'];
      this.receiverPhone = _data['receiverPhone'];
      this.shippingTime = _data['shippingTime']
        ? dayjs(_data['shippingTime'].toString())
        : <any>undefined;
      this.transportPrice = _data['transportPrice'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleType = _data['vehicleType']
        ? CrmDictItems.fromJS(_data['vehicleType'], _mappings)
        : <any>undefined;
      this.vehicleTypeRemark = _data['vehicleTypeRemark'];
      this.content = _data['content'];
      this.publishTime = _data['publishTime']
        ? dayjs(_data['publishTime'].toString())
        : <any>undefined;
      this.formState = _data['formState'];
      this.sysUserId = _data['sysUserId'];
      this.sysUser = _data['sysUser'] ? User.fromJS(_data['sysUser'], _mappings) : <any>undefined;
      this.orderState = _data['orderState'];
      this.transportTime = _data['transportTime']
        ? dayjs(_data['transportTime'].toString())
        : <any>undefined;
      this.approveComment = _data['approveComment'];
      this.senderCantonCodeFull = _data['senderCantonCodeFull'];
      this.receiverCantonCodeFull = _data['receiverCantonCodeFull'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['wlOrderBids'])) {
        this.wlOrderBids = [] as any;
        for (let item of _data['wlOrderBids'])
          this.wlOrderBids!.push(WlOrderBid.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['wlOrderStates'])) {
        this.wlOrderStates = [] as any;
        for (let item of _data['wlOrderStates'])
          this.wlOrderStates!.push(WlOrderState.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['wlOrderWastes'])) {
        this.wlOrderWastes = [] as any;
        for (let item of _data['wlOrderWastes'])
          this.wlOrderWastes!.push(WlOrderWaste.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['wlOrderPushes'])) {
        this.wlOrderPushes = [] as any;
        for (let item of _data['wlOrderPushes'])
          this.wlOrderPushes!.push(WlOrderPush.fromJS(item, _mappings));
      }
      this.tenantId = _data['tenantId'];
      this.tenant = _data['tenant'] ? Tenant.fromJS(_data['tenant'], _mappings) : <any>undefined;
      if (Array.isArray(_data['transForms'])) {
        this.transForms = [] as any;
        for (let item of _data['transForms'])
          this.transForms!.push(WlTransForm.fromJS(item, _mappings));
      }
      this.needVehicleNumber = _data['needVehicleNumber'];
      this.accountTypeId = _data['accountTypeId'];
      this.accountType = _data['accountType']
        ? CrmDictItems.fromJS(_data['accountType'], _mappings)
        : <any>undefined;
      this.isTimeout = _data['isTimeout'];
      this.longitudeSender = _data['longitudeSender'];
      this.latitudeSender = _data['latitudeSender'];
      this.longitudeReceiver = _data['longitudeReceiver'];
      this.latitudeReceiver = _data['latitudeReceiver'];
      this.orderType = _data['orderType'];
      this.distanceKilometers = _data['distanceKilometers'];
      this.valuationType = _data['valuationType'];
      this.unitPrice = _data['unitPrice'];
      this.unit = _data['unit'];
      this.specialOrderStatus = _data['specialOrderStatus'];
      this.isSpecialOrderReleased = _data['isSpecialOrderReleased'];
      this.completeTime = _data['completeTime']
        ? dayjs(_data['completeTime'].toString())
        : <any>undefined;
      this.priceApproved = _data['priceApproved'];
      this.priceDiffTypeID = _data['priceDiffTypeID'];
      this.priceDiffType = _data['priceDiffType']
        ? CrmDictItems.fromJS(_data['priceDiffType'], _mappings)
        : <any>undefined;
      this.priceDifference = _data['priceDifference'];
      this.finalPrice = _data['finalPrice'];
      this.isBelongLLWL = _data['isBelongLLWL'];
      if (Array.isArray(_data['orderLogs'])) {
        this.orderLogs = [] as any;
        for (let item of _data['orderLogs'])
          this.orderLogs!.push(WlOrderLog.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['orderFollows'])) {
        this.orderFollows = [] as any;
        for (let item of _data['orderFollows'])
          this.orderFollows!.push(WlOrderFollow.fromJS(item, _mappings));
      }
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderForm | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderForm>(data, _mappings, WlOrderForm);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['quoteId'] = this.quoteId;
    data['quote'] = this.quote ? this.quote.toJSON() : <any>undefined;
    data['orderCode'] = this.orderCode;
    data['senderEntname'] = this.senderEntname;
    data['senderEntId'] = this.senderEntId;
    data['senderCantonCode'] = this.senderCantonCode;
    data['senderCanton'] = this.senderCanton ? this.senderCanton.toJSON() : <any>undefined;
    data['senderAddress'] = this.senderAddress;
    data['receiverEntname'] = this.receiverEntname;
    data['receiverCantonCode'] = this.receiverCantonCode;
    data['receiverCanton'] = this.receiverCanton ? this.receiverCanton.toJSON() : <any>undefined;
    data['receiverAddress'] = this.receiverAddress;
    data['senderName'] = this.senderName;
    data['senderPhone'] = this.senderPhone;
    data['receiverName'] = this.receiverName;
    data['receiverPhone'] = this.receiverPhone;
    data['shippingTime'] = this.shippingTime ? this.shippingTime.toISOString() : <any>undefined;
    data['transportPrice'] = this.transportPrice;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleType'] = this.vehicleType ? this.vehicleType.toJSON() : <any>undefined;
    data['vehicleTypeRemark'] = this.vehicleTypeRemark;
    data['content'] = this.content;
    data['publishTime'] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
    data['formState'] = this.formState;
    data['sysUserId'] = this.sysUserId;
    data['sysUser'] = this.sysUser ? this.sysUser.toJSON() : <any>undefined;
    data['orderState'] = this.orderState;
    data['transportTime'] = this.transportTime ? this.transportTime.toISOString() : <any>undefined;
    data['approveComment'] = this.approveComment;
    data['senderCantonCodeFull'] = this.senderCantonCodeFull;
    data['receiverCantonCodeFull'] = this.receiverCantonCodeFull;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    if (Array.isArray(this.wlOrderBids)) {
      data['wlOrderBids'] = [];
      for (let item of this.wlOrderBids) data['wlOrderBids'].push(item.toJSON());
    }
    if (Array.isArray(this.wlOrderStates)) {
      data['wlOrderStates'] = [];
      for (let item of this.wlOrderStates) data['wlOrderStates'].push(item.toJSON());
    }
    if (Array.isArray(this.wlOrderWastes)) {
      data['wlOrderWastes'] = [];
      for (let item of this.wlOrderWastes) data['wlOrderWastes'].push(item.toJSON());
    }
    if (Array.isArray(this.wlOrderPushes)) {
      data['wlOrderPushes'] = [];
      for (let item of this.wlOrderPushes) data['wlOrderPushes'].push(item.toJSON());
    }
    data['tenantId'] = this.tenantId;
    data['tenant'] = this.tenant ? this.tenant.toJSON() : <any>undefined;
    if (Array.isArray(this.transForms)) {
      data['transForms'] = [];
      for (let item of this.transForms) data['transForms'].push(item.toJSON());
    }
    data['needVehicleNumber'] = this.needVehicleNumber;
    data['accountTypeId'] = this.accountTypeId;
    data['accountType'] = this.accountType ? this.accountType.toJSON() : <any>undefined;
    data['isTimeout'] = this.isTimeout;
    data['longitudeSender'] = this.longitudeSender;
    data['latitudeSender'] = this.latitudeSender;
    data['longitudeReceiver'] = this.longitudeReceiver;
    data['latitudeReceiver'] = this.latitudeReceiver;
    data['orderType'] = this.orderType;
    data['distanceKilometers'] = this.distanceKilometers;
    data['valuationType'] = this.valuationType;
    data['unitPrice'] = this.unitPrice;
    data['unit'] = this.unit;
    data['specialOrderStatus'] = this.specialOrderStatus;
    data['isSpecialOrderReleased'] = this.isSpecialOrderReleased;
    data['completeTime'] = this.completeTime ? this.completeTime.toISOString() : <any>undefined;
    data['priceApproved'] = this.priceApproved;
    data['priceDiffTypeID'] = this.priceDiffTypeID;
    data['priceDiffType'] = this.priceDiffType ? this.priceDiffType.toJSON() : <any>undefined;
    data['priceDifference'] = this.priceDifference;
    data['finalPrice'] = this.finalPrice;
    data['isBelongLLWL'] = this.isBelongLLWL;
    if (Array.isArray(this.orderLogs)) {
      data['orderLogs'] = [];
      for (let item of this.orderLogs) data['orderLogs'].push(item.toJSON());
    }
    if (Array.isArray(this.orderFollows)) {
      data['orderFollows'] = [];
      for (let item of this.orderFollows) data['orderFollows'].push(item.toJSON());
    }
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlOrderForm {
    const json = this.toJSON();
    let result = new WlOrderForm();
    result.init(json);
    return result;
  }
}

export class WlTransForm {
  transCode!: string | undefined;
  orderId!: number | undefined;
  order!: WlOrderForm;
  orderBidId!: number | undefined;
  orderBid!: WlOrderBid;
  transportState!: number;
  transportBeginTime!: dayjs.Dayjs | undefined;
  transportEndTime!: dayjs.Dayjs | undefined;
  transportInfos!: WlTransportInfo[] | undefined;
  tenantId!: number;
  tenant!: Tenant;
  isStatemented!: boolean;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.transCode = _data['transCode'];
      this.orderId = _data['orderId'];
      this.order = _data['order'] ? WlOrderForm.fromJS(_data['order'], _mappings) : <any>undefined;
      this.orderBidId = _data['orderBidId'];
      this.orderBid = _data['orderBid']
        ? WlOrderBid.fromJS(_data['orderBid'], _mappings)
        : <any>undefined;
      this.transportState = _data['transportState'];
      this.transportBeginTime = _data['transportBeginTime']
        ? dayjs(_data['transportBeginTime'].toString())
        : <any>undefined;
      this.transportEndTime = _data['transportEndTime']
        ? dayjs(_data['transportEndTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['transportInfos'])) {
        this.transportInfos = [] as any;
        for (let item of _data['transportInfos'])
          this.transportInfos!.push(WlTransportInfo.fromJS(item, _mappings));
      }
      this.tenantId = _data['tenantId'];
      this.tenant = _data['tenant'] ? Tenant.fromJS(_data['tenant'], _mappings) : <any>undefined;
      this.isStatemented = _data['isStatemented'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlTransForm | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlTransForm>(data, _mappings, WlTransForm);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['transCode'] = this.transCode;
    data['orderId'] = this.orderId;
    data['order'] = this.order ? this.order.toJSON() : <any>undefined;
    data['orderBidId'] = this.orderBidId;
    data['orderBid'] = this.orderBid ? this.orderBid.toJSON() : <any>undefined;
    data['transportState'] = this.transportState;
    data['transportBeginTime'] = this.transportBeginTime
      ? this.transportBeginTime.toISOString()
      : <any>undefined;
    data['transportEndTime'] = this.transportEndTime
      ? this.transportEndTime.toISOString()
      : <any>undefined;
    if (Array.isArray(this.transportInfos)) {
      data['transportInfos'] = [];
      for (let item of this.transportInfos) data['transportInfos'].push(item.toJSON());
    }
    data['tenantId'] = this.tenantId;
    data['tenant'] = this.tenant ? this.tenant.toJSON() : <any>undefined;
    data['isStatemented'] = this.isStatemented;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlTransForm {
    const json = this.toJSON();
    let result = new WlTransForm();
    result.init(json);
    return result;
  }
}

export class WlTransportInfo {
  tenantId!: number;
  transId!: number | undefined;
  trans!: WlTransForm;
  capacityId!: number | undefined;
  capacity!: WlBaseCapacity;
  vehicleId!: number | undefined;
  trailerId!: number | undefined;
  driverId!: number | undefined;
  supercargoId!: number | undefined;
  driver!: WlBaseDriver;
  supercargo!: WlBaseSupercargo;
  trailer!: WlBaseVehicleTrailer;
  vehicle!: WlBaseVehicle;
  transState!: number;
  loadingCheckInTime!: dayjs.Dayjs | undefined;
  loadingCompleteTime!: dayjs.Dayjs | undefined;
  loadingWeight!: number | undefined;
  loadingPics!: string | undefined;
  unLoadingCheckInTime!: dayjs.Dayjs | undefined;
  unLoadingCompleteTime!: dayjs.Dayjs | undefined;
  unLoadingWeight!: number | undefined;
  unLoadingPics!: string | undefined;
  realDistance!: number | undefined;
  realDistancePics!: string | undefined;
  tenant!: Tenant;
  tmsBalanceSenderId!: number | undefined;
  tmsBalanceSender!: Accounts_BalanceSender;
  tmsBalanceReceiverId!: number | undefined;
  tmsBalanceReceiver!: Accounts_BalanceReceiver;
  isHiden!: boolean;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.transId = _data['transId'];
      this.trans = _data['trans'] ? WlTransForm.fromJS(_data['trans'], _mappings) : <any>undefined;
      this.capacityId = _data['capacityId'];
      this.capacity = _data['capacity']
        ? WlBaseCapacity.fromJS(_data['capacity'], _mappings)
        : <any>undefined;
      this.vehicleId = _data['vehicleId'];
      this.trailerId = _data['trailerId'];
      this.driverId = _data['driverId'];
      this.supercargoId = _data['supercargoId'];
      this.driver = _data['driver']
        ? WlBaseDriver.fromJS(_data['driver'], _mappings)
        : <any>undefined;
      this.supercargo = _data['supercargo']
        ? WlBaseSupercargo.fromJS(_data['supercargo'], _mappings)
        : <any>undefined;
      this.trailer = _data['trailer']
        ? WlBaseVehicleTrailer.fromJS(_data['trailer'], _mappings)
        : <any>undefined;
      this.vehicle = _data['vehicle']
        ? WlBaseVehicle.fromJS(_data['vehicle'], _mappings)
        : <any>undefined;
      this.transState = _data['transState'];
      this.loadingCheckInTime = _data['loadingCheckInTime']
        ? dayjs(_data['loadingCheckInTime'].toString())
        : <any>undefined;
      this.loadingCompleteTime = _data['loadingCompleteTime']
        ? dayjs(_data['loadingCompleteTime'].toString())
        : <any>undefined;
      this.loadingWeight = _data['loadingWeight'];
      this.loadingPics = _data['loadingPics'];
      this.unLoadingCheckInTime = _data['unLoadingCheckInTime']
        ? dayjs(_data['unLoadingCheckInTime'].toString())
        : <any>undefined;
      this.unLoadingCompleteTime = _data['unLoadingCompleteTime']
        ? dayjs(_data['unLoadingCompleteTime'].toString())
        : <any>undefined;
      this.unLoadingWeight = _data['unLoadingWeight'];
      this.unLoadingPics = _data['unLoadingPics'];
      this.realDistance = _data['realDistance'];
      this.realDistancePics = _data['realDistancePics'];
      this.tenant = _data['tenant'] ? Tenant.fromJS(_data['tenant'], _mappings) : <any>undefined;
      this.tmsBalanceSenderId = _data['tmsBalanceSenderId'];
      this.tmsBalanceSender = _data['tmsBalanceSender']
        ? Accounts_BalanceSender.fromJS(_data['tmsBalanceSender'], _mappings)
        : <any>undefined;
      this.tmsBalanceReceiverId = _data['tmsBalanceReceiverId'];
      this.tmsBalanceReceiver = _data['tmsBalanceReceiver']
        ? Accounts_BalanceReceiver.fromJS(_data['tmsBalanceReceiver'], _mappings)
        : <any>undefined;
      this.isHiden = _data['isHiden'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlTransportInfo | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlTransportInfo>(data, _mappings, WlTransportInfo);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['transId'] = this.transId;
    data['trans'] = this.trans ? this.trans.toJSON() : <any>undefined;
    data['capacityId'] = this.capacityId;
    data['capacity'] = this.capacity ? this.capacity.toJSON() : <any>undefined;
    data['vehicleId'] = this.vehicleId;
    data['trailerId'] = this.trailerId;
    data['driverId'] = this.driverId;
    data['supercargoId'] = this.supercargoId;
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    data['supercargo'] = this.supercargo ? this.supercargo.toJSON() : <any>undefined;
    data['trailer'] = this.trailer ? this.trailer.toJSON() : <any>undefined;
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    data['transState'] = this.transState;
    data['loadingCheckInTime'] = this.loadingCheckInTime
      ? this.loadingCheckInTime.toISOString()
      : <any>undefined;
    data['loadingCompleteTime'] = this.loadingCompleteTime
      ? this.loadingCompleteTime.toISOString()
      : <any>undefined;
    data['loadingWeight'] = this.loadingWeight;
    data['loadingPics'] = this.loadingPics;
    data['unLoadingCheckInTime'] = this.unLoadingCheckInTime
      ? this.unLoadingCheckInTime.toISOString()
      : <any>undefined;
    data['unLoadingCompleteTime'] = this.unLoadingCompleteTime
      ? this.unLoadingCompleteTime.toISOString()
      : <any>undefined;
    data['unLoadingWeight'] = this.unLoadingWeight;
    data['unLoadingPics'] = this.unLoadingPics;
    data['realDistance'] = this.realDistance;
    data['realDistancePics'] = this.realDistancePics;
    data['tenant'] = this.tenant ? this.tenant.toJSON() : <any>undefined;
    data['tmsBalanceSenderId'] = this.tmsBalanceSenderId;
    data['tmsBalanceSender'] = this.tmsBalanceSender
      ? this.tmsBalanceSender.toJSON()
      : <any>undefined;
    data['tmsBalanceReceiverId'] = this.tmsBalanceReceiverId;
    data['tmsBalanceReceiver'] = this.tmsBalanceReceiver
      ? this.tmsBalanceReceiver.toJSON()
      : <any>undefined;
    data['isHiden'] = this.isHiden;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): WlTransportInfo {
    const json = this.toJSON();
    let result = new WlTransportInfo();
    result.init(json);
    return result;
  }
}

export class Accounts_BalanceReceiver {
  receiverEntname!: string | undefined;
  receiverEntId!: number | undefined;
  accountPaymentId!: number | undefined;
  accountPayment!: Accounts_Payment;
  readonly wlTransportInfos!: WlTransportInfo[] | undefined;
  year!: number;
  month!: number;
  balanceNo!: string | undefined;
  discount!: number | undefined;
  reduction!: number | undefined;
  manageCost!: number | undefined;
  payment!: number | undefined;
  differenceCost!: number | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.receiverEntname = _data['receiverEntname'];
      this.receiverEntId = _data['receiverEntId'];
      this.accountPaymentId = _data['accountPaymentId'];
      this.accountPayment = _data['accountPayment']
        ? Accounts_Payment.fromJS(_data['accountPayment'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['wlTransportInfos'])) {
        (<any>this).wlTransportInfos = [] as any;
        for (let item of _data['wlTransportInfos'])
          (<any>this).wlTransportInfos!.push(WlTransportInfo.fromJS(item, _mappings));
      }
      this.year = _data['year'];
      this.month = _data['month'];
      this.balanceNo = _data['balanceNo'];
      this.discount = _data['discount'];
      this.reduction = _data['reduction'];
      this.manageCost = _data['manageCost'];
      this.payment = _data['payment'];
      this.differenceCost = _data['differenceCost'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_BalanceReceiver | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_BalanceReceiver>(data, _mappings, Accounts_BalanceReceiver);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['receiverEntname'] = this.receiverEntname;
    data['receiverEntId'] = this.receiverEntId;
    data['accountPaymentId'] = this.accountPaymentId;
    data['accountPayment'] = this.accountPayment ? this.accountPayment.toJSON() : <any>undefined;
    if (Array.isArray(this.wlTransportInfos)) {
      data['wlTransportInfos'] = [];
      for (let item of this.wlTransportInfos) data['wlTransportInfos'].push(item.toJSON());
    }
    data['year'] = this.year;
    data['month'] = this.month;
    data['balanceNo'] = this.balanceNo;
    data['discount'] = this.discount;
    data['reduction'] = this.reduction;
    data['manageCost'] = this.manageCost;
    data['payment'] = this.payment;
    data['differenceCost'] = this.differenceCost;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Accounts_BalanceReceiver {
    const json = this.toJSON();
    let result = new Accounts_BalanceReceiver();
    result.init(json);
    return result;
  }
}

export class Accounts_Payment {
  readonly accountsBalanceReceiver!: Accounts_BalanceReceiver[] | undefined;
  readonly paymentCollections!: Accounts_PaymentCollection[] | undefined;
  paymentNo!: string | undefined;
  invoiceUrl!: string | undefined;
  paymentAmount!: number | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['accountsBalanceReceiver'])) {
        (<any>this).accountsBalanceReceiver = [] as any;
        for (let item of _data['accountsBalanceReceiver'])
          (<any>this).accountsBalanceReceiver!.push(
            Accounts_BalanceReceiver.fromJS(item, _mappings),
          );
      }
      if (Array.isArray(_data['paymentCollections'])) {
        (<any>this).paymentCollections = [] as any;
        for (let item of _data['paymentCollections'])
          (<any>this).paymentCollections!.push(Accounts_PaymentCollection.fromJS(item, _mappings));
      }
      this.paymentNo = _data['paymentNo'];
      this.invoiceUrl = _data['invoiceUrl'];
      this.paymentAmount = _data['paymentAmount'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_Payment | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_Payment>(data, _mappings, Accounts_Payment);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.accountsBalanceReceiver)) {
      data['accountsBalanceReceiver'] = [];
      for (let item of this.accountsBalanceReceiver)
        data['accountsBalanceReceiver'].push(item.toJSON());
    }
    if (Array.isArray(this.paymentCollections)) {
      data['paymentCollections'] = [];
      for (let item of this.paymentCollections) data['paymentCollections'].push(item.toJSON());
    }
    data['paymentNo'] = this.paymentNo;
    data['invoiceUrl'] = this.invoiceUrl;
    data['paymentAmount'] = this.paymentAmount;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Accounts_Payment {
    const json = this.toJSON();
    let result = new Accounts_Payment();
    result.init(json);
    return result;
  }
}

export class Accounts_PaymentCollection {
  accountsPaymentId!: number | undefined;
  accountsPayment!: Accounts_Payment;
  paymentAmount!: number | undefined;
  paymentTime!: dayjs.Dayjs | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.accountsPaymentId = _data['accountsPaymentId'];
      this.accountsPayment = _data['accountsPayment']
        ? Accounts_Payment.fromJS(_data['accountsPayment'], _mappings)
        : <any>undefined;
      this.paymentAmount = _data['paymentAmount'];
      this.paymentTime = _data['paymentTime']
        ? dayjs(_data['paymentTime'].toString())
        : <any>undefined;
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_PaymentCollection | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_PaymentCollection>(data, _mappings, Accounts_PaymentCollection);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accountsPaymentId'] = this.accountsPaymentId;
    data['accountsPayment'] = this.accountsPayment ? this.accountsPayment.toJSON() : <any>undefined;
    data['paymentAmount'] = this.paymentAmount;
    data['paymentTime'] = this.paymentTime ? this.paymentTime.toISOString() : <any>undefined;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Accounts_PaymentCollection {
    const json = this.toJSON();
    let result = new Accounts_PaymentCollection();
    result.init(json);
    return result;
  }
}

export class DiffBalanceDetailDto {
  /** 主键 */
  id!: number | undefined;
  /** 运单主键 */
  transId!: number | undefined;
  /** 运力主键 */
  capacityId!: number | undefined;
  /** 车头主键 */
  vehicleId!: number | undefined;
  /** 车挂主键 */
  trailerId!: number | undefined;
  /** 司机主键 */
  driverId!: number | undefined;
  /** 押运主键 */
  supercargoId!: number | undefined;
  /** 整车类型描述 */
  vehicleType!: string | undefined;
  /** 整车类型备注 */
  vehicleRemark!: string | undefined;
  /** 核载能力 */
  loadCapacity!: number | undefined;
  /** 核载能力单位 */
  capacityUnit!: string | undefined;
  /** 状态，0：无状态，1：装货签到，2：装货完成，3：卸货签到，4：卸货完成 */
  transState!: number;
  /** 装货签到时间 */
  loadingCheckInTime!: dayjs.Dayjs | undefined;
  /** 装货完成时间 */
  loadingCompleteTime!: dayjs.Dayjs | undefined;
  /** 装货吨数 */
  loadingWeight!: number | undefined;
  /** 装货现场照片 */
  loadingPics!: string | undefined;
  /** 卸货签到时间 */
  unLoadingCheckInTime!: dayjs.Dayjs | undefined;
  /** 卸货完成时间 */
  unLoadingCompleteTime!: dayjs.Dayjs | undefined;
  /** 卸货吨数 */
  unLoadingWeight!: number | undefined;
  /** 卸货现场照片 */
  unLoadingPics!: string | undefined;
  /** 实际里程数 */
  realDistance!: number | undefined;
  /** 实际里程数照片 */
  realDistancePics!: string | undefined;
  tenantId!: number;
  /** 备注 */
  remark!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 车头车牌号 */
  vehicleNumber!: string | undefined;
  /** 车挂车牌号 */
  vehicleTrailerNumber!: string | undefined;
  /** 司机名称 */
  driverName!: string | undefined;
  /** 押运员名称 */
  supercargoName!: string | undefined;
  /** 企业名称 */
  tenantName!: string | undefined;
  /** 发货企业 */
  senderEntname!: string | undefined;
  /** 卸货企业 */
  receiverEntname!: string | undefined;
  /** 价差 */
  priceDifference!: number | undefined;
  /** 最终显示价格 */
  finalPrice!: number | undefined;
  /** 运输一口价 */
  transportPrice!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.transId = _data['transId'];
      this.capacityId = _data['capacityId'];
      this.vehicleId = _data['vehicleId'];
      this.trailerId = _data['trailerId'];
      this.driverId = _data['driverId'];
      this.supercargoId = _data['supercargoId'];
      this.vehicleType = _data['vehicleType'];
      this.vehicleRemark = _data['vehicleRemark'];
      this.loadCapacity = _data['loadCapacity'];
      this.capacityUnit = _data['capacityUnit'];
      this.transState = _data['transState'];
      this.loadingCheckInTime = _data['loadingCheckInTime']
        ? dayjs(_data['loadingCheckInTime'].toString())
        : <any>undefined;
      this.loadingCompleteTime = _data['loadingCompleteTime']
        ? dayjs(_data['loadingCompleteTime'].toString())
        : <any>undefined;
      this.loadingWeight = _data['loadingWeight'];
      this.loadingPics = _data['loadingPics'];
      this.unLoadingCheckInTime = _data['unLoadingCheckInTime']
        ? dayjs(_data['unLoadingCheckInTime'].toString())
        : <any>undefined;
      this.unLoadingCompleteTime = _data['unLoadingCompleteTime']
        ? dayjs(_data['unLoadingCompleteTime'].toString())
        : <any>undefined;
      this.unLoadingWeight = _data['unLoadingWeight'];
      this.unLoadingPics = _data['unLoadingPics'];
      this.realDistance = _data['realDistance'];
      this.realDistancePics = _data['realDistancePics'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.vehicleNumber = _data['vehicleNumber'];
      this.vehicleTrailerNumber = _data['vehicleTrailerNumber'];
      this.driverName = _data['driverName'];
      this.supercargoName = _data['supercargoName'];
      this.tenantName = _data['tenantName'];
      this.senderEntname = _data['senderEntname'];
      this.receiverEntname = _data['receiverEntname'];
      this.priceDifference = _data['priceDifference'];
      this.finalPrice = _data['finalPrice'];
      this.transportPrice = _data['transportPrice'];
    }
  }

  static fromJS(data: any, _mappings?: any): DiffBalanceDetailDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DiffBalanceDetailDto>(data, _mappings, DiffBalanceDetailDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['transId'] = this.transId;
    data['capacityId'] = this.capacityId;
    data['vehicleId'] = this.vehicleId;
    data['trailerId'] = this.trailerId;
    data['driverId'] = this.driverId;
    data['supercargoId'] = this.supercargoId;
    data['vehicleType'] = this.vehicleType;
    data['vehicleRemark'] = this.vehicleRemark;
    data['loadCapacity'] = this.loadCapacity;
    data['capacityUnit'] = this.capacityUnit;
    data['transState'] = this.transState;
    data['loadingCheckInTime'] = this.loadingCheckInTime
      ? this.loadingCheckInTime.toISOString()
      : <any>undefined;
    data['loadingCompleteTime'] = this.loadingCompleteTime
      ? this.loadingCompleteTime.toISOString()
      : <any>undefined;
    data['loadingWeight'] = this.loadingWeight;
    data['loadingPics'] = this.loadingPics;
    data['unLoadingCheckInTime'] = this.unLoadingCheckInTime
      ? this.unLoadingCheckInTime.toISOString()
      : <any>undefined;
    data['unLoadingCompleteTime'] = this.unLoadingCompleteTime
      ? this.unLoadingCompleteTime.toISOString()
      : <any>undefined;
    data['unLoadingWeight'] = this.unLoadingWeight;
    data['unLoadingPics'] = this.unLoadingPics;
    data['realDistance'] = this.realDistance;
    data['realDistancePics'] = this.realDistancePics;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['vehicleNumber'] = this.vehicleNumber;
    data['vehicleTrailerNumber'] = this.vehicleTrailerNumber;
    data['driverName'] = this.driverName;
    data['supercargoName'] = this.supercargoName;
    data['tenantName'] = this.tenantName;
    data['senderEntname'] = this.senderEntname;
    data['receiverEntname'] = this.receiverEntname;
    data['priceDifference'] = this.priceDifference;
    data['finalPrice'] = this.finalPrice;
    data['transportPrice'] = this.transportPrice;
    return data;
  }

  clone(): DiffBalanceDetailDto {
    const json = this.toJSON();
    let result = new DiffBalanceDetailDto();
    result.init(json);
    return result;
  }
}

/** 发单商对账单（收款） */
export class Accounts_DiffBalanceListDto {
  id!: number | undefined;
  /** 企业名称 */
  entname!: string | undefined;
  /** 企业Id */
  entId!: number | undefined;
  /** 开票id */
  accountsInvoiceId!: number | undefined;
  accountsInvoice!: Accounts_Invoice;
  /** 物流车辆记录 */
  wlTransportInfos!: DiffBalanceDetailDto[] | undefined;
  /** 账单编号 */
  balanceNo!: string | undefined;
  /** 应收费用 */
  receivableCollection!: number | undefined;
  /** 应付费用 */
  payment!: number | undefined;
  /** 差价费用 */
  differenceCost!: number | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.entname = _data['entname'];
      this.entId = _data['entId'];
      this.accountsInvoiceId = _data['accountsInvoiceId'];
      this.accountsInvoice = _data['accountsInvoice']
        ? Accounts_Invoice.fromJS(_data['accountsInvoice'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['wlTransportInfos'])) {
        this.wlTransportInfos = [] as any;
        for (let item of _data['wlTransportInfos'])
          this.wlTransportInfos!.push(DiffBalanceDetailDto.fromJS(item, _mappings));
      }
      this.balanceNo = _data['balanceNo'];
      this.receivableCollection = _data['receivableCollection'];
      this.payment = _data['payment'];
      this.differenceCost = _data['differenceCost'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_DiffBalanceListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_DiffBalanceListDto>(
      data,
      _mappings,
      Accounts_DiffBalanceListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['entname'] = this.entname;
    data['entId'] = this.entId;
    data['accountsInvoiceId'] = this.accountsInvoiceId;
    data['accountsInvoice'] = this.accountsInvoice ? this.accountsInvoice.toJSON() : <any>undefined;
    if (Array.isArray(this.wlTransportInfos)) {
      data['wlTransportInfos'] = [];
      for (let item of this.wlTransportInfos) data['wlTransportInfos'].push(item.toJSON());
    }
    data['balanceNo'] = this.balanceNo;
    data['receivableCollection'] = this.receivableCollection;
    data['payment'] = this.payment;
    data['differenceCost'] = this.differenceCost;
    data['remark'] = this.remark;
    return data;
  }

  clone(): Accounts_DiffBalanceListDto {
    const json = this.toJSON();
    let result = new Accounts_DiffBalanceListDto();
    result.init(json);
    return result;
  }
}

/** 付款 */
export class Accounts_PaymentListDto {
  id!: number | undefined;
  /** 承运商对账单（付款） */
  accountsBalanceReceiverList!: Accounts_DiffBalanceListDto[] | undefined;
  /** 付款记录 */
  paymentCollectionList!: Accounts_PaymentCollection[] | undefined;
  /** 付款编号 */
  paymentNo!: string | undefined;
  /** 收到的发票文件Url */
  invoiceUrl!: string | undefined;
  /** 付款金额 */
  paymentAmount!: number | undefined;
  /** 已付金额 */
  paymentedAmount!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      if (Array.isArray(_data['accountsBalanceReceiverList'])) {
        this.accountsBalanceReceiverList = [] as any;
        for (let item of _data['accountsBalanceReceiverList'])
          this.accountsBalanceReceiverList!.push(
            Accounts_DiffBalanceListDto.fromJS(item, _mappings),
          );
      }
      if (Array.isArray(_data['paymentCollectionList'])) {
        this.paymentCollectionList = [] as any;
        for (let item of _data['paymentCollectionList'])
          this.paymentCollectionList!.push(Accounts_PaymentCollection.fromJS(item, _mappings));
      }
      this.paymentNo = _data['paymentNo'];
      this.invoiceUrl = _data['invoiceUrl'];
      this.paymentAmount = _data['paymentAmount'];
      this.paymentedAmount = _data['paymentedAmount'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_PaymentListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_PaymentListDto>(data, _mappings, Accounts_PaymentListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    if (Array.isArray(this.accountsBalanceReceiverList)) {
      data['accountsBalanceReceiverList'] = [];
      for (let item of this.accountsBalanceReceiverList)
        data['accountsBalanceReceiverList'].push(item.toJSON());
    }
    if (Array.isArray(this.paymentCollectionList)) {
      data['paymentCollectionList'] = [];
      for (let item of this.paymentCollectionList)
        data['paymentCollectionList'].push(item.toJSON());
    }
    data['paymentNo'] = this.paymentNo;
    data['invoiceUrl'] = this.invoiceUrl;
    data['paymentAmount'] = this.paymentAmount;
    data['paymentedAmount'] = this.paymentedAmount;
    return data;
  }

  clone(): Accounts_PaymentListDto {
    const json = this.toJSON();
    let result = new Accounts_PaymentListDto();
    result.init(json);
    return result;
  }
}

/** 待对账记录 */
export class BalanceNeedListDto {
  /** 绑定GPS的车辆Id */
  carId!: number | undefined;
  /** 物流运输Id */
  transportInfoId!: number | undefined;
  /** 运单ID */
  transId!: number | undefined;
  /** 货单ID */
  orderId!: number | undefined;
  /** 运单编号 */
  transCode!: string | undefined;
  /** 发货企业 */
  senderEntname!: string | undefined;
  /** 发货行政区 */
  senderCantonCode!: string | undefined;
  /** 发货地址 */
  senderAddress!: string | undefined;
  /** 发货联系人 */
  senderName!: string | undefined;
  /** 发货联系手机 */
  senderPhone!: string | undefined;
  /** 卸货企业 */
  receiverEntname!: string | undefined;
  /** 卸货行政区 */
  receiverCantonCode!: string | undefined;
  /** 卸货地址 */
  receiverAddress!: string | undefined;
  /** 卸货联系人 */
  receiverName!: string | undefined;
  /** 卸货联系手机 */
  receiverPhone!: string | undefined;
  /** 车头主键 */
  vehicleId!: number | undefined;
  /** 车头号码 */
  vehicleStr!: string | undefined;
  /** 车挂主键 */
  trailerId!: number | undefined;
  /** 车挂号码 */
  trailerStr!: string | undefined;
  /** 司机主键 */
  driverId!: number | undefined;
  /** 司机名称 */
  driverStr!: string | undefined;
  /** 押运主键 */
  supercargoId!: number | undefined;
  /** 押运员名称 */
  supercargoStr!: string | undefined;
  /** 装货时间 */
  shippingTime!: dayjs.Dayjs | undefined;
  /** 卸货完成时间 */
  unLoadingCompleteTime!: dayjs.Dayjs | undefined;
  /** 创建企业名称 */
  tenantEntName!: string | undefined;
  /** 创建企业Id */
  tenantEntId!: number;
  /** 运输公司 */
  transportEntName!: string | undefined;
  /** 运输公司Id */
  transportEntId!: number | undefined;
  /** 计价方式，0：一口价，1：单价 */
  valuationType!: number;
  /** 装货吨数 */
  loadingWeight!: number | undefined;
  /** 单价价格 */
  unitPrice!: number | undefined;
  /** 单价单位 */
  unit!: string | undefined;
  /** 价差 */
  priceDifference!: number | undefined;
  /** 最终显示价格 */
  finalPrice!: number | undefined;
  /** 运输一口价 */
  transportPrice!: number | undefined;
  /** 货单结算方式 */
  accountTypeId!: number | undefined;
  /** 货单结算方式名称 */
  accountTypeName!: string | undefined;
  /** 车辆类型 */
  vehicleTypeId!: number | undefined;
  /** 车辆类型 */
  vehicleType!: string | undefined;
  /** 车辆类型备注 */
  vehicleTypeRemark!: string | undefined;
  senderCantonCodeFullName!: string | undefined;
  receiverCantonCodeFullName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.carId = _data['carId'];
      this.transportInfoId = _data['transportInfoId'];
      this.transId = _data['transId'];
      this.orderId = _data['orderId'];
      this.transCode = _data['transCode'];
      this.senderEntname = _data['senderEntname'];
      this.senderCantonCode = _data['senderCantonCode'];
      this.senderAddress = _data['senderAddress'];
      this.senderName = _data['senderName'];
      this.senderPhone = _data['senderPhone'];
      this.receiverEntname = _data['receiverEntname'];
      this.receiverCantonCode = _data['receiverCantonCode'];
      this.receiverAddress = _data['receiverAddress'];
      this.receiverName = _data['receiverName'];
      this.receiverPhone = _data['receiverPhone'];
      this.vehicleId = _data['vehicleId'];
      this.vehicleStr = _data['vehicleStr'];
      this.trailerId = _data['trailerId'];
      this.trailerStr = _data['trailerStr'];
      this.driverId = _data['driverId'];
      this.driverStr = _data['driverStr'];
      this.supercargoId = _data['supercargoId'];
      this.supercargoStr = _data['supercargoStr'];
      this.shippingTime = _data['shippingTime']
        ? dayjs(_data['shippingTime'].toString())
        : <any>undefined;
      this.unLoadingCompleteTime = _data['unLoadingCompleteTime']
        ? dayjs(_data['unLoadingCompleteTime'].toString())
        : <any>undefined;
      this.tenantEntName = _data['tenantEntName'];
      this.tenantEntId = _data['tenantEntId'];
      this.transportEntName = _data['transportEntName'];
      this.transportEntId = _data['transportEntId'];
      this.valuationType = _data['valuationType'];
      this.loadingWeight = _data['loadingWeight'];
      this.unitPrice = _data['unitPrice'];
      this.unit = _data['unit'];
      this.priceDifference = _data['priceDifference'];
      this.finalPrice = _data['finalPrice'];
      this.transportPrice = _data['transportPrice'];
      this.accountTypeId = _data['accountTypeId'];
      this.accountTypeName = _data['accountTypeName'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleType = _data['vehicleType'];
      this.vehicleTypeRemark = _data['vehicleTypeRemark'];
      this.senderCantonCodeFullName = _data['senderCantonCodeFullName'];
      this.receiverCantonCodeFullName = _data['receiverCantonCodeFullName'];
    }
  }

  static fromJS(data: any, _mappings?: any): BalanceNeedListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<BalanceNeedListDto>(data, _mappings, BalanceNeedListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['carId'] = this.carId;
    data['transportInfoId'] = this.transportInfoId;
    data['transId'] = this.transId;
    data['orderId'] = this.orderId;
    data['transCode'] = this.transCode;
    data['senderEntname'] = this.senderEntname;
    data['senderCantonCode'] = this.senderCantonCode;
    data['senderAddress'] = this.senderAddress;
    data['senderName'] = this.senderName;
    data['senderPhone'] = this.senderPhone;
    data['receiverEntname'] = this.receiverEntname;
    data['receiverCantonCode'] = this.receiverCantonCode;
    data['receiverAddress'] = this.receiverAddress;
    data['receiverName'] = this.receiverName;
    data['receiverPhone'] = this.receiverPhone;
    data['vehicleId'] = this.vehicleId;
    data['vehicleStr'] = this.vehicleStr;
    data['trailerId'] = this.trailerId;
    data['trailerStr'] = this.trailerStr;
    data['driverId'] = this.driverId;
    data['driverStr'] = this.driverStr;
    data['supercargoId'] = this.supercargoId;
    data['supercargoStr'] = this.supercargoStr;
    data['shippingTime'] = this.shippingTime ? this.shippingTime.toISOString() : <any>undefined;
    data['unLoadingCompleteTime'] = this.unLoadingCompleteTime
      ? this.unLoadingCompleteTime.toISOString()
      : <any>undefined;
    data['tenantEntName'] = this.tenantEntName;
    data['tenantEntId'] = this.tenantEntId;
    data['transportEntName'] = this.transportEntName;
    data['transportEntId'] = this.transportEntId;
    data['valuationType'] = this.valuationType;
    data['loadingWeight'] = this.loadingWeight;
    data['unitPrice'] = this.unitPrice;
    data['unit'] = this.unit;
    data['priceDifference'] = this.priceDifference;
    data['finalPrice'] = this.finalPrice;
    data['transportPrice'] = this.transportPrice;
    data['accountTypeId'] = this.accountTypeId;
    data['accountTypeName'] = this.accountTypeName;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleType'] = this.vehicleType;
    data['vehicleTypeRemark'] = this.vehicleTypeRemark;
    data['senderCantonCodeFullName'] = this.senderCantonCodeFullName;
    data['receiverCantonCodeFullName'] = this.receiverCantonCodeFullName;
    return data;
  }

  clone(): BalanceNeedListDto {
    const json = this.toJSON();
    let result = new BalanceNeedListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfBalanceNeedListDto {
  totalCount!: number;
  items!: BalanceNeedListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(BalanceNeedListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfBalanceNeedListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfBalanceNeedListDto>(
      data,
      _mappings,
      PagedResultDtoOfBalanceNeedListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfBalanceNeedListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfBalanceNeedListDto();
    result.init(json);
    return result;
  }
}

/** 对账开票的列表DTO Erinyes.TMS.Accounts_Balance */
export class Accounts_BalanceListDto {
  /** 对账单的Id */
  id!: number | undefined;
  /** 年 */
  year!: number;
  /** 月 */
  month!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 账单编号 */
  balanceNo!: string | undefined;
  /** 折扣 */
  discount!: number | undefined;
  /** 减免 */
  reduction!: number | undefined;
  /** 管理费 */
  manageCost!: number | undefined;
  /** 应收费用 */
  receivableCost!: number | undefined;
  /** 业务总金额 */
  businessTotalCost!: number | undefined;
  /** 核算总金额 */
  balanceTotalCost!: number | undefined;
  /** 核算总数量 */
  balanceTotalCount!: number;
  /** 已完成核算总数量 */
  doneBalanceCount!: number;
  /** 待完成核算总数量 */
  tobeBalanceCount!: number;
  /** 价差 */
  priceDifference!: number | undefined;
  /** 对账单状态  1:待对账 2:对账中 3:待开票（完成对账） 4:已开票 */
  balanceState!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.year = _data['year'];
      this.month = _data['month'];
      this.customerName = _data['customerName'];
      this.customerId = _data['customerId'];
      this.balanceNo = _data['balanceNo'];
      this.discount = _data['discount'];
      this.reduction = _data['reduction'];
      this.manageCost = _data['manageCost'];
      this.receivableCost = _data['receivableCost'];
      this.businessTotalCost = _data['businessTotalCost'];
      this.balanceTotalCost = _data['balanceTotalCost'];
      this.balanceTotalCount = _data['balanceTotalCount'];
      this.doneBalanceCount = _data['doneBalanceCount'];
      this.tobeBalanceCount = _data['tobeBalanceCount'];
      this.priceDifference = _data['priceDifference'];
      this.balanceState = _data['balanceState'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_BalanceListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_BalanceListDto>(data, _mappings, Accounts_BalanceListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['year'] = this.year;
    data['month'] = this.month;
    data['customerName'] = this.customerName;
    data['customerId'] = this.customerId;
    data['balanceNo'] = this.balanceNo;
    data['discount'] = this.discount;
    data['reduction'] = this.reduction;
    data['manageCost'] = this.manageCost;
    data['receivableCost'] = this.receivableCost;
    data['businessTotalCost'] = this.businessTotalCost;
    data['balanceTotalCost'] = this.balanceTotalCost;
    data['balanceTotalCount'] = this.balanceTotalCount;
    data['doneBalanceCount'] = this.doneBalanceCount;
    data['tobeBalanceCount'] = this.tobeBalanceCount;
    data['priceDifference'] = this.priceDifference;
    data['balanceState'] = this.balanceState;
    return data;
  }

  clone(): Accounts_BalanceListDto {
    const json = this.toJSON();
    let result = new Accounts_BalanceListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfAccounts_DiffBalanceListDto {
  totalCount!: number;
  items!: Accounts_DiffBalanceListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Accounts_DiffBalanceListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfAccounts_DiffBalanceListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfAccounts_DiffBalanceListDto>(
      data,
      _mappings,
      PagedResultDtoOfAccounts_DiffBalanceListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfAccounts_DiffBalanceListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfAccounts_DiffBalanceListDto();
    result.init(json);
    return result;
  }
}

export class FileDto {
  fileName!: string | undefined;
  fileType!: string | undefined;
  fileToken!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.fileName = _data['fileName'];
      this.fileType = _data['fileType'];
      this.fileToken = _data['fileToken'];
    }
  }

  static fromJS(data: any, _mappings?: any): FileDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<FileDto>(data, _mappings, FileDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['fileName'] = this.fileName;
    data['fileType'] = this.fileType;
    data['fileToken'] = this.fileToken;
    return data;
  }

  clone(): FileDto {
    const json = this.toJSON();
    let result = new FileDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑对账开票的Dto */
export class GetAccounts_BalanceForEditOutput {
  accounts_Balance!: Accounts_BalanceEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.accounts_Balance = _data['accounts_Balance']
        ? Accounts_BalanceEditDto.fromJS(_data['accounts_Balance'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetAccounts_BalanceForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetAccounts_BalanceForEditOutput>(
      data,
      _mappings,
      GetAccounts_BalanceForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accounts_Balance'] = this.accounts_Balance
      ? this.accounts_Balance.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): GetAccounts_BalanceForEditOutput {
    const json = this.toJSON();
    let result = new GetAccounts_BalanceForEditOutput();
    result.init(json);
    return result;
  }
}

/** 开票的列表DTO Erinyes.TMS.Accounts_Invoice */
export class Accounts_InvoiceEditDto {
  /** 开票的Id */
  id!: number | undefined;
  /** 开票资料id */
  invoiceInformationId!: number | undefined;
  /** 开票编号 */
  invoiceNo!: string | undefined;
  /** 开票时间 */
  invoiceTime!: dayjs.Dayjs | undefined;
  /** 寄出时间 */
  sendTime!: dayjs.Dayjs | undefined;
  /** 快递单号 */
  expressNo!: string | undefined;
  /** 开票金额 */
  invoiceAmount!: number | undefined;
  /** 客户id */
  customerId!: number | undefined;
  /** 对账单列表 */
  accountsBalancesList!: Accounts_BalanceListDto[] | undefined;
  /** 对账单列表 */
  accountsDiffBalanceList!: Accounts_DiffBalanceListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.invoiceInformationId = _data['invoiceInformationId'];
      this.invoiceNo = _data['invoiceNo'];
      this.invoiceTime = _data['invoiceTime']
        ? dayjs(_data['invoiceTime'].toString())
        : <any>undefined;
      this.sendTime = _data['sendTime'] ? dayjs(_data['sendTime'].toString()) : <any>undefined;
      this.expressNo = _data['expressNo'];
      this.invoiceAmount = _data['invoiceAmount'];
      this.customerId = _data['customerId'];
      if (Array.isArray(_data['accountsBalancesList'])) {
        this.accountsBalancesList = [] as any;
        for (let item of _data['accountsBalancesList'])
          this.accountsBalancesList!.push(Accounts_BalanceListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['accountsDiffBalanceList'])) {
        this.accountsDiffBalanceList = [] as any;
        for (let item of _data['accountsDiffBalanceList'])
          this.accountsDiffBalanceList!.push(Accounts_DiffBalanceListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_InvoiceEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_InvoiceEditDto>(data, _mappings, Accounts_InvoiceEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['invoiceInformationId'] = this.invoiceInformationId;
    data['invoiceNo'] = this.invoiceNo;
    data['invoiceTime'] = this.invoiceTime ? this.invoiceTime.toISOString() : <any>undefined;
    data['sendTime'] = this.sendTime ? this.sendTime.toISOString() : <any>undefined;
    data['expressNo'] = this.expressNo;
    data['invoiceAmount'] = this.invoiceAmount;
    data['customerId'] = this.customerId;
    if (Array.isArray(this.accountsBalancesList)) {
      data['accountsBalancesList'] = [];
      for (let item of this.accountsBalancesList) data['accountsBalancesList'].push(item.toJSON());
    }
    if (Array.isArray(this.accountsDiffBalanceList)) {
      data['accountsDiffBalanceList'] = [];
      for (let item of this.accountsDiffBalanceList)
        data['accountsDiffBalanceList'].push(item.toJSON());
    }
    return data;
  }

  clone(): Accounts_InvoiceEditDto {
    const json = this.toJSON();
    let result = new Accounts_InvoiceEditDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfAccounts_BalanceListDto {
  totalCount!: number;
  items!: Accounts_BalanceListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Accounts_BalanceListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfAccounts_BalanceListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfAccounts_BalanceListDto>(
      data,
      _mappings,
      PagedResultDtoOfAccounts_BalanceListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfAccounts_BalanceListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfAccounts_BalanceListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfAccounts_PaymentListDto {
  totalCount!: number;
  items!: Accounts_PaymentListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Accounts_PaymentListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfAccounts_PaymentListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfAccounts_PaymentListDto>(
      data,
      _mappings,
      PagedResultDtoOfAccounts_PaymentListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfAccounts_PaymentListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfAccounts_PaymentListDto();
    result.init(json);
    return result;
  }
}

/** 已完成、和开过票的对账单列表DTO Erinyes.TMS.Accounts_Balance */
export class Accounts_DoneBalanceListDto {
  /** 对账单的Id */
  id!: number | undefined;
  /** 年 */
  year!: number;
  /** 月 */
  month!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 账单编号 */
  balanceNo!: string | undefined;
  /** 折扣 */
  discount!: number | undefined;
  /** 减免 */
  reduction!: number | undefined;
  /** 管理费 */
  manageCost!: number | undefined;
  /** 应收费用 */
  receivableCost!: number | undefined;
  /** 开票id */
  accountsInvoiceId!: number | undefined;
  /** 开票编号 */
  invoiceNo!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.year = _data['year'];
      this.month = _data['month'];
      this.customerName = _data['customerName'];
      this.customerId = _data['customerId'];
      this.balanceNo = _data['balanceNo'];
      this.discount = _data['discount'];
      this.reduction = _data['reduction'];
      this.manageCost = _data['manageCost'];
      this.receivableCost = _data['receivableCost'];
      this.accountsInvoiceId = _data['accountsInvoiceId'];
      this.invoiceNo = _data['invoiceNo'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_DoneBalanceListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_DoneBalanceListDto>(
      data,
      _mappings,
      Accounts_DoneBalanceListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['year'] = this.year;
    data['month'] = this.month;
    data['customerName'] = this.customerName;
    data['customerId'] = this.customerId;
    data['balanceNo'] = this.balanceNo;
    data['discount'] = this.discount;
    data['reduction'] = this.reduction;
    data['manageCost'] = this.manageCost;
    data['receivableCost'] = this.receivableCost;
    data['accountsInvoiceId'] = this.accountsInvoiceId;
    data['invoiceNo'] = this.invoiceNo;
    return data;
  }

  clone(): Accounts_DoneBalanceListDto {
    const json = this.toJSON();
    let result = new Accounts_DoneBalanceListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfAccounts_DoneBalanceListDto {
  totalCount!: number;
  items!: Accounts_DoneBalanceListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Accounts_DoneBalanceListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfAccounts_DoneBalanceListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfAccounts_DoneBalanceListDto>(
      data,
      _mappings,
      PagedResultDtoOfAccounts_DoneBalanceListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfAccounts_DoneBalanceListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfAccounts_DoneBalanceListDto();
    result.init(json);
    return result;
  }
}

/** 开票资料的列表DTO Erinyes.TMS.Accounts_InvoiceInformation */
export class Accounts_InvoiceInformationEditDto {
  /** Id */
  id!: number | undefined;
  /** CustomerId */
  customerId!: number | undefined;
  /** 公司名称 */
  entName!: string | undefined;
  /** 纳税人识别号 */
  taxNumber!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 电话 */
  phoneNo!: string | undefined;
  /** 开户行 */
  bankName!: string | undefined;
  /** 账号 */
  accountNumber!: string | undefined;
  /** 附件 */
  ossFileNames!: string | undefined;
  /** 账期（天） */
  accountPeriod!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerId = _data['customerId'];
      this.entName = _data['entName'];
      this.taxNumber = _data['taxNumber'];
      this.address = _data['address'];
      this.phoneNo = _data['phoneNo'];
      this.bankName = _data['bankName'];
      this.accountNumber = _data['accountNumber'];
      this.ossFileNames = _data['ossFileNames'];
      this.accountPeriod = _data['accountPeriod'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_InvoiceInformationEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_InvoiceInformationEditDto>(
      data,
      _mappings,
      Accounts_InvoiceInformationEditDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerId'] = this.customerId;
    data['entName'] = this.entName;
    data['taxNumber'] = this.taxNumber;
    data['address'] = this.address;
    data['phoneNo'] = this.phoneNo;
    data['bankName'] = this.bankName;
    data['accountNumber'] = this.accountNumber;
    data['ossFileNames'] = this.ossFileNames;
    data['accountPeriod'] = this.accountPeriod;
    return data;
  }

  clone(): Accounts_InvoiceInformationEditDto {
    const json = this.toJSON();
    let result = new Accounts_InvoiceInformationEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateAccounts_InvoiceInformationInput {
  accounts_InvoiceInformation!: Accounts_InvoiceInformationEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.accounts_InvoiceInformation = _data['accounts_InvoiceInformation']
        ? Accounts_InvoiceInformationEditDto.fromJS(_data['accounts_InvoiceInformation'], _mappings)
        : new Accounts_InvoiceInformationEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateAccounts_InvoiceInformationInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateAccounts_InvoiceInformationInput>(
      data,
      _mappings,
      CreateOrUpdateAccounts_InvoiceInformationInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accounts_InvoiceInformation'] = this.accounts_InvoiceInformation
      ? this.accounts_InvoiceInformation.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateAccounts_InvoiceInformationInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateAccounts_InvoiceInformationInput();
    result.init(json);
    return result;
  }
}

/** 开票资料的列表DTO Erinyes.TMS.Accounts_InvoiceInformation */
export class Accounts_InvoiceInformationListDto {
  id!: number;
  /** CustomerId */
  customerId!: number | undefined;
  /** 所属客户名称 */
  customerName!: string | undefined;
  /** 公司名称 */
  entName!: string | undefined;
  /** 纳税人识别号 */
  taxNumber!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 电话 */
  phoneNo!: string | undefined;
  /** 开户行 */
  bankName!: string | undefined;
  /** 账号 */
  accountNumber!: string | undefined;
  /** 附件 */
  ossFileNames!: string | undefined;
  /** 账期（天） */
  accountPeriod!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerId = _data['customerId'];
      this.customerName = _data['customerName'];
      this.entName = _data['entName'];
      this.taxNumber = _data['taxNumber'];
      this.address = _data['address'];
      this.phoneNo = _data['phoneNo'];
      this.bankName = _data['bankName'];
      this.accountNumber = _data['accountNumber'];
      this.ossFileNames = _data['ossFileNames'];
      this.accountPeriod = _data['accountPeriod'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_InvoiceInformationListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_InvoiceInformationListDto>(
      data,
      _mappings,
      Accounts_InvoiceInformationListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerId'] = this.customerId;
    data['customerName'] = this.customerName;
    data['entName'] = this.entName;
    data['taxNumber'] = this.taxNumber;
    data['address'] = this.address;
    data['phoneNo'] = this.phoneNo;
    data['bankName'] = this.bankName;
    data['accountNumber'] = this.accountNumber;
    data['ossFileNames'] = this.ossFileNames;
    data['accountPeriod'] = this.accountPeriod;
    return data;
  }

  clone(): Accounts_InvoiceInformationListDto {
    const json = this.toJSON();
    let result = new Accounts_InvoiceInformationListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑开票资料的Dto */
export class GetAccounts_InvoiceInformationForEditOutput {
  accounts_InvoiceInformation!: Accounts_InvoiceInformationEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.accounts_InvoiceInformation = _data['accounts_InvoiceInformation']
        ? Accounts_InvoiceInformationEditDto.fromJS(_data['accounts_InvoiceInformation'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetAccounts_InvoiceInformationForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetAccounts_InvoiceInformationForEditOutput>(
      data,
      _mappings,
      GetAccounts_InvoiceInformationForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accounts_InvoiceInformation'] = this.accounts_InvoiceInformation
      ? this.accounts_InvoiceInformation.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): GetAccounts_InvoiceInformationForEditOutput {
    const json = this.toJSON();
    let result = new GetAccounts_InvoiceInformationForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfAccounts_InvoiceInformationListDto {
  totalCount!: number;
  items!: Accounts_InvoiceInformationListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Accounts_InvoiceInformationListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(
    data: any,
    _mappings?: any,
  ): PagedResultDtoOfAccounts_InvoiceInformationListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfAccounts_InvoiceInformationListDto>(
      data,
      _mappings,
      PagedResultDtoOfAccounts_InvoiceInformationListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfAccounts_InvoiceInformationListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfAccounts_InvoiceInformationListDto();
    result.init(json);
    return result;
  }
}

/** 的列表DTO Erinyes.TMS.Accounts_ReceivableCollection */
export class Accounts_ReceivableCollectionEditDto {
  /** Id */
  id!: number | undefined;
  /** 开票id */
  accountsInvoiceId!: number | undefined;
  /** 收款金额 */
  receivableAmount!: number | undefined;
  /** 收款时间 */
  receivableTime!: dayjs.Dayjs | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.accountsInvoiceId = _data['accountsInvoiceId'];
      this.receivableAmount = _data['receivableAmount'];
      this.receivableTime = _data['receivableTime']
        ? dayjs(_data['receivableTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_ReceivableCollectionEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_ReceivableCollectionEditDto>(
      data,
      _mappings,
      Accounts_ReceivableCollectionEditDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['accountsInvoiceId'] = this.accountsInvoiceId;
    data['receivableAmount'] = this.receivableAmount;
    data['receivableTime'] = this.receivableTime
      ? this.receivableTime.toISOString()
      : <any>undefined;
    return data;
  }

  clone(): Accounts_ReceivableCollectionEditDto {
    const json = this.toJSON();
    let result = new Accounts_ReceivableCollectionEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateAccounts_ReceivableCollectionInput {
  accounts_PaymentCollection!: Accounts_ReceivableCollectionEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.accounts_PaymentCollection = _data['accounts_PaymentCollection']
        ? Accounts_ReceivableCollectionEditDto.fromJS(
            _data['accounts_PaymentCollection'],
            _mappings,
          )
        : new Accounts_ReceivableCollectionEditDto();
    }
  }

  static fromJS(
    data: any,
    _mappings?: any,
  ): CreateOrUpdateAccounts_ReceivableCollectionInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateAccounts_ReceivableCollectionInput>(
      data,
      _mappings,
      CreateOrUpdateAccounts_ReceivableCollectionInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accounts_PaymentCollection'] = this.accounts_PaymentCollection
      ? this.accounts_PaymentCollection.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateAccounts_ReceivableCollectionInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateAccounts_ReceivableCollectionInput();
    result.init(json);
    return result;
  }
}

/** 的列表DTO Erinyes.TMS.Accounts_PaymentCollection */
export class Accounts_ReceivableCollectionListDto {
  /** 开票id */
  accountsInvoiceId!: number | undefined;
  accountsInvoice!: Accounts_Invoice;
  /** PaymentAmount */
  paymentAmount!: number | undefined;
  /** PaymentTime */
  paymentTime!: dayjs.Dayjs | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.accountsInvoiceId = _data['accountsInvoiceId'];
      this.accountsInvoice = _data['accountsInvoice']
        ? Accounts_Invoice.fromJS(_data['accountsInvoice'], _mappings)
        : <any>undefined;
      this.paymentAmount = _data['paymentAmount'];
      this.paymentTime = _data['paymentTime']
        ? dayjs(_data['paymentTime'].toString())
        : <any>undefined;
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_ReceivableCollectionListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_ReceivableCollectionListDto>(
      data,
      _mappings,
      Accounts_ReceivableCollectionListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accountsInvoiceId'] = this.accountsInvoiceId;
    data['accountsInvoice'] = this.accountsInvoice ? this.accountsInvoice.toJSON() : <any>undefined;
    data['paymentAmount'] = this.paymentAmount;
    data['paymentTime'] = this.paymentTime ? this.paymentTime.toISOString() : <any>undefined;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Accounts_ReceivableCollectionListDto {
    const json = this.toJSON();
    let result = new Accounts_ReceivableCollectionListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑的Dto */
export class GetAccounts_ReceivableCollectionForEditOutput {
  accounts_PaymentCollection!: Accounts_ReceivableCollectionEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.accounts_PaymentCollection = _data['accounts_PaymentCollection']
        ? Accounts_ReceivableCollectionEditDto.fromJS(
            _data['accounts_PaymentCollection'],
            _mappings,
          )
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetAccounts_ReceivableCollectionForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetAccounts_ReceivableCollectionForEditOutput>(
      data,
      _mappings,
      GetAccounts_ReceivableCollectionForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accounts_PaymentCollection'] = this.accounts_PaymentCollection
      ? this.accounts_PaymentCollection.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): GetAccounts_ReceivableCollectionForEditOutput {
    const json = this.toJSON();
    let result = new GetAccounts_ReceivableCollectionForEditOutput();
    result.init(json);
    return result;
  }
}

/** 开票的列表DTO Erinyes.TMS.Accounts_Invoice */
export class Accounts_InvoiceListDto {
  /** 开票的Id */
  id!: number | undefined;
  /** 开票资料id */
  invoiceInformationId!: number | undefined;
  /** 开票编号 */
  invoiceNo!: string | undefined;
  /** 开票时间 */
  invoiceTime!: dayjs.Dayjs | undefined;
  /** 寄出时间 */
  sendTime!: dayjs.Dayjs | undefined;
  /** 快递单号 */
  expressNo!: string | undefined;
  /** 开票金额 */
  invoiceAmount!: number | undefined;
  /** 收款金额 */
  invoicedAmount!: number | undefined;
  /** 剩余账期（天） */
  syAccountPeriod!: number;
  /** 对账单列表 */
  accountsBalancesList!: Accounts_BalanceListDto[] | undefined;
  /** 回款列表 */
  accountsPaymentCollectionList!: Accounts_ReceivableCollectionListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.invoiceInformationId = _data['invoiceInformationId'];
      this.invoiceNo = _data['invoiceNo'];
      this.invoiceTime = _data['invoiceTime']
        ? dayjs(_data['invoiceTime'].toString())
        : <any>undefined;
      this.sendTime = _data['sendTime'] ? dayjs(_data['sendTime'].toString()) : <any>undefined;
      this.expressNo = _data['expressNo'];
      this.invoiceAmount = _data['invoiceAmount'];
      this.invoicedAmount = _data['invoicedAmount'];
      this.syAccountPeriod = _data['syAccountPeriod'];
      if (Array.isArray(_data['accountsBalancesList'])) {
        this.accountsBalancesList = [] as any;
        for (let item of _data['accountsBalancesList'])
          this.accountsBalancesList!.push(Accounts_BalanceListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['accountsPaymentCollectionList'])) {
        this.accountsPaymentCollectionList = [] as any;
        for (let item of _data['accountsPaymentCollectionList'])
          this.accountsPaymentCollectionList!.push(
            Accounts_ReceivableCollectionListDto.fromJS(item, _mappings),
          );
      }
    }
  }

  static fromJS(data: any, _mappings?: any): Accounts_InvoiceListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Accounts_InvoiceListDto>(data, _mappings, Accounts_InvoiceListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['invoiceInformationId'] = this.invoiceInformationId;
    data['invoiceNo'] = this.invoiceNo;
    data['invoiceTime'] = this.invoiceTime ? this.invoiceTime.toISOString() : <any>undefined;
    data['sendTime'] = this.sendTime ? this.sendTime.toISOString() : <any>undefined;
    data['expressNo'] = this.expressNo;
    data['invoiceAmount'] = this.invoiceAmount;
    data['invoicedAmount'] = this.invoicedAmount;
    data['syAccountPeriod'] = this.syAccountPeriod;
    if (Array.isArray(this.accountsBalancesList)) {
      data['accountsBalancesList'] = [];
      for (let item of this.accountsBalancesList) data['accountsBalancesList'].push(item.toJSON());
    }
    if (Array.isArray(this.accountsPaymentCollectionList)) {
      data['accountsPaymentCollectionList'] = [];
      for (let item of this.accountsPaymentCollectionList)
        data['accountsPaymentCollectionList'].push(item.toJSON());
    }
    return data;
  }

  clone(): Accounts_InvoiceListDto {
    const json = this.toJSON();
    let result = new Accounts_InvoiceListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfAccounts_InvoiceListDto {
  totalCount!: number;
  items!: Accounts_InvoiceListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Accounts_InvoiceListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfAccounts_InvoiceListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfAccounts_InvoiceListDto>(
      data,
      _mappings,
      PagedResultDtoOfAccounts_InvoiceListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfAccounts_InvoiceListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfAccounts_InvoiceListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfAccounts_ReceivableCollectionListDto {
  totalCount!: number;
  items!: Accounts_ReceivableCollectionListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Accounts_ReceivableCollectionListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(
    data: any,
    _mappings?: any,
  ): PagedResultDtoOfAccounts_ReceivableCollectionListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfAccounts_ReceivableCollectionListDto>(
      data,
      _mappings,
      PagedResultDtoOfAccounts_ReceivableCollectionListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfAccounts_ReceivableCollectionListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfAccounts_ReceivableCollectionListDto();
    result.init(json);
    return result;
  }
}

export class AddressProvincetDto {
  code!: string | undefined;
  name!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.code = _data['code'];
      this.name = _data['name'];
    }
  }

  static fromJS(data: any, _mappings?: any): AddressProvincetDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AddressProvincetDto>(data, _mappings, AddressProvincetDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['code'] = this.code;
    data['name'] = this.name;
    return data;
  }

  clone(): AddressProvincetDto {
    const json = this.toJSON();
    let result = new AddressProvincetDto();
    result.init(json);
    return result;
  }
}

export class AddressCityDto {
  provinceCode!: string | undefined;
  code!: string | undefined;
  name!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.provinceCode = _data['provinceCode'];
      this.code = _data['code'];
      this.name = _data['name'];
    }
  }

  static fromJS(data: any, _mappings?: any): AddressCityDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AddressCityDto>(data, _mappings, AddressCityDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['provinceCode'] = this.provinceCode;
    data['code'] = this.code;
    data['name'] = this.name;
    return data;
  }

  clone(): AddressCityDto {
    const json = this.toJSON();
    let result = new AddressCityDto();
    result.init(json);
    return result;
  }
}

export class AddressAreaDto {
  cityCode!: string | undefined;
  provinceCode!: string | undefined;
  code!: string | undefined;
  name!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.cityCode = _data['cityCode'];
      this.provinceCode = _data['provinceCode'];
      this.code = _data['code'];
      this.name = _data['name'];
    }
  }

  static fromJS(data: any, _mappings?: any): AddressAreaDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AddressAreaDto>(data, _mappings, AddressAreaDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['cityCode'] = this.cityCode;
    data['provinceCode'] = this.provinceCode;
    data['code'] = this.code;
    data['name'] = this.name;
    return data;
  }

  clone(): AddressAreaDto {
    const json = this.toJSON();
    let result = new AddressAreaDto();
    result.init(json);
    return result;
  }
}

export class AddressStreetDto {
  areaCode!: string | undefined;
  cityCode!: string | undefined;
  provinceCode!: string | undefined;
  code!: string | undefined;
  name!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.areaCode = _data['areaCode'];
      this.cityCode = _data['cityCode'];
      this.provinceCode = _data['provinceCode'];
      this.code = _data['code'];
      this.name = _data['name'];
    }
  }

  static fromJS(data: any, _mappings?: any): AddressStreetDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AddressStreetDto>(data, _mappings, AddressStreetDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['areaCode'] = this.areaCode;
    data['cityCode'] = this.cityCode;
    data['provinceCode'] = this.provinceCode;
    data['code'] = this.code;
    data['name'] = this.name;
    return data;
  }

  clone(): AddressStreetDto {
    const json = this.toJSON();
    let result = new AddressStreetDto();
    result.init(json);
    return result;
  }
}

/** 所有联动数据 */
export class AllAddressLinkage {
  /** 省 */
  provinces!: AddressProvincetDto[] | undefined;
  /** 市 */
  citys!: AddressCityDto[] | undefined;
  /** 县 */
  areas!: AddressAreaDto[] | undefined;
  /** 镇 */
  streets!: AddressStreetDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['provinces'])) {
        this.provinces = [] as any;
        for (let item of _data['provinces'])
          this.provinces!.push(AddressProvincetDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['citys'])) {
        this.citys = [] as any;
        for (let item of _data['citys']) this.citys!.push(AddressCityDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['areas'])) {
        this.areas = [] as any;
        for (let item of _data['areas']) this.areas!.push(AddressAreaDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['streets'])) {
        this.streets = [] as any;
        for (let item of _data['streets'])
          this.streets!.push(AddressStreetDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): AllAddressLinkage | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AllAddressLinkage>(data, _mappings, AllAddressLinkage);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.provinces)) {
      data['provinces'] = [];
      for (let item of this.provinces) data['provinces'].push(item.toJSON());
    }
    if (Array.isArray(this.citys)) {
      data['citys'] = [];
      for (let item of this.citys) data['citys'].push(item.toJSON());
    }
    if (Array.isArray(this.areas)) {
      data['areas'] = [];
      for (let item of this.areas) data['areas'].push(item.toJSON());
    }
    if (Array.isArray(this.streets)) {
      data['streets'] = [];
      for (let item of this.streets) data['streets'].push(item.toJSON());
    }
    return data;
  }

  clone(): AllAddressLinkage {
    const json = this.toJSON();
    let result = new AllAddressLinkage();
    result.init(json);
    return result;
  }
}

export class GetByCodeOutput {
  provinceName!: string | undefined;
  cityName!: string | undefined;
  areaName!: string | undefined;
  streetName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.provinceName = _data['provinceName'];
      this.cityName = _data['cityName'];
      this.areaName = _data['areaName'];
      this.streetName = _data['streetName'];
    }
  }

  static fromJS(data: any, _mappings?: any): GetByCodeOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetByCodeOutput>(data, _mappings, GetByCodeOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['provinceName'] = this.provinceName;
    data['cityName'] = this.cityName;
    data['areaName'] = this.areaName;
    data['streetName'] = this.streetName;
    return data;
  }

  clone(): GetByCodeOutput {
    const json = this.toJSON();
    let result = new GetByCodeOutput();
    result.init(json);
    return result;
  }
}

export enum AddressEnum {
  Provinces = 'Provinces',
  Cities = 'Cities',
  Areas = 'Areas',
  Streets = 'Streets',
}

export class App_Enquiry_Waste {
  enquiryId!: number | undefined;
  enquiry!: App_Enquiry;
  wasteCode!: string | undefined;
  commonName!: string | undefined;
  yearlyOutput!: number | undefined;
  needTransfer!: number | undefined;
  unit!: string | undefined;
  packagings!: string | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enquiryId = _data['enquiryId'];
      this.enquiry = _data['enquiry']
        ? App_Enquiry.fromJS(_data['enquiry'], _mappings)
        : <any>undefined;
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.needTransfer = _data['needTransfer'];
      this.unit = _data['unit'];
      this.packagings = _data['packagings'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Enquiry_Waste | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Enquiry_Waste>(data, _mappings, App_Enquiry_Waste);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enquiryId'] = this.enquiryId;
    data['enquiry'] = this.enquiry ? this.enquiry.toJSON() : <any>undefined;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['needTransfer'] = this.needTransfer;
    data['unit'] = this.unit;
    data['packagings'] = this.packagings;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): App_Enquiry_Waste {
    const json = this.toJSON();
    let result = new App_Enquiry_Waste();
    result.init(json);
    return result;
  }
}

export class App_Sample_Waste {
  sampleId!: number | undefined;
  sample!: App_Sample;
  wasteCode!: string | undefined;
  commonName!: string | undefined;
  attachment!: string | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.sampleId = _data['sampleId'];
      this.sample = _data['sample']
        ? App_Sample.fromJS(_data['sample'], _mappings)
        : <any>undefined;
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.attachment = _data['attachment'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Sample_Waste | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Sample_Waste>(data, _mappings, App_Sample_Waste);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['sampleId'] = this.sampleId;
    data['sample'] = this.sample ? this.sample.toJSON() : <any>undefined;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['attachment'] = this.attachment;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): App_Sample_Waste {
    const json = this.toJSON();
    let result = new App_Sample_Waste();
    result.init(json);
    return result;
  }
}

export class App_Sample {
  readonly appSampleWastes!: App_Sample_Waste[] | undefined;
  enquiryId!: number | undefined;
  enquiry!: App_Enquiry;
  linkName!: string | undefined;
  linkPhone!: string | undefined;
  linkAddress!: string | undefined;
  sysUserId!: number | undefined;
  sysUser!: User;
  sampleTime!: dayjs.Dayjs | undefined;
  expressNo!: string | undefined;
  sampleState!: number | undefined;
  disposalEntId!: number | undefined;
  disposalEnt!: Enterprise_Async;
  attachment!: string | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['appSampleWastes'])) {
        (<any>this).appSampleWastes = [] as any;
        for (let item of _data['appSampleWastes'])
          (<any>this).appSampleWastes!.push(App_Sample_Waste.fromJS(item, _mappings));
      }
      this.enquiryId = _data['enquiryId'];
      this.enquiry = _data['enquiry']
        ? App_Enquiry.fromJS(_data['enquiry'], _mappings)
        : <any>undefined;
      this.linkName = _data['linkName'];
      this.linkPhone = _data['linkPhone'];
      this.linkAddress = _data['linkAddress'];
      this.sysUserId = _data['sysUserId'];
      this.sysUser = _data['sysUser'] ? User.fromJS(_data['sysUser'], _mappings) : <any>undefined;
      this.sampleTime = _data['sampleTime']
        ? dayjs(_data['sampleTime'].toString())
        : <any>undefined;
      this.expressNo = _data['expressNo'];
      this.sampleState = _data['sampleState'];
      this.disposalEntId = _data['disposalEntId'];
      this.disposalEnt = _data['disposalEnt']
        ? Enterprise_Async.fromJS(_data['disposalEnt'], _mappings)
        : <any>undefined;
      this.attachment = _data['attachment'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Sample | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Sample>(data, _mappings, App_Sample);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.appSampleWastes)) {
      data['appSampleWastes'] = [];
      for (let item of this.appSampleWastes) data['appSampleWastes'].push(item.toJSON());
    }
    data['enquiryId'] = this.enquiryId;
    data['enquiry'] = this.enquiry ? this.enquiry.toJSON() : <any>undefined;
    data['linkName'] = this.linkName;
    data['linkPhone'] = this.linkPhone;
    data['linkAddress'] = this.linkAddress;
    data['sysUserId'] = this.sysUserId;
    data['sysUser'] = this.sysUser ? this.sysUser.toJSON() : <any>undefined;
    data['sampleTime'] = this.sampleTime ? this.sampleTime.toISOString() : <any>undefined;
    data['expressNo'] = this.expressNo;
    data['sampleState'] = this.sampleState;
    data['disposalEntId'] = this.disposalEntId;
    data['disposalEnt'] = this.disposalEnt ? this.disposalEnt.toJSON() : <any>undefined;
    data['attachment'] = this.attachment;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): App_Sample {
    const json = this.toJSON();
    let result = new App_Sample();
    result.init(json);
    return result;
  }
}

export class App_Enquiry_Push {
  enquiryId!: number | undefined;
  enquiry!: App_Enquiry;
  wasteId!: number | undefined;
  waste!: App_Enquiry_Waste;
  pushTime!: dayjs.Dayjs | undefined;
  disposalEntId!: number | undefined;
  isRead!: boolean;
  readTime!: dayjs.Dayjs | undefined;
  readUserId!: number | undefined;
  disposalEnt!: Enterprise_Async;
  isContacted!: boolean;
  contactTime!: dayjs.Dayjs | undefined;
  contactMemo!: string | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enquiryId = _data['enquiryId'];
      this.enquiry = _data['enquiry']
        ? App_Enquiry.fromJS(_data['enquiry'], _mappings)
        : <any>undefined;
      this.wasteId = _data['wasteId'];
      this.waste = _data['waste']
        ? App_Enquiry_Waste.fromJS(_data['waste'], _mappings)
        : <any>undefined;
      this.pushTime = _data['pushTime'] ? dayjs(_data['pushTime'].toString()) : <any>undefined;
      this.disposalEntId = _data['disposalEntId'];
      this.isRead = _data['isRead'];
      this.readTime = _data['readTime'] ? dayjs(_data['readTime'].toString()) : <any>undefined;
      this.readUserId = _data['readUserId'];
      this.disposalEnt = _data['disposalEnt']
        ? Enterprise_Async.fromJS(_data['disposalEnt'], _mappings)
        : <any>undefined;
      this.isContacted = _data['isContacted'];
      this.contactTime = _data['contactTime']
        ? dayjs(_data['contactTime'].toString())
        : <any>undefined;
      this.contactMemo = _data['contactMemo'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Enquiry_Push | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Enquiry_Push>(data, _mappings, App_Enquiry_Push);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enquiryId'] = this.enquiryId;
    data['enquiry'] = this.enquiry ? this.enquiry.toJSON() : <any>undefined;
    data['wasteId'] = this.wasteId;
    data['waste'] = this.waste ? this.waste.toJSON() : <any>undefined;
    data['pushTime'] = this.pushTime ? this.pushTime.toISOString() : <any>undefined;
    data['disposalEntId'] = this.disposalEntId;
    data['isRead'] = this.isRead;
    data['readTime'] = this.readTime ? this.readTime.toISOString() : <any>undefined;
    data['readUserId'] = this.readUserId;
    data['disposalEnt'] = this.disposalEnt ? this.disposalEnt.toJSON() : <any>undefined;
    data['isContacted'] = this.isContacted;
    data['contactTime'] = this.contactTime ? this.contactTime.toISOString() : <any>undefined;
    data['contactMemo'] = this.contactMemo;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): App_Enquiry_Push {
    const json = this.toJSON();
    let result = new App_Enquiry_Push();
    result.init(json);
    return result;
  }
}

export class App_Enquiry {
  readonly appEnquiryWastes!: App_Enquiry_Waste[] | undefined;
  readonly appSamples!: App_Sample[] | undefined;
  readonly appOffers!: App_Offer[] | undefined;
  readonly appEnquiryPushs!: App_Enquiry_Push[] | undefined;
  cantonCode!: string | undefined;
  posX!: number | undefined;
  posY!: number | undefined;
  industryCode!: string | undefined;
  duty!: string | undefined;
  address!: string | undefined;
  produceEntId!: number | undefined;
  produceEnt!: Enterprise_Async;
  entName!: string | undefined;
  linkName!: string | undefined;
  linkPhone!: string | undefined;
  sysUserId!: number | undefined;
  sysUser!: User;
  enquiryTitle!: string | undefined;
  enquiryContent!: string | undefined;
  enquiryTime!: dayjs.Dayjs | undefined;
  enquiryState!: number | undefined;
  reason!: string | undefined;
  attachment!: string | undefined;
  wastePicture!: string | undefined;
  processDrawing!: string | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['appEnquiryWastes'])) {
        (<any>this).appEnquiryWastes = [] as any;
        for (let item of _data['appEnquiryWastes'])
          (<any>this).appEnquiryWastes!.push(App_Enquiry_Waste.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['appSamples'])) {
        (<any>this).appSamples = [] as any;
        for (let item of _data['appSamples'])
          (<any>this).appSamples!.push(App_Sample.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['appOffers'])) {
        (<any>this).appOffers = [] as any;
        for (let item of _data['appOffers'])
          (<any>this).appOffers!.push(App_Offer.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['appEnquiryPushs'])) {
        (<any>this).appEnquiryPushs = [] as any;
        for (let item of _data['appEnquiryPushs'])
          (<any>this).appEnquiryPushs!.push(App_Enquiry_Push.fromJS(item, _mappings));
      }
      this.cantonCode = _data['cantonCode'];
      this.posX = _data['posX'];
      this.posY = _data['posY'];
      this.industryCode = _data['industryCode'];
      this.duty = _data['duty'];
      this.address = _data['address'];
      this.produceEntId = _data['produceEntId'];
      this.produceEnt = _data['produceEnt']
        ? Enterprise_Async.fromJS(_data['produceEnt'], _mappings)
        : <any>undefined;
      this.entName = _data['entName'];
      this.linkName = _data['linkName'];
      this.linkPhone = _data['linkPhone'];
      this.sysUserId = _data['sysUserId'];
      this.sysUser = _data['sysUser'] ? User.fromJS(_data['sysUser'], _mappings) : <any>undefined;
      this.enquiryTitle = _data['enquiryTitle'];
      this.enquiryContent = _data['enquiryContent'];
      this.enquiryTime = _data['enquiryTime']
        ? dayjs(_data['enquiryTime'].toString())
        : <any>undefined;
      this.enquiryState = _data['enquiryState'];
      this.reason = _data['reason'];
      this.attachment = _data['attachment'];
      this.wastePicture = _data['wastePicture'];
      this.processDrawing = _data['processDrawing'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Enquiry | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Enquiry>(data, _mappings, App_Enquiry);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.appEnquiryWastes)) {
      data['appEnquiryWastes'] = [];
      for (let item of this.appEnquiryWastes) data['appEnquiryWastes'].push(item.toJSON());
    }
    if (Array.isArray(this.appSamples)) {
      data['appSamples'] = [];
      for (let item of this.appSamples) data['appSamples'].push(item.toJSON());
    }
    if (Array.isArray(this.appOffers)) {
      data['appOffers'] = [];
      for (let item of this.appOffers) data['appOffers'].push(item.toJSON());
    }
    if (Array.isArray(this.appEnquiryPushs)) {
      data['appEnquiryPushs'] = [];
      for (let item of this.appEnquiryPushs) data['appEnquiryPushs'].push(item.toJSON());
    }
    data['cantonCode'] = this.cantonCode;
    data['posX'] = this.posX;
    data['posY'] = this.posY;
    data['industryCode'] = this.industryCode;
    data['duty'] = this.duty;
    data['address'] = this.address;
    data['produceEntId'] = this.produceEntId;
    data['produceEnt'] = this.produceEnt ? this.produceEnt.toJSON() : <any>undefined;
    data['entName'] = this.entName;
    data['linkName'] = this.linkName;
    data['linkPhone'] = this.linkPhone;
    data['sysUserId'] = this.sysUserId;
    data['sysUser'] = this.sysUser ? this.sysUser.toJSON() : <any>undefined;
    data['enquiryTitle'] = this.enquiryTitle;
    data['enquiryContent'] = this.enquiryContent;
    data['enquiryTime'] = this.enquiryTime ? this.enquiryTime.toISOString() : <any>undefined;
    data['enquiryState'] = this.enquiryState;
    data['reason'] = this.reason;
    data['attachment'] = this.attachment;
    data['wastePicture'] = this.wastePicture;
    data['processDrawing'] = this.processDrawing;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): App_Enquiry {
    const json = this.toJSON();
    let result = new App_Enquiry();
    result.init(json);
    return result;
  }
}

export class App_Offer_Waste {
  offerId!: number | undefined;
  offer!: App_Offer;
  wasteCode!: string | undefined;
  commonName!: string | undefined;
  yearlyOutput!: number | undefined;
  price!: number | undefined;
  unit!: string | undefined;
  totalPrice!: number | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.offerId = _data['offerId'];
      this.offer = _data['offer'] ? App_Offer.fromJS(_data['offer'], _mappings) : <any>undefined;
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.price = _data['price'];
      this.unit = _data['unit'];
      this.totalPrice = _data['totalPrice'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Offer_Waste | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Offer_Waste>(data, _mappings, App_Offer_Waste);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['offerId'] = this.offerId;
    data['offer'] = this.offer ? this.offer.toJSON() : <any>undefined;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['price'] = this.price;
    data['unit'] = this.unit;
    data['totalPrice'] = this.totalPrice;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): App_Offer_Waste {
    const json = this.toJSON();
    let result = new App_Offer_Waste();
    result.init(json);
    return result;
  }
}

export class App_Offer {
  enquiryId!: number | undefined;
  enquiry!: App_Enquiry;
  readonly appOfferWastes!: App_Offer_Waste[] | undefined;
  sysUserId!: number | undefined;
  sysUser!: User;
  offerType!: number | undefined;
  totalAmount!: string | undefined;
  totalPrice!: number | undefined;
  transferPrice!: number | undefined;
  isIncludeTax!: boolean;
  offerState!: number | undefined;
  tagName!: string | undefined;
  offerFile!: string | undefined;
  disposalEntId!: number | undefined;
  disposalEnt!: Enterprise_Async;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enquiryId = _data['enquiryId'];
      this.enquiry = _data['enquiry']
        ? App_Enquiry.fromJS(_data['enquiry'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['appOfferWastes'])) {
        (<any>this).appOfferWastes = [] as any;
        for (let item of _data['appOfferWastes'])
          (<any>this).appOfferWastes!.push(App_Offer_Waste.fromJS(item, _mappings));
      }
      this.sysUserId = _data['sysUserId'];
      this.sysUser = _data['sysUser'] ? User.fromJS(_data['sysUser'], _mappings) : <any>undefined;
      this.offerType = _data['offerType'];
      this.totalAmount = _data['totalAmount'];
      this.totalPrice = _data['totalPrice'];
      this.transferPrice = _data['transferPrice'];
      this.isIncludeTax = _data['isIncludeTax'];
      this.offerState = _data['offerState'];
      this.tagName = _data['tagName'];
      this.offerFile = _data['offerFile'];
      this.disposalEntId = _data['disposalEntId'];
      this.disposalEnt = _data['disposalEnt']
        ? Enterprise_Async.fromJS(_data['disposalEnt'], _mappings)
        : <any>undefined;
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Offer | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Offer>(data, _mappings, App_Offer);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enquiryId'] = this.enquiryId;
    data['enquiry'] = this.enquiry ? this.enquiry.toJSON() : <any>undefined;
    if (Array.isArray(this.appOfferWastes)) {
      data['appOfferWastes'] = [];
      for (let item of this.appOfferWastes) data['appOfferWastes'].push(item.toJSON());
    }
    data['sysUserId'] = this.sysUserId;
    data['sysUser'] = this.sysUser ? this.sysUser.toJSON() : <any>undefined;
    data['offerType'] = this.offerType;
    data['totalAmount'] = this.totalAmount;
    data['totalPrice'] = this.totalPrice;
    data['transferPrice'] = this.transferPrice;
    data['isIncludeTax'] = this.isIncludeTax;
    data['offerState'] = this.offerState;
    data['tagName'] = this.tagName;
    data['offerFile'] = this.offerFile;
    data['disposalEntId'] = this.disposalEntId;
    data['disposalEnt'] = this.disposalEnt ? this.disposalEnt.toJSON() : <any>undefined;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): App_Offer {
    const json = this.toJSON();
    let result = new App_Offer();
    result.init(json);
    return result;
  }
}

export class App_Transfer_Waste {
  transferId!: number | undefined;
  transfer!: App_Transfer;
  wasteCode!: string | undefined;
  commonName!: string | undefined;
  packagings!: string | undefined;
  unit!: string | undefined;
  planAmount!: number | undefined;
  amount!: number | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.transferId = _data['transferId'];
      this.transfer = _data['transfer']
        ? App_Transfer.fromJS(_data['transfer'], _mappings)
        : <any>undefined;
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.packagings = _data['packagings'];
      this.unit = _data['unit'];
      this.planAmount = _data['planAmount'];
      this.amount = _data['amount'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Transfer_Waste | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Transfer_Waste>(data, _mappings, App_Transfer_Waste);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['transferId'] = this.transferId;
    data['transfer'] = this.transfer ? this.transfer.toJSON() : <any>undefined;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['packagings'] = this.packagings;
    data['unit'] = this.unit;
    data['planAmount'] = this.planAmount;
    data['amount'] = this.amount;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): App_Transfer_Waste {
    const json = this.toJSON();
    let result = new App_Transfer_Waste();
    result.init(json);
    return result;
  }
}

export class App_Transfer {
  contractId!: number | undefined;
  contract!: App_Contract;
  readonly appTransferWastes!: App_Transfer_Waste[] | undefined;
  transferPlanDate!: dayjs.Dayjs | undefined;
  disposalEntId!: number | undefined;
  disposalEnt!: Enterprise_Async;
  produceEntId!: number | undefined;
  produceEnt!: Enterprise_Async;
  transferDate!: dayjs.Dayjs | undefined;
  transferType!: string | undefined;
  transferState!: number | undefined;
  transferEntName!: string | undefined;
  driver!: string | undefined;
  driverPhone!: string | undefined;
  supercargo!: string | undefined;
  supercargoPhone!: string | undefined;
  transferCarNo!: string | undefined;
  transferFile!: string | undefined;
  sysUserId!: number | undefined;
  sysUser!: User;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.contractId = _data['contractId'];
      this.contract = _data['contract']
        ? App_Contract.fromJS(_data['contract'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['appTransferWastes'])) {
        (<any>this).appTransferWastes = [] as any;
        for (let item of _data['appTransferWastes'])
          (<any>this).appTransferWastes!.push(App_Transfer_Waste.fromJS(item, _mappings));
      }
      this.transferPlanDate = _data['transferPlanDate']
        ? dayjs(_data['transferPlanDate'].toString())
        : <any>undefined;
      this.disposalEntId = _data['disposalEntId'];
      this.disposalEnt = _data['disposalEnt']
        ? Enterprise_Async.fromJS(_data['disposalEnt'], _mappings)
        : <any>undefined;
      this.produceEntId = _data['produceEntId'];
      this.produceEnt = _data['produceEnt']
        ? Enterprise_Async.fromJS(_data['produceEnt'], _mappings)
        : <any>undefined;
      this.transferDate = _data['transferDate']
        ? dayjs(_data['transferDate'].toString())
        : <any>undefined;
      this.transferType = _data['transferType'];
      this.transferState = _data['transferState'];
      this.transferEntName = _data['transferEntName'];
      this.driver = _data['driver'];
      this.driverPhone = _data['driverPhone'];
      this.supercargo = _data['supercargo'];
      this.supercargoPhone = _data['supercargoPhone'];
      this.transferCarNo = _data['transferCarNo'];
      this.transferFile = _data['transferFile'];
      this.sysUserId = _data['sysUserId'];
      this.sysUser = _data['sysUser'] ? User.fromJS(_data['sysUser'], _mappings) : <any>undefined;
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Transfer | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Transfer>(data, _mappings, App_Transfer);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['contractId'] = this.contractId;
    data['contract'] = this.contract ? this.contract.toJSON() : <any>undefined;
    if (Array.isArray(this.appTransferWastes)) {
      data['appTransferWastes'] = [];
      for (let item of this.appTransferWastes) data['appTransferWastes'].push(item.toJSON());
    }
    data['transferPlanDate'] = this.transferPlanDate
      ? this.transferPlanDate.toISOString()
      : <any>undefined;
    data['disposalEntId'] = this.disposalEntId;
    data['disposalEnt'] = this.disposalEnt ? this.disposalEnt.toJSON() : <any>undefined;
    data['produceEntId'] = this.produceEntId;
    data['produceEnt'] = this.produceEnt ? this.produceEnt.toJSON() : <any>undefined;
    data['transferDate'] = this.transferDate ? this.transferDate.toISOString() : <any>undefined;
    data['transferType'] = this.transferType;
    data['transferState'] = this.transferState;
    data['transferEntName'] = this.transferEntName;
    data['driver'] = this.driver;
    data['driverPhone'] = this.driverPhone;
    data['supercargo'] = this.supercargo;
    data['supercargoPhone'] = this.supercargoPhone;
    data['transferCarNo'] = this.transferCarNo;
    data['transferFile'] = this.transferFile;
    data['sysUserId'] = this.sysUserId;
    data['sysUser'] = this.sysUser ? this.sysUser.toJSON() : <any>undefined;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): App_Transfer {
    const json = this.toJSON();
    let result = new App_Transfer();
    result.init(json);
    return result;
  }
}

export class App_Contract {
  offerId!: number | undefined;
  offer!: App_Offer;
  readonly appContractWastes!: App_Contract_Waste[] | undefined;
  readonly appTransfers!: App_Transfer[] | undefined;
  contractNo!: string | undefined;
  startDate!: dayjs.Dayjs | undefined;
  endDate!: dayjs.Dayjs | undefined;
  disposalEntId!: number | undefined;
  disposalEnt!: Enterprise_Async;
  produceEntId!: number | undefined;
  produceEnt!: Enterprise_Async;
  dutyOfficer!: string | undefined;
  businessLicense!: string | undefined;
  productTech!: string | undefined;
  totalAmount!: number | undefined;
  totalPrice!: number | undefined;
  transferPrice!: number | undefined;
  isIncludeTax!: boolean;
  contractFile!: string | undefined;
  contractState!: number | undefined;
  sysUserId!: number | undefined;
  sysUser!: User;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.offerId = _data['offerId'];
      this.offer = _data['offer'] ? App_Offer.fromJS(_data['offer'], _mappings) : <any>undefined;
      if (Array.isArray(_data['appContractWastes'])) {
        (<any>this).appContractWastes = [] as any;
        for (let item of _data['appContractWastes'])
          (<any>this).appContractWastes!.push(App_Contract_Waste.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['appTransfers'])) {
        (<any>this).appTransfers = [] as any;
        for (let item of _data['appTransfers'])
          (<any>this).appTransfers!.push(App_Transfer.fromJS(item, _mappings));
      }
      this.contractNo = _data['contractNo'];
      this.startDate = _data['startDate'] ? dayjs(_data['startDate'].toString()) : <any>undefined;
      this.endDate = _data['endDate'] ? dayjs(_data['endDate'].toString()) : <any>undefined;
      this.disposalEntId = _data['disposalEntId'];
      this.disposalEnt = _data['disposalEnt']
        ? Enterprise_Async.fromJS(_data['disposalEnt'], _mappings)
        : <any>undefined;
      this.produceEntId = _data['produceEntId'];
      this.produceEnt = _data['produceEnt']
        ? Enterprise_Async.fromJS(_data['produceEnt'], _mappings)
        : <any>undefined;
      this.dutyOfficer = _data['dutyOfficer'];
      this.businessLicense = _data['businessLicense'];
      this.productTech = _data['productTech'];
      this.totalAmount = _data['totalAmount'];
      this.totalPrice = _data['totalPrice'];
      this.transferPrice = _data['transferPrice'];
      this.isIncludeTax = _data['isIncludeTax'];
      this.contractFile = _data['contractFile'];
      this.contractState = _data['contractState'];
      this.sysUserId = _data['sysUserId'];
      this.sysUser = _data['sysUser'] ? User.fromJS(_data['sysUser'], _mappings) : <any>undefined;
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Contract | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Contract>(data, _mappings, App_Contract);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['offerId'] = this.offerId;
    data['offer'] = this.offer ? this.offer.toJSON() : <any>undefined;
    if (Array.isArray(this.appContractWastes)) {
      data['appContractWastes'] = [];
      for (let item of this.appContractWastes) data['appContractWastes'].push(item.toJSON());
    }
    if (Array.isArray(this.appTransfers)) {
      data['appTransfers'] = [];
      for (let item of this.appTransfers) data['appTransfers'].push(item.toJSON());
    }
    data['contractNo'] = this.contractNo;
    data['startDate'] = this.startDate ? this.startDate.toISOString() : <any>undefined;
    data['endDate'] = this.endDate ? this.endDate.toISOString() : <any>undefined;
    data['disposalEntId'] = this.disposalEntId;
    data['disposalEnt'] = this.disposalEnt ? this.disposalEnt.toJSON() : <any>undefined;
    data['produceEntId'] = this.produceEntId;
    data['produceEnt'] = this.produceEnt ? this.produceEnt.toJSON() : <any>undefined;
    data['dutyOfficer'] = this.dutyOfficer;
    data['businessLicense'] = this.businessLicense;
    data['productTech'] = this.productTech;
    data['totalAmount'] = this.totalAmount;
    data['totalPrice'] = this.totalPrice;
    data['transferPrice'] = this.transferPrice;
    data['isIncludeTax'] = this.isIncludeTax;
    data['contractFile'] = this.contractFile;
    data['contractState'] = this.contractState;
    data['sysUserId'] = this.sysUserId;
    data['sysUser'] = this.sysUser ? this.sysUser.toJSON() : <any>undefined;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): App_Contract {
    const json = this.toJSON();
    let result = new App_Contract();
    result.init(json);
    return result;
  }
}

export class App_Contract_Waste {
  contractId!: number | undefined;
  contract!: App_Contract;
  wasteCode!: string | undefined;
  commonName!: string | undefined;
  yearlyOutput!: number | undefined;
  price!: number | undefined;
  unit!: string | undefined;
  totalPrice!: number | undefined;
  transferCycle!: number | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.contractId = _data['contractId'];
      this.contract = _data['contract']
        ? App_Contract.fromJS(_data['contract'], _mappings)
        : <any>undefined;
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.price = _data['price'];
      this.unit = _data['unit'];
      this.totalPrice = _data['totalPrice'];
      this.transferCycle = _data['transferCycle'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Contract_Waste | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Contract_Waste>(data, _mappings, App_Contract_Waste);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['contractId'] = this.contractId;
    data['contract'] = this.contract ? this.contract.toJSON() : <any>undefined;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['price'] = this.price;
    data['unit'] = this.unit;
    data['totalPrice'] = this.totalPrice;
    data['transferCycle'] = this.transferCycle;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): App_Contract_Waste {
    const json = this.toJSON();
    let result = new App_Contract_Waste();
    result.init(json);
    return result;
  }
}

/** 的列表DTO Erinyes.Jianfei.App_Contract */
export class App_ContractEditDto {
  /** Id */
  id!: number | undefined;
  /** 报价主键 */
  offerId!: number | undefined;
  /** 合同编号 */
  contractNo!: string | undefined;
  /** 开始时间 */
  startDate!: dayjs.Dayjs | undefined;
  /** 结束时间 */
  endDate!: dayjs.Dayjs | undefined;
  /** 处置企业 */
  disposalEntId!: number | undefined;
  /** 产废企业 */
  produceEntId!: number | undefined;
  /** 签约责任人 */
  dutyOfficer!: string | undefined;
  /** 营业执照 */
  businessLicense!: string | undefined;
  /** 生产工艺 */
  productTech!: string | undefined;
  /** 危废总量 */
  totalAmount!: number | undefined;
  /** 总金额 */
  totalPrice!: number | undefined;
  /** 运费金额 */
  transferPrice!: number | undefined;
  /** 是否含税 */
  isIncludeTax!: boolean;
  /** 合同附件 */
  contractFile!: string | undefined;
  /** 合同状态 */
  contractState!: number | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 合同危废详情 */
  contractWasteList!: App_Contract_Waste[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.offerId = _data['offerId'];
      this.contractNo = _data['contractNo'];
      this.startDate = _data['startDate'] ? dayjs(_data['startDate'].toString()) : <any>undefined;
      this.endDate = _data['endDate'] ? dayjs(_data['endDate'].toString()) : <any>undefined;
      this.disposalEntId = _data['disposalEntId'];
      this.produceEntId = _data['produceEntId'];
      this.dutyOfficer = _data['dutyOfficer'];
      this.businessLicense = _data['businessLicense'];
      this.productTech = _data['productTech'];
      this.totalAmount = _data['totalAmount'];
      this.totalPrice = _data['totalPrice'];
      this.transferPrice = _data['transferPrice'];
      this.isIncludeTax = _data['isIncludeTax'];
      this.contractFile = _data['contractFile'];
      this.contractState = _data['contractState'];
      this.sysUserId = _data['sysUserId'];
      if (Array.isArray(_data['contractWasteList'])) {
        this.contractWasteList = [] as any;
        for (let item of _data['contractWasteList'])
          this.contractWasteList!.push(App_Contract_Waste.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): App_ContractEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_ContractEditDto>(data, _mappings, App_ContractEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['offerId'] = this.offerId;
    data['contractNo'] = this.contractNo;
    data['startDate'] = this.startDate ? this.startDate.toISOString() : <any>undefined;
    data['endDate'] = this.endDate ? this.endDate.toISOString() : <any>undefined;
    data['disposalEntId'] = this.disposalEntId;
    data['produceEntId'] = this.produceEntId;
    data['dutyOfficer'] = this.dutyOfficer;
    data['businessLicense'] = this.businessLicense;
    data['productTech'] = this.productTech;
    data['totalAmount'] = this.totalAmount;
    data['totalPrice'] = this.totalPrice;
    data['transferPrice'] = this.transferPrice;
    data['isIncludeTax'] = this.isIncludeTax;
    data['contractFile'] = this.contractFile;
    data['contractState'] = this.contractState;
    data['sysUserId'] = this.sysUserId;
    if (Array.isArray(this.contractWasteList)) {
      data['contractWasteList'] = [];
      for (let item of this.contractWasteList) data['contractWasteList'].push(item.toJSON());
    }
    return data;
  }

  clone(): App_ContractEditDto {
    const json = this.toJSON();
    let result = new App_ContractEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateApp_ContractInput {
  app_Contract!: App_ContractEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Contract = _data['app_Contract']
        ? App_ContractEditDto.fromJS(_data['app_Contract'], _mappings)
        : new App_ContractEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateApp_ContractInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateApp_ContractInput>(
      data,
      _mappings,
      CreateOrUpdateApp_ContractInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Contract'] = this.app_Contract ? this.app_Contract.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateApp_ContractInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateApp_ContractInput();
    result.init(json);
    return result;
  }
}

/** 的列表DTO Erinyes.Jianfei.App_Contract */
export class App_ContractListDto {
  id!: number | undefined;
  /** 报价主键 */
  offerId!: number | undefined;
  /** 合同编号 */
  contractNo!: string | undefined;
  /** 开始时间 */
  startDate!: dayjs.Dayjs | undefined;
  /** 结束时间 */
  endDate!: dayjs.Dayjs | undefined;
  /** 处置企业 */
  disposalEntId!: number | undefined;
  /** 处置企业名称 */
  disposalEntName!: string | undefined;
  /** 产废企业 */
  produceEntId!: number | undefined;
  /** 产废企业名称 */
  produceEntName!: string | undefined;
  /** 签约责任人 */
  dutyOfficer!: string | undefined;
  /** 营业执照 */
  businessLicense!: string | undefined;
  /** 生产工艺 */
  productTech!: string | undefined;
  /** 危废总量 */
  totalAmount!: number | undefined;
  /** 总金额 */
  totalPrice!: number | undefined;
  /** 运费金额 */
  transferPrice!: number | undefined;
  /** 是否含税 */
  isIncludeTax!: boolean;
  /** 合同附件 */
  contractFile!: string | undefined;
  /** 合同状态 */
  contractState!: number | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 合同危废详情 */
  contractWasteList!: App_Contract_Waste[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.offerId = _data['offerId'];
      this.contractNo = _data['contractNo'];
      this.startDate = _data['startDate'] ? dayjs(_data['startDate'].toString()) : <any>undefined;
      this.endDate = _data['endDate'] ? dayjs(_data['endDate'].toString()) : <any>undefined;
      this.disposalEntId = _data['disposalEntId'];
      this.disposalEntName = _data['disposalEntName'];
      this.produceEntId = _data['produceEntId'];
      this.produceEntName = _data['produceEntName'];
      this.dutyOfficer = _data['dutyOfficer'];
      this.businessLicense = _data['businessLicense'];
      this.productTech = _data['productTech'];
      this.totalAmount = _data['totalAmount'];
      this.totalPrice = _data['totalPrice'];
      this.transferPrice = _data['transferPrice'];
      this.isIncludeTax = _data['isIncludeTax'];
      this.contractFile = _data['contractFile'];
      this.contractState = _data['contractState'];
      this.sysUserId = _data['sysUserId'];
      if (Array.isArray(_data['contractWasteList'])) {
        this.contractWasteList = [] as any;
        for (let item of _data['contractWasteList'])
          this.contractWasteList!.push(App_Contract_Waste.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): App_ContractListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_ContractListDto>(data, _mappings, App_ContractListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['offerId'] = this.offerId;
    data['contractNo'] = this.contractNo;
    data['startDate'] = this.startDate ? this.startDate.toISOString() : <any>undefined;
    data['endDate'] = this.endDate ? this.endDate.toISOString() : <any>undefined;
    data['disposalEntId'] = this.disposalEntId;
    data['disposalEntName'] = this.disposalEntName;
    data['produceEntId'] = this.produceEntId;
    data['produceEntName'] = this.produceEntName;
    data['dutyOfficer'] = this.dutyOfficer;
    data['businessLicense'] = this.businessLicense;
    data['productTech'] = this.productTech;
    data['totalAmount'] = this.totalAmount;
    data['totalPrice'] = this.totalPrice;
    data['transferPrice'] = this.transferPrice;
    data['isIncludeTax'] = this.isIncludeTax;
    data['contractFile'] = this.contractFile;
    data['contractState'] = this.contractState;
    data['sysUserId'] = this.sysUserId;
    if (Array.isArray(this.contractWasteList)) {
      data['contractWasteList'] = [];
      for (let item of this.contractWasteList) data['contractWasteList'].push(item.toJSON());
    }
    return data;
  }

  clone(): App_ContractListDto {
    const json = this.toJSON();
    let result = new App_ContractListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑的Dto */
export class GetApp_ContractForEditOutput {
  app_Contract!: App_ContractEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Contract = _data['app_Contract']
        ? App_ContractEditDto.fromJS(_data['app_Contract'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetApp_ContractForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetApp_ContractForEditOutput>(
      data,
      _mappings,
      GetApp_ContractForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Contract'] = this.app_Contract ? this.app_Contract.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetApp_ContractForEditOutput {
    const json = this.toJSON();
    let result = new GetApp_ContractForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfApp_ContractListDto {
  totalCount!: number;
  items!: App_ContractListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(App_ContractListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfApp_ContractListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfApp_ContractListDto>(
      data,
      _mappings,
      PagedResultDtoOfApp_ContractListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfApp_ContractListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfApp_ContractListDto();
    result.init(json);
    return result;
  }
}

export class App_EnquiryForContact {
  id!: number | undefined;
  isContacted!: boolean;
  contactLog!: string | undefined;
  enquiryId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.isContacted = _data['isContacted'];
      this.contactLog = _data['contactLog'];
      this.enquiryId = _data['enquiryId'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_EnquiryForContact | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_EnquiryForContact>(data, _mappings, App_EnquiryForContact);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['isContacted'] = this.isContacted;
    data['contactLog'] = this.contactLog;
    data['enquiryId'] = this.enquiryId;
    return data;
  }

  clone(): App_EnquiryForContact {
    const json = this.toJSON();
    let result = new App_EnquiryForContact();
    result.init(json);
    return result;
  }
}

/** 询价危废信息 的列表DTO Erinyes.Jianfei.App_Enquiry_Waste */
export class App_Enquiry_WaseEditDto {
  /** Id */
  id!: number | undefined;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 年产量 */
  yearlyOutput!: number | undefined;
  /** 待转移量 */
  needTransfer!: number | undefined;
  /** 单位 吨 */
  unit!: string | undefined;
  /** 包装方式 */
  packagings!: string | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.needTransfer = _data['needTransfer'];
      this.unit = _data['unit'];
      this.packagings = _data['packagings'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Enquiry_WaseEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Enquiry_WaseEditDto>(data, _mappings, App_Enquiry_WaseEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['needTransfer'] = this.needTransfer;
    data['unit'] = this.unit;
    data['packagings'] = this.packagings;
    data['remark'] = this.remark;
    return data;
  }

  clone(): App_Enquiry_WaseEditDto {
    const json = this.toJSON();
    let result = new App_Enquiry_WaseEditDto();
    result.init(json);
    return result;
  }
}

/** 的列表DTO Erinyes.Jianfei.App_Enquiry */
export class App_EnquiryEditDto {
  /** Id */
  id!: number | undefined;
  /** 行政区 */
  cantonCode!: string | undefined;
  /** 经度 */
  posX!: number | undefined;
  /** 纬度 */
  posY!: number | undefined;
  /** 行业 */
  industryCode!: string | undefined;
  /** 职务 */
  duty!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 企业名称 */
  entName!: string | undefined;
  /** 联系人 */
  linkName!: string | undefined;
  /** 联系手机 */
  linkPhone!: string | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 需求标题 */
  enquiryTitle!: string | undefined;
  /** 需求内容 */
  enquiryContent!: string | undefined;
  /** 发布时间 */
  enquiryTime!: dayjs.Dayjs | undefined;
  /** 状态 */
  enquiryState!: number | undefined;
  /** 现场图片 */
  attachment!: string | undefined;
  /** 危废照片 */
  wastePicture!: string | undefined;
  /** 工艺流程图 */
  processDrawing!: string | undefined;
  /** 产废企业 */
  produceEntId!: number | undefined;
  /** 询价危废列表 */
  enquiryWasteList!: App_Enquiry_WaseEditDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.cantonCode = _data['cantonCode'];
      this.posX = _data['posX'];
      this.posY = _data['posY'];
      this.industryCode = _data['industryCode'];
      this.duty = _data['duty'];
      this.address = _data['address'];
      this.entName = _data['entName'];
      this.linkName = _data['linkName'];
      this.linkPhone = _data['linkPhone'];
      this.sysUserId = _data['sysUserId'];
      this.enquiryTitle = _data['enquiryTitle'];
      this.enquiryContent = _data['enquiryContent'];
      this.enquiryTime = _data['enquiryTime']
        ? dayjs(_data['enquiryTime'].toString())
        : <any>undefined;
      this.enquiryState = _data['enquiryState'];
      this.attachment = _data['attachment'];
      this.wastePicture = _data['wastePicture'];
      this.processDrawing = _data['processDrawing'];
      this.produceEntId = _data['produceEntId'];
      if (Array.isArray(_data['enquiryWasteList'])) {
        this.enquiryWasteList = [] as any;
        for (let item of _data['enquiryWasteList'])
          this.enquiryWasteList!.push(App_Enquiry_WaseEditDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): App_EnquiryEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_EnquiryEditDto>(data, _mappings, App_EnquiryEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['cantonCode'] = this.cantonCode;
    data['posX'] = this.posX;
    data['posY'] = this.posY;
    data['industryCode'] = this.industryCode;
    data['duty'] = this.duty;
    data['address'] = this.address;
    data['entName'] = this.entName;
    data['linkName'] = this.linkName;
    data['linkPhone'] = this.linkPhone;
    data['sysUserId'] = this.sysUserId;
    data['enquiryTitle'] = this.enquiryTitle;
    data['enquiryContent'] = this.enquiryContent;
    data['enquiryTime'] = this.enquiryTime ? this.enquiryTime.toISOString() : <any>undefined;
    data['enquiryState'] = this.enquiryState;
    data['attachment'] = this.attachment;
    data['wastePicture'] = this.wastePicture;
    data['processDrawing'] = this.processDrawing;
    data['produceEntId'] = this.produceEntId;
    if (Array.isArray(this.enquiryWasteList)) {
      data['enquiryWasteList'] = [];
      for (let item of this.enquiryWasteList) data['enquiryWasteList'].push(item.toJSON());
    }
    return data;
  }

  clone(): App_EnquiryEditDto {
    const json = this.toJSON();
    let result = new App_EnquiryEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateApp_EnquiryInput {
  app_Enquiry!: App_EnquiryEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Enquiry = _data['app_Enquiry']
        ? App_EnquiryEditDto.fromJS(_data['app_Enquiry'], _mappings)
        : new App_EnquiryEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateApp_EnquiryInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateApp_EnquiryInput>(
      data,
      _mappings,
      CreateOrUpdateApp_EnquiryInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Enquiry'] = this.app_Enquiry ? this.app_Enquiry.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateApp_EnquiryInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateApp_EnquiryInput();
    result.init(json);
    return result;
  }
}

/** 处置报价的列表DTO Erinyes.Jianfei.App_Offer_Waste */
export class App_Offer_WasteDto {
  id!: number | undefined;
  /** 报价主键 */
  offerId!: number | undefined;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 年产量 */
  yearlyOutput!: number | undefined;
  /** 处置单价 */
  price!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 处置总价 */
  totalPrice!: number | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.offerId = _data['offerId'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.price = _data['price'];
      this.unit = _data['unit'];
      this.totalPrice = _data['totalPrice'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Offer_WasteDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Offer_WasteDto>(data, _mappings, App_Offer_WasteDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['offerId'] = this.offerId;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['price'] = this.price;
    data['unit'] = this.unit;
    data['totalPrice'] = this.totalPrice;
    data['remark'] = this.remark;
    return data;
  }

  clone(): App_Offer_WasteDto {
    const json = this.toJSON();
    let result = new App_Offer_WasteDto();
    result.init(json);
    return result;
  }
}

/** 处置报价的列表DTO Erinyes.Jianfei.App_Offer */
export class App_OfferListDto {
  id!: number | undefined;
  /** 询价 */
  enquiryId!: number | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 报价类型 */
  offerType!: number | undefined;
  /** 危废总量 */
  totalAmount!: string | undefined;
  /** 总金额 */
  totalPrice!: number | undefined;
  /** 运费金额 */
  transferPrice!: number | undefined;
  /** 是否含税 */
  isIncludeTax!: boolean;
  /** 报价状态 */
  offerState!: number | undefined;
  /** 标签信息 */
  tagName!: string | undefined;
  /** 处置企业 */
  disposalEntId!: number | undefined;
  /** 处置企业 */
  disposalEntName!: string | undefined;
  /** 报价附件 */
  offerFile!: string | undefined;
  /** 报价危废详情 */
  offerWasteList!: App_Offer_WasteDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.enquiryId = _data['enquiryId'];
      this.sysUserId = _data['sysUserId'];
      this.offerType = _data['offerType'];
      this.totalAmount = _data['totalAmount'];
      this.totalPrice = _data['totalPrice'];
      this.transferPrice = _data['transferPrice'];
      this.isIncludeTax = _data['isIncludeTax'];
      this.offerState = _data['offerState'];
      this.tagName = _data['tagName'];
      this.disposalEntId = _data['disposalEntId'];
      this.disposalEntName = _data['disposalEntName'];
      this.offerFile = _data['offerFile'];
      if (Array.isArray(_data['offerWasteList'])) {
        this.offerWasteList = [] as any;
        for (let item of _data['offerWasteList'])
          this.offerWasteList!.push(App_Offer_WasteDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): App_OfferListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_OfferListDto>(data, _mappings, App_OfferListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['enquiryId'] = this.enquiryId;
    data['sysUserId'] = this.sysUserId;
    data['offerType'] = this.offerType;
    data['totalAmount'] = this.totalAmount;
    data['totalPrice'] = this.totalPrice;
    data['transferPrice'] = this.transferPrice;
    data['isIncludeTax'] = this.isIncludeTax;
    data['offerState'] = this.offerState;
    data['tagName'] = this.tagName;
    data['disposalEntId'] = this.disposalEntId;
    data['disposalEntName'] = this.disposalEntName;
    data['offerFile'] = this.offerFile;
    if (Array.isArray(this.offerWasteList)) {
      data['offerWasteList'] = [];
      for (let item of this.offerWasteList) data['offerWasteList'].push(item.toJSON());
    }
    return data;
  }

  clone(): App_OfferListDto {
    const json = this.toJSON();
    let result = new App_OfferListDto();
    result.init(json);
    return result;
  }
}

export class App_Enquiry_ContactLogDto {
  id!: number | undefined;
  userID!: number | undefined;
  enquiryId!: number | undefined;
  contactLog!: string | undefined;
  isContacted!: boolean | undefined;
  contactTime!: dayjs.Dayjs | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.userID = _data['userID'];
      this.enquiryId = _data['enquiryId'];
      this.contactLog = _data['contactLog'];
      this.isContacted = _data['isContacted'];
      this.contactTime = _data['contactTime']
        ? dayjs(_data['contactTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): App_Enquiry_ContactLogDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Enquiry_ContactLogDto>(data, _mappings, App_Enquiry_ContactLogDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['userID'] = this.userID;
    data['enquiryId'] = this.enquiryId;
    data['contactLog'] = this.contactLog;
    data['isContacted'] = this.isContacted;
    data['contactTime'] = this.contactTime ? this.contactTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): App_Enquiry_ContactLogDto {
    const json = this.toJSON();
    let result = new App_Enquiry_ContactLogDto();
    result.init(json);
    return result;
  }
}

/** 的列表DTO Erinyes.Jianfei.App_Enquiry */
export class App_EnquiryDetailDto {
  id!: number | undefined;
  /** 行政区 */
  cantonCode!: string | undefined;
  /** 行政区名称 */
  cantonName!: string | undefined;
  /** 行业编码 */
  industryCode!: string | undefined;
  /** 行业名称 */
  industryName!: string | undefined;
  /** 企业名称 */
  entName!: string | undefined;
  /** 联系人 */
  linkName!: string | undefined;
  /** 联系手机 */
  linkPhone!: string | undefined;
  /** 职务 */
  duty!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 需求标题 */
  enquiryTitle!: string | undefined;
  /** 需求内容 */
  enquiryContent!: string | undefined;
  /** 发布时间 */
  enquiryTime!: dayjs.Dayjs | undefined;
  /** 状态 */
  enquiryState!: number | undefined;
  /** 原因 */
  reason!: string | undefined;
  /** 现场图片 */
  attachment!: string | undefined;
  /** 危废照片 */
  wastePicture!: string | undefined;
  /** 工艺流程图 */
  processDrawing!: string | undefined;
  /** 产废企业 */
  produceEntId!: number | undefined;
  /** 已报价的企业数 */
  offerEntCount!: number | undefined;
  /** 汇总年产量 */
  totalYearlyOutput!: number | undefined;
  /** 询价危废列表 */
  enquiryWasteList!: App_Enquiry_WaseEditDto[] | undefined;
  /** 报价详情 */
  offerList!: App_OfferListDto[] | undefined;
  enquiryContactLog!: App_Enquiry_ContactLogDto;
  pushItemId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.cantonCode = _data['cantonCode'];
      this.cantonName = _data['cantonName'];
      this.industryCode = _data['industryCode'];
      this.industryName = _data['industryName'];
      this.entName = _data['entName'];
      this.linkName = _data['linkName'];
      this.linkPhone = _data['linkPhone'];
      this.duty = _data['duty'];
      this.address = _data['address'];
      this.sysUserId = _data['sysUserId'];
      this.enquiryTitle = _data['enquiryTitle'];
      this.enquiryContent = _data['enquiryContent'];
      this.enquiryTime = _data['enquiryTime']
        ? dayjs(_data['enquiryTime'].toString())
        : <any>undefined;
      this.enquiryState = _data['enquiryState'];
      this.reason = _data['reason'];
      this.attachment = _data['attachment'];
      this.wastePicture = _data['wastePicture'];
      this.processDrawing = _data['processDrawing'];
      this.produceEntId = _data['produceEntId'];
      this.offerEntCount = _data['offerEntCount'];
      this.totalYearlyOutput = _data['totalYearlyOutput'];
      if (Array.isArray(_data['enquiryWasteList'])) {
        this.enquiryWasteList = [] as any;
        for (let item of _data['enquiryWasteList'])
          this.enquiryWasteList!.push(App_Enquiry_WaseEditDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['offerList'])) {
        this.offerList = [] as any;
        for (let item of _data['offerList'])
          this.offerList!.push(App_OfferListDto.fromJS(item, _mappings));
      }
      this.enquiryContactLog = _data['enquiryContactLog']
        ? App_Enquiry_ContactLogDto.fromJS(_data['enquiryContactLog'], _mappings)
        : <any>undefined;
      this.pushItemId = _data['pushItemId'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_EnquiryDetailDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_EnquiryDetailDto>(data, _mappings, App_EnquiryDetailDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['cantonCode'] = this.cantonCode;
    data['cantonName'] = this.cantonName;
    data['industryCode'] = this.industryCode;
    data['industryName'] = this.industryName;
    data['entName'] = this.entName;
    data['linkName'] = this.linkName;
    data['linkPhone'] = this.linkPhone;
    data['duty'] = this.duty;
    data['address'] = this.address;
    data['sysUserId'] = this.sysUserId;
    data['enquiryTitle'] = this.enquiryTitle;
    data['enquiryContent'] = this.enquiryContent;
    data['enquiryTime'] = this.enquiryTime ? this.enquiryTime.toISOString() : <any>undefined;
    data['enquiryState'] = this.enquiryState;
    data['reason'] = this.reason;
    data['attachment'] = this.attachment;
    data['wastePicture'] = this.wastePicture;
    data['processDrawing'] = this.processDrawing;
    data['produceEntId'] = this.produceEntId;
    data['offerEntCount'] = this.offerEntCount;
    data['totalYearlyOutput'] = this.totalYearlyOutput;
    if (Array.isArray(this.enquiryWasteList)) {
      data['enquiryWasteList'] = [];
      for (let item of this.enquiryWasteList) data['enquiryWasteList'].push(item.toJSON());
    }
    if (Array.isArray(this.offerList)) {
      data['offerList'] = [];
      for (let item of this.offerList) data['offerList'].push(item.toJSON());
    }
    data['enquiryContactLog'] = this.enquiryContactLog
      ? this.enquiryContactLog.toJSON()
      : <any>undefined;
    data['pushItemId'] = this.pushItemId;
    return data;
  }

  clone(): App_EnquiryDetailDto {
    const json = this.toJSON();
    let result = new App_EnquiryDetailDto();
    result.init(json);
    return result;
  }
}

/** 的列表DTO Erinyes.Jianfei.App_Enquiry */
export class App_EnquiryListDto {
  id!: number | undefined;
  /** 行政区 */
  cantonCode!: string | undefined;
  /** 行政区名称 */
  cantonName!: string | undefined;
  /** 行业编码 */
  industryCode!: string | undefined;
  /** 行业名称 */
  industryName!: string | undefined;
  /** 企业名称 */
  entName!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 需求标题 */
  enquiryTitle!: string | undefined;
  /** 需求内容 */
  enquiryContent!: string | undefined;
  /** 发布时间 */
  enquiryTime!: dayjs.Dayjs | undefined;
  /** 状态 */
  enquiryState!: number | undefined;
  /** 产废企业 */
  produceEntId!: number | undefined;
  /** 已报价的企业数 */
  offerEntCount!: number | undefined;
  /** 汇总年产量 */
  totalYearlyOutput!: number | undefined;
  /** 询价危废列表 */
  enquiryWasteList!: App_Enquiry_WaseEditDto[] | undefined;
  wasteId!: number | undefined;
  isContacted!: boolean | undefined;
  enquiryContactLog!: App_Enquiry_ContactLogDto;
  pushItemId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.cantonCode = _data['cantonCode'];
      this.cantonName = _data['cantonName'];
      this.industryCode = _data['industryCode'];
      this.industryName = _data['industryName'];
      this.entName = _data['entName'];
      this.address = _data['address'];
      this.sysUserId = _data['sysUserId'];
      this.enquiryTitle = _data['enquiryTitle'];
      this.enquiryContent = _data['enquiryContent'];
      this.enquiryTime = _data['enquiryTime']
        ? dayjs(_data['enquiryTime'].toString())
        : <any>undefined;
      this.enquiryState = _data['enquiryState'];
      this.produceEntId = _data['produceEntId'];
      this.offerEntCount = _data['offerEntCount'];
      this.totalYearlyOutput = _data['totalYearlyOutput'];
      if (Array.isArray(_data['enquiryWasteList'])) {
        this.enquiryWasteList = [] as any;
        for (let item of _data['enquiryWasteList'])
          this.enquiryWasteList!.push(App_Enquiry_WaseEditDto.fromJS(item, _mappings));
      }
      this.wasteId = _data['wasteId'];
      this.isContacted = _data['isContacted'];
      this.enquiryContactLog = _data['enquiryContactLog']
        ? App_Enquiry_ContactLogDto.fromJS(_data['enquiryContactLog'], _mappings)
        : <any>undefined;
      this.pushItemId = _data['pushItemId'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_EnquiryListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_EnquiryListDto>(data, _mappings, App_EnquiryListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['cantonCode'] = this.cantonCode;
    data['cantonName'] = this.cantonName;
    data['industryCode'] = this.industryCode;
    data['industryName'] = this.industryName;
    data['entName'] = this.entName;
    data['address'] = this.address;
    data['sysUserId'] = this.sysUserId;
    data['enquiryTitle'] = this.enquiryTitle;
    data['enquiryContent'] = this.enquiryContent;
    data['enquiryTime'] = this.enquiryTime ? this.enquiryTime.toISOString() : <any>undefined;
    data['enquiryState'] = this.enquiryState;
    data['produceEntId'] = this.produceEntId;
    data['offerEntCount'] = this.offerEntCount;
    data['totalYearlyOutput'] = this.totalYearlyOutput;
    if (Array.isArray(this.enquiryWasteList)) {
      data['enquiryWasteList'] = [];
      for (let item of this.enquiryWasteList) data['enquiryWasteList'].push(item.toJSON());
    }
    data['wasteId'] = this.wasteId;
    data['isContacted'] = this.isContacted;
    data['enquiryContactLog'] = this.enquiryContactLog
      ? this.enquiryContactLog.toJSON()
      : <any>undefined;
    data['pushItemId'] = this.pushItemId;
    return data;
  }

  clone(): App_EnquiryListDto {
    const json = this.toJSON();
    let result = new App_EnquiryListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfApp_EnquiryListDto {
  totalCount!: number;
  items!: App_EnquiryListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(App_EnquiryListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfApp_EnquiryListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfApp_EnquiryListDto>(
      data,
      _mappings,
      PagedResultDtoOfApp_EnquiryListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfApp_EnquiryListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfApp_EnquiryListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑的Dto */
export class GetApp_EnquiryForEditOutput {
  app_Enquiry!: App_EnquiryEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Enquiry = _data['app_Enquiry']
        ? App_EnquiryEditDto.fromJS(_data['app_Enquiry'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetApp_EnquiryForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetApp_EnquiryForEditOutput>(
      data,
      _mappings,
      GetApp_EnquiryForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Enquiry'] = this.app_Enquiry ? this.app_Enquiry.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetApp_EnquiryForEditOutput {
    const json = this.toJSON();
    let result = new GetApp_EnquiryForEditOutput();
    result.init(json);
    return result;
  }
}

/** 平台危废线索推送的列表DTO Erinyes.Jianfei.App_Enquiry_Push */
export class App_Enquiry_PushEditDto {
  /** Id */
  id!: number | undefined;
  /** 危废主键 */
  wasteId!: number | undefined;
  /** 推送时间 */
  pushTime!: dayjs.Dayjs | undefined;
  /** 处置企业 */
  disposalEntId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.wasteId = _data['wasteId'];
      this.pushTime = _data['pushTime'] ? dayjs(_data['pushTime'].toString()) : <any>undefined;
      this.disposalEntId = _data['disposalEntId'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Enquiry_PushEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Enquiry_PushEditDto>(data, _mappings, App_Enquiry_PushEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['wasteId'] = this.wasteId;
    data['pushTime'] = this.pushTime ? this.pushTime.toISOString() : <any>undefined;
    data['disposalEntId'] = this.disposalEntId;
    return data;
  }

  clone(): App_Enquiry_PushEditDto {
    const json = this.toJSON();
    let result = new App_Enquiry_PushEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateApp_Enquiry_PushInput {
  app_Enquiry_Push!: App_Enquiry_PushEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Enquiry_Push = _data['app_Enquiry_Push']
        ? App_Enquiry_PushEditDto.fromJS(_data['app_Enquiry_Push'], _mappings)
        : new App_Enquiry_PushEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateApp_Enquiry_PushInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateApp_Enquiry_PushInput>(
      data,
      _mappings,
      CreateOrUpdateApp_Enquiry_PushInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Enquiry_Push'] = this.app_Enquiry_Push
      ? this.app_Enquiry_Push.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateApp_Enquiry_PushInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateApp_Enquiry_PushInput();
    result.init(json);
    return result;
  }
}

/** 平台危废线索推送的列表DTO Erinyes.Jianfei.App_Enquiry_Push */
export class App_Enquiry_PushListDto {
  /** Id */
  id!: number | undefined;
  /** 推送时间 */
  pushTime!: dayjs.Dayjs | undefined;
  /** 询价单Id */
  enquiryId!: number | undefined;
  /** 内容 */
  content!: string | undefined;
  /** 是否已读 */
  isRead!: boolean;
  /** 读取时间 */
  readTime!: dayjs.Dayjs | undefined;
  /** 读取人 */
  readUserId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.pushTime = _data['pushTime'] ? dayjs(_data['pushTime'].toString()) : <any>undefined;
      this.enquiryId = _data['enquiryId'];
      this.content = _data['content'];
      this.isRead = _data['isRead'];
      this.readTime = _data['readTime'] ? dayjs(_data['readTime'].toString()) : <any>undefined;
      this.readUserId = _data['readUserId'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Enquiry_PushListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Enquiry_PushListDto>(data, _mappings, App_Enquiry_PushListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['pushTime'] = this.pushTime ? this.pushTime.toISOString() : <any>undefined;
    data['enquiryId'] = this.enquiryId;
    data['content'] = this.content;
    data['isRead'] = this.isRead;
    data['readTime'] = this.readTime ? this.readTime.toISOString() : <any>undefined;
    data['readUserId'] = this.readUserId;
    return data;
  }

  clone(): App_Enquiry_PushListDto {
    const json = this.toJSON();
    let result = new App_Enquiry_PushListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑平台危废线索推送的Dto */
export class GetApp_Enquiry_PushForEditOutput {
  app_Enquiry_Push!: App_Enquiry_PushEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Enquiry_Push = _data['app_Enquiry_Push']
        ? App_Enquiry_PushEditDto.fromJS(_data['app_Enquiry_Push'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetApp_Enquiry_PushForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetApp_Enquiry_PushForEditOutput>(
      data,
      _mappings,
      GetApp_Enquiry_PushForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Enquiry_Push'] = this.app_Enquiry_Push
      ? this.app_Enquiry_Push.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): GetApp_Enquiry_PushForEditOutput {
    const json = this.toJSON();
    let result = new GetApp_Enquiry_PushForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfApp_Enquiry_PushListDto {
  totalCount!: number;
  items!: App_Enquiry_PushListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(App_Enquiry_PushListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfApp_Enquiry_PushListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfApp_Enquiry_PushListDto>(
      data,
      _mappings,
      PagedResultDtoOfApp_Enquiry_PushListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfApp_Enquiry_PushListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfApp_Enquiry_PushListDto();
    result.init(json);
    return result;
  }
}

export class App_Enquiry_PushDisposalListDto {
  id!: number | undefined;
  /** 推送时间 */
  pushTime!: dayjs.Dayjs | undefined;
  /** 询价主键 */
  enquiryId!: number | undefined;
  enquiry!: App_EnquiryDetailDto;
  /** 危废主键 */
  wasteId!: number | undefined;
  waste!: App_Enquiry_WaseEditDto;
  /** 处置企业 */
  disposalEntId!: number | undefined;
  disposalEntName!: string | undefined;
  /** 是否已读 */
  isRead!: boolean;
  /** 读取时间 */
  readTime!: dayjs.Dayjs | undefined;
  /** 读取人 */
  readUserId!: number | undefined;
  /** 是否联系过 */
  isContacted!: boolean;
  /** 联系时间 */
  contactTime!: dayjs.Dayjs | undefined;
  /** 联系备注 */
  contactMemo!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.pushTime = _data['pushTime'] ? dayjs(_data['pushTime'].toString()) : <any>undefined;
      this.enquiryId = _data['enquiryId'];
      this.enquiry = _data['enquiry']
        ? App_EnquiryDetailDto.fromJS(_data['enquiry'], _mappings)
        : <any>undefined;
      this.wasteId = _data['wasteId'];
      this.waste = _data['waste']
        ? App_Enquiry_WaseEditDto.fromJS(_data['waste'], _mappings)
        : <any>undefined;
      this.disposalEntId = _data['disposalEntId'];
      this.disposalEntName = _data['disposalEntName'];
      this.isRead = _data['isRead'];
      this.readTime = _data['readTime'] ? dayjs(_data['readTime'].toString()) : <any>undefined;
      this.readUserId = _data['readUserId'];
      this.isContacted = _data['isContacted'];
      this.contactTime = _data['contactTime']
        ? dayjs(_data['contactTime'].toString())
        : <any>undefined;
      this.contactMemo = _data['contactMemo'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Enquiry_PushDisposalListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Enquiry_PushDisposalListDto>(
      data,
      _mappings,
      App_Enquiry_PushDisposalListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['pushTime'] = this.pushTime ? this.pushTime.toISOString() : <any>undefined;
    data['enquiryId'] = this.enquiryId;
    data['enquiry'] = this.enquiry ? this.enquiry.toJSON() : <any>undefined;
    data['wasteId'] = this.wasteId;
    data['waste'] = this.waste ? this.waste.toJSON() : <any>undefined;
    data['disposalEntId'] = this.disposalEntId;
    data['disposalEntName'] = this.disposalEntName;
    data['isRead'] = this.isRead;
    data['readTime'] = this.readTime ? this.readTime.toISOString() : <any>undefined;
    data['readUserId'] = this.readUserId;
    data['isContacted'] = this.isContacted;
    data['contactTime'] = this.contactTime ? this.contactTime.toISOString() : <any>undefined;
    data['contactMemo'] = this.contactMemo;
    return data;
  }

  clone(): App_Enquiry_PushDisposalListDto {
    const json = this.toJSON();
    let result = new App_Enquiry_PushDisposalListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfApp_Enquiry_PushDisposalListDto {
  totalCount!: number;
  items!: App_Enquiry_PushDisposalListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(App_Enquiry_PushDisposalListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(
    data: any,
    _mappings?: any,
  ): PagedResultDtoOfApp_Enquiry_PushDisposalListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfApp_Enquiry_PushDisposalListDto>(
      data,
      _mappings,
      PagedResultDtoOfApp_Enquiry_PushDisposalListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfApp_Enquiry_PushDisposalListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfApp_Enquiry_PushDisposalListDto();
    result.init(json);
    return result;
  }
}

export class PushData {
  productEntNum!: number;
  allWasteWeight!: number;
  weightDict!: { [key: string]: number } | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.productEntNum = _data['productEntNum'];
      this.allWasteWeight = _data['allWasteWeight'];
      if (_data['weightDict']) {
        this.weightDict = {} as any;
        for (let key in _data['weightDict']) {
          if (_data['weightDict'].hasOwnProperty(key))
            (<any>this.weightDict)![key] = _data['weightDict'][key];
        }
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PushData | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PushData>(data, _mappings, PushData);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['productEntNum'] = this.productEntNum;
    data['allWasteWeight'] = this.allWasteWeight;
    if (this.weightDict) {
      data['weightDict'] = {};
      for (let key in this.weightDict) {
        if (this.weightDict.hasOwnProperty(key))
          (<any>data['weightDict'])[key] = this.weightDict[key];
      }
    }
    return data;
  }

  clone(): PushData {
    const json = this.toJSON();
    let result = new PushData();
    result.init(json);
    return result;
  }
}

/** 企业扩展的列表DTO Erinyes.Jianfei.App_Enterprise_Ext */
export class App_Enterprise_ExtEditDto {
  /** Id */
  id!: number | undefined;
  /** LinkName */
  linkName!: string | undefined;
  /** PosX */
  posX!: number | undefined;
  /** PosY */
  posY!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.linkName = _data['linkName'];
      this.posX = _data['posX'];
      this.posY = _data['posY'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Enterprise_ExtEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Enterprise_ExtEditDto>(data, _mappings, App_Enterprise_ExtEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['linkName'] = this.linkName;
    data['posX'] = this.posX;
    data['posY'] = this.posY;
    return data;
  }

  clone(): App_Enterprise_ExtEditDto {
    const json = this.toJSON();
    let result = new App_Enterprise_ExtEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateApp_Enterprise_ExtInput {
  app_Enterprise_Ext!: App_Enterprise_ExtEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Enterprise_Ext = _data['app_Enterprise_Ext']
        ? App_Enterprise_ExtEditDto.fromJS(_data['app_Enterprise_Ext'], _mappings)
        : new App_Enterprise_ExtEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateApp_Enterprise_ExtInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateApp_Enterprise_ExtInput>(
      data,
      _mappings,
      CreateOrUpdateApp_Enterprise_ExtInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Enterprise_Ext'] = this.app_Enterprise_Ext
      ? this.app_Enterprise_Ext.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateApp_Enterprise_ExtInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateApp_Enterprise_ExtInput();
    result.init(json);
    return result;
  }
}

/** 企业扩展的列表DTO Erinyes.Jianfei.App_Enterprise_Ext */
export class App_Enterprise_ExtListDto {
  id!: number | undefined;
  /** LinkName */
  linkName!: string | undefined;
  /** PosX */
  posX!: number | undefined;
  /** PosY */
  posY!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.linkName = _data['linkName'];
      this.posX = _data['posX'];
      this.posY = _data['posY'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_Enterprise_ExtListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_Enterprise_ExtListDto>(data, _mappings, App_Enterprise_ExtListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['linkName'] = this.linkName;
    data['posX'] = this.posX;
    data['posY'] = this.posY;
    return data;
  }

  clone(): App_Enterprise_ExtListDto {
    const json = this.toJSON();
    let result = new App_Enterprise_ExtListDto();
    result.init(json);
    return result;
  }
}

/** 企业信息DTO */
export class EnterpriseListDto {
  entId!: number;
  /** EntName */
  entName!: string | undefined;
  /** 报价单Id */
  offerId!: number | undefined;
  /** CantonName */
  cantonName!: string | undefined;
  /** CantonFullName */
  cantonFullName!: string | undefined;
  /** CantonCode */
  cantonCode!: string | undefined;
  /** 处置方式列表 */
  disposalMethodList!: string[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.entName = _data['entName'];
      this.offerId = _data['offerId'];
      this.cantonName = _data['cantonName'];
      this.cantonFullName = _data['cantonFullName'];
      this.cantonCode = _data['cantonCode'];
      if (Array.isArray(_data['disposalMethodList'])) {
        this.disposalMethodList = [] as any;
        for (let item of _data['disposalMethodList']) this.disposalMethodList!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): EnterpriseListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EnterpriseListDto>(data, _mappings, EnterpriseListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['entName'] = this.entName;
    data['offerId'] = this.offerId;
    data['cantonName'] = this.cantonName;
    data['cantonFullName'] = this.cantonFullName;
    data['cantonCode'] = this.cantonCode;
    if (Array.isArray(this.disposalMethodList)) {
      data['disposalMethodList'] = [];
      for (let item of this.disposalMethodList) data['disposalMethodList'].push(item);
    }
    return data;
  }

  clone(): EnterpriseListDto {
    const json = this.toJSON();
    let result = new EnterpriseListDto();
    result.init(json);
    return result;
  }
}

export class NewEnterpriseListDto {
  /** 处置方式查询列表 */
  searchDisposalMethodList!: string[] | undefined;
  enterpriseList!: EnterpriseListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['searchDisposalMethodList'])) {
        this.searchDisposalMethodList = [] as any;
        for (let item of _data['searchDisposalMethodList'])
          this.searchDisposalMethodList!.push(item);
      }
      if (Array.isArray(_data['enterpriseList'])) {
        this.enterpriseList = [] as any;
        for (let item of _data['enterpriseList'])
          this.enterpriseList!.push(EnterpriseListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): NewEnterpriseListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<NewEnterpriseListDto>(data, _mappings, NewEnterpriseListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.searchDisposalMethodList)) {
      data['searchDisposalMethodList'] = [];
      for (let item of this.searchDisposalMethodList) data['searchDisposalMethodList'].push(item);
    }
    if (Array.isArray(this.enterpriseList)) {
      data['enterpriseList'] = [];
      for (let item of this.enterpriseList) data['enterpriseList'].push(item.toJSON());
    }
    return data;
  }

  clone(): NewEnterpriseListDto {
    const json = this.toJSON();
    let result = new NewEnterpriseListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑企业扩展的Dto */
export class GetApp_Enterprise_ExtForEditOutput {
  app_Enterprise_Ext!: App_Enterprise_ExtEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Enterprise_Ext = _data['app_Enterprise_Ext']
        ? App_Enterprise_ExtEditDto.fromJS(_data['app_Enterprise_Ext'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetApp_Enterprise_ExtForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetApp_Enterprise_ExtForEditOutput>(
      data,
      _mappings,
      GetApp_Enterprise_ExtForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Enterprise_Ext'] = this.app_Enterprise_Ext
      ? this.app_Enterprise_Ext.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): GetApp_Enterprise_ExtForEditOutput {
    const json = this.toJSON();
    let result = new GetApp_Enterprise_ExtForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfApp_Enterprise_ExtListDto {
  totalCount!: number;
  items!: App_Enterprise_ExtListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(App_Enterprise_ExtListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfApp_Enterprise_ExtListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfApp_Enterprise_ExtListDto>(
      data,
      _mappings,
      PagedResultDtoOfApp_Enterprise_ExtListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfApp_Enterprise_ExtListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfApp_Enterprise_ExtListDto();
    result.init(json);
    return result;
  }
}

export class EntityDtoOfInt64 {
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): EntityDtoOfInt64 | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EntityDtoOfInt64>(data, _mappings, EntityDtoOfInt64);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    return data;
  }

  clone(): EntityDtoOfInt64 {
    const json = this.toJSON();
    let result = new EntityDtoOfInt64();
    result.init(json);
    return result;
  }
}

/** 处置报价的列表DTO Erinyes.Jianfei.App_Offer */
export class App_OfferEditDto {
  /** Id */
  id!: number | undefined;
  /** 询价 */
  enquiryId!: number | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 报价类型 */
  offerType!: number | undefined;
  /** 危废总量 */
  totalAmount!: string | undefined;
  /** 总金额 */
  totalPrice!: number | undefined;
  /** 运费金额 */
  transferPrice!: number | undefined;
  /** 是否含税 */
  isIncludeTax!: boolean;
  /** 报价状态 */
  offerState!: number | undefined;
  /** 标签信息 */
  tagName!: string | undefined;
  /** 处置企业 */
  disposalEntId!: number | undefined;
  /** 报价附件 */
  offerFile!: string | undefined;
  /** 报价危废详情 */
  offerWasteList!: App_Offer_WasteDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.enquiryId = _data['enquiryId'];
      this.sysUserId = _data['sysUserId'];
      this.offerType = _data['offerType'];
      this.totalAmount = _data['totalAmount'];
      this.totalPrice = _data['totalPrice'];
      this.transferPrice = _data['transferPrice'];
      this.isIncludeTax = _data['isIncludeTax'];
      this.offerState = _data['offerState'];
      this.tagName = _data['tagName'];
      this.disposalEntId = _data['disposalEntId'];
      this.offerFile = _data['offerFile'];
      if (Array.isArray(_data['offerWasteList'])) {
        this.offerWasteList = [] as any;
        for (let item of _data['offerWasteList'])
          this.offerWasteList!.push(App_Offer_WasteDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): App_OfferEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_OfferEditDto>(data, _mappings, App_OfferEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['enquiryId'] = this.enquiryId;
    data['sysUserId'] = this.sysUserId;
    data['offerType'] = this.offerType;
    data['totalAmount'] = this.totalAmount;
    data['totalPrice'] = this.totalPrice;
    data['transferPrice'] = this.transferPrice;
    data['isIncludeTax'] = this.isIncludeTax;
    data['offerState'] = this.offerState;
    data['tagName'] = this.tagName;
    data['disposalEntId'] = this.disposalEntId;
    data['offerFile'] = this.offerFile;
    if (Array.isArray(this.offerWasteList)) {
      data['offerWasteList'] = [];
      for (let item of this.offerWasteList) data['offerWasteList'].push(item.toJSON());
    }
    return data;
  }

  clone(): App_OfferEditDto {
    const json = this.toJSON();
    let result = new App_OfferEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateApp_OfferInput {
  app_Offer!: App_OfferEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Offer = _data['app_Offer']
        ? App_OfferEditDto.fromJS(_data['app_Offer'], _mappings)
        : new App_OfferEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateApp_OfferInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateApp_OfferInput>(
      data,
      _mappings,
      CreateOrUpdateApp_OfferInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Offer'] = this.app_Offer ? this.app_Offer.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateApp_OfferInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateApp_OfferInput();
    result.init(json);
    return result;
  }
}

/** 读取可编辑处置报价的Dto */
export class GetApp_OfferForEditOutput {
  app_Offer!: App_OfferEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Offer = _data['app_Offer']
        ? App_OfferEditDto.fromJS(_data['app_Offer'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetApp_OfferForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetApp_OfferForEditOutput>(data, _mappings, GetApp_OfferForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Offer'] = this.app_Offer ? this.app_Offer.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetApp_OfferForEditOutput {
    const json = this.toJSON();
    let result = new GetApp_OfferForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfApp_OfferListDto {
  totalCount!: number;
  items!: App_OfferListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(App_OfferListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfApp_OfferListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfApp_OfferListDto>(
      data,
      _mappings,
      PagedResultDtoOfApp_OfferListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfApp_OfferListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfApp_OfferListDto();
    result.init(json);
    return result;
  }
}

/** 取样记录的列表DTO Erinyes.Jianfei.App_Sample */
export class App_SampleEditDto {
  /** Id */
  id!: number | undefined;
  /** 询价 */
  enquiryId!: number | undefined;
  /** 寄样联系人 */
  linkName!: string | undefined;
  /** 寄样联系手机 */
  linkPhone!: string | undefined;
  /** 寄样地址 */
  linkAddress!: string | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 取样时间 */
  sampleTime!: string | undefined;
  /** 快递单号 */
  expressNo!: string | undefined;
  /** 取样状态 */
  sampleState!: number | undefined;
  /** 处置企业 */
  disposalEntId!: number | undefined;
  /** 现场图片 */
  attachment!: string | undefined;
  /** 取样危废详情 */
  sampleWasteList!: App_Sample_Waste[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.enquiryId = _data['enquiryId'];
      this.linkName = _data['linkName'];
      this.linkPhone = _data['linkPhone'];
      this.linkAddress = _data['linkAddress'];
      this.sysUserId = _data['sysUserId'];
      this.sampleTime = _data['sampleTime'];
      this.expressNo = _data['expressNo'];
      this.sampleState = _data['sampleState'];
      this.disposalEntId = _data['disposalEntId'];
      this.attachment = _data['attachment'];
      if (Array.isArray(_data['sampleWasteList'])) {
        this.sampleWasteList = [] as any;
        for (let item of _data['sampleWasteList'])
          this.sampleWasteList!.push(App_Sample_Waste.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): App_SampleEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_SampleEditDto>(data, _mappings, App_SampleEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['enquiryId'] = this.enquiryId;
    data['linkName'] = this.linkName;
    data['linkPhone'] = this.linkPhone;
    data['linkAddress'] = this.linkAddress;
    data['sysUserId'] = this.sysUserId;
    data['sampleTime'] = this.sampleTime;
    data['expressNo'] = this.expressNo;
    data['sampleState'] = this.sampleState;
    data['disposalEntId'] = this.disposalEntId;
    data['attachment'] = this.attachment;
    if (Array.isArray(this.sampleWasteList)) {
      data['sampleWasteList'] = [];
      for (let item of this.sampleWasteList) data['sampleWasteList'].push(item.toJSON());
    }
    return data;
  }

  clone(): App_SampleEditDto {
    const json = this.toJSON();
    let result = new App_SampleEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateApp_SampleInput {
  app_Sample!: App_SampleEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Sample = _data['app_Sample']
        ? App_SampleEditDto.fromJS(_data['app_Sample'], _mappings)
        : new App_SampleEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateApp_SampleInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateApp_SampleInput>(
      data,
      _mappings,
      CreateOrUpdateApp_SampleInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Sample'] = this.app_Sample ? this.app_Sample.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateApp_SampleInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateApp_SampleInput();
    result.init(json);
    return result;
  }
}

/** 取样记录的列表DTO Erinyes.Jianfei.App_Sample */
export class App_SampleListDto {
  id!: number | undefined;
  /** 询价 */
  enquiryId!: number | undefined;
  /** 寄样联系人 */
  linkName!: string | undefined;
  /** 寄样联系手机 */
  linkPhone!: string | undefined;
  /** 寄样地址 */
  linkAddress!: string | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 取样时间 */
  sampleTime!: dayjs.Dayjs | undefined;
  /** 快递单号 */
  expressNo!: string | undefined;
  /** 取样状态 */
  sampleState!: number | undefined;
  /** 处置企业(送样) */
  disposalEntId!: number | undefined;
  /** 处置企业名称(送样) */
  disposalEntName!: string | undefined;
  /** 生产企业(取样) */
  produceEntId!: number | undefined;
  /** 生产企业名称（取样） */
  produceEntName!: string | undefined;
  /** 生产企业地址（取样） */
  produceEntAddress!: string | undefined;
  /** 取样联系人 */
  produceEntLinkName!: string | undefined;
  /** 取样联系手机 */
  produceEntLinkPhone!: string | undefined;
  /** 现场图片 */
  attachment!: string | undefined;
  /** 取样危废详情 */
  sampleWasteList!: App_Sample_Waste[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.enquiryId = _data['enquiryId'];
      this.linkName = _data['linkName'];
      this.linkPhone = _data['linkPhone'];
      this.linkAddress = _data['linkAddress'];
      this.sysUserId = _data['sysUserId'];
      this.sampleTime = _data['sampleTime']
        ? dayjs(_data['sampleTime'].toString())
        : <any>undefined;
      this.expressNo = _data['expressNo'];
      this.sampleState = _data['sampleState'];
      this.disposalEntId = _data['disposalEntId'];
      this.disposalEntName = _data['disposalEntName'];
      this.produceEntId = _data['produceEntId'];
      this.produceEntName = _data['produceEntName'];
      this.produceEntAddress = _data['produceEntAddress'];
      this.produceEntLinkName = _data['produceEntLinkName'];
      this.produceEntLinkPhone = _data['produceEntLinkPhone'];
      this.attachment = _data['attachment'];
      if (Array.isArray(_data['sampleWasteList'])) {
        this.sampleWasteList = [] as any;
        for (let item of _data['sampleWasteList'])
          this.sampleWasteList!.push(App_Sample_Waste.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): App_SampleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_SampleListDto>(data, _mappings, App_SampleListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['enquiryId'] = this.enquiryId;
    data['linkName'] = this.linkName;
    data['linkPhone'] = this.linkPhone;
    data['linkAddress'] = this.linkAddress;
    data['sysUserId'] = this.sysUserId;
    data['sampleTime'] = this.sampleTime ? this.sampleTime.toISOString() : <any>undefined;
    data['expressNo'] = this.expressNo;
    data['sampleState'] = this.sampleState;
    data['disposalEntId'] = this.disposalEntId;
    data['disposalEntName'] = this.disposalEntName;
    data['produceEntId'] = this.produceEntId;
    data['produceEntName'] = this.produceEntName;
    data['produceEntAddress'] = this.produceEntAddress;
    data['produceEntLinkName'] = this.produceEntLinkName;
    data['produceEntLinkPhone'] = this.produceEntLinkPhone;
    data['attachment'] = this.attachment;
    if (Array.isArray(this.sampleWasteList)) {
      data['sampleWasteList'] = [];
      for (let item of this.sampleWasteList) data['sampleWasteList'].push(item.toJSON());
    }
    return data;
  }

  clone(): App_SampleListDto {
    const json = this.toJSON();
    let result = new App_SampleListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑取样记录的Dto */
export class GetApp_SampleForEditOutput {
  app_Sample!: App_SampleEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Sample = _data['app_Sample']
        ? App_SampleEditDto.fromJS(_data['app_Sample'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetApp_SampleForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetApp_SampleForEditOutput>(data, _mappings, GetApp_SampleForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Sample'] = this.app_Sample ? this.app_Sample.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetApp_SampleForEditOutput {
    const json = this.toJSON();
    let result = new GetApp_SampleForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfApp_SampleListDto {
  totalCount!: number;
  items!: App_SampleListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(App_SampleListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfApp_SampleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfApp_SampleListDto>(
      data,
      _mappings,
      PagedResultDtoOfApp_SampleListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfApp_SampleListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfApp_SampleListDto();
    result.init(json);
    return result;
  }
}

/** 转移记录的列表DTO Erinyes.Jianfei.App_Transfer */
export class App_TransferEditDto {
  /** Id */
  id!: number | undefined;
  /** 合同 */
  contractId!: number | undefined;
  /** 计划转移时间 */
  transferPlanDate!: dayjs.Dayjs | undefined;
  /** 处置企业 */
  disposalEntId!: number | undefined;
  /** 产废企业 */
  produceEntId!: number | undefined;
  /** 实际转移时间 */
  transferDate!: dayjs.Dayjs | undefined;
  /** 车型 */
  transferType!: string | undefined;
  /** 转移状态 */
  transferState!: number | undefined;
  /** 运输公司 */
  transferEntName!: string | undefined;
  /** 运输司机 */
  driver!: string | undefined;
  /** 运输司机联系方式 */
  driverPhone!: string | undefined;
  /** 押运员 */
  supercargo!: string | undefined;
  /** 押运员手机 */
  supercargoPhone!: string | undefined;
  /** 运输车辆号码 */
  transferCarNo!: string | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 转运附件 */
  transferFile!: string | undefined;
  /** 转运危废详情 */
  transferWasteList!: App_Transfer_Waste[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.contractId = _data['contractId'];
      this.transferPlanDate = _data['transferPlanDate']
        ? dayjs(_data['transferPlanDate'].toString())
        : <any>undefined;
      this.disposalEntId = _data['disposalEntId'];
      this.produceEntId = _data['produceEntId'];
      this.transferDate = _data['transferDate']
        ? dayjs(_data['transferDate'].toString())
        : <any>undefined;
      this.transferType = _data['transferType'];
      this.transferState = _data['transferState'];
      this.transferEntName = _data['transferEntName'];
      this.driver = _data['driver'];
      this.driverPhone = _data['driverPhone'];
      this.supercargo = _data['supercargo'];
      this.supercargoPhone = _data['supercargoPhone'];
      this.transferCarNo = _data['transferCarNo'];
      this.sysUserId = _data['sysUserId'];
      this.transferFile = _data['transferFile'];
      if (Array.isArray(_data['transferWasteList'])) {
        this.transferWasteList = [] as any;
        for (let item of _data['transferWasteList'])
          this.transferWasteList!.push(App_Transfer_Waste.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): App_TransferEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_TransferEditDto>(data, _mappings, App_TransferEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['contractId'] = this.contractId;
    data['transferPlanDate'] = this.transferPlanDate
      ? this.transferPlanDate.toISOString()
      : <any>undefined;
    data['disposalEntId'] = this.disposalEntId;
    data['produceEntId'] = this.produceEntId;
    data['transferDate'] = this.transferDate ? this.transferDate.toISOString() : <any>undefined;
    data['transferType'] = this.transferType;
    data['transferState'] = this.transferState;
    data['transferEntName'] = this.transferEntName;
    data['driver'] = this.driver;
    data['driverPhone'] = this.driverPhone;
    data['supercargo'] = this.supercargo;
    data['supercargoPhone'] = this.supercargoPhone;
    data['transferCarNo'] = this.transferCarNo;
    data['sysUserId'] = this.sysUserId;
    data['transferFile'] = this.transferFile;
    if (Array.isArray(this.transferWasteList)) {
      data['transferWasteList'] = [];
      for (let item of this.transferWasteList) data['transferWasteList'].push(item.toJSON());
    }
    return data;
  }

  clone(): App_TransferEditDto {
    const json = this.toJSON();
    let result = new App_TransferEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateApp_TransferInput {
  app_Transfer!: App_TransferEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Transfer = _data['app_Transfer']
        ? App_TransferEditDto.fromJS(_data['app_Transfer'], _mappings)
        : new App_TransferEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateApp_TransferInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateApp_TransferInput>(
      data,
      _mappings,
      CreateOrUpdateApp_TransferInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Transfer'] = this.app_Transfer ? this.app_Transfer.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateApp_TransferInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateApp_TransferInput();
    result.init(json);
    return result;
  }
}

/** 转移记录的列表DTO Erinyes.Jianfei.App_Transfer */
export class App_TransferListDto {
  id!: number | undefined;
  /** 合同 */
  contractId!: number | undefined;
  /** 计划转移时间 */
  transferPlanDate!: dayjs.Dayjs | undefined;
  /** 处置企业 */
  disposalEntId!: number | undefined;
  /** 产废企业 */
  produceEntId!: number | undefined;
  /** 处置企业名称 */
  disposalEntName!: string | undefined;
  /** 产废企业名称 */
  produceEntName!: string | undefined;
  /** 实际转移时间 */
  transferDate!: dayjs.Dayjs | undefined;
  /** 车型 */
  transferType!: string | undefined;
  /** 转移状态 */
  transferState!: number | undefined;
  /** 运输公司 */
  transferEntName!: string | undefined;
  /** 运输司机 */
  driver!: string | undefined;
  /** 运输司机联系方式 */
  driverPhone!: string | undefined;
  /** 押运员 */
  supercargo!: string | undefined;
  /** 押运员手机 */
  supercargoPhone!: string | undefined;
  /** 运输车辆号码 */
  transferCarNo!: string | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 转运附件 */
  transferFile!: string | undefined;
  /** 转运危废详情 */
  transferWasteList!: App_Transfer_Waste[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.contractId = _data['contractId'];
      this.transferPlanDate = _data['transferPlanDate']
        ? dayjs(_data['transferPlanDate'].toString())
        : <any>undefined;
      this.disposalEntId = _data['disposalEntId'];
      this.produceEntId = _data['produceEntId'];
      this.disposalEntName = _data['disposalEntName'];
      this.produceEntName = _data['produceEntName'];
      this.transferDate = _data['transferDate']
        ? dayjs(_data['transferDate'].toString())
        : <any>undefined;
      this.transferType = _data['transferType'];
      this.transferState = _data['transferState'];
      this.transferEntName = _data['transferEntName'];
      this.driver = _data['driver'];
      this.driverPhone = _data['driverPhone'];
      this.supercargo = _data['supercargo'];
      this.supercargoPhone = _data['supercargoPhone'];
      this.transferCarNo = _data['transferCarNo'];
      this.sysUserId = _data['sysUserId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.transferFile = _data['transferFile'];
      if (Array.isArray(_data['transferWasteList'])) {
        this.transferWasteList = [] as any;
        for (let item of _data['transferWasteList'])
          this.transferWasteList!.push(App_Transfer_Waste.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): App_TransferListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_TransferListDto>(data, _mappings, App_TransferListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['contractId'] = this.contractId;
    data['transferPlanDate'] = this.transferPlanDate
      ? this.transferPlanDate.toISOString()
      : <any>undefined;
    data['disposalEntId'] = this.disposalEntId;
    data['produceEntId'] = this.produceEntId;
    data['disposalEntName'] = this.disposalEntName;
    data['produceEntName'] = this.produceEntName;
    data['transferDate'] = this.transferDate ? this.transferDate.toISOString() : <any>undefined;
    data['transferType'] = this.transferType;
    data['transferState'] = this.transferState;
    data['transferEntName'] = this.transferEntName;
    data['driver'] = this.driver;
    data['driverPhone'] = this.driverPhone;
    data['supercargo'] = this.supercargo;
    data['supercargoPhone'] = this.supercargoPhone;
    data['transferCarNo'] = this.transferCarNo;
    data['sysUserId'] = this.sysUserId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['transferFile'] = this.transferFile;
    if (Array.isArray(this.transferWasteList)) {
      data['transferWasteList'] = [];
      for (let item of this.transferWasteList) data['transferWasteList'].push(item.toJSON());
    }
    return data;
  }

  clone(): App_TransferListDto {
    const json = this.toJSON();
    let result = new App_TransferListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑转移记录的Dto */
export class GetApp_TransferForEditOutput {
  app_Transfer!: App_TransferEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Transfer = _data['app_Transfer']
        ? App_TransferEditDto.fromJS(_data['app_Transfer'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetApp_TransferForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetApp_TransferForEditOutput>(
      data,
      _mappings,
      GetApp_TransferForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Transfer'] = this.app_Transfer ? this.app_Transfer.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetApp_TransferForEditOutput {
    const json = this.toJSON();
    let result = new GetApp_TransferForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfApp_TransferListDto {
  totalCount!: number;
  items!: App_TransferListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(App_TransferListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfApp_TransferListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfApp_TransferListDto>(
      data,
      _mappings,
      PagedResultDtoOfApp_TransferListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfApp_TransferListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfApp_TransferListDto();
    result.init(json);
    return result;
  }
}

/** 平台解锁危废线索的列表DTO Erinyes.Jianfei.App_Viewclue */
export class App_ViewclueEditDto {
  /** Id */
  id!: number | undefined;
  /** 企业主键 */
  entId!: number | undefined;
  /** 解锁时间 */
  unlockTime!: dayjs.Dayjs | undefined;
  /** 跟进状态 */
  followUpState!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.entId = _data['entId'];
      this.unlockTime = _data['unlockTime']
        ? dayjs(_data['unlockTime'].toString())
        : <any>undefined;
      this.followUpState = _data['followUpState'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_ViewclueEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_ViewclueEditDto>(data, _mappings, App_ViewclueEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['entId'] = this.entId;
    data['unlockTime'] = this.unlockTime ? this.unlockTime.toISOString() : <any>undefined;
    data['followUpState'] = this.followUpState;
    return data;
  }

  clone(): App_ViewclueEditDto {
    const json = this.toJSON();
    let result = new App_ViewclueEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateApp_ViewclueInput {
  app_Viewclue!: App_ViewclueEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Viewclue = _data['app_Viewclue']
        ? App_ViewclueEditDto.fromJS(_data['app_Viewclue'], _mappings)
        : new App_ViewclueEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateApp_ViewclueInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateApp_ViewclueInput>(
      data,
      _mappings,
      CreateOrUpdateApp_ViewclueInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Viewclue'] = this.app_Viewclue ? this.app_Viewclue.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateApp_ViewclueInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateApp_ViewclueInput();
    result.init(json);
    return result;
  }
}

/** 平台解锁危废线索的列表DTO Erinyes.Jianfei.App_Followup */
export class App_FollowupEditDto {
  /** Id */
  id!: number | undefined;
  /** 线索主键 */
  viewClueId!: number | undefined;
  /** 跟进状态 */
  followUpState!: number | undefined;
  /** 下次跟进时间 */
  nextContactTime!: dayjs.Dayjs | undefined;
  /** 跟进内容 */
  followContent!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.viewClueId = _data['viewClueId'];
      this.followUpState = _data['followUpState'];
      this.nextContactTime = _data['nextContactTime']
        ? dayjs(_data['nextContactTime'].toString())
        : <any>undefined;
      this.followContent = _data['followContent'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_FollowupEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_FollowupEditDto>(data, _mappings, App_FollowupEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['viewClueId'] = this.viewClueId;
    data['followUpState'] = this.followUpState;
    data['nextContactTime'] = this.nextContactTime
      ? this.nextContactTime.toISOString()
      : <any>undefined;
    data['followContent'] = this.followContent;
    return data;
  }

  clone(): App_FollowupEditDto {
    const json = this.toJSON();
    let result = new App_FollowupEditDto();
    result.init(json);
    return result;
  }
}

/** 企业基本信息 */
export class EnterpriseDto {
  /** 企业ID */
  id!: number | undefined;
  /** 是否是新企业 */
  isNewEnt!: boolean | undefined;
  /** 企业注册名称 */
  regName!: string | undefined;
  /** 统一社会信用代码 */
  creditCode!: string | undefined;
  /** 所属行业 */
  industryStr!: string | undefined;
  /** 行政区 */
  cantonStr!: string | undefined;
  /** 行政区 */
  cantonCode!: string | undefined;
  /** 环保行业 */
  envIndustryStr!: string | undefined;
  /** 企业网址 */
  website!: string | undefined;
  /** 工商注册号 */
  regNo!: string | undefined;
  /** 组织机构代码（统一解析） */
  orgCode!: string | undefined;
  orgType!: string | undefined;
  /** 发证机关（登记）类型（统一解析） */
  issueOrgType!: string | undefined;
  /** 发证机关名称 */
  issueOrgName!: string | undefined;
  /** 发证日期 */
  issueDate!: dayjs.Dayjs | undefined;
  /** 法定代表人名称 */
  legalName!: string | undefined;
  /** 企业注册类型 */
  regType!: string | undefined;
  /** 企业注册地址 */
  regAdress!: string | undefined;
  /** 注册资本 */
  regCapital!: number | undefined;
  /** 注册币种 */
  regCapitalCur!: string | undefined;
  /** 实收资本 */
  revCapital!: number | undefined;
  /** 金额单位 */
  unit!: string | undefined;
  /** 成立日期 */
  foundDate!: dayjs.Dayjs | undefined;
  /** 经营开始日期（yyyy-MM-dd） */
  startDate!: dayjs.Dayjs | undefined;
  /** 经营结束日期（yyyy-MM-dd） */
  endDate!: dayjs.Dayjs | undefined;
  /** 许可经营项目 */
  licenseItems!: string | undefined;
  /** 一般经营项目 */
  generalItems!: string | undefined;
  /** 经营范围及方式（其中许可经营项目、一般经营项目自动补充） */
  businessScope!: string | undefined;
  /** 经营状态 */
  businessStatus!: string | undefined;
  /** 注销日期（根据经营状态） */
  logoutDate!: dayjs.Dayjs | undefined;
  /** 吊销日期（根据经营状态） */
  revocationDate!: dayjs.Dayjs | undefined;
  /** 证照文件指纹（加密，包含原文件名、后缀名） */
  idFingerprint!: string | undefined;
  /** 最后年检日期 */
  lastInspectionDate!: dayjs.Dayjs | undefined;
  /** 最后年检年度 */
  lastInspectionYear!: dayjs.Dayjs | undefined;
  /** 工商信息认证记录 */
  isAudited!: number;
  /** 排序号 */
  ix!: number;
  lastModificationTime!: dayjs.Dayjs | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.isNewEnt = _data['isNewEnt'];
      this.regName = _data['regName'];
      this.creditCode = _data['creditCode'];
      this.industryStr = _data['industryStr'];
      this.cantonStr = _data['cantonStr'];
      this.cantonCode = _data['cantonCode'];
      this.envIndustryStr = _data['envIndustryStr'];
      this.website = _data['website'];
      this.regNo = _data['regNo'];
      this.orgCode = _data['orgCode'];
      this.orgType = _data['orgType'];
      this.issueOrgType = _data['issueOrgType'];
      this.issueOrgName = _data['issueOrgName'];
      this.issueDate = _data['issueDate'] ? dayjs(_data['issueDate'].toString()) : <any>undefined;
      this.legalName = _data['legalName'];
      this.regType = _data['regType'];
      this.regAdress = _data['regAdress'];
      this.regCapital = _data['regCapital'];
      this.regCapitalCur = _data['regCapitalCur'];
      this.revCapital = _data['revCapital'];
      this.unit = _data['unit'];
      this.foundDate = _data['foundDate'] ? dayjs(_data['foundDate'].toString()) : <any>undefined;
      this.startDate = _data['startDate'] ? dayjs(_data['startDate'].toString()) : <any>undefined;
      this.endDate = _data['endDate'] ? dayjs(_data['endDate'].toString()) : <any>undefined;
      this.licenseItems = _data['licenseItems'];
      this.generalItems = _data['generalItems'];
      this.businessScope = _data['businessScope'];
      this.businessStatus = _data['businessStatus'];
      this.logoutDate = _data['logoutDate']
        ? dayjs(_data['logoutDate'].toString())
        : <any>undefined;
      this.revocationDate = _data['revocationDate']
        ? dayjs(_data['revocationDate'].toString())
        : <any>undefined;
      this.idFingerprint = _data['idFingerprint'];
      this.lastInspectionDate = _data['lastInspectionDate']
        ? dayjs(_data['lastInspectionDate'].toString())
        : <any>undefined;
      this.lastInspectionYear = _data['lastInspectionYear']
        ? dayjs(_data['lastInspectionYear'].toString())
        : <any>undefined;
      this.isAudited = _data['isAudited'];
      this.ix = _data['ix'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): EnterpriseDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EnterpriseDto>(data, _mappings, EnterpriseDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['isNewEnt'] = this.isNewEnt;
    data['regName'] = this.regName;
    data['creditCode'] = this.creditCode;
    data['industryStr'] = this.industryStr;
    data['cantonStr'] = this.cantonStr;
    data['cantonCode'] = this.cantonCode;
    data['envIndustryStr'] = this.envIndustryStr;
    data['website'] = this.website;
    data['regNo'] = this.regNo;
    data['orgCode'] = this.orgCode;
    data['orgType'] = this.orgType;
    data['issueOrgType'] = this.issueOrgType;
    data['issueOrgName'] = this.issueOrgName;
    data['issueDate'] = this.issueDate ? this.issueDate.toISOString() : <any>undefined;
    data['legalName'] = this.legalName;
    data['regType'] = this.regType;
    data['regAdress'] = this.regAdress;
    data['regCapital'] = this.regCapital;
    data['regCapitalCur'] = this.regCapitalCur;
    data['revCapital'] = this.revCapital;
    data['unit'] = this.unit;
    data['foundDate'] = this.foundDate ? this.foundDate.toISOString() : <any>undefined;
    data['startDate'] = this.startDate ? this.startDate.toISOString() : <any>undefined;
    data['endDate'] = this.endDate ? this.endDate.toISOString() : <any>undefined;
    data['licenseItems'] = this.licenseItems;
    data['generalItems'] = this.generalItems;
    data['businessScope'] = this.businessScope;
    data['businessStatus'] = this.businessStatus;
    data['logoutDate'] = this.logoutDate ? this.logoutDate.toISOString() : <any>undefined;
    data['revocationDate'] = this.revocationDate
      ? this.revocationDate.toISOString()
      : <any>undefined;
    data['idFingerprint'] = this.idFingerprint;
    data['lastInspectionDate'] = this.lastInspectionDate
      ? this.lastInspectionDate.toISOString()
      : <any>undefined;
    data['lastInspectionYear'] = this.lastInspectionYear
      ? this.lastInspectionYear.toISOString()
      : <any>undefined;
    data['isAudited'] = this.isAudited;
    data['ix'] = this.ix;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    return data;
  }

  clone(): EnterpriseDto {
    const json = this.toJSON();
    let result = new EnterpriseDto();
    result.init(json);
    return result;
  }
}

/** 联系人基本信息 */
export class ContactDto {
  id!: number;
  /** 联系人名称 */
  contactName!: string | undefined;
  /** CustomerId */
  customerId!: number;
  /** Customer */
  customerName!: string | undefined;
  /** IsDM */
  isDM!: boolean | undefined;
  /** 首要联系人 0：不是 1：是 */
  isFirstContact!: boolean | undefined;
  /** 身份证号码 */
  contactNo!: string | undefined;
  /** 职务 */
  contactPost!: string | undefined;
  /** 办公电话 */
  contactTel!: string | undefined;
  /** 移动电话（需要验证） */
  contactPhone!: string | undefined;
  /** 电子邮件 */
  contacteMail!: string | undefined;
  /** 邮政编码 */
  zipCode!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 传真 */
  contactFax!: string | undefined;
  /** 来源 */
  infoSource!: string | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** Sex */
  sex!: boolean | undefined;
  /** 排序号 */
  ix!: number;
  lastModificationTime!: dayjs.Dayjs | undefined;
  /** 创建人ID */
  creatorUserId!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.contactName = _data['contactName'];
      this.customerId = _data['customerId'];
      this.customerName = _data['customerName'];
      this.isDM = _data['isDM'];
      this.isFirstContact = _data['isFirstContact'];
      this.contactNo = _data['contactNo'];
      this.contactPost = _data['contactPost'];
      this.contactTel = _data['contactTel'];
      this.contactPhone = _data['contactPhone'];
      this.contacteMail = _data['contacteMail'];
      this.zipCode = _data['zipCode'];
      this.address = _data['address'];
      this.contactFax = _data['contactFax'];
      this.infoSource = _data['infoSource'];
      this.remark = _data['remark'];
      this.sex = _data['sex'];
      this.ix = _data['ix'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
    }
  }

  static fromJS(data: any, _mappings?: any): ContactDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ContactDto>(data, _mappings, ContactDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['contactName'] = this.contactName;
    data['customerId'] = this.customerId;
    data['customerName'] = this.customerName;
    data['isDM'] = this.isDM;
    data['isFirstContact'] = this.isFirstContact;
    data['contactNo'] = this.contactNo;
    data['contactPost'] = this.contactPost;
    data['contactTel'] = this.contactTel;
    data['contactPhone'] = this.contactPhone;
    data['contacteMail'] = this.contacteMail;
    data['zipCode'] = this.zipCode;
    data['address'] = this.address;
    data['contactFax'] = this.contactFax;
    data['infoSource'] = this.infoSource;
    data['remark'] = this.remark;
    data['sex'] = this.sex;
    data['ix'] = this.ix;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    return data;
  }

  clone(): ContactDto {
    const json = this.toJSON();
    let result = new ContactDto();
    result.init(json);
    return result;
  }
}

export class EnterpriseHWDto {
  /** 企业ID */
  entId!: number;
  /** 企业名称 */
  entName!: string | undefined;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 是否已解锁 */
  isViewed!: boolean;
  /** 线索内容 */
  clueContent!: string | undefined;
  /** 转移量 */
  transferQuantity!: number | undefined;
  /** 八位码 */
  octetcode!: string | undefined;
  /** 父级 */
  parentOctetcode!: string | undefined;
  /** 俗称 */
  vulgo!: string | undefined;
  /** 去向 */
  direction!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.entName = _data['entName'];
      this.cantonName = _data['cantonName'];
      this.isViewed = _data['isViewed'];
      this.clueContent = _data['clueContent'];
      this.transferQuantity = _data['transferQuantity'];
      this.octetcode = _data['octetcode'];
      this.parentOctetcode = _data['parentOctetcode'];
      this.vulgo = _data['vulgo'];
      this.direction = _data['direction'];
    }
  }

  static fromJS(data: any, _mappings?: any): EnterpriseHWDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EnterpriseHWDto>(data, _mappings, EnterpriseHWDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['entName'] = this.entName;
    data['cantonName'] = this.cantonName;
    data['isViewed'] = this.isViewed;
    data['clueContent'] = this.clueContent;
    data['transferQuantity'] = this.transferQuantity;
    data['octetcode'] = this.octetcode;
    data['parentOctetcode'] = this.parentOctetcode;
    data['vulgo'] = this.vulgo;
    data['direction'] = this.direction;
    return data;
  }

  clone(): EnterpriseHWDto {
    const json = this.toJSON();
    let result = new EnterpriseHWDto();
    result.init(json);
    return result;
  }
}

/** 企业线索Dto */
export class EnterpriseAppClueDto {
  /** 企业ID */
  entId!: number;
  /** 企业名称 */
  entName!: string | undefined;
  /** 行政区 */
  cantonName!: string | undefined;
  cantonCode!: string | undefined;
  /** 是否已解锁 */
  isUnlocked!: boolean;
  /** 危废信息 */
  hwContent!: string | undefined;
  /** 危废重量 */
  hwWeight!: number | undefined;
  /** 解锁时间 */
  unlockTime!: dayjs.Dayjs | undefined;
  /** 解锁线索 */
  viewClueId!: number | undefined;
  /** APP解锁消息 */
  appViewClues!: App_Viewclue[] | undefined;
  /** 记录状态 */
  followUpState!: number | undefined;
  /** 剩余次数 */
  leftUnlockedCount!: number;
  /** 今日解锁次数 */
  unlockedCount!: number;
  /** 下次跟进时间 */
  nextContactTime!: dayjs.Dayjs | undefined;
  /** 跟进内容 */
  followContent!: string | undefined;
  enterpriseDto!: EnterpriseDto;
  /** 联系人信息 */
  contactListDto!: ContactDto[] | undefined;
  enterpriseHWListDto!: EnterpriseHWDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.entName = _data['entName'];
      this.cantonName = _data['cantonName'];
      this.cantonCode = _data['cantonCode'];
      this.isUnlocked = _data['isUnlocked'];
      this.hwContent = _data['hwContent'];
      this.hwWeight = _data['hwWeight'];
      this.unlockTime = _data['unlockTime']
        ? dayjs(_data['unlockTime'].toString())
        : <any>undefined;
      this.viewClueId = _data['viewClueId'];
      if (Array.isArray(_data['appViewClues'])) {
        this.appViewClues = [] as any;
        for (let item of _data['appViewClues'])
          this.appViewClues!.push(App_Viewclue.fromJS(item, _mappings));
      }
      this.followUpState = _data['followUpState'];
      this.leftUnlockedCount = _data['leftUnlockedCount'];
      this.unlockedCount = _data['unlockedCount'];
      this.nextContactTime = _data['nextContactTime']
        ? dayjs(_data['nextContactTime'].toString())
        : <any>undefined;
      this.followContent = _data['followContent'];
      this.enterpriseDto = _data['enterpriseDto']
        ? EnterpriseDto.fromJS(_data['enterpriseDto'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['contactListDto'])) {
        this.contactListDto = [] as any;
        for (let item of _data['contactListDto'])
          this.contactListDto!.push(ContactDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['enterpriseHWListDto'])) {
        this.enterpriseHWListDto = [] as any;
        for (let item of _data['enterpriseHWListDto'])
          this.enterpriseHWListDto!.push(EnterpriseHWDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): EnterpriseAppClueDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EnterpriseAppClueDto>(data, _mappings, EnterpriseAppClueDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['entName'] = this.entName;
    data['cantonName'] = this.cantonName;
    data['cantonCode'] = this.cantonCode;
    data['isUnlocked'] = this.isUnlocked;
    data['hwContent'] = this.hwContent;
    data['hwWeight'] = this.hwWeight;
    data['unlockTime'] = this.unlockTime ? this.unlockTime.toISOString() : <any>undefined;
    data['viewClueId'] = this.viewClueId;
    if (Array.isArray(this.appViewClues)) {
      data['appViewClues'] = [];
      for (let item of this.appViewClues) data['appViewClues'].push(item.toJSON());
    }
    data['followUpState'] = this.followUpState;
    data['leftUnlockedCount'] = this.leftUnlockedCount;
    data['unlockedCount'] = this.unlockedCount;
    data['nextContactTime'] = this.nextContactTime
      ? this.nextContactTime.toISOString()
      : <any>undefined;
    data['followContent'] = this.followContent;
    data['enterpriseDto'] = this.enterpriseDto ? this.enterpriseDto.toJSON() : <any>undefined;
    if (Array.isArray(this.contactListDto)) {
      data['contactListDto'] = [];
      for (let item of this.contactListDto) data['contactListDto'].push(item.toJSON());
    }
    if (Array.isArray(this.enterpriseHWListDto)) {
      data['enterpriseHWListDto'] = [];
      for (let item of this.enterpriseHWListDto) data['enterpriseHWListDto'].push(item.toJSON());
    }
    return data;
  }

  clone(): EnterpriseAppClueDto {
    const json = this.toJSON();
    let result = new EnterpriseAppClueDto();
    result.init(json);
    return result;
  }
}

/** 平台解锁危废线索的列表DTO Erinyes.Jianfei.App_Viewclue */
export class App_ViewclueListDto {
  /** Id */
  id!: number | undefined;
  /** 企业主键 */
  entId!: number | undefined;
  /** 解锁时间 */
  unlockTime!: dayjs.Dayjs | undefined;
  /** 跟进状态 */
  followUpState!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.entId = _data['entId'];
      this.unlockTime = _data['unlockTime']
        ? dayjs(_data['unlockTime'].toString())
        : <any>undefined;
      this.followUpState = _data['followUpState'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_ViewclueListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_ViewclueListDto>(data, _mappings, App_ViewclueListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['entId'] = this.entId;
    data['unlockTime'] = this.unlockTime ? this.unlockTime.toISOString() : <any>undefined;
    data['followUpState'] = this.followUpState;
    return data;
  }

  clone(): App_ViewclueListDto {
    const json = this.toJSON();
    let result = new App_ViewclueListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑平台解锁危废线索的Dto */
export class GetApp_ViewclueForEditOutput {
  app_Viewclue!: App_ViewclueEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.app_Viewclue = _data['app_Viewclue']
        ? App_ViewclueEditDto.fromJS(_data['app_Viewclue'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetApp_ViewclueForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetApp_ViewclueForEditOutput>(
      data,
      _mappings,
      GetApp_ViewclueForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['app_Viewclue'] = this.app_Viewclue ? this.app_Viewclue.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetApp_ViewclueForEditOutput {
    const json = this.toJSON();
    let result = new GetApp_ViewclueForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfEnterpriseAppClueDto {
  totalCount!: number;
  items!: EnterpriseAppClueDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(EnterpriseAppClueDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfEnterpriseAppClueDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfEnterpriseAppClueDto>(
      data,
      _mappings,
      PagedResultDtoOfEnterpriseAppClueDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfEnterpriseAppClueDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfEnterpriseAppClueDto();
    result.init(json);
    return result;
  }
}

/** 平台解锁危废线索的列表DTO Erinyes.Jianfei.App_Followup */
export class App_FollowupListDto {
  /** Id */
  id!: number | undefined;
  /** EntId */
  entId!: number;
  /** 企业名称 */
  entName!: string | undefined;
  /** 线索主键 */
  viewClueId!: number | undefined;
  /** 跟进状态 */
  followUpState!: number | undefined;
  /** 下次跟进时间 */
  nextContactTime!: dayjs.Dayjs | undefined;
  /** 跟进内容 */
  followContent!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.entId = _data['entId'];
      this.entName = _data['entName'];
      this.viewClueId = _data['viewClueId'];
      this.followUpState = _data['followUpState'];
      this.nextContactTime = _data['nextContactTime']
        ? dayjs(_data['nextContactTime'].toString())
        : <any>undefined;
      this.followContent = _data['followContent'];
    }
  }

  static fromJS(data: any, _mappings?: any): App_FollowupListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<App_FollowupListDto>(data, _mappings, App_FollowupListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['entId'] = this.entId;
    data['entName'] = this.entName;
    data['viewClueId'] = this.viewClueId;
    data['followUpState'] = this.followUpState;
    data['nextContactTime'] = this.nextContactTime
      ? this.nextContactTime.toISOString()
      : <any>undefined;
    data['followContent'] = this.followContent;
    return data;
  }

  clone(): App_FollowupListDto {
    const json = this.toJSON();
    let result = new App_FollowupListDto();
    result.init(json);
    return result;
  }
}

export class ViewClueTotalDto {
  /** 全部解锁数量 */
  allCount!: number;
  /** 推送数量 */
  pushCount!: number;
  /** 待联系数量 */
  needContactCount!: number;
  /** 不推送数量 */
  noPushCount!: number;
  /** 未跟进数量 */
  noFollowCount!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.allCount = _data['allCount'];
      this.pushCount = _data['pushCount'];
      this.needContactCount = _data['needContactCount'];
      this.noPushCount = _data['noPushCount'];
      this.noFollowCount = _data['noFollowCount'];
    }
  }

  static fromJS(data: any, _mappings?: any): ViewClueTotalDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ViewClueTotalDto>(data, _mappings, ViewClueTotalDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['allCount'] = this.allCount;
    data['pushCount'] = this.pushCount;
    data['needContactCount'] = this.needContactCount;
    data['noPushCount'] = this.noPushCount;
    data['noFollowCount'] = this.noFollowCount;
    return data;
  }

  clone(): ViewClueTotalDto {
    const json = this.toJSON();
    let result = new ViewClueTotalDto();
    result.init(json);
    return result;
  }
}

export class KeyValuePairOfStringIEnumerableOfString {
  readonly key!: string | undefined;
  readonly value!: string[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      (<any>this).key = _data['key'];
      if (Array.isArray(_data['value'])) {
        (<any>this).value = [] as any;
        for (let item of _data['value']) (<any>this).value!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): KeyValuePairOfStringIEnumerableOfString | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<KeyValuePairOfStringIEnumerableOfString>(
      data,
      _mappings,
      KeyValuePairOfStringIEnumerableOfString,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['key'] = this.key;
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item);
    }
    return data;
  }

  clone(): KeyValuePairOfStringIEnumerableOfString {
    const json = this.toJSON();
    let result = new KeyValuePairOfStringIEnumerableOfString();
    result.init(json);
    return result;
  }
}

export class HttpContent {
  readonly headers!: KeyValuePairOfStringIEnumerableOfString[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['headers'])) {
        (<any>this).headers = [] as any;
        for (let item of _data['headers'])
          (<any>this).headers!.push(
            KeyValuePairOfStringIEnumerableOfString.fromJS(item, _mappings),
          );
      }
    }
  }

  static fromJS(data: any, _mappings?: any): HttpContent | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<HttpContent>(data, _mappings, HttpContent);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.headers)) {
      data['headers'] = [];
      for (let item of this.headers) data['headers'].push(item.toJSON());
    }
    return data;
  }

  clone(): HttpContent {
    const json = this.toJSON();
    let result = new HttpContent();
    result.init(json);
    return result;
  }
}

export enum HttpStatusCode {
  Continue = 'Continue',
  SwitchingProtocols = 'SwitchingProtocols',
  Processing = 'Processing',
  EarlyHints = 'EarlyHints',
  OK = 'OK',
  Created = 'Created',
  Accepted = 'Accepted',
  NonAuthoritativeInformation = 'NonAuthoritativeInformation',
  NoContent = 'NoContent',
  ResetContent = 'ResetContent',
  PartialContent = 'PartialContent',
  MultiStatus = 'MultiStatus',
  AlreadyReported = 'AlreadyReported',
  IMUsed = 'IMUsed',
  MultipleChoices = 'MultipleChoices',
  Ambiguous = 'Ambiguous',
  MovedPermanently = 'MovedPermanently',
  Moved = 'Moved',
  Found = 'Found',
  Redirect = 'Redirect',
  SeeOther = 'SeeOther',
  RedirectMethod = 'RedirectMethod',
  NotModified = 'NotModified',
  UseProxy = 'UseProxy',
  Unused = 'Unused',
  TemporaryRedirect = 'TemporaryRedirect',
  RedirectKeepVerb = 'RedirectKeepVerb',
  PermanentRedirect = 'PermanentRedirect',
  BadRequest = 'BadRequest',
  Unauthorized = 'Unauthorized',
  PaymentRequired = 'PaymentRequired',
  Forbidden = 'Forbidden',
  NotFound = 'NotFound',
  MethodNotAllowed = 'MethodNotAllowed',
  NotAcceptable = 'NotAcceptable',
  ProxyAuthenticationRequired = 'ProxyAuthenticationRequired',
  RequestTimeout = 'RequestTimeout',
  Conflict = 'Conflict',
  Gone = 'Gone',
  LengthRequired = 'LengthRequired',
  PreconditionFailed = 'PreconditionFailed',
  RequestEntityTooLarge = 'RequestEntityTooLarge',
  RequestUriTooLong = 'RequestUriTooLong',
  UnsupportedMediaType = 'UnsupportedMediaType',
  RequestedRangeNotSatisfiable = 'RequestedRangeNotSatisfiable',
  ExpectationFailed = 'ExpectationFailed',
  MisdirectedRequest = 'MisdirectedRequest',
  UnprocessableEntity = 'UnprocessableEntity',
  Locked = 'Locked',
  FailedDependency = 'FailedDependency',
  UpgradeRequired = 'UpgradeRequired',
  PreconditionRequired = 'PreconditionRequired',
  TooManyRequests = 'TooManyRequests',
  RequestHeaderFieldsTooLarge = 'RequestHeaderFieldsTooLarge',
  UnavailableForLegalReasons = 'UnavailableForLegalReasons',
  InternalServerError = 'InternalServerError',
  NotImplemented = 'NotImplemented',
  BadGateway = 'BadGateway',
  ServiceUnavailable = 'ServiceUnavailable',
  GatewayTimeout = 'GatewayTimeout',
  HttpVersionNotSupported = 'HttpVersionNotSupported',
  VariantAlsoNegotiates = 'VariantAlsoNegotiates',
  InsufficientStorage = 'InsufficientStorage',
  LoopDetected = 'LoopDetected',
  NotExtended = 'NotExtended',
  NetworkAuthenticationRequired = 'NetworkAuthenticationRequired',
}

export class HttpMethod {
  readonly method!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      (<any>this).method = _data['method'];
    }
  }

  static fromJS(data: any, _mappings?: any): HttpMethod | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<HttpMethod>(data, _mappings, HttpMethod);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['method'] = this.method;
    return data;
  }

  clone(): HttpMethod {
    const json = this.toJSON();
    let result = new HttpMethod();
    result.init(json);
    return result;
  }
}

export class HttpRequestMessage {
  version!: string | undefined;
  content!: HttpContent;
  method!: HttpMethod;
  requestUri!: string | undefined;
  readonly headers!: KeyValuePairOfStringIEnumerableOfString[] | undefined;
  readonly properties!: { [key: string]: any } | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.version = _data['version'];
      this.content = _data['content']
        ? HttpContent.fromJS(_data['content'], _mappings)
        : <any>undefined;
      this.method = _data['method']
        ? HttpMethod.fromJS(_data['method'], _mappings)
        : <any>undefined;
      this.requestUri = _data['requestUri'];
      if (Array.isArray(_data['headers'])) {
        (<any>this).headers = [] as any;
        for (let item of _data['headers'])
          (<any>this).headers!.push(
            KeyValuePairOfStringIEnumerableOfString.fromJS(item, _mappings),
          );
      }
      if (_data['properties']) {
        (<any>this).properties = {} as any;
        for (let key in _data['properties']) {
          if (_data['properties'].hasOwnProperty(key))
            (<any>(<any>this).properties)![key] = _data['properties'][key];
        }
      }
    }
  }

  static fromJS(data: any, _mappings?: any): HttpRequestMessage | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<HttpRequestMessage>(data, _mappings, HttpRequestMessage);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['version'] = this.version;
    data['content'] = this.content ? this.content.toJSON() : <any>undefined;
    data['method'] = this.method ? this.method.toJSON() : <any>undefined;
    data['requestUri'] = this.requestUri;
    if (Array.isArray(this.headers)) {
      data['headers'] = [];
      for (let item of this.headers) data['headers'].push(item.toJSON());
    }
    if (this.properties) {
      data['properties'] = {};
      for (let key in this.properties) {
        if (this.properties.hasOwnProperty(key))
          (<any>data['properties'])[key] = this.properties[key];
      }
    }
    return data;
  }

  clone(): HttpRequestMessage {
    const json = this.toJSON();
    let result = new HttpRequestMessage();
    result.init(json);
    return result;
  }
}

export class HttpResponseMessage {
  version!: string | undefined;
  content!: HttpContent;
  statusCode!: HttpStatusCode;
  reasonPhrase!: string | undefined;
  readonly headers!: KeyValuePairOfStringIEnumerableOfString[] | undefined;
  readonly trailingHeaders!: KeyValuePairOfStringIEnumerableOfString[] | undefined;
  requestMessage!: HttpRequestMessage;
  readonly isSuccessStatusCode!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.version = _data['version'];
      this.content = _data['content']
        ? HttpContent.fromJS(_data['content'], _mappings)
        : <any>undefined;
      this.statusCode = _data['statusCode'];
      this.reasonPhrase = _data['reasonPhrase'];
      if (Array.isArray(_data['headers'])) {
        (<any>this).headers = [] as any;
        for (let item of _data['headers'])
          (<any>this).headers!.push(
            KeyValuePairOfStringIEnumerableOfString.fromJS(item, _mappings),
          );
      }
      if (Array.isArray(_data['trailingHeaders'])) {
        (<any>this).trailingHeaders = [] as any;
        for (let item of _data['trailingHeaders'])
          (<any>this).trailingHeaders!.push(
            KeyValuePairOfStringIEnumerableOfString.fromJS(item, _mappings),
          );
      }
      this.requestMessage = _data['requestMessage']
        ? HttpRequestMessage.fromJS(_data['requestMessage'], _mappings)
        : <any>undefined;
      (<any>this).isSuccessStatusCode = _data['isSuccessStatusCode'];
    }
  }

  static fromJS(data: any, _mappings?: any): HttpResponseMessage | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<HttpResponseMessage>(data, _mappings, HttpResponseMessage);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['version'] = this.version;
    data['content'] = this.content ? this.content.toJSON() : <any>undefined;
    data['statusCode'] = this.statusCode;
    data['reasonPhrase'] = this.reasonPhrase;
    if (Array.isArray(this.headers)) {
      data['headers'] = [];
      for (let item of this.headers) data['headers'].push(item.toJSON());
    }
    if (Array.isArray(this.trailingHeaders)) {
      data['trailingHeaders'] = [];
      for (let item of this.trailingHeaders) data['trailingHeaders'].push(item.toJSON());
    }
    data['requestMessage'] = this.requestMessage ? this.requestMessage.toJSON() : <any>undefined;
    data['isSuccessStatusCode'] = this.isSuccessStatusCode;
    return data;
  }

  clone(): HttpResponseMessage {
    const json = this.toJSON();
    let result = new HttpResponseMessage();
    result.init(json);
    return result;
  }
}

export enum EntityChangeType {
  Created = 'Created',
  Updated = 'Updated',
  Deleted = 'Deleted',
}

export class EntityChangeListDto {
  userId!: number | undefined;
  userName!: string | undefined;
  changeTime!: dayjs.Dayjs;
  entityTypeFullName!: string | undefined;
  changeType!: EntityChangeType;
  readonly changeTypeName!: string | undefined;
  entityChangeSetId!: number;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.userName = _data['userName'];
      this.changeTime = _data['changeTime']
        ? dayjs(_data['changeTime'].toString())
        : <any>undefined;
      this.entityTypeFullName = _data['entityTypeFullName'];
      this.changeType = _data['changeType'];
      (<any>this).changeTypeName = _data['changeTypeName'];
      this.entityChangeSetId = _data['entityChangeSetId'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): EntityChangeListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EntityChangeListDto>(data, _mappings, EntityChangeListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['userName'] = this.userName;
    data['changeTime'] = this.changeTime ? this.changeTime.toISOString() : <any>undefined;
    data['entityTypeFullName'] = this.entityTypeFullName;
    data['changeType'] = this.changeType;
    data['changeTypeName'] = this.changeTypeName;
    data['entityChangeSetId'] = this.entityChangeSetId;
    data['id'] = this.id;
    return data;
  }

  clone(): EntityChangeListDto {
    const json = this.toJSON();
    let result = new EntityChangeListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfEntityChangeListDto {
  totalCount!: number;
  items!: EntityChangeListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(EntityChangeListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfEntityChangeListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfEntityChangeListDto>(
      data,
      _mappings,
      PagedResultDtoOfEntityChangeListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfEntityChangeListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfEntityChangeListDto();
    result.init(json);
    return result;
  }
}

export class NameValueDto {
  name!: string | undefined;
  value!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.value = _data['value'];
    }
  }

  static fromJS(data: any, _mappings?: any): NameValueDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<NameValueDto>(data, _mappings, NameValueDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['value'] = this.value;
    return data;
  }

  clone(): NameValueDto {
    const json = this.toJSON();
    let result = new NameValueDto();
    result.init(json);
    return result;
  }
}

export class AuditLogListDto {
  /** 用户Id */
  userId!: number | undefined;
  /** 用户名 */
  userName!: string | undefined;
  /** 模拟租户Id */
  impersonatorTenantId!: number | undefined;
  /** 模拟用户Id */
  impersonatorUserId!: number | undefined;
  /** 服务名称 */
  serviceName!: string | undefined;
  /** 方法名称 */
  methodName!: string | undefined;
  /** 参数 */
  parameters!: string | undefined;
  /** 执行时间 */
  executionTime!: dayjs.Dayjs;
  /** 持续时间 */
  executionDuration!: number;
  /** 客户端ip地址 */
  clientIpAddress!: string | undefined;
  /** 客户端 */
  clientName!: string | undefined;
  /** 浏览器信息 */
  browserInfo!: string | undefined;
  /** 异常 */
  exception!: string | undefined;
  customData!: string | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.userName = _data['userName'];
      this.impersonatorTenantId = _data['impersonatorTenantId'];
      this.impersonatorUserId = _data['impersonatorUserId'];
      this.serviceName = _data['serviceName'];
      this.methodName = _data['methodName'];
      this.parameters = _data['parameters'];
      this.executionTime = _data['executionTime']
        ? dayjs(_data['executionTime'].toString())
        : <any>undefined;
      this.executionDuration = _data['executionDuration'];
      this.clientIpAddress = _data['clientIpAddress'];
      this.clientName = _data['clientName'];
      this.browserInfo = _data['browserInfo'];
      this.exception = _data['exception'];
      this.customData = _data['customData'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): AuditLogListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AuditLogListDto>(data, _mappings, AuditLogListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['userName'] = this.userName;
    data['impersonatorTenantId'] = this.impersonatorTenantId;
    data['impersonatorUserId'] = this.impersonatorUserId;
    data['serviceName'] = this.serviceName;
    data['methodName'] = this.methodName;
    data['parameters'] = this.parameters;
    data['executionTime'] = this.executionTime ? this.executionTime.toISOString() : <any>undefined;
    data['executionDuration'] = this.executionDuration;
    data['clientIpAddress'] = this.clientIpAddress;
    data['clientName'] = this.clientName;
    data['browserInfo'] = this.browserInfo;
    data['exception'] = this.exception;
    data['customData'] = this.customData;
    data['id'] = this.id;
    return data;
  }

  clone(): AuditLogListDto {
    const json = this.toJSON();
    let result = new AuditLogListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfAuditLogListDto {
  totalCount!: number;
  items!: AuditLogListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(AuditLogListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfAuditLogListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfAuditLogListDto>(
      data,
      _mappings,
      PagedResultDtoOfAuditLogListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfAuditLogListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfAuditLogListDto();
    result.init(json);
    return result;
  }
}

export class BidProjectSendMsgDto {
  id!: number | undefined;
  /** 招投标项目Id */
  bidProjId!: number;
  /** 项目名称 */
  bidProjName!: string | undefined;
  /** 危废编码 */
  wastCodes!: string[] | undefined;
  /** 推送的处置企业 */
  tenantIds!: number[] | undefined;
  /** 推送给所有的处置企业 */
  sendAllTenant!: boolean;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.bidProjId = _data['bidProjId'];
      this.bidProjName = _data['bidProjName'];
      if (Array.isArray(_data['wastCodes'])) {
        this.wastCodes = [] as any;
        for (let item of _data['wastCodes']) this.wastCodes!.push(item);
      }
      if (Array.isArray(_data['tenantIds'])) {
        this.tenantIds = [] as any;
        for (let item of _data['tenantIds']) this.tenantIds!.push(item);
      }
      this.sendAllTenant = _data['sendAllTenant'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): BidProjectSendMsgDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<BidProjectSendMsgDto>(data, _mappings, BidProjectSendMsgDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['bidProjId'] = this.bidProjId;
    data['bidProjName'] = this.bidProjName;
    if (Array.isArray(this.wastCodes)) {
      data['wastCodes'] = [];
      for (let item of this.wastCodes) data['wastCodes'].push(item);
    }
    if (Array.isArray(this.tenantIds)) {
      data['tenantIds'] = [];
      for (let item of this.tenantIds) data['tenantIds'].push(item);
    }
    data['sendAllTenant'] = this.sendAllTenant;
    data['remark'] = this.remark;
    return data;
  }

  clone(): BidProjectSendMsgDto {
    const json = this.toJSON();
    let result = new BidProjectSendMsgDto();
    result.init(json);
    return result;
  }
}

export class TenantListDto {
  tenancyName!: string | undefined;
  name!: string | undefined;
  editionDisplayName!: string | undefined;
  connectionString!: string | undefined;
  isActive!: boolean;
  creationTime!: dayjs.Dayjs;
  subscriptionEndUtc!: dayjs.Dayjs | undefined;
  editionId!: number | undefined;
  tenantType!: number | undefined;
  sysUserId!: number | undefined;
  sysUserName!: string | undefined;
  /** 对应的企业Id */
  entId!: number | undefined;
  entName!: string | undefined;
  cantonCode!: string | undefined;
  cantonFullCode!: string | undefined;
  regAdress!: string | undefined;
  /** 纬度 */
  latitude!: number | undefined;
  /** 经度 */
  longitude!: number | undefined;
  /** 是否是专属企业，false：不是，true：是 */
  isExclusiveEnt!: boolean;
  /** 物流企业是否绑定到处置企业 */
  bindStatus!: number;
  /** 是否是中介企业，false：不是，true：是 */
  isAgentEnt!: boolean;
  /** 是否被该货单推送过 */
  isOrderPushed!: boolean | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenancyName = _data['tenancyName'];
      this.name = _data['name'];
      this.editionDisplayName = _data['editionDisplayName'];
      this.connectionString = _data['connectionString'];
      this.isActive = _data['isActive'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.subscriptionEndUtc = _data['subscriptionEndUtc']
        ? dayjs(_data['subscriptionEndUtc'].toString())
        : <any>undefined;
      this.editionId = _data['editionId'];
      this.tenantType = _data['tenantType'];
      this.sysUserId = _data['sysUserId'];
      this.sysUserName = _data['sysUserName'];
      this.entId = _data['entId'];
      this.entName = _data['entName'];
      this.cantonCode = _data['cantonCode'];
      this.cantonFullCode = _data['cantonFullCode'];
      this.regAdress = _data['regAdress'];
      this.latitude = _data['latitude'];
      this.longitude = _data['longitude'];
      this.isExclusiveEnt = _data['isExclusiveEnt'];
      this.bindStatus = _data['bindStatus'];
      this.isAgentEnt = _data['isAgentEnt'];
      this.isOrderPushed = _data['isOrderPushed'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): TenantListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TenantListDto>(data, _mappings, TenantListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenancyName'] = this.tenancyName;
    data['name'] = this.name;
    data['editionDisplayName'] = this.editionDisplayName;
    data['connectionString'] = this.connectionString;
    data['isActive'] = this.isActive;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['subscriptionEndUtc'] = this.subscriptionEndUtc
      ? this.subscriptionEndUtc.toISOString()
      : <any>undefined;
    data['editionId'] = this.editionId;
    data['tenantType'] = this.tenantType;
    data['sysUserId'] = this.sysUserId;
    data['sysUserName'] = this.sysUserName;
    data['entId'] = this.entId;
    data['entName'] = this.entName;
    data['cantonCode'] = this.cantonCode;
    data['cantonFullCode'] = this.cantonFullCode;
    data['regAdress'] = this.regAdress;
    data['latitude'] = this.latitude;
    data['longitude'] = this.longitude;
    data['isExclusiveEnt'] = this.isExclusiveEnt;
    data['bindStatus'] = this.bindStatus;
    data['isAgentEnt'] = this.isAgentEnt;
    data['isOrderPushed'] = this.isOrderPushed;
    data['id'] = this.id;
    return data;
  }

  clone(): TenantListDto {
    const json = this.toJSON();
    let result = new TenantListDto();
    result.init(json);
    return result;
  }
}

/** 招投标项目的详情信息DTO */
export class Bidding_ProjectDetailsDto {
  id!: number;
  /** 招标标题 */
  title!: string | undefined;
  /** 项目名称 */
  projectName!: string | undefined;
  /** 省 */
  province!: string | undefined;
  /** 市 */
  city!: string | undefined;
  /** 行政区编码 */
  cantonCode!: string | undefined;
  /** 页面路径 */
  pageUrl!: string | undefined;
  /** 原文地址 */
  originalUrl!: string | undefined;
  /** 爬取时间 */
  crawlerTime!: dayjs.Dayjs | undefined;
  /** 发布时间 */
  publishTime!: dayjs.Dayjs | undefined;
  /** 标签 */
  tags!: string | undefined;
  /** 招标代理机构 */
  biddingAgency!: string | undefined;
  /** 采购单位 */
  purchaseEntStr!: string | undefined;
  /** 采购单位Id */
  purchaseEntId!: number | undefined;
  /** 采购联系人 */
  purchaseLinkMan!: string | undefined;
  /** 采购电话 */
  purchaseLinkPhone!: string | undefined;
  /** 正文信息 */
  content!: string | undefined;
  /** 排序 */
  ix!: number | undefined;
  /** 招标代理机构 */
  biddingAgencyEntId!: number | undefined;
  /** 附件，用;号隔开 */
  attachment!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.title = _data['title'];
      this.projectName = _data['projectName'];
      this.province = _data['province'];
      this.city = _data['city'];
      this.cantonCode = _data['cantonCode'];
      this.pageUrl = _data['pageUrl'];
      this.originalUrl = _data['originalUrl'];
      this.crawlerTime = _data['crawlerTime']
        ? dayjs(_data['crawlerTime'].toString())
        : <any>undefined;
      this.publishTime = _data['publishTime']
        ? dayjs(_data['publishTime'].toString())
        : <any>undefined;
      this.tags = _data['tags'];
      this.biddingAgency = _data['biddingAgency'];
      this.purchaseEntStr = _data['purchaseEntStr'];
      this.purchaseEntId = _data['purchaseEntId'];
      this.purchaseLinkMan = _data['purchaseLinkMan'];
      this.purchaseLinkPhone = _data['purchaseLinkPhone'];
      this.content = _data['content'];
      this.ix = _data['ix'];
      this.biddingAgencyEntId = _data['biddingAgencyEntId'];
      this.attachment = _data['attachment'];
    }
  }

  static fromJS(data: any, _mappings?: any): Bidding_ProjectDetailsDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Bidding_ProjectDetailsDto>(data, _mappings, Bidding_ProjectDetailsDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['title'] = this.title;
    data['projectName'] = this.projectName;
    data['province'] = this.province;
    data['city'] = this.city;
    data['cantonCode'] = this.cantonCode;
    data['pageUrl'] = this.pageUrl;
    data['originalUrl'] = this.originalUrl;
    data['crawlerTime'] = this.crawlerTime ? this.crawlerTime.toISOString() : <any>undefined;
    data['publishTime'] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
    data['tags'] = this.tags;
    data['biddingAgency'] = this.biddingAgency;
    data['purchaseEntStr'] = this.purchaseEntStr;
    data['purchaseEntId'] = this.purchaseEntId;
    data['purchaseLinkMan'] = this.purchaseLinkMan;
    data['purchaseLinkPhone'] = this.purchaseLinkPhone;
    data['content'] = this.content;
    data['ix'] = this.ix;
    data['biddingAgencyEntId'] = this.biddingAgencyEntId;
    data['attachment'] = this.attachment;
    return data;
  }

  clone(): Bidding_ProjectDetailsDto {
    const json = this.toJSON();
    let result = new Bidding_ProjectDetailsDto();
    result.init(json);
    return result;
  }
}

/** 招投标项目的列表DTO */
export class Bidding_ProjectListDto {
  id!: number;
  /** 招标标题 */
  title!: string | undefined;
  /** 项目名称 */
  projectName!: string | undefined;
  /** 省 */
  province!: string | undefined;
  /** 市 */
  city!: string | undefined;
  /** 行政区编码 */
  cantonCode!: string | undefined;
  /** 发布时间 */
  publishTime!: dayjs.Dayjs | undefined;
  /** 标签 */
  tags!: string | undefined;
  /** 是否已经推送消息了 */
  hasSend!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.title = _data['title'];
      this.projectName = _data['projectName'];
      this.province = _data['province'];
      this.city = _data['city'];
      this.cantonCode = _data['cantonCode'];
      this.publishTime = _data['publishTime']
        ? dayjs(_data['publishTime'].toString())
        : <any>undefined;
      this.tags = _data['tags'];
      this.hasSend = _data['hasSend'];
    }
  }

  static fromJS(data: any, _mappings?: any): Bidding_ProjectListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Bidding_ProjectListDto>(data, _mappings, Bidding_ProjectListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['title'] = this.title;
    data['projectName'] = this.projectName;
    data['province'] = this.province;
    data['city'] = this.city;
    data['cantonCode'] = this.cantonCode;
    data['publishTime'] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
    data['tags'] = this.tags;
    data['hasSend'] = this.hasSend;
    return data;
  }

  clone(): Bidding_ProjectListDto {
    const json = this.toJSON();
    let result = new Bidding_ProjectListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfBidding_ProjectListDto {
  totalCount!: number;
  items!: Bidding_ProjectListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Bidding_ProjectListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfBidding_ProjectListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfBidding_ProjectListDto>(
      data,
      _mappings,
      PagedResultDtoOfBidding_ProjectListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfBidding_ProjectListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfBidding_ProjectListDto();
    result.init(json);
    return result;
  }
}

/** 的列表DTO Erinyes.BllCommon.BllDic.BllDic */
export class BllDicEditDto {
  /** Id */
  id!: number | undefined;
  /** DicName */
  dicName!: string | undefined;
  /** DicCode */
  dicCode!: string | undefined;
  /** IsGlobal */
  isGlobal!: boolean | undefined;
  /** Remark */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.dicName = _data['dicName'];
      this.dicCode = _data['dicCode'];
      this.isGlobal = _data['isGlobal'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): BllDicEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<BllDicEditDto>(data, _mappings, BllDicEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['dicName'] = this.dicName;
    data['dicCode'] = this.dicCode;
    data['isGlobal'] = this.isGlobal;
    data['remark'] = this.remark;
    return data;
  }

  clone(): BllDicEditDto {
    const json = this.toJSON();
    let result = new BllDicEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateBllDicInput {
  bllDic!: BllDicEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.bllDic = _data['bllDic']
        ? BllDicEditDto.fromJS(_data['bllDic'], _mappings)
        : new BllDicEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateBllDicInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateBllDicInput>(data, _mappings, CreateOrUpdateBllDicInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['bllDic'] = this.bllDic ? this.bllDic.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateBllDicInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateBllDicInput();
    result.init(json);
    return result;
  }
}

/** 的列表DTO Erinyes.BllCommon.BllDic.BllDic */
export class BllDicListDto {
  /** DicName */
  dicName!: string | undefined;
  /** DicCode */
  dicCode!: string | undefined;
  /** IsGlobal */
  isGlobal!: boolean | undefined;
  /** Remark */
  remark!: string | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.dicName = _data['dicName'];
      this.dicCode = _data['dicCode'];
      this.isGlobal = _data['isGlobal'];
      this.remark = _data['remark'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): BllDicListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<BllDicListDto>(data, _mappings, BllDicListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['dicName'] = this.dicName;
    data['dicCode'] = this.dicCode;
    data['isGlobal'] = this.isGlobal;
    data['remark'] = this.remark;
    data['id'] = this.id;
    return data;
  }

  clone(): BllDicListDto {
    const json = this.toJSON();
    let result = new BllDicListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑的Dto */
export class GetBllDicForEditOutput {
  bllDic!: BllDicEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.bllDic = _data['bllDic']
        ? BllDicEditDto.fromJS(_data['bllDic'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetBllDicForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetBllDicForEditOutput>(data, _mappings, GetBllDicForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['bllDic'] = this.bllDic ? this.bllDic.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetBllDicForEditOutput {
    const json = this.toJSON();
    let result = new GetBllDicForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfBllDicListDto {
  totalCount!: number;
  items!: BllDicListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(BllDicListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfBllDicListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfBllDicListDto>(
      data,
      _mappings,
      PagedResultDtoOfBllDicListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfBllDicListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfBllDicListDto();
    result.init(json);
    return result;
  }
}

export class CommonLookupFindUsersInput {
  tenantId!: number | undefined;
  maxResultCount!: number;
  skipCount!: number;
  filterText!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.maxResultCount = _data['maxResultCount'];
      this.skipCount = _data['skipCount'];
      this.filterText = _data['filterText'];
    }
  }

  static fromJS(data: any, _mappings?: any): CommonLookupFindUsersInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CommonLookupFindUsersInput>(data, _mappings, CommonLookupFindUsersInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['maxResultCount'] = this.maxResultCount;
    data['skipCount'] = this.skipCount;
    data['filterText'] = this.filterText;
    return data;
  }

  clone(): CommonLookupFindUsersInput {
    const json = this.toJSON();
    let result = new CommonLookupFindUsersInput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfNameValueDto {
  totalCount!: number;
  items!: NameValueDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(NameValueDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfNameValueDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfNameValueDto>(
      data,
      _mappings,
      PagedResultDtoOfNameValueDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfNameValueDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfNameValueDto();
    result.init(json);
    return result;
  }
}

export class GetDefaultEditionNameOutput {
  name!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
    }
  }

  static fromJS(data: any, _mappings?: any): GetDefaultEditionNameOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetDefaultEditionNameOutput>(
      data,
      _mappings,
      GetDefaultEditionNameOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    return data;
  }

  clone(): GetDefaultEditionNameOutput {
    const json = this.toJSON();
    let result = new GetDefaultEditionNameOutput();
    result.init(json);
    return result;
  }
}

export class SubscribableEditionComboboxItemDto {
  isFree!: boolean | undefined;
  value!: string | undefined;
  displayText!: string | undefined;
  isSelected!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.isFree = _data['isFree'];
      this.value = _data['value'];
      this.displayText = _data['displayText'];
      this.isSelected = _data['isSelected'];
    }
  }

  static fromJS(data: any, _mappings?: any): SubscribableEditionComboboxItemDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SubscribableEditionComboboxItemDto>(
      data,
      _mappings,
      SubscribableEditionComboboxItemDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['isFree'] = this.isFree;
    data['value'] = this.value;
    data['displayText'] = this.displayText;
    data['isSelected'] = this.isSelected;
    return data;
  }

  clone(): SubscribableEditionComboboxItemDto {
    const json = this.toJSON();
    let result = new SubscribableEditionComboboxItemDto();
    result.init(json);
    return result;
  }
}

export class ListResultDtoOfSubscribableEditionComboboxItemDto {
  items!: SubscribableEditionComboboxItemDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(SubscribableEditionComboboxItemDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(
    data: any,
    _mappings?: any,
  ): ListResultDtoOfSubscribableEditionComboboxItemDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ListResultDtoOfSubscribableEditionComboboxItemDto>(
      data,
      _mappings,
      ListResultDtoOfSubscribableEditionComboboxItemDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): ListResultDtoOfSubscribableEditionComboboxItemDto {
    const json = this.toJSON();
    let result = new ListResultDtoOfSubscribableEditionComboboxItemDto();
    result.init(json);
    return result;
  }
}

export class ComboboxItemDtoTOfInt32 {
  value!: number;
  displayText!: string | undefined;
  isSelected!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.value = _data['value'];
      this.displayText = _data['displayText'];
      this.isSelected = _data['isSelected'];
    }
  }

  static fromJS(data: any, _mappings?: any): ComboboxItemDtoTOfInt32 | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ComboboxItemDtoTOfInt32>(data, _mappings, ComboboxItemDtoTOfInt32);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value;
    data['displayText'] = this.displayText;
    data['isSelected'] = this.isSelected;
    return data;
  }

  clone(): ComboboxItemDtoTOfInt32 {
    const json = this.toJSON();
    let result = new ComboboxItemDtoTOfInt32();
    result.init(json);
    return result;
  }
}

export class ListResultDtoOfComboboxItemDtoTOfInt32 {
  items!: ComboboxItemDtoTOfInt32[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(ComboboxItemDtoTOfInt32.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ListResultDtoOfComboboxItemDtoTOfInt32 | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ListResultDtoOfComboboxItemDtoTOfInt32>(
      data,
      _mappings,
      ListResultDtoOfComboboxItemDtoTOfInt32,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): ListResultDtoOfComboboxItemDtoTOfInt32 {
    const json = this.toJSON();
    let result = new ListResultDtoOfComboboxItemDtoTOfInt32();
    result.init(json);
    return result;
  }
}

export class WlOperationField {
  /** 字段名称 */
  fieldName!: string | undefined;
  /** 字段描述 */
  fieldDesc!: string | undefined;
  /** 字段格式化 */
  fieldFormat!: string | undefined;
  /** 字段旧值 */
  fromValue!: string | undefined;
  /** 字段新值 */
  toValue!: string | undefined;
  /** 是否展示 */
  isShow!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.fieldName = _data['fieldName'];
      this.fieldDesc = _data['fieldDesc'];
      this.fieldFormat = _data['fieldFormat'];
      this.fromValue = _data['fromValue'];
      this.toValue = _data['toValue'];
      this.isShow = _data['isShow'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOperationField | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOperationField>(data, _mappings, WlOperationField);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['fieldName'] = this.fieldName;
    data['fieldDesc'] = this.fieldDesc;
    data['fieldFormat'] = this.fieldFormat;
    data['fromValue'] = this.fromValue;
    data['toValue'] = this.toValue;
    data['isShow'] = this.isShow;
    return data;
  }

  clone(): WlOperationField {
    const json = this.toJSON();
    let result = new WlOperationField();
    result.init(json);
    return result;
  }
}

/** 物流操作日志 */
export class WlOperationLogEditDto {
  /** 操作类型，0：新增，1：修改，2：删除 */
  operationType!: number;
  /** 操作描述 */
  operationDesc!: string | undefined;
  /** 内容描述 */
  operationJson!: string | undefined;
  /** 来自表 */
  fromTable!: string | undefined;
  /** 来自ID */
  fromId!: number | undefined;
  /** 操作标志，调整价格：TZJG */
  operationFlag!: string | undefined;
  /** 内容列表 */
  fields!: WlOperationField[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.operationType = _data['operationType'];
      this.operationDesc = _data['operationDesc'];
      this.operationJson = _data['operationJson'];
      this.fromTable = _data['fromTable'];
      this.fromId = _data['fromId'];
      this.operationFlag = _data['operationFlag'];
      if (Array.isArray(_data['fields'])) {
        this.fields = [] as any;
        for (let item of _data['fields'])
          this.fields!.push(WlOperationField.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): WlOperationLogEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOperationLogEditDto>(data, _mappings, WlOperationLogEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['operationType'] = this.operationType;
    data['operationDesc'] = this.operationDesc;
    data['operationJson'] = this.operationJson;
    data['fromTable'] = this.fromTable;
    data['fromId'] = this.fromId;
    data['operationFlag'] = this.operationFlag;
    if (Array.isArray(this.fields)) {
      data['fields'] = [];
      for (let item of this.fields) data['fields'].push(item.toJSON());
    }
    return data;
  }

  clone(): WlOperationLogEditDto {
    const json = this.toJSON();
    let result = new WlOperationLogEditDto();
    result.init(json);
    return result;
  }
}

export class Dic_HWCode {
  code!: string | undefined;
  name!: string | undefined;
  parentCode!: string | undefined;
  fullCode!: string | undefined;
  mnemonicCode!: string | undefined;
  mnemonicSpell!: string | undefined;
  wasteFeature!: string | undefined;
  desc!: string | undefined;
  idx!: number;
  level!: number;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.code = _data['code'];
      this.name = _data['name'];
      this.parentCode = _data['parentCode'];
      this.fullCode = _data['fullCode'];
      this.mnemonicCode = _data['mnemonicCode'];
      this.mnemonicSpell = _data['mnemonicSpell'];
      this.wasteFeature = _data['wasteFeature'];
      this.desc = _data['desc'];
      this.idx = _data['idx'];
      this.level = _data['level'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Dic_HWCode | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Dic_HWCode>(data, _mappings, Dic_HWCode);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['code'] = this.code;
    data['name'] = this.name;
    data['parentCode'] = this.parentCode;
    data['fullCode'] = this.fullCode;
    data['mnemonicCode'] = this.mnemonicCode;
    data['mnemonicSpell'] = this.mnemonicSpell;
    data['wasteFeature'] = this.wasteFeature;
    data['desc'] = this.desc;
    data['idx'] = this.idx;
    data['level'] = this.level;
    data['id'] = this.id;
    return data;
  }

  clone(): Dic_HWCode {
    const json = this.toJSON();
    let result = new Dic_HWCode();
    result.init(json);
    return result;
  }
}

export class KeyValuePairOfStringString {
  readonly key!: string | undefined;
  readonly value!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      (<any>this).key = _data['key'];
      (<any>this).value = _data['value'];
    }
  }

  static fromJS(data: any, _mappings?: any): KeyValuePairOfStringString | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<KeyValuePairOfStringString>(data, _mappings, KeyValuePairOfStringString);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['key'] = this.key;
    data['value'] = this.value;
    return data;
  }

  clone(): KeyValuePairOfStringString {
    const json = this.toJSON();
    let result = new KeyValuePairOfStringString();
    result.init(json);
    return result;
  }
}

export class CluePoolQueryDto {
  /** 授权行政区列表 */
  authorizeCantonList!: Dic_Canton[] | undefined;
  /** 授权危废权限的列表 */
  authorizeHWList!: Dic_HWCode[] | undefined;
  /** 标签 */
  tagList!: Tags[] | undefined;
  /** 环评阶段 */
  recordStateList!: KeyValuePairOfStringString[] | undefined;
  /** 行业类型 */
  envIndustryList!: Dic_EnvIndustry[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['authorizeCantonList'])) {
        this.authorizeCantonList = [] as any;
        for (let item of _data['authorizeCantonList'])
          this.authorizeCantonList!.push(Dic_Canton.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['authorizeHWList'])) {
        this.authorizeHWList = [] as any;
        for (let item of _data['authorizeHWList'])
          this.authorizeHWList!.push(Dic_HWCode.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['tagList'])) {
        this.tagList = [] as any;
        for (let item of _data['tagList']) this.tagList!.push(Tags.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['recordStateList'])) {
        this.recordStateList = [] as any;
        for (let item of _data['recordStateList'])
          this.recordStateList!.push(KeyValuePairOfStringString.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['envIndustryList'])) {
        this.envIndustryList = [] as any;
        for (let item of _data['envIndustryList'])
          this.envIndustryList!.push(Dic_EnvIndustry.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): CluePoolQueryDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CluePoolQueryDto>(data, _mappings, CluePoolQueryDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.authorizeCantonList)) {
      data['authorizeCantonList'] = [];
      for (let item of this.authorizeCantonList) data['authorizeCantonList'].push(item.toJSON());
    }
    if (Array.isArray(this.authorizeHWList)) {
      data['authorizeHWList'] = [];
      for (let item of this.authorizeHWList) data['authorizeHWList'].push(item.toJSON());
    }
    if (Array.isArray(this.tagList)) {
      data['tagList'] = [];
      for (let item of this.tagList) data['tagList'].push(item.toJSON());
    }
    if (Array.isArray(this.recordStateList)) {
      data['recordStateList'] = [];
      for (let item of this.recordStateList) data['recordStateList'].push(item.toJSON());
    }
    if (Array.isArray(this.envIndustryList)) {
      data['envIndustryList'] = [];
      for (let item of this.envIndustryList) data['envIndustryList'].push(item.toJSON());
    }
    return data;
  }

  clone(): CluePoolQueryDto {
    const json = this.toJSON();
    let result = new CluePoolQueryDto();
    result.init(json);
    return result;
  }
}

export class Dic_HWCodeDto {
  id!: number | undefined;
  code!: string | undefined;
  name!: string | undefined;
  parentCode!: string | undefined;
  parentName!: string | undefined;
  /** 全编码 */
  fullCode!: string | undefined;
  mnemonicCode!: string | undefined;
  mnemonicSpell!: string | undefined;
  wasteFeature!: string | undefined;
  desc!: string | undefined;
  idx!: number;
  level!: number;
  children!: Dic_HWCodeDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.code = _data['code'];
      this.name = _data['name'];
      this.parentCode = _data['parentCode'];
      this.parentName = _data['parentName'];
      this.fullCode = _data['fullCode'];
      this.mnemonicCode = _data['mnemonicCode'];
      this.mnemonicSpell = _data['mnemonicSpell'];
      this.wasteFeature = _data['wasteFeature'];
      this.desc = _data['desc'];
      this.idx = _data['idx'];
      this.level = _data['level'];
      if (Array.isArray(_data['children'])) {
        this.children = [] as any;
        for (let item of _data['children'])
          this.children!.push(Dic_HWCodeDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): Dic_HWCodeDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Dic_HWCodeDto>(data, _mappings, Dic_HWCodeDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['code'] = this.code;
    data['name'] = this.name;
    data['parentCode'] = this.parentCode;
    data['parentName'] = this.parentName;
    data['fullCode'] = this.fullCode;
    data['mnemonicCode'] = this.mnemonicCode;
    data['mnemonicSpell'] = this.mnemonicSpell;
    data['wasteFeature'] = this.wasteFeature;
    data['desc'] = this.desc;
    data['idx'] = this.idx;
    data['level'] = this.level;
    if (Array.isArray(this.children)) {
      data['children'] = [];
      for (let item of this.children) data['children'].push(item.toJSON());
    }
    return data;
  }

  clone(): Dic_HWCodeDto {
    const json = this.toJSON();
    let result = new Dic_HWCodeDto();
    result.init(json);
    return result;
  }
}

export class UserDto {
  id!: number;
  userName!: string | undefined;
  realName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.userName = _data['userName'];
      this.realName = _data['realName'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserDto>(data, _mappings, UserDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['userName'] = this.userName;
    data['realName'] = this.realName;
    return data;
  }

  clone(): UserDto {
    const json = this.toJSON();
    let result = new UserDto();
    result.init(json);
    return result;
  }
}

export class CantonFullCodeByAddress {
  fullCode!: string | undefined;
  fullName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.fullCode = _data['fullCode'];
      this.fullName = _data['fullName'];
    }
  }

  static fromJS(data: any, _mappings?: any): CantonFullCodeByAddress | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CantonFullCodeByAddress>(data, _mappings, CantonFullCodeByAddress);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['fullCode'] = this.fullCode;
    data['fullName'] = this.fullName;
    return data;
  }

  clone(): CantonFullCodeByAddress {
    const json = this.toJSON();
    let result = new CantonFullCodeByAddress();
    result.init(json);
    return result;
  }
}

export class Dic_CantonDto {
  code!: string | undefined;
  name!: string | undefined;
  parentCode!: string | undefined;
  latitude!: number | undefined;
  longitude!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.code = _data['code'];
      this.name = _data['name'];
      this.parentCode = _data['parentCode'];
      this.latitude = _data['latitude'];
      this.longitude = _data['longitude'];
    }
  }

  static fromJS(data: any, _mappings?: any): Dic_CantonDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Dic_CantonDto>(data, _mappings, Dic_CantonDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['code'] = this.code;
    data['name'] = this.name;
    data['parentCode'] = this.parentCode;
    data['latitude'] = this.latitude;
    data['longitude'] = this.longitude;
    return data;
  }

  clone(): Dic_CantonDto {
    const json = this.toJSON();
    let result = new Dic_CantonDto();
    result.init(json);
    return result;
  }
}

/** 物流操作日志 */
export class WlOperationLogListDto {
  id!: number;
  /** 操作类型，0：新增，1：修改，2：删除 */
  operationType!: number;
  /** 操作描述 */
  operationDesc!: string | undefined;
  /** 内容描述 */
  operationJson!: string | undefined;
  /** 来自表 */
  fromTable!: string | undefined;
  /** 来自ID */
  fromId!: number | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 创建人 */
  creatorUserId!: number | undefined;
  /** 操作标志，调整价格：TZJG */
  operationFlag!: string | undefined;
  /** 创建人 */
  creatorUserName!: string | undefined;
  /** 内容列表 */
  fields!: WlOperationField[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.operationType = _data['operationType'];
      this.operationDesc = _data['operationDesc'];
      this.operationJson = _data['operationJson'];
      this.fromTable = _data['fromTable'];
      this.fromId = _data['fromId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.operationFlag = _data['operationFlag'];
      this.creatorUserName = _data['creatorUserName'];
      if (Array.isArray(_data['fields'])) {
        this.fields = [] as any;
        for (let item of _data['fields'])
          this.fields!.push(WlOperationField.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): WlOperationLogListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOperationLogListDto>(data, _mappings, WlOperationLogListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['operationType'] = this.operationType;
    data['operationDesc'] = this.operationDesc;
    data['operationJson'] = this.operationJson;
    data['fromTable'] = this.fromTable;
    data['fromId'] = this.fromId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['operationFlag'] = this.operationFlag;
    data['creatorUserName'] = this.creatorUserName;
    if (Array.isArray(this.fields)) {
      data['fields'] = [];
      for (let item of this.fields) data['fields'].push(item.toJSON());
    }
    return data;
  }

  clone(): WlOperationLogListDto {
    const json = this.toJSON();
    let result = new WlOperationLogListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlOperationLogListDto {
  totalCount!: number;
  items!: WlOperationLogListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlOperationLogListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlOperationLogListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlOperationLogListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlOperationLogListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlOperationLogListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlOperationLogListDto();
    result.init(json);
    return result;
  }
}

export class Stream {
  readonly canRead!: boolean;
  readonly canSeek!: boolean;
  readonly canTimeout!: boolean;
  readonly canWrite!: boolean;
  readonly length!: number;
  position!: number;
  readTimeout!: number;
  writeTimeout!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      (<any>this).canRead = _data['canRead'];
      (<any>this).canSeek = _data['canSeek'];
      (<any>this).canTimeout = _data['canTimeout'];
      (<any>this).canWrite = _data['canWrite'];
      (<any>this).length = _data['length'];
      this.position = _data['position'];
      this.readTimeout = _data['readTimeout'];
      this.writeTimeout = _data['writeTimeout'];
    }
  }

  static fromJS(data: any, _mappings?: any): Stream | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Stream>(data, _mappings, Stream);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['canRead'] = this.canRead;
    data['canSeek'] = this.canSeek;
    data['canTimeout'] = this.canTimeout;
    data['canWrite'] = this.canWrite;
    data['length'] = this.length;
    data['position'] = this.position;
    data['readTimeout'] = this.readTimeout;
    data['writeTimeout'] = this.writeTimeout;
    return data;
  }

  clone(): Stream {
    const json = this.toJSON();
    let result = new Stream();
    result.init(json);
    return result;
  }
}

/** 审核传入实体 */
export class ApproveInput {
  id!: number;
  state!: number;
  reason!: string | undefined;
  /** 合同审核  0:销售经理审批  1:总经理审批 */
  type!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.state = _data['state'];
      this.reason = _data['reason'];
      this.type = _data['type'];
    }
  }

  static fromJS(data: any, _mappings?: any): ApproveInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ApproveInput>(data, _mappings, ApproveInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['state'] = this.state;
    data['reason'] = this.reason;
    data['type'] = this.type;
    return data;
  }

  clone(): ApproveInput {
    const json = this.toJSON();
    let result = new ApproveInput();
    result.init(json);
    return result;
  }
}

/** 附件通用Dto */
export class FileCommonDto {
  id!: number | undefined;
  /** 文件名 */
  fileName!: string | undefined;
  /** 文件大小 */
  fileSize!: string | undefined;
  /** 文件路径 */
  filePath!: string | undefined;
  /** 创建人姓名 */
  createUserName!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.fileName = _data['fileName'];
      this.fileSize = _data['fileSize'];
      this.filePath = _data['filePath'];
      this.createUserName = _data['createUserName'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): FileCommonDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<FileCommonDto>(data, _mappings, FileCommonDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['fileName'] = this.fileName;
    data['fileSize'] = this.fileSize;
    data['filePath'] = this.filePath;
    data['createUserName'] = this.createUserName;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): FileCommonDto {
    const json = this.toJSON();
    let result = new FileCommonDto();
    result.init(json);
    return result;
  }
}

/** 合同的列表DTO Erinyes.CRM.Contract */
export class ContractEditDto {
  /** Id */
  id!: number | undefined;
  /** 报价Id */
  quotationId!: number;
  /** 开票资料 */
  invoiceInformationId!: number | undefined;
  /** 开票资料公司名称 */
  invoiceInformationEntName!: string | undefined;
  /** 合同编号 */
  contractNo!: string | undefined;
  /** 账期（天） */
  accountPeriod!: number;
  remark!: string | undefined;
  /** 文件列表 */
  filesList!: FileCommonDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.quotationId = _data['quotationId'];
      this.invoiceInformationId = _data['invoiceInformationId'];
      this.invoiceInformationEntName = _data['invoiceInformationEntName'];
      this.contractNo = _data['contractNo'];
      this.accountPeriod = _data['accountPeriod'];
      this.remark = _data['remark'];
      if (Array.isArray(_data['filesList'])) {
        this.filesList = [] as any;
        for (let item of _data['filesList'])
          this.filesList!.push(FileCommonDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ContractEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ContractEditDto>(data, _mappings, ContractEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['quotationId'] = this.quotationId;
    data['invoiceInformationId'] = this.invoiceInformationId;
    data['invoiceInformationEntName'] = this.invoiceInformationEntName;
    data['contractNo'] = this.contractNo;
    data['accountPeriod'] = this.accountPeriod;
    data['remark'] = this.remark;
    if (Array.isArray(this.filesList)) {
      data['filesList'] = [];
      for (let item of this.filesList) data['filesList'].push(item.toJSON());
    }
    return data;
  }

  clone(): ContractEditDto {
    const json = this.toJSON();
    let result = new ContractEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateContractInput {
  contract!: ContractEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.contract = _data['contract']
        ? ContractEditDto.fromJS(_data['contract'], _mappings)
        : new ContractEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateContractInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateContractInput>(
      data,
      _mappings,
      CreateOrUpdateContractInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['contract'] = this.contract ? this.contract.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateContractInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateContractInput();
    result.init(json);
    return result;
  }
}

export enum CustomerState {
  线索 = '线索',
  已送样 = '已送样',
  已检测 = '已检测',
  不同意接收 = '不同意接收',
  免检 = '免检',
  同意接收 = '同意接收',
  已报价 = '已报价',
  报价不通过 = '报价不通过',
  报价通过 = '报价通过',
  已申请合同 = '已申请合同',
  销售经理不通过合同 = '销售经理不通过合同',
  销售经理通过合同 = '销售经理通过合同',
  总经理不通过合同 = '总经理不通过合同',
  合同通过 = '合同通过',
  派单 = '派单',
  派单不同意接收 = '派单不同意接收',
  派单同意接收 = '派单同意接收',
  入库 = '入库',
  申请开票 = '申请开票',
  开票不通过 = '开票不通过',
  开票通过 = '开票通过',
  财务开票 = '财务开票',
  回款 = '回款',
}

export enum ApproveState {
  待审核 = '待审核',
  审核通过 = '审核通过',
  审核不通过 = '审核不通过',
  审核不通过已回滚 = '审核不通过已回滚',
}

/** 报价详情DTO Erinyes.CRM.Quotation_Details */
export class QuotationDetailDto {
  id!: number;
  /** 报价 单价（元/吨） */
  unitCost!: number | undefined;
  /** 服务费单价（元/吨） */
  serviceUnitCost!: number | undefined;
  /** 运费（元/吨） */
  carriageCost!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 年产量 */
  yearlyOutput!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 原处置单位 */
  origDisposalEntName!: string | undefined;
  /** 原处置价格 元/吨 */
  origUnitCost!: number | undefined;
  /** 包装形式：IBC、吨袋、桶（5L-10L-20L-50L-200L）、托盘、槽车；可多选。 public enum Packaging */
  packagings!: string | undefined;
  /** 附件内容 */
  ossFileNames!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.unitCost = _data['unitCost'];
      this.serviceUnitCost = _data['serviceUnitCost'];
      this.carriageCost = _data['carriageCost'];
      this.remark = _data['remark'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.unit = _data['unit'];
      this.origDisposalEntName = _data['origDisposalEntName'];
      this.origUnitCost = _data['origUnitCost'];
      this.packagings = _data['packagings'];
      this.ossFileNames = _data['ossFileNames'];
    }
  }

  static fromJS(data: any, _mappings?: any): QuotationDetailDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<QuotationDetailDto>(data, _mappings, QuotationDetailDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['unitCost'] = this.unitCost;
    data['serviceUnitCost'] = this.serviceUnitCost;
    data['carriageCost'] = this.carriageCost;
    data['remark'] = this.remark;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['unit'] = this.unit;
    data['origDisposalEntName'] = this.origDisposalEntName;
    data['origUnitCost'] = this.origUnitCost;
    data['packagings'] = this.packagings;
    data['ossFileNames'] = this.ossFileNames;
    return data;
  }

  clone(): QuotationDetailDto {
    const json = this.toJSON();
    let result = new QuotationDetailDto();
    result.init(json);
    return result;
  }
}

/** 合同的列表DTO Erinyes.CRM.Contract */
export class ContractListDto {
  id!: number;
  /** 报价Id */
  quotationId!: number;
  /** 当前状态 */
  currentState!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  customerState!: CustomerState;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 合同编号 */
  contractNo!: string | undefined;
  /** 开票资料 */
  invoiceInformationId!: number | undefined;
  /** 账期（天） */
  accountPeriod!: number;
  salesManagerApproveState!: ApproveState;
  /** 销售经理审核时间 */
  salesManagerApproveTime!: dayjs.Dayjs | undefined;
  /** 销售经理审核意见 */
  salesManagerReason!: string | undefined;
  generalManagerApproveState!: ApproveState;
  /** 总经理审核时间 */
  generalManagerApproveTime!: dayjs.Dayjs | undefined;
  /** 总经理审核意见 */
  generalManagerReason!: string | undefined;
  /** 负责人 */
  responsibleUserName!: string | undefined;
  /** 负责人Id */
  responsibleUserId!: number | undefined;
  /** 报价详情 */
  quotationDetails!: QuotationDetailDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.quotationId = _data['quotationId'];
      this.currentState = _data['currentState'];
      this.customerId = _data['customerId'];
      this.customerName = _data['customerName'];
      this.customerState = _data['customerState'];
      this.cantonName = _data['cantonName'];
      this.contractNo = _data['contractNo'];
      this.invoiceInformationId = _data['invoiceInformationId'];
      this.accountPeriod = _data['accountPeriod'];
      this.salesManagerApproveState = _data['salesManagerApproveState'];
      this.salesManagerApproveTime = _data['salesManagerApproveTime']
        ? dayjs(_data['salesManagerApproveTime'].toString())
        : <any>undefined;
      this.salesManagerReason = _data['salesManagerReason'];
      this.generalManagerApproveState = _data['generalManagerApproveState'];
      this.generalManagerApproveTime = _data['generalManagerApproveTime']
        ? dayjs(_data['generalManagerApproveTime'].toString())
        : <any>undefined;
      this.generalManagerReason = _data['generalManagerReason'];
      this.responsibleUserName = _data['responsibleUserName'];
      this.responsibleUserId = _data['responsibleUserId'];
      if (Array.isArray(_data['quotationDetails'])) {
        this.quotationDetails = [] as any;
        for (let item of _data['quotationDetails'])
          this.quotationDetails!.push(QuotationDetailDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ContractListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ContractListDto>(data, _mappings, ContractListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['quotationId'] = this.quotationId;
    data['currentState'] = this.currentState;
    data['customerId'] = this.customerId;
    data['customerName'] = this.customerName;
    data['customerState'] = this.customerState;
    data['cantonName'] = this.cantonName;
    data['contractNo'] = this.contractNo;
    data['invoiceInformationId'] = this.invoiceInformationId;
    data['accountPeriod'] = this.accountPeriod;
    data['salesManagerApproveState'] = this.salesManagerApproveState;
    data['salesManagerApproveTime'] = this.salesManagerApproveTime
      ? this.salesManagerApproveTime.toISOString()
      : <any>undefined;
    data['salesManagerReason'] = this.salesManagerReason;
    data['generalManagerApproveState'] = this.generalManagerApproveState;
    data['generalManagerApproveTime'] = this.generalManagerApproveTime
      ? this.generalManagerApproveTime.toISOString()
      : <any>undefined;
    data['generalManagerReason'] = this.generalManagerReason;
    data['responsibleUserName'] = this.responsibleUserName;
    data['responsibleUserId'] = this.responsibleUserId;
    if (Array.isArray(this.quotationDetails)) {
      data['quotationDetails'] = [];
      for (let item of this.quotationDetails) data['quotationDetails'].push(item.toJSON());
    }
    return data;
  }

  clone(): ContractListDto {
    const json = this.toJSON();
    let result = new ContractListDto();
    result.init(json);
    return result;
  }
}

/** 报价的列表DTO Erinyes.CRM.Quotation */
export class QuotationListDto {
  id!: number;
  /** 客户Id */
  customerId!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 行政区 */
  cantonName!: string | undefined;
  customerState!: CustomerState;
  /** 审核结果 */
  approveState!: string | undefined;
  /** 审核时间 */
  approveTime!: dayjs.Dayjs | undefined;
  /** 原因 */
  reason!: string | undefined;
  /** 总价 */
  totalCost!: number | undefined;
  /** 是否包含运费 */
  containtCarriage!: boolean;
  /** 单次 运费总价（元/次） */
  carriageCost!: number | undefined;
  /** 按次数 报价 */
  byTimes!: boolean;
  /** 申请单价（元/次） */
  unitCostByTimes!: number | undefined;
  /** 服务费单价（元/次） */
  serviceUnitCostByTimes!: number | undefined;
  /** 审核人 */
  approveUserName!: string | undefined;
  /** 负责人 */
  responsibleUserName!: string | undefined;
  /** 负责人Id */
  responsibleUserId!: number | undefined;
  /** 报价详情 */
  quotationDetails!: QuotationDetailDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerId = _data['customerId'];
      this.customerName = _data['customerName'];
      this.cantonName = _data['cantonName'];
      this.customerState = _data['customerState'];
      this.approveState = _data['approveState'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.reason = _data['reason'];
      this.totalCost = _data['totalCost'];
      this.containtCarriage = _data['containtCarriage'];
      this.carriageCost = _data['carriageCost'];
      this.byTimes = _data['byTimes'];
      this.unitCostByTimes = _data['unitCostByTimes'];
      this.serviceUnitCostByTimes = _data['serviceUnitCostByTimes'];
      this.approveUserName = _data['approveUserName'];
      this.responsibleUserName = _data['responsibleUserName'];
      this.responsibleUserId = _data['responsibleUserId'];
      if (Array.isArray(_data['quotationDetails'])) {
        this.quotationDetails = [] as any;
        for (let item of _data['quotationDetails'])
          this.quotationDetails!.push(QuotationDetailDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): QuotationListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<QuotationListDto>(data, _mappings, QuotationListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerId'] = this.customerId;
    data['customerName'] = this.customerName;
    data['cantonName'] = this.cantonName;
    data['customerState'] = this.customerState;
    data['approveState'] = this.approveState;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['reason'] = this.reason;
    data['totalCost'] = this.totalCost;
    data['containtCarriage'] = this.containtCarriage;
    data['carriageCost'] = this.carriageCost;
    data['byTimes'] = this.byTimes;
    data['unitCostByTimes'] = this.unitCostByTimes;
    data['serviceUnitCostByTimes'] = this.serviceUnitCostByTimes;
    data['approveUserName'] = this.approveUserName;
    data['responsibleUserName'] = this.responsibleUserName;
    data['responsibleUserId'] = this.responsibleUserId;
    if (Array.isArray(this.quotationDetails)) {
      data['quotationDetails'] = [];
      for (let item of this.quotationDetails) data['quotationDetails'].push(item.toJSON());
    }
    return data;
  }

  clone(): QuotationListDto {
    const json = this.toJSON();
    let result = new QuotationListDto();
    result.init(json);
    return result;
  }
}

/** 合同的列表DTO Erinyes.CRM.Contract */
export class ContractDetailDto {
  id!: number;
  /** 报价Id */
  quotationId!: number;
  /** 当前状态 */
  currentState!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 合同编号 */
  contractNo!: string | undefined;
  /** 开票资料 */
  invoiceInformationId!: number | undefined;
  /** 账期（天） */
  accountPeriod!: number;
  salesManagerApproveState!: ApproveState;
  /** 销售经理审核时间 */
  salesManagerApproveTime!: dayjs.Dayjs | undefined;
  /** 销售经理审核意见 */
  salesManagerReason!: string | undefined;
  generalManagerApproveState!: ApproveState;
  /** 总经理审核时间 */
  generalManagerApproveTime!: dayjs.Dayjs | undefined;
  /** 总经理审核意见 */
  generalManagerReason!: string | undefined;
  /** 负责人 */
  responsibleUserName!: string | undefined;
  /** 负责人Id */
  responsibleUserId!: number | undefined;
  /** 公司名称 */
  entName!: string | undefined;
  /** 纳税人识别号 */
  taxNumber!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 电话 */
  phoneNo!: string | undefined;
  /** 开户行 */
  bankName!: string | undefined;
  /** 账号 */
  accountNumber!: string | undefined;
  quotationDto!: QuotationListDto;
  /** 文件列表 */
  filesList!: FileCommonDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.quotationId = _data['quotationId'];
      this.currentState = _data['currentState'];
      this.customerId = _data['customerId'];
      this.customerName = _data['customerName'];
      this.cantonName = _data['cantonName'];
      this.contractNo = _data['contractNo'];
      this.invoiceInformationId = _data['invoiceInformationId'];
      this.accountPeriod = _data['accountPeriod'];
      this.salesManagerApproveState = _data['salesManagerApproveState'];
      this.salesManagerApproveTime = _data['salesManagerApproveTime']
        ? dayjs(_data['salesManagerApproveTime'].toString())
        : <any>undefined;
      this.salesManagerReason = _data['salesManagerReason'];
      this.generalManagerApproveState = _data['generalManagerApproveState'];
      this.generalManagerApproveTime = _data['generalManagerApproveTime']
        ? dayjs(_data['generalManagerApproveTime'].toString())
        : <any>undefined;
      this.generalManagerReason = _data['generalManagerReason'];
      this.responsibleUserName = _data['responsibleUserName'];
      this.responsibleUserId = _data['responsibleUserId'];
      this.entName = _data['entName'];
      this.taxNumber = _data['taxNumber'];
      this.address = _data['address'];
      this.phoneNo = _data['phoneNo'];
      this.bankName = _data['bankName'];
      this.accountNumber = _data['accountNumber'];
      this.quotationDto = _data['quotationDto']
        ? QuotationListDto.fromJS(_data['quotationDto'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['filesList'])) {
        this.filesList = [] as any;
        for (let item of _data['filesList'])
          this.filesList!.push(FileCommonDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ContractDetailDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ContractDetailDto>(data, _mappings, ContractDetailDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['quotationId'] = this.quotationId;
    data['currentState'] = this.currentState;
    data['customerId'] = this.customerId;
    data['customerName'] = this.customerName;
    data['cantonName'] = this.cantonName;
    data['contractNo'] = this.contractNo;
    data['invoiceInformationId'] = this.invoiceInformationId;
    data['accountPeriod'] = this.accountPeriod;
    data['salesManagerApproveState'] = this.salesManagerApproveState;
    data['salesManagerApproveTime'] = this.salesManagerApproveTime
      ? this.salesManagerApproveTime.toISOString()
      : <any>undefined;
    data['salesManagerReason'] = this.salesManagerReason;
    data['generalManagerApproveState'] = this.generalManagerApproveState;
    data['generalManagerApproveTime'] = this.generalManagerApproveTime
      ? this.generalManagerApproveTime.toISOString()
      : <any>undefined;
    data['generalManagerReason'] = this.generalManagerReason;
    data['responsibleUserName'] = this.responsibleUserName;
    data['responsibleUserId'] = this.responsibleUserId;
    data['entName'] = this.entName;
    data['taxNumber'] = this.taxNumber;
    data['address'] = this.address;
    data['phoneNo'] = this.phoneNo;
    data['bankName'] = this.bankName;
    data['accountNumber'] = this.accountNumber;
    data['quotationDto'] = this.quotationDto ? this.quotationDto.toJSON() : <any>undefined;
    if (Array.isArray(this.filesList)) {
      data['filesList'] = [];
      for (let item of this.filesList) data['filesList'].push(item.toJSON());
    }
    return data;
  }

  clone(): ContractDetailDto {
    const json = this.toJSON();
    let result = new ContractDetailDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑合同的Dto */
export class GetContractForEditOutput {
  contract!: ContractEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.contract = _data['contract']
        ? ContractEditDto.fromJS(_data['contract'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetContractForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetContractForEditOutput>(data, _mappings, GetContractForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['contract'] = this.contract ? this.contract.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetContractForEditOutput {
    const json = this.toJSON();
    let result = new GetContractForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfContractListDto {
  totalCount!: number;
  items!: ContractListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(ContractListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfContractListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfContractListDto>(
      data,
      _mappings,
      PagedResultDtoOfContractListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfContractListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfContractListDto();
    result.init(json);
    return result;
  }
}

/** 联系人 */
export class ContactListDto {
  id!: number | undefined;
  clueId!: number | undefined;
  /** 联系人名称 */
  contactName!: string | undefined;
  /** 职务 */
  contactPost!: string | undefined;
  /** 办公电话 */
  contactTel!: string | undefined;
  /** 移动电话 */
  contactPhone!: string | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.clueId = _data['clueId'];
      this.contactName = _data['contactName'];
      this.contactPost = _data['contactPost'];
      this.contactTel = _data['contactTel'];
      this.contactPhone = _data['contactPhone'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): ContactListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ContactListDto>(data, _mappings, ContactListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['clueId'] = this.clueId;
    data['contactName'] = this.contactName;
    data['contactPost'] = this.contactPost;
    data['contactTel'] = this.contactTel;
    data['contactPhone'] = this.contactPhone;
    data['remark'] = this.remark;
    return data;
  }

  clone(): ContactListDto {
    const json = this.toJSON();
    let result = new ContactListDto();
    result.init(json);
    return result;
  }
}

/** 联系人 */
export class License_WasteListDto {
  id!: number | undefined;
  /** 危废大类 */
  wasteCategoryCode!: string | undefined;
  /** 危废大类名称 */
  wasteCategoryName!: string | undefined;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 危废名称 */
  wasteName!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.wasteCategoryCode = _data['wasteCategoryCode'];
      this.wasteCategoryName = _data['wasteCategoryName'];
      this.wasteCode = _data['wasteCode'];
      this.wasteName = _data['wasteName'];
      this.commonName = _data['commonName'];
    }
  }

  static fromJS(data: any, _mappings?: any): License_WasteListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<License_WasteListDto>(data, _mappings, License_WasteListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['wasteCategoryCode'] = this.wasteCategoryCode;
    data['wasteCategoryName'] = this.wasteCategoryName;
    data['wasteCode'] = this.wasteCode;
    data['wasteName'] = this.wasteName;
    data['commonName'] = this.commonName;
    return data;
  }

  clone(): License_WasteListDto {
    const json = this.toJSON();
    let result = new License_WasteListDto();
    result.init(json);
    return result;
  }
}

/** 许可证 */
export class LicenseListDto {
  id!: number | undefined;
  clueId!: number | undefined;
  /** 处置方式ID */
  disposalMethodID!: number | undefined;
  /** 处置方式 */
  disposalMethod!: string | undefined;
  /** 处置方式Code */
  disposalMethodCode!: string | undefined;
  /** 许可量 */
  quantity!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 许可证编号 */
  licenseNo!: string | undefined;
  /** 有效期开始 */
  startTime!: dayjs.Dayjs | undefined;
  /** 有效期结束 */
  endTime!: dayjs.Dayjs | undefined;
  /** 危废信息 */
  wastes!: License_WasteListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.clueId = _data['clueId'];
      this.disposalMethodID = _data['disposalMethodID'];
      this.disposalMethod = _data['disposalMethod'];
      this.disposalMethodCode = _data['disposalMethodCode'];
      this.quantity = _data['quantity'];
      this.unit = _data['unit'];
      this.licenseNo = _data['licenseNo'];
      this.startTime = _data['startTime'] ? dayjs(_data['startTime'].toString()) : <any>undefined;
      this.endTime = _data['endTime'] ? dayjs(_data['endTime'].toString()) : <any>undefined;
      if (Array.isArray(_data['wastes'])) {
        this.wastes = [] as any;
        for (let item of _data['wastes'])
          this.wastes!.push(License_WasteListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): LicenseListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LicenseListDto>(data, _mappings, LicenseListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['clueId'] = this.clueId;
    data['disposalMethodID'] = this.disposalMethodID;
    data['disposalMethod'] = this.disposalMethod;
    data['disposalMethodCode'] = this.disposalMethodCode;
    data['quantity'] = this.quantity;
    data['unit'] = this.unit;
    data['licenseNo'] = this.licenseNo;
    data['startTime'] = this.startTime ? this.startTime.toISOString() : <any>undefined;
    data['endTime'] = this.endTime ? this.endTime.toISOString() : <any>undefined;
    if (Array.isArray(this.wastes)) {
      data['wastes'] = [];
      for (let item of this.wastes) data['wastes'].push(item.toJSON());
    }
    return data;
  }

  clone(): LicenseListDto {
    const json = this.toJSON();
    let result = new LicenseListDto();
    result.init(json);
    return result;
  }
}

/** 处置企业线索池的列表DTO Erinyes.YFCrm.CRM_Clue */
export class CRM_ClueEditDto {
  id!: number | undefined;
  /** 工商信息Id */
  enterpriseId!: number | undefined;
  /** 客户名称 */
  entName!: string | undefined;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 行政区 */
  cantonCode!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 企业性质 */
  entNature!: string | undefined;
  /** 负责用户 */
  followUserId!: number | undefined;
  /** 负责用户名称 */
  followUserName!: string | undefined;
  /** 线索状态 */
  followState!: number | undefined;
  /** 领取时间 */
  followTime!: dayjs.Dayjs | undefined;
  /** 有效时间 */
  validDay!: number | undefined;
  /** 纬度 */
  latitude!: number | undefined;
  /** 经度 */
  longitude!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 联系人信息 */
  contacts!: ContactListDto[] | undefined;
  /** 许可证消息 */
  licenses!: LicenseListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.enterpriseId = _data['enterpriseId'];
      this.entName = _data['entName'];
      this.cantonName = _data['cantonName'];
      this.cantonCode = _data['cantonCode'];
      this.address = _data['address'];
      this.entNature = _data['entNature'];
      this.followUserId = _data['followUserId'];
      this.followUserName = _data['followUserName'];
      this.followState = _data['followState'];
      this.followTime = _data['followTime']
        ? dayjs(_data['followTime'].toString())
        : <any>undefined;
      this.validDay = _data['validDay'];
      this.latitude = _data['latitude'];
      this.longitude = _data['longitude'];
      this.remark = _data['remark'];
      if (Array.isArray(_data['contacts'])) {
        this.contacts = [] as any;
        for (let item of _data['contacts'])
          this.contacts!.push(ContactListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['licenses'])) {
        this.licenses = [] as any;
        for (let item of _data['licenses'])
          this.licenses!.push(LicenseListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): CRM_ClueEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CRM_ClueEditDto>(data, _mappings, CRM_ClueEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['enterpriseId'] = this.enterpriseId;
    data['entName'] = this.entName;
    data['cantonName'] = this.cantonName;
    data['cantonCode'] = this.cantonCode;
    data['address'] = this.address;
    data['entNature'] = this.entNature;
    data['followUserId'] = this.followUserId;
    data['followUserName'] = this.followUserName;
    data['followState'] = this.followState;
    data['followTime'] = this.followTime ? this.followTime.toISOString() : <any>undefined;
    data['validDay'] = this.validDay;
    data['latitude'] = this.latitude;
    data['longitude'] = this.longitude;
    data['remark'] = this.remark;
    if (Array.isArray(this.contacts)) {
      data['contacts'] = [];
      for (let item of this.contacts) data['contacts'].push(item.toJSON());
    }
    if (Array.isArray(this.licenses)) {
      data['licenses'] = [];
      for (let item of this.licenses) data['licenses'].push(item.toJSON());
    }
    return data;
  }

  clone(): CRM_ClueEditDto {
    const json = this.toJSON();
    let result = new CRM_ClueEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateCRM_ClueInput {
  crM_Clue!: CRM_ClueEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.crM_Clue = _data['crM_Clue']
        ? CRM_ClueEditDto.fromJS(_data['crM_Clue'], _mappings)
        : new CRM_ClueEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateCRM_ClueInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateCRM_ClueInput>(
      data,
      _mappings,
      CreateOrUpdateCRM_ClueInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['crM_Clue'] = this.crM_Clue ? this.crM_Clue.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateCRM_ClueInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateCRM_ClueInput();
    result.init(json);
    return result;
  }
}

export class ContractYFListDto {
  id!: number | undefined;
  clueId!: number | undefined;
  /** 合同编号 */
  contractNo!: string | undefined;
  /** 开始时间 */
  startDate!: dayjs.Dayjs | undefined;
  /** 结束时间 */
  endDate!: dayjs.Dayjs | undefined;
  /** 合同附件 */
  contractFiles!: string | undefined;
  /** 合同状态 0:进行中 1:已完成 */
  contractState!: number | undefined;
  /** 是否作废，false：不是，true：是 */
  isInValid!: boolean;
  /** 创建人 */
  createUserName!: string | undefined;
  creationTime!: dayjs.Dayjs;
  entName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.clueId = _data['clueId'];
      this.contractNo = _data['contractNo'];
      this.startDate = _data['startDate'] ? dayjs(_data['startDate'].toString()) : <any>undefined;
      this.endDate = _data['endDate'] ? dayjs(_data['endDate'].toString()) : <any>undefined;
      this.contractFiles = _data['contractFiles'];
      this.contractState = _data['contractState'];
      this.isInValid = _data['isInValid'];
      this.createUserName = _data['createUserName'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.entName = _data['entName'];
    }
  }

  static fromJS(data: any, _mappings?: any): ContractYFListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ContractYFListDto>(data, _mappings, ContractYFListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['clueId'] = this.clueId;
    data['contractNo'] = this.contractNo;
    data['startDate'] = this.startDate ? this.startDate.toISOString() : <any>undefined;
    data['endDate'] = this.endDate ? this.endDate.toISOString() : <any>undefined;
    data['contractFiles'] = this.contractFiles;
    data['contractState'] = this.contractState;
    data['isInValid'] = this.isInValid;
    data['createUserName'] = this.createUserName;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['entName'] = this.entName;
    return data;
  }

  clone(): ContractYFListDto {
    const json = this.toJSON();
    let result = new ContractYFListDto();
    result.init(json);
    return result;
  }
}

export class FollowRecordEditDto {
  id!: number | undefined;
  clueId!: number | undefined;
  /** 跟进记录ID */
  planId!: number | undefined;
  /** 记录标签 */
  recordTags!: string | undefined;
  /** 记录内容 */
  recordContent!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.clueId = _data['clueId'];
      this.planId = _data['planId'];
      this.recordTags = _data['recordTags'];
      this.recordContent = _data['recordContent'];
    }
  }

  static fromJS(data: any, _mappings?: any): FollowRecordEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<FollowRecordEditDto>(data, _mappings, FollowRecordEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['clueId'] = this.clueId;
    data['planId'] = this.planId;
    data['recordTags'] = this.recordTags;
    data['recordContent'] = this.recordContent;
    return data;
  }

  clone(): FollowRecordEditDto {
    const json = this.toJSON();
    let result = new FollowRecordEditDto();
    result.init(json);
    return result;
  }
}

export class VisitingPlanListDto {
  id!: number | undefined;
  clueId!: number | undefined;
  /** 计划拜访时间 */
  planTime!: dayjs.Dayjs | undefined;
  /** 计划拜访主题 */
  planTheme!: string | undefined;
  /** 状态 0:计划中 1:已执行 2:未执行 */
  planState!: number | undefined;
  /** 经度 */
  checkPosX!: number | undefined;
  /** 纬度 */
  checkPosY!: number | undefined;
  /** 签到地址 */
  checkAddress!: string | undefined;
  /** 签到照片 */
  checkPhotos!: string | undefined;
  /** 签到时间 */
  checkTime!: dayjs.Dayjs | undefined;
  /** 企业名称 */
  entName!: string | undefined;
  /** 行政区 */
  cantonCode!: string | undefined;
  cantonName!: string | undefined;
  cantonFullCode!: string | undefined;
  cantonFullName!: string | undefined;
  entAddress!: string | undefined;
  entType!: string | undefined;
  entTags!: string | undefined;
  /** 负责人 */
  followUserName!: string | undefined;
  /** 是否超期，true：已超期，false：未超期 */
  isOverDue!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.clueId = _data['clueId'];
      this.planTime = _data['planTime'] ? dayjs(_data['planTime'].toString()) : <any>undefined;
      this.planTheme = _data['planTheme'];
      this.planState = _data['planState'];
      this.checkPosX = _data['checkPosX'];
      this.checkPosY = _data['checkPosY'];
      this.checkAddress = _data['checkAddress'];
      this.checkPhotos = _data['checkPhotos'];
      this.checkTime = _data['checkTime'] ? dayjs(_data['checkTime'].toString()) : <any>undefined;
      this.entName = _data['entName'];
      this.cantonCode = _data['cantonCode'];
      this.cantonName = _data['cantonName'];
      this.cantonFullCode = _data['cantonFullCode'];
      this.cantonFullName = _data['cantonFullName'];
      this.entAddress = _data['entAddress'];
      this.entType = _data['entType'];
      this.entTags = _data['entTags'];
      this.followUserName = _data['followUserName'];
      this.isOverDue = _data['isOverDue'];
    }
  }

  static fromJS(data: any, _mappings?: any): VisitingPlanListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<VisitingPlanListDto>(data, _mappings, VisitingPlanListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['clueId'] = this.clueId;
    data['planTime'] = this.planTime ? this.planTime.toISOString() : <any>undefined;
    data['planTheme'] = this.planTheme;
    data['planState'] = this.planState;
    data['checkPosX'] = this.checkPosX;
    data['checkPosY'] = this.checkPosY;
    data['checkAddress'] = this.checkAddress;
    data['checkPhotos'] = this.checkPhotos;
    data['checkTime'] = this.checkTime ? this.checkTime.toISOString() : <any>undefined;
    data['entName'] = this.entName;
    data['cantonCode'] = this.cantonCode;
    data['cantonName'] = this.cantonName;
    data['cantonFullCode'] = this.cantonFullCode;
    data['cantonFullName'] = this.cantonFullName;
    data['entAddress'] = this.entAddress;
    data['entType'] = this.entType;
    data['entTags'] = this.entTags;
    data['followUserName'] = this.followUserName;
    data['isOverDue'] = this.isOverDue;
    return data;
  }

  clone(): VisitingPlanListDto {
    const json = this.toJSON();
    let result = new VisitingPlanListDto();
    result.init(json);
    return result;
  }
}

export class EditEnterpriseInfoDto {
  /** 企业线索ID */
  clueId!: number | undefined;
  /** 行政区 */
  cantonCode!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 备注标签 */
  tags!: string | undefined;
  /** 企业性质 */
  entType!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.clueId = _data['clueId'];
      this.cantonCode = _data['cantonCode'];
      this.address = _data['address'];
      this.tags = _data['tags'];
      this.entType = _data['entType'];
    }
  }

  static fromJS(data: any, _mappings?: any): EditEnterpriseInfoDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EditEnterpriseInfoDto>(data, _mappings, EditEnterpriseInfoDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['clueId'] = this.clueId;
    data['cantonCode'] = this.cantonCode;
    data['address'] = this.address;
    data['tags'] = this.tags;
    data['entType'] = this.entType;
    return data;
  }

  clone(): EditEnterpriseInfoDto {
    const json = this.toJSON();
    let result = new EditEnterpriseInfoDto();
    result.init(json);
    return result;
  }
}

/** 处置企业线索池的列表DTO Erinyes.YFCrm.CRM_Clue */
export class CRM_ClueListDto {
  id!: number | undefined;
  /** 工商信息 */
  enterpriseId!: number | undefined;
  /** 客户名称 */
  entName!: string | undefined;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 行政区 */
  cantonCode!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 行业 */
  industry!: string | undefined;
  /** 企业性质 */
  entNature!: string | undefined;
  /** 联系人名称 */
  contactName!: string | undefined;
  /** 职务 */
  contactPost!: string | undefined;
  /** 办公电话 */
  contactTel!: string | undefined;
  /** 移动电话 */
  contactPhone!: string | undefined;
  /** 负责用户 */
  followUserId!: number | undefined;
  /** 负责用户名称 */
  followUserName!: string | undefined;
  /** 线索状态 */
  followState!: number | undefined;
  /** 领取时间 */
  followTime!: dayjs.Dayjs | undefined;
  /** 有效时间 */
  validTime!: dayjs.Dayjs | undefined;
  /** 有效日 */
  validDay!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.enterpriseId = _data['enterpriseId'];
      this.entName = _data['entName'];
      this.cantonName = _data['cantonName'];
      this.cantonCode = _data['cantonCode'];
      this.address = _data['address'];
      this.industry = _data['industry'];
      this.entNature = _data['entNature'];
      this.contactName = _data['contactName'];
      this.contactPost = _data['contactPost'];
      this.contactTel = _data['contactTel'];
      this.contactPhone = _data['contactPhone'];
      this.followUserId = _data['followUserId'];
      this.followUserName = _data['followUserName'];
      this.followState = _data['followState'];
      this.followTime = _data['followTime']
        ? dayjs(_data['followTime'].toString())
        : <any>undefined;
      this.validTime = _data['validTime'] ? dayjs(_data['validTime'].toString()) : <any>undefined;
      this.validDay = _data['validDay'];
    }
  }

  static fromJS(data: any, _mappings?: any): CRM_ClueListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CRM_ClueListDto>(data, _mappings, CRM_ClueListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['enterpriseId'] = this.enterpriseId;
    data['entName'] = this.entName;
    data['cantonName'] = this.cantonName;
    data['cantonCode'] = this.cantonCode;
    data['address'] = this.address;
    data['industry'] = this.industry;
    data['entNature'] = this.entNature;
    data['contactName'] = this.contactName;
    data['contactPost'] = this.contactPost;
    data['contactTel'] = this.contactTel;
    data['contactPhone'] = this.contactPhone;
    data['followUserId'] = this.followUserId;
    data['followUserName'] = this.followUserName;
    data['followState'] = this.followState;
    data['followTime'] = this.followTime ? this.followTime.toISOString() : <any>undefined;
    data['validTime'] = this.validTime ? this.validTime.toISOString() : <any>undefined;
    data['validDay'] = this.validDay;
    return data;
  }

  clone(): CRM_ClueListDto {
    const json = this.toJSON();
    let result = new CRM_ClueListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfContactListDto {
  totalCount!: number;
  items!: ContactListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(ContactListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfContactListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfContactListDto>(
      data,
      _mappings,
      PagedResultDtoOfContactListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfContactListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfContactListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfContractYFListDto {
  totalCount!: number;
  items!: ContractYFListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(ContractYFListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfContractYFListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfContractYFListDto>(
      data,
      _mappings,
      PagedResultDtoOfContractYFListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfContractYFListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfContractYFListDto();
    result.init(json);
    return result;
  }
}

export class EditEnterpriseInfoListDto {
  /** 企业线索ID */
  clueId!: number | undefined;
  /** 行政区 */
  cantonCode!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 备注标签 */
  tags!: string | undefined;
  /** 企业性质 */
  entType!: string | undefined;
  cantonName!: string | undefined;
  cantonFullCode!: string | undefined;
  cantonFullName!: string | undefined;
  entName!: string | undefined;
  /** 负责人 */
  followUserName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.clueId = _data['clueId'];
      this.cantonCode = _data['cantonCode'];
      this.address = _data['address'];
      this.tags = _data['tags'];
      this.entType = _data['entType'];
      this.cantonName = _data['cantonName'];
      this.cantonFullCode = _data['cantonFullCode'];
      this.cantonFullName = _data['cantonFullName'];
      this.entName = _data['entName'];
      this.followUserName = _data['followUserName'];
    }
  }

  static fromJS(data: any, _mappings?: any): EditEnterpriseInfoListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EditEnterpriseInfoListDto>(data, _mappings, EditEnterpriseInfoListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['clueId'] = this.clueId;
    data['cantonCode'] = this.cantonCode;
    data['address'] = this.address;
    data['tags'] = this.tags;
    data['entType'] = this.entType;
    data['cantonName'] = this.cantonName;
    data['cantonFullCode'] = this.cantonFullCode;
    data['cantonFullName'] = this.cantonFullName;
    data['entName'] = this.entName;
    data['followUserName'] = this.followUserName;
    return data;
  }

  clone(): EditEnterpriseInfoListDto {
    const json = this.toJSON();
    let result = new EditEnterpriseInfoListDto();
    result.init(json);
    return result;
  }
}

export class WlBaseSupercargoListDto {
  id!: number;
  /** 姓名 */
  name!: string | undefined;
  /** 手机号码 */
  phone!: string | undefined;
  /** 从业资格证 */
  certificate!: string | undefined;
  /** 状态，0：未使用，1：使用中 */
  status!: number;
  /** 是否包含在运力中，true：包含，false：不包含 */
  isInCapacity!: boolean;
  /** 租户 */
  tenantId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 身份证 */
  idCard!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  wlBaseCapacitys!: WlBaseCapacityListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.name = _data['name'];
      this.phone = _data['phone'];
      this.certificate = _data['certificate'];
      this.status = _data['status'];
      this.isInCapacity = _data['isInCapacity'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.idCard = _data['idCard'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['wlBaseCapacitys'])) {
        this.wlBaseCapacitys = [] as any;
        for (let item of _data['wlBaseCapacitys'])
          this.wlBaseCapacitys!.push(WlBaseCapacityListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseSupercargoListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseSupercargoListDto>(data, _mappings, WlBaseSupercargoListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['name'] = this.name;
    data['phone'] = this.phone;
    data['certificate'] = this.certificate;
    data['status'] = this.status;
    data['isInCapacity'] = this.isInCapacity;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['idCard'] = this.idCard;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    if (Array.isArray(this.wlBaseCapacitys)) {
      data['wlBaseCapacitys'] = [];
      for (let item of this.wlBaseCapacitys) data['wlBaseCapacitys'].push(item.toJSON());
    }
    return data;
  }

  clone(): WlBaseSupercargoListDto {
    const json = this.toJSON();
    let result = new WlBaseSupercargoListDto();
    result.init(json);
    return result;
  }
}

export class WlBaseVehicleTrailerListDto {
  id!: number;
  /** 车牌号 */
  number!: string | undefined;
  /** 保险单 */
  policy!: string | undefined;
  /** 车头行驶证 */
  driverLicense!: string | undefined;
  /** 道路运输经营许可证 */
  roadTransportLicense!: string | undefined;
  /** 车型Id */
  vehicleTypeId!: number | undefined;
  /** 车型选择 */
  vehicleType!: string | undefined;
  /** 车型选择备注 */
  vehicleRemark!: string | undefined;
  /** 核载能力 */
  capacity!: number | undefined;
  /** 核载能力单位 */
  capacityUnit!: string | undefined;
  /** 状态，0：未使用，1：使用中 */
  status!: number;
  /** 租户 */
  tenantId!: number | undefined;
  /** 是否包含在运力中，true：包含，false：不包含 */
  isInCapacity!: boolean;
  /** 备注 */
  remark!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  wlBaseCapacitys!: WlBaseCapacityListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.number = _data['number'];
      this.policy = _data['policy'];
      this.driverLicense = _data['driverLicense'];
      this.roadTransportLicense = _data['roadTransportLicense'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleType = _data['vehicleType'];
      this.vehicleRemark = _data['vehicleRemark'];
      this.capacity = _data['capacity'];
      this.capacityUnit = _data['capacityUnit'];
      this.status = _data['status'];
      this.tenantId = _data['tenantId'];
      this.isInCapacity = _data['isInCapacity'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['wlBaseCapacitys'])) {
        this.wlBaseCapacitys = [] as any;
        for (let item of _data['wlBaseCapacitys'])
          this.wlBaseCapacitys!.push(WlBaseCapacityListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseVehicleTrailerListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseVehicleTrailerListDto>(
      data,
      _mappings,
      WlBaseVehicleTrailerListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['number'] = this.number;
    data['policy'] = this.policy;
    data['driverLicense'] = this.driverLicense;
    data['roadTransportLicense'] = this.roadTransportLicense;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleType'] = this.vehicleType;
    data['vehicleRemark'] = this.vehicleRemark;
    data['capacity'] = this.capacity;
    data['capacityUnit'] = this.capacityUnit;
    data['status'] = this.status;
    data['tenantId'] = this.tenantId;
    data['isInCapacity'] = this.isInCapacity;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    if (Array.isArray(this.wlBaseCapacitys)) {
      data['wlBaseCapacitys'] = [];
      for (let item of this.wlBaseCapacitys) data['wlBaseCapacitys'].push(item.toJSON());
    }
    return data;
  }

  clone(): WlBaseVehicleTrailerListDto {
    const json = this.toJSON();
    let result = new WlBaseVehicleTrailerListDto();
    result.init(json);
    return result;
  }
}

export class WlBaseVehicleListDto {
  id!: number;
  /** 车牌号 */
  number!: string | undefined;
  /** 保险单 */
  policy!: string | undefined;
  /** 车头行驶证 */
  driverLicense!: string | undefined;
  /** 核载能力 */
  capacity!: number | undefined;
  /** 核载能力单位 */
  capacityUnit!: string | undefined;
  /** 道路运输经营许可证 */
  roadTransportLicense!: string | undefined;
  /** 是否包含挂车 */
  hastrailer!: boolean;
  /** 状态，0：未使用，1：使用中 */
  status!: number;
  /** 租户 */
  tenantId!: number | undefined;
  /** 是否包含在运力中，true：包含，false：不包含 */
  isInCapacity!: boolean;
  /** 备注 */
  remark!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  wlBaseCapacitys!: WlBaseCapacityListDto[] | undefined;
  /** 车型选择 */
  vehicleTypeId!: number | undefined;
  vehicleType!: string | undefined;
  /** 车型选择备注 */
  vehicleRemark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.number = _data['number'];
      this.policy = _data['policy'];
      this.driverLicense = _data['driverLicense'];
      this.capacity = _data['capacity'];
      this.capacityUnit = _data['capacityUnit'];
      this.roadTransportLicense = _data['roadTransportLicense'];
      this.hastrailer = _data['hastrailer'];
      this.status = _data['status'];
      this.tenantId = _data['tenantId'];
      this.isInCapacity = _data['isInCapacity'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['wlBaseCapacitys'])) {
        this.wlBaseCapacitys = [] as any;
        for (let item of _data['wlBaseCapacitys'])
          this.wlBaseCapacitys!.push(WlBaseCapacityListDto.fromJS(item, _mappings));
      }
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleType = _data['vehicleType'];
      this.vehicleRemark = _data['vehicleRemark'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseVehicleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseVehicleListDto>(data, _mappings, WlBaseVehicleListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['number'] = this.number;
    data['policy'] = this.policy;
    data['driverLicense'] = this.driverLicense;
    data['capacity'] = this.capacity;
    data['capacityUnit'] = this.capacityUnit;
    data['roadTransportLicense'] = this.roadTransportLicense;
    data['hastrailer'] = this.hastrailer;
    data['status'] = this.status;
    data['tenantId'] = this.tenantId;
    data['isInCapacity'] = this.isInCapacity;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    if (Array.isArray(this.wlBaseCapacitys)) {
      data['wlBaseCapacitys'] = [];
      for (let item of this.wlBaseCapacitys) data['wlBaseCapacitys'].push(item.toJSON());
    }
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleType'] = this.vehicleType;
    data['vehicleRemark'] = this.vehicleRemark;
    return data;
  }

  clone(): WlBaseVehicleListDto {
    const json = this.toJSON();
    let result = new WlBaseVehicleListDto();
    result.init(json);
    return result;
  }
}

export class WlBaseCapacityListDto {
  id!: number;
  /** 车头主键 */
  vehicleId!: number | undefined;
  /** 车挂主键 */
  trailerId!: number | undefined;
  /** 司机主键 */
  driverId!: number | undefined;
  /** 押运主键 */
  supercargoId!: number | undefined;
  /** 状态，0：初始化，1：抢单中，2：运行中 */
  bcState!: number | undefined;
  /** 是否可用（是否已抢了2单） */
  isAvaliable!: boolean;
  /** 租户 */
  tenantId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 整车类型描述 */
  vehicleType!: string | undefined;
  /** 整车类型备注 */
  vehicleRemark!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  driver!: WlBaseDriverListDto;
  supercargo!: WlBaseSupercargoListDto;
  trailer!: WlBaseVehicleTrailerListDto;
  vehicle!: WlBaseVehicleListDto;
  wlOrderBidDetails!: WlOrderBidDetailListDto[] | undefined;
  /** 核载能力 */
  capacity!: number | undefined;
  /** 核载能力单位 */
  capacityUnit!: string | undefined;
  tenantEntName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.vehicleId = _data['vehicleId'];
      this.trailerId = _data['trailerId'];
      this.driverId = _data['driverId'];
      this.supercargoId = _data['supercargoId'];
      this.bcState = _data['bcState'];
      this.isAvaliable = _data['isAvaliable'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.vehicleType = _data['vehicleType'];
      this.vehicleRemark = _data['vehicleRemark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.driver = _data['driver']
        ? WlBaseDriverListDto.fromJS(_data['driver'], _mappings)
        : <any>undefined;
      this.supercargo = _data['supercargo']
        ? WlBaseSupercargoListDto.fromJS(_data['supercargo'], _mappings)
        : <any>undefined;
      this.trailer = _data['trailer']
        ? WlBaseVehicleTrailerListDto.fromJS(_data['trailer'], _mappings)
        : <any>undefined;
      this.vehicle = _data['vehicle']
        ? WlBaseVehicleListDto.fromJS(_data['vehicle'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['wlOrderBidDetails'])) {
        this.wlOrderBidDetails = [] as any;
        for (let item of _data['wlOrderBidDetails'])
          this.wlOrderBidDetails!.push(WlOrderBidDetailListDto.fromJS(item, _mappings));
      }
      this.capacity = _data['capacity'];
      this.capacityUnit = _data['capacityUnit'];
      this.tenantEntName = _data['tenantEntName'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseCapacityListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseCapacityListDto>(data, _mappings, WlBaseCapacityListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['vehicleId'] = this.vehicleId;
    data['trailerId'] = this.trailerId;
    data['driverId'] = this.driverId;
    data['supercargoId'] = this.supercargoId;
    data['bcState'] = this.bcState;
    data['isAvaliable'] = this.isAvaliable;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['vehicleType'] = this.vehicleType;
    data['vehicleRemark'] = this.vehicleRemark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    data['supercargo'] = this.supercargo ? this.supercargo.toJSON() : <any>undefined;
    data['trailer'] = this.trailer ? this.trailer.toJSON() : <any>undefined;
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    if (Array.isArray(this.wlOrderBidDetails)) {
      data['wlOrderBidDetails'] = [];
      for (let item of this.wlOrderBidDetails) data['wlOrderBidDetails'].push(item.toJSON());
    }
    data['capacity'] = this.capacity;
    data['capacityUnit'] = this.capacityUnit;
    data['tenantEntName'] = this.tenantEntName;
    return data;
  }

  clone(): WlBaseCapacityListDto {
    const json = this.toJSON();
    let result = new WlBaseCapacityListDto();
    result.init(json);
    return result;
  }
}

export class WlBaseDriverListDto {
  id!: number;
  /** 姓名 */
  name!: string | undefined;
  /** 手机号 */
  phone!: string | undefined;
  /** 从业资格证 */
  certificate!: string | undefined;
  /** 状态，0：未使用，1：使用中 */
  status!: number;
  /** 是否包含在运力中，true：包含，false：不包含 */
  isInCapacity!: boolean;
  /** 租户 */
  tenantId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 身份证 */
  idCard!: string | undefined;
  /** 司机的UserId */
  driverUserId!: number | undefined;
  /** 司机的姓名 */
  driverUserName!: string | undefined;
  /** 司机的手机号 */
  driverUserPhone!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  wlBaseCapacitys!: WlBaseCapacityListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.name = _data['name'];
      this.phone = _data['phone'];
      this.certificate = _data['certificate'];
      this.status = _data['status'];
      this.isInCapacity = _data['isInCapacity'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.idCard = _data['idCard'];
      this.driverUserId = _data['driverUserId'];
      this.driverUserName = _data['driverUserName'];
      this.driverUserPhone = _data['driverUserPhone'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['wlBaseCapacitys'])) {
        this.wlBaseCapacitys = [] as any;
        for (let item of _data['wlBaseCapacitys'])
          this.wlBaseCapacitys!.push(WlBaseCapacityListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseDriverListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseDriverListDto>(data, _mappings, WlBaseDriverListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['name'] = this.name;
    data['phone'] = this.phone;
    data['certificate'] = this.certificate;
    data['status'] = this.status;
    data['isInCapacity'] = this.isInCapacity;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['idCard'] = this.idCard;
    data['driverUserId'] = this.driverUserId;
    data['driverUserName'] = this.driverUserName;
    data['driverUserPhone'] = this.driverUserPhone;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    if (Array.isArray(this.wlBaseCapacitys)) {
      data['wlBaseCapacitys'] = [];
      for (let item of this.wlBaseCapacitys) data['wlBaseCapacitys'].push(item.toJSON());
    }
    return data;
  }

  clone(): WlBaseDriverListDto {
    const json = this.toJSON();
    let result = new WlBaseDriverListDto();
    result.init(json);
    return result;
  }
}

export class WlOrderBidDetailListDto {
  id!: number | undefined;
  /** 抢单主键 */
  orderBidId!: number | undefined;
  /** 运力主键 */
  capacityId!: number | undefined;
  /** 车头主键 */
  vehicleId!: number | undefined;
  /** 车挂主键 */
  trailerId!: number | undefined;
  /** 司机主键 */
  driverId!: number | undefined;
  /** 押运主键 */
  supercargoId!: number | undefined;
  /** 整车类型描述 */
  vehicleType!: string | undefined;
  /** 整车类型备注 */
  vehicleRemark!: string | undefined;
  orderBid!: WlOrderBidListDto;
  driver!: WlBaseDriverListDto;
  supercargo!: WlBaseSupercargoListDto;
  trailer!: WlBaseVehicleTrailerListDto;
  vehicle!: WlBaseVehicleListDto;
  capacity!: WlBaseCapacityListDto;
  /** 核载能力 */
  loadCapacity!: number | undefined;
  /** 核载能力单位 */
  capacityUnit!: string | undefined;
  /** 是否隐藏，0：否，1：是 */
  isHiden!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.orderBidId = _data['orderBidId'];
      this.capacityId = _data['capacityId'];
      this.vehicleId = _data['vehicleId'];
      this.trailerId = _data['trailerId'];
      this.driverId = _data['driverId'];
      this.supercargoId = _data['supercargoId'];
      this.vehicleType = _data['vehicleType'];
      this.vehicleRemark = _data['vehicleRemark'];
      this.orderBid = _data['orderBid']
        ? WlOrderBidListDto.fromJS(_data['orderBid'], _mappings)
        : <any>undefined;
      this.driver = _data['driver']
        ? WlBaseDriverListDto.fromJS(_data['driver'], _mappings)
        : <any>undefined;
      this.supercargo = _data['supercargo']
        ? WlBaseSupercargoListDto.fromJS(_data['supercargo'], _mappings)
        : <any>undefined;
      this.trailer = _data['trailer']
        ? WlBaseVehicleTrailerListDto.fromJS(_data['trailer'], _mappings)
        : <any>undefined;
      this.vehicle = _data['vehicle']
        ? WlBaseVehicleListDto.fromJS(_data['vehicle'], _mappings)
        : <any>undefined;
      this.capacity = _data['capacity']
        ? WlBaseCapacityListDto.fromJS(_data['capacity'], _mappings)
        : <any>undefined;
      this.loadCapacity = _data['loadCapacity'];
      this.capacityUnit = _data['capacityUnit'];
      this.isHiden = _data['isHiden'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderBidDetailListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderBidDetailListDto>(data, _mappings, WlOrderBidDetailListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['orderBidId'] = this.orderBidId;
    data['capacityId'] = this.capacityId;
    data['vehicleId'] = this.vehicleId;
    data['trailerId'] = this.trailerId;
    data['driverId'] = this.driverId;
    data['supercargoId'] = this.supercargoId;
    data['vehicleType'] = this.vehicleType;
    data['vehicleRemark'] = this.vehicleRemark;
    data['orderBid'] = this.orderBid ? this.orderBid.toJSON() : <any>undefined;
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    data['supercargo'] = this.supercargo ? this.supercargo.toJSON() : <any>undefined;
    data['trailer'] = this.trailer ? this.trailer.toJSON() : <any>undefined;
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    data['capacity'] = this.capacity ? this.capacity.toJSON() : <any>undefined;
    data['loadCapacity'] = this.loadCapacity;
    data['capacityUnit'] = this.capacityUnit;
    data['isHiden'] = this.isHiden;
    return data;
  }

  clone(): WlOrderBidDetailListDto {
    const json = this.toJSON();
    let result = new WlOrderBidDetailListDto();
    result.init(json);
    return result;
  }
}

export class WlOrderBidListDto {
  id!: number;
  bidCode!: string | undefined;
  /** 货单主键 */
  orderId!: number | undefined;
  /** 抢单时间 */
  bidTime!: dayjs.Dayjs | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 平台第三方发布 姓名 */
  sysUserName!: string | undefined;
  /** 平台第三方发布 手机号 */
  sysUserPhone!: string | undefined;
  /** 平台第三方发布 角色 */
  sysUserRole!: string | undefined;
  /** 抢单状态 */
  bidState!: number | undefined;
  /** 租户 */
  tenantId!: number | undefined;
  tenantEntName!: string | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 创建人名称 */
  createUserName!: string | undefined;
  /** 创建人手机号 */
  createUserPhone!: string | undefined;
  /** 创建人角色 */
  createUserRole!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  order!: WlOrderFormListDto;
  orderBidDetails!: WlOrderBidDetailListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.bidCode = _data['bidCode'];
      this.orderId = _data['orderId'];
      this.bidTime = _data['bidTime'] ? dayjs(_data['bidTime'].toString()) : <any>undefined;
      this.sysUserId = _data['sysUserId'];
      this.sysUserName = _data['sysUserName'];
      this.sysUserPhone = _data['sysUserPhone'];
      this.sysUserRole = _data['sysUserRole'];
      this.bidState = _data['bidState'];
      this.tenantId = _data['tenantId'];
      this.tenantEntName = _data['tenantEntName'];
      this.remark = _data['remark'];
      this.createUserName = _data['createUserName'];
      this.createUserPhone = _data['createUserPhone'];
      this.createUserRole = _data['createUserRole'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.order = _data['order']
        ? WlOrderFormListDto.fromJS(_data['order'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['orderBidDetails'])) {
        this.orderBidDetails = [] as any;
        for (let item of _data['orderBidDetails'])
          this.orderBidDetails!.push(WlOrderBidDetailListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderBidListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderBidListDto>(data, _mappings, WlOrderBidListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['bidCode'] = this.bidCode;
    data['orderId'] = this.orderId;
    data['bidTime'] = this.bidTime ? this.bidTime.toISOString() : <any>undefined;
    data['sysUserId'] = this.sysUserId;
    data['sysUserName'] = this.sysUserName;
    data['sysUserPhone'] = this.sysUserPhone;
    data['sysUserRole'] = this.sysUserRole;
    data['bidState'] = this.bidState;
    data['tenantId'] = this.tenantId;
    data['tenantEntName'] = this.tenantEntName;
    data['remark'] = this.remark;
    data['createUserName'] = this.createUserName;
    data['createUserPhone'] = this.createUserPhone;
    data['createUserRole'] = this.createUserRole;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['order'] = this.order ? this.order.toJSON() : <any>undefined;
    if (Array.isArray(this.orderBidDetails)) {
      data['orderBidDetails'] = [];
      for (let item of this.orderBidDetails) data['orderBidDetails'].push(item.toJSON());
    }
    return data;
  }

  clone(): WlOrderBidListDto {
    const json = this.toJSON();
    let result = new WlOrderBidListDto();
    result.init(json);
    return result;
  }
}

export class WlOrderQuoteListDto {
  id!: number | undefined;
  /** 询价主键 */
  quoteId!: number | undefined;
  /** 报价一口价 */
  transportPrice!: number | undefined;
  /** 报价时间 */
  quoteTime!: dayjs.Dayjs | undefined;
  /** 报价状态 */
  quoteState!: number | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 报价来源，0：物流端，1：平台端 */
  quoteFrom!: number;
  /** 是否被推送给处置企业，true：被推送，false：不被推送 */
  isPushed!: boolean;
  /** 是否被处置企业采纳，true：被采纳，false：不被采纳 */
  isAccepted!: boolean;
  /** 租户ID */
  tenantId!: number | undefined;
  /** 租户企业名称 */
  tenantEntName!: string | undefined;
  quote!: WlQuoteFormListDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.quoteId = _data['quoteId'];
      this.transportPrice = _data['transportPrice'];
      this.quoteTime = _data['quoteTime'] ? dayjs(_data['quoteTime'].toString()) : <any>undefined;
      this.quoteState = _data['quoteState'];
      this.sysUserId = _data['sysUserId'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.quoteFrom = _data['quoteFrom'];
      this.isPushed = _data['isPushed'];
      this.isAccepted = _data['isAccepted'];
      this.tenantId = _data['tenantId'];
      this.tenantEntName = _data['tenantEntName'];
      this.quote = _data['quote']
        ? WlQuoteFormListDto.fromJS(_data['quote'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderQuoteListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderQuoteListDto>(data, _mappings, WlOrderQuoteListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['quoteId'] = this.quoteId;
    data['transportPrice'] = this.transportPrice;
    data['quoteTime'] = this.quoteTime ? this.quoteTime.toISOString() : <any>undefined;
    data['quoteState'] = this.quoteState;
    data['sysUserId'] = this.sysUserId;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['quoteFrom'] = this.quoteFrom;
    data['isPushed'] = this.isPushed;
    data['isAccepted'] = this.isAccepted;
    data['tenantId'] = this.tenantId;
    data['tenantEntName'] = this.tenantEntName;
    data['quote'] = this.quote ? this.quote.toJSON() : <any>undefined;
    return data;
  }

  clone(): WlOrderQuoteListDto {
    const json = this.toJSON();
    let result = new WlOrderQuoteListDto();
    result.init(json);
    return result;
  }
}

export class WlQuoteWasteListDto {
  id!: number | undefined;
  /** 询价主键 */
  quoteId!: number | undefined;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 运输重量 */
  transportWeight!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 包装方式 */
  packagings!: string | undefined;
  /** 包装方式 id */
  packagingId!: number | undefined;
  /** 包装方式备注 */
  packRemark!: string | undefined;
  /** 租户 */
  tenantId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  quote!: WlQuoteFormListDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.quoteId = _data['quoteId'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.transportWeight = _data['transportWeight'];
      this.unit = _data['unit'];
      this.packagings = _data['packagings'];
      this.packagingId = _data['packagingId'];
      this.packRemark = _data['packRemark'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.quote = _data['quote']
        ? WlQuoteFormListDto.fromJS(_data['quote'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): WlQuoteWasteListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlQuoteWasteListDto>(data, _mappings, WlQuoteWasteListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['quoteId'] = this.quoteId;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['transportWeight'] = this.transportWeight;
    data['unit'] = this.unit;
    data['packagings'] = this.packagings;
    data['packagingId'] = this.packagingId;
    data['packRemark'] = this.packRemark;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['quote'] = this.quote ? this.quote.toJSON() : <any>undefined;
    return data;
  }

  clone(): WlQuoteWasteListDto {
    const json = this.toJSON();
    let result = new WlQuoteWasteListDto();
    result.init(json);
    return result;
  }
}

export class WlOrderPushListDto {
  id!: number | undefined;
  /** 货单主键 */
  orderId!: number | undefined;
  /** 推送时间 */
  pushTime!: dayjs.Dayjs | undefined;
  /** 推送租户 */
  pushTenantId!: number | undefined;
  /** 推送租户名称 */
  pushTenantName!: string | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 平台第三方姓名 */
  sysUserName!: string | undefined;
  order!: WlOrderFormListDto;
  tenantId!: number;
  /** 备注 */
  remark!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.orderId = _data['orderId'];
      this.pushTime = _data['pushTime'] ? dayjs(_data['pushTime'].toString()) : <any>undefined;
      this.pushTenantId = _data['pushTenantId'];
      this.pushTenantName = _data['pushTenantName'];
      this.sysUserId = _data['sysUserId'];
      this.sysUserName = _data['sysUserName'];
      this.order = _data['order']
        ? WlOrderFormListDto.fromJS(_data['order'], _mappings)
        : <any>undefined;
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderPushListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderPushListDto>(data, _mappings, WlOrderPushListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['orderId'] = this.orderId;
    data['pushTime'] = this.pushTime ? this.pushTime.toISOString() : <any>undefined;
    data['pushTenantId'] = this.pushTenantId;
    data['pushTenantName'] = this.pushTenantName;
    data['sysUserId'] = this.sysUserId;
    data['sysUserName'] = this.sysUserName;
    data['order'] = this.order ? this.order.toJSON() : <any>undefined;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): WlOrderPushListDto {
    const json = this.toJSON();
    let result = new WlOrderPushListDto();
    result.init(json);
    return result;
  }
}

export class WlQuoteFormListDto {
  id!: number | undefined;
  tenantId!: number;
  /** 单号 */
  quoteCode!: string | undefined;
  /** 装货企业 */
  senderEntname!: string | undefined;
  /** 装货企业Id */
  senderEntId!: number | undefined;
  /** 装货行政区 */
  senderCantonCode!: string | undefined;
  /** 装货地址 */
  senderAddress!: string | undefined;
  /** 卸货企业 */
  receiverEntname!: string | undefined;
  /** 卸货行政区 */
  receiverCantonCode!: string | undefined;
  /** 卸货地址 */
  receiverAddress!: string | undefined;
  /** 装货联系人 */
  senderName!: string | undefined;
  /** 装货联系手机 */
  senderPhone!: string | undefined;
  /** 卸货联系人 */
  receiverName!: string | undefined;
  /** 卸货联系手机 */
  receiverPhone!: string | undefined;
  /** 装货时间 */
  shippingTime!: dayjs.Dayjs | undefined;
  /** 确认报价状态，1：询价中，2：已报价 */
  quoteState!: number | undefined;
  /** 车辆类型 */
  vehicleTypeId!: number | undefined;
  /** 车辆类型名称 */
  vehicleTypeName!: string | undefined;
  /** 车辆类型备注 */
  vehicleTypeRemark!: string | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 平台第三方发布 姓名 */
  sysUserName!: string | undefined;
  /** 平台第三方发布 手机号 */
  sysUserPhone!: string | undefined;
  /** 平台第三方发布 角色 */
  sysUserRole!: string | undefined;
  senderCantonCodeFull!: string | undefined;
  receiverCantonCodeFull!: string | undefined;
  tenantEntName!: string | undefined;
  allWeight!: number | undefined;
  receiverCantonCodeFullName!: string | undefined;
  senderCantonCodeFullName!: string | undefined;
  creationTime!: dayjs.Dayjs;
  /** 是否超时，ture：超时，false：没超时 */
  isTimeout!: boolean;
  /** 备注 */
  remark!: string | undefined;
  wlOrderQuotes!: WlOrderQuoteListDto[] | undefined;
  wlQuoteWastes!: WlQuoteWasteListDto[] | undefined;
  wlQuotePushes!: WlOrderPushListDto[] | undefined;
  /** 排序 */
  idx!: number;
  /** 开始经度 */
  lngStart!: number | undefined;
  /** 开始纬度 */
  latStart!: number | undefined;
  /** 结束经度 */
  lngEnd!: number | undefined;
  /** 结束纬度 */
  latEnd!: number | undefined;
  /** 距离 */
  distance!: number;
  creatorUserId!: number | undefined;
  tenantEntAddress!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.tenantId = _data['tenantId'];
      this.quoteCode = _data['quoteCode'];
      this.senderEntname = _data['senderEntname'];
      this.senderEntId = _data['senderEntId'];
      this.senderCantonCode = _data['senderCantonCode'];
      this.senderAddress = _data['senderAddress'];
      this.receiverEntname = _data['receiverEntname'];
      this.receiverCantonCode = _data['receiverCantonCode'];
      this.receiverAddress = _data['receiverAddress'];
      this.senderName = _data['senderName'];
      this.senderPhone = _data['senderPhone'];
      this.receiverName = _data['receiverName'];
      this.receiverPhone = _data['receiverPhone'];
      this.shippingTime = _data['shippingTime']
        ? dayjs(_data['shippingTime'].toString())
        : <any>undefined;
      this.quoteState = _data['quoteState'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleTypeName = _data['vehicleTypeName'];
      this.vehicleTypeRemark = _data['vehicleTypeRemark'];
      this.sysUserId = _data['sysUserId'];
      this.sysUserName = _data['sysUserName'];
      this.sysUserPhone = _data['sysUserPhone'];
      this.sysUserRole = _data['sysUserRole'];
      this.senderCantonCodeFull = _data['senderCantonCodeFull'];
      this.receiverCantonCodeFull = _data['receiverCantonCodeFull'];
      this.tenantEntName = _data['tenantEntName'];
      this.allWeight = _data['allWeight'];
      this.receiverCantonCodeFullName = _data['receiverCantonCodeFullName'];
      this.senderCantonCodeFullName = _data['senderCantonCodeFullName'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.isTimeout = _data['isTimeout'];
      this.remark = _data['remark'];
      if (Array.isArray(_data['wlOrderQuotes'])) {
        this.wlOrderQuotes = [] as any;
        for (let item of _data['wlOrderQuotes'])
          this.wlOrderQuotes!.push(WlOrderQuoteListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['wlQuoteWastes'])) {
        this.wlQuoteWastes = [] as any;
        for (let item of _data['wlQuoteWastes'])
          this.wlQuoteWastes!.push(WlQuoteWasteListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['wlQuotePushes'])) {
        this.wlQuotePushes = [] as any;
        for (let item of _data['wlQuotePushes'])
          this.wlQuotePushes!.push(WlOrderPushListDto.fromJS(item, _mappings));
      }
      this.idx = _data['idx'];
      this.lngStart = _data['lngStart'];
      this.latStart = _data['latStart'];
      this.lngEnd = _data['lngEnd'];
      this.latEnd = _data['latEnd'];
      this.distance = _data['distance'];
      this.creatorUserId = _data['creatorUserId'];
      this.tenantEntAddress = _data['tenantEntAddress'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlQuoteFormListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlQuoteFormListDto>(data, _mappings, WlQuoteFormListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['tenantId'] = this.tenantId;
    data['quoteCode'] = this.quoteCode;
    data['senderEntname'] = this.senderEntname;
    data['senderEntId'] = this.senderEntId;
    data['senderCantonCode'] = this.senderCantonCode;
    data['senderAddress'] = this.senderAddress;
    data['receiverEntname'] = this.receiverEntname;
    data['receiverCantonCode'] = this.receiverCantonCode;
    data['receiverAddress'] = this.receiverAddress;
    data['senderName'] = this.senderName;
    data['senderPhone'] = this.senderPhone;
    data['receiverName'] = this.receiverName;
    data['receiverPhone'] = this.receiverPhone;
    data['shippingTime'] = this.shippingTime ? this.shippingTime.toISOString() : <any>undefined;
    data['quoteState'] = this.quoteState;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleTypeName'] = this.vehicleTypeName;
    data['vehicleTypeRemark'] = this.vehicleTypeRemark;
    data['sysUserId'] = this.sysUserId;
    data['sysUserName'] = this.sysUserName;
    data['sysUserPhone'] = this.sysUserPhone;
    data['sysUserRole'] = this.sysUserRole;
    data['senderCantonCodeFull'] = this.senderCantonCodeFull;
    data['receiverCantonCodeFull'] = this.receiverCantonCodeFull;
    data['tenantEntName'] = this.tenantEntName;
    data['allWeight'] = this.allWeight;
    data['receiverCantonCodeFullName'] = this.receiverCantonCodeFullName;
    data['senderCantonCodeFullName'] = this.senderCantonCodeFullName;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['isTimeout'] = this.isTimeout;
    data['remark'] = this.remark;
    if (Array.isArray(this.wlOrderQuotes)) {
      data['wlOrderQuotes'] = [];
      for (let item of this.wlOrderQuotes) data['wlOrderQuotes'].push(item.toJSON());
    }
    if (Array.isArray(this.wlQuoteWastes)) {
      data['wlQuoteWastes'] = [];
      for (let item of this.wlQuoteWastes) data['wlQuoteWastes'].push(item.toJSON());
    }
    if (Array.isArray(this.wlQuotePushes)) {
      data['wlQuotePushes'] = [];
      for (let item of this.wlQuotePushes) data['wlQuotePushes'].push(item.toJSON());
    }
    data['idx'] = this.idx;
    data['lngStart'] = this.lngStart;
    data['latStart'] = this.latStart;
    data['lngEnd'] = this.lngEnd;
    data['latEnd'] = this.latEnd;
    data['distance'] = this.distance;
    data['creatorUserId'] = this.creatorUserId;
    data['tenantEntAddress'] = this.tenantEntAddress;
    return data;
  }

  clone(): WlQuoteFormListDto {
    const json = this.toJSON();
    let result = new WlQuoteFormListDto();
    result.init(json);
    return result;
  }
}

export class WlOrderStateListDto {
  id!: number | undefined;
  /** 询价主键 */
  orderId!: number | undefined;
  /** 货单状态 */
  stateType!: number | undefined;
  /** 排序 */
  ix!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  order!: WlOrderFormListDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.orderId = _data['orderId'];
      this.stateType = _data['stateType'];
      this.ix = _data['ix'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.order = _data['order']
        ? WlOrderFormListDto.fromJS(_data['order'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderStateListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderStateListDto>(data, _mappings, WlOrderStateListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['orderId'] = this.orderId;
    data['stateType'] = this.stateType;
    data['ix'] = this.ix;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['order'] = this.order ? this.order.toJSON() : <any>undefined;
    return data;
  }

  clone(): WlOrderStateListDto {
    const json = this.toJSON();
    let result = new WlOrderStateListDto();
    result.init(json);
    return result;
  }
}

export class WlOrderWasteListDto {
  id!: number | undefined;
  /** 询价主键 */
  orderId!: number | undefined;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 运输重量 */
  transportWeight!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 包装方式 */
  packagings!: string | undefined;
  /** 包装方式 id */
  packagingId!: number | undefined;
  /** 包装方式备注 */
  packRemark!: string | undefined;
  /** 租户 */
  tenantId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  order!: WlOrderFormListDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.orderId = _data['orderId'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.transportWeight = _data['transportWeight'];
      this.unit = _data['unit'];
      this.packagings = _data['packagings'];
      this.packagingId = _data['packagingId'];
      this.packRemark = _data['packRemark'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.order = _data['order']
        ? WlOrderFormListDto.fromJS(_data['order'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderWasteListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderWasteListDto>(data, _mappings, WlOrderWasteListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['orderId'] = this.orderId;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['transportWeight'] = this.transportWeight;
    data['unit'] = this.unit;
    data['packagings'] = this.packagings;
    data['packagingId'] = this.packagingId;
    data['packRemark'] = this.packRemark;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['order'] = this.order ? this.order.toJSON() : <any>undefined;
    return data;
  }

  clone(): WlOrderWasteListDto {
    const json = this.toJSON();
    let result = new WlOrderWasteListDto();
    result.init(json);
    return result;
  }
}

export class WlTransportInfoListDto {
  /** 主键 */
  id!: number | undefined;
  /** 运单主键 */
  transId!: number | undefined;
  trans!: WlTransFormListDto;
  /** 运力主键 */
  capacityId!: number | undefined;
  capacity!: WlBaseCapacityListDto;
  /** 车头主键 */
  vehicleId!: number | undefined;
  /** 车挂主键 */
  trailerId!: number | undefined;
  /** 司机主键 */
  driverId!: number | undefined;
  /** 押运主键 */
  supercargoId!: number | undefined;
  /** 整车类型描述 */
  vehicleType!: string | undefined;
  /** 整车类型ID */
  vehicleTypeID!: number | undefined;
  /** 整车类型备注 */
  vehicleRemark!: string | undefined;
  /** 核载能力 */
  loadCapacity!: number | undefined;
  /** 核载能力单位 */
  capacityUnit!: string | undefined;
  driver!: WlBaseDriverListDto;
  supercargo!: WlBaseSupercargoListDto;
  trailer!: WlBaseVehicleTrailerListDto;
  vehicle!: WlBaseVehicleListDto;
  /** 状态，0：无状态，1：装货签到，2：装货完成，3：卸货签到，4：卸货完成 */
  transState!: number;
  /** 装货签到时间 */
  loadingCheckInTime!: dayjs.Dayjs | undefined;
  /** 装货完成时间 */
  loadingCompleteTime!: dayjs.Dayjs | undefined;
  /** 装货吨数 */
  loadingWeight!: number | undefined;
  /** 装货现场照片 */
  loadingPics!: string | undefined;
  /** 卸货签到时间 */
  unLoadingCheckInTime!: dayjs.Dayjs | undefined;
  /** 卸货完成时间 */
  unLoadingCompleteTime!: dayjs.Dayjs | undefined;
  /** 卸货吨数 */
  unLoadingWeight!: number | undefined;
  /** 卸货现场照片 */
  unLoadingPics!: string | undefined;
  /** 实际里程数 */
  realDistance!: number | undefined;
  /** 实际里程数照片 */
  realDistancePics!: string | undefined;
  tenantId!: number;
  /** 备注 */
  remark!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 车头车牌号 */
  vehicleNumber!: string | undefined;
  /** 车挂车牌号 */
  vehicleTrailerNumber!: string | undefined;
  /** 司机名称 */
  driverName!: string | undefined;
  /** 司机手机号 */
  driverPhone!: string | undefined;
  /** 司机身份证 */
  driverCardId!: string | undefined;
  /** 押运员名称 */
  supercargoName!: string | undefined;
  /** 押运员手机号 */
  supercargoPhone!: string | undefined;
  /** 押运员身份证 */
  supercargoCardId!: string | undefined;
  /** 企业名称 */
  tenantName!: string | undefined;
  /** 是否隐藏，0：否，1：是 */
  isHiden!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.transId = _data['transId'];
      this.trans = _data['trans']
        ? WlTransFormListDto.fromJS(_data['trans'], _mappings)
        : <any>undefined;
      this.capacityId = _data['capacityId'];
      this.capacity = _data['capacity']
        ? WlBaseCapacityListDto.fromJS(_data['capacity'], _mappings)
        : <any>undefined;
      this.vehicleId = _data['vehicleId'];
      this.trailerId = _data['trailerId'];
      this.driverId = _data['driverId'];
      this.supercargoId = _data['supercargoId'];
      this.vehicleType = _data['vehicleType'];
      this.vehicleTypeID = _data['vehicleTypeID'];
      this.vehicleRemark = _data['vehicleRemark'];
      this.loadCapacity = _data['loadCapacity'];
      this.capacityUnit = _data['capacityUnit'];
      this.driver = _data['driver']
        ? WlBaseDriverListDto.fromJS(_data['driver'], _mappings)
        : <any>undefined;
      this.supercargo = _data['supercargo']
        ? WlBaseSupercargoListDto.fromJS(_data['supercargo'], _mappings)
        : <any>undefined;
      this.trailer = _data['trailer']
        ? WlBaseVehicleTrailerListDto.fromJS(_data['trailer'], _mappings)
        : <any>undefined;
      this.vehicle = _data['vehicle']
        ? WlBaseVehicleListDto.fromJS(_data['vehicle'], _mappings)
        : <any>undefined;
      this.transState = _data['transState'];
      this.loadingCheckInTime = _data['loadingCheckInTime']
        ? dayjs(_data['loadingCheckInTime'].toString())
        : <any>undefined;
      this.loadingCompleteTime = _data['loadingCompleteTime']
        ? dayjs(_data['loadingCompleteTime'].toString())
        : <any>undefined;
      this.loadingWeight = _data['loadingWeight'];
      this.loadingPics = _data['loadingPics'];
      this.unLoadingCheckInTime = _data['unLoadingCheckInTime']
        ? dayjs(_data['unLoadingCheckInTime'].toString())
        : <any>undefined;
      this.unLoadingCompleteTime = _data['unLoadingCompleteTime']
        ? dayjs(_data['unLoadingCompleteTime'].toString())
        : <any>undefined;
      this.unLoadingWeight = _data['unLoadingWeight'];
      this.unLoadingPics = _data['unLoadingPics'];
      this.realDistance = _data['realDistance'];
      this.realDistancePics = _data['realDistancePics'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.vehicleNumber = _data['vehicleNumber'];
      this.vehicleTrailerNumber = _data['vehicleTrailerNumber'];
      this.driverName = _data['driverName'];
      this.driverPhone = _data['driverPhone'];
      this.driverCardId = _data['driverCardId'];
      this.supercargoName = _data['supercargoName'];
      this.supercargoPhone = _data['supercargoPhone'];
      this.supercargoCardId = _data['supercargoCardId'];
      this.tenantName = _data['tenantName'];
      this.isHiden = _data['isHiden'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlTransportInfoListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlTransportInfoListDto>(data, _mappings, WlTransportInfoListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['transId'] = this.transId;
    data['trans'] = this.trans ? this.trans.toJSON() : <any>undefined;
    data['capacityId'] = this.capacityId;
    data['capacity'] = this.capacity ? this.capacity.toJSON() : <any>undefined;
    data['vehicleId'] = this.vehicleId;
    data['trailerId'] = this.trailerId;
    data['driverId'] = this.driverId;
    data['supercargoId'] = this.supercargoId;
    data['vehicleType'] = this.vehicleType;
    data['vehicleTypeID'] = this.vehicleTypeID;
    data['vehicleRemark'] = this.vehicleRemark;
    data['loadCapacity'] = this.loadCapacity;
    data['capacityUnit'] = this.capacityUnit;
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    data['supercargo'] = this.supercargo ? this.supercargo.toJSON() : <any>undefined;
    data['trailer'] = this.trailer ? this.trailer.toJSON() : <any>undefined;
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    data['transState'] = this.transState;
    data['loadingCheckInTime'] = this.loadingCheckInTime
      ? this.loadingCheckInTime.toISOString()
      : <any>undefined;
    data['loadingCompleteTime'] = this.loadingCompleteTime
      ? this.loadingCompleteTime.toISOString()
      : <any>undefined;
    data['loadingWeight'] = this.loadingWeight;
    data['loadingPics'] = this.loadingPics;
    data['unLoadingCheckInTime'] = this.unLoadingCheckInTime
      ? this.unLoadingCheckInTime.toISOString()
      : <any>undefined;
    data['unLoadingCompleteTime'] = this.unLoadingCompleteTime
      ? this.unLoadingCompleteTime.toISOString()
      : <any>undefined;
    data['unLoadingWeight'] = this.unLoadingWeight;
    data['unLoadingPics'] = this.unLoadingPics;
    data['realDistance'] = this.realDistance;
    data['realDistancePics'] = this.realDistancePics;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['vehicleNumber'] = this.vehicleNumber;
    data['vehicleTrailerNumber'] = this.vehicleTrailerNumber;
    data['driverName'] = this.driverName;
    data['driverPhone'] = this.driverPhone;
    data['driverCardId'] = this.driverCardId;
    data['supercargoName'] = this.supercargoName;
    data['supercargoPhone'] = this.supercargoPhone;
    data['supercargoCardId'] = this.supercargoCardId;
    data['tenantName'] = this.tenantName;
    data['isHiden'] = this.isHiden;
    return data;
  }

  clone(): WlTransportInfoListDto {
    const json = this.toJSON();
    let result = new WlTransportInfoListDto();
    result.init(json);
    return result;
  }
}

export class WlTransFormListDto {
  id!: number | undefined;
  transCode!: string | undefined;
  /** 货单主键 */
  orderId!: number | undefined;
  order!: WlOrderFormListDto;
  /** 抢单主键 */
  orderBidId!: number | undefined;
  orderBid!: WlOrderBidListDto;
  /** 运单状态，0：无状态，1：运单开始，2：运单结束 */
  transportState!: number;
  /** 运单开始时间 */
  transportBeginTime!: dayjs.Dayjs | undefined;
  /** 运单结束时间 */
  transportEndTime!: dayjs.Dayjs | undefined;
  /** 签到明细 */
  transportInfos!: WlTransportInfoListDto[] | undefined;
  tenantId!: number;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 备注 */
  remark!: string | undefined;
  /** 物流企业名称 */
  tenantEntName!: string | undefined;
  /** 车头车牌 */
  vehicleNumbers!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.transCode = _data['transCode'];
      this.orderId = _data['orderId'];
      this.order = _data['order']
        ? WlOrderFormListDto.fromJS(_data['order'], _mappings)
        : <any>undefined;
      this.orderBidId = _data['orderBidId'];
      this.orderBid = _data['orderBid']
        ? WlOrderBidListDto.fromJS(_data['orderBid'], _mappings)
        : <any>undefined;
      this.transportState = _data['transportState'];
      this.transportBeginTime = _data['transportBeginTime']
        ? dayjs(_data['transportBeginTime'].toString())
        : <any>undefined;
      this.transportEndTime = _data['transportEndTime']
        ? dayjs(_data['transportEndTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['transportInfos'])) {
        this.transportInfos = [] as any;
        for (let item of _data['transportInfos'])
          this.transportInfos!.push(WlTransportInfoListDto.fromJS(item, _mappings));
      }
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.remark = _data['remark'];
      this.tenantEntName = _data['tenantEntName'];
      this.vehicleNumbers = _data['vehicleNumbers'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlTransFormListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlTransFormListDto>(data, _mappings, WlTransFormListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['transCode'] = this.transCode;
    data['orderId'] = this.orderId;
    data['order'] = this.order ? this.order.toJSON() : <any>undefined;
    data['orderBidId'] = this.orderBidId;
    data['orderBid'] = this.orderBid ? this.orderBid.toJSON() : <any>undefined;
    data['transportState'] = this.transportState;
    data['transportBeginTime'] = this.transportBeginTime
      ? this.transportBeginTime.toISOString()
      : <any>undefined;
    data['transportEndTime'] = this.transportEndTime
      ? this.transportEndTime.toISOString()
      : <any>undefined;
    if (Array.isArray(this.transportInfos)) {
      data['transportInfos'] = [];
      for (let item of this.transportInfos) data['transportInfos'].push(item.toJSON());
    }
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['remark'] = this.remark;
    data['tenantEntName'] = this.tenantEntName;
    data['vehicleNumbers'] = this.vehicleNumbers;
    return data;
  }

  clone(): WlTransFormListDto {
    const json = this.toJSON();
    let result = new WlTransFormListDto();
    result.init(json);
    return result;
  }
}

/** 货单的列表DTO Erinyes.Logistics.WlOrderForm */
export class WlOrderFormListDto {
  id!: number | undefined;
  /** 询价单ID */
  quoteId!: number | undefined;
  /** 单号 */
  orderCode!: string | undefined;
  /** 装货企业 */
  senderEntname!: string | undefined;
  /** 装货行政区 */
  senderCantonCode!: string | undefined;
  /** 装货地址 */
  senderAddress!: string | undefined;
  /** 卸货企业 */
  receiverEntname!: string | undefined;
  /** 卸货行政区 */
  receiverCantonCode!: string | undefined;
  /** 卸货地址 */
  receiverAddress!: string | undefined;
  /** 装货联系人 */
  senderName!: string | undefined;
  /** 装货联系手机 */
  senderPhone!: string | undefined;
  /** 卸货联系人 */
  receiverName!: string | undefined;
  /** 卸货联系手机 */
  receiverPhone!: string | undefined;
  /** 装货时间 */
  shippingTime!: dayjs.Dayjs | undefined;
  /** 运输一口价 */
  transportPrice!: number | undefined;
  /** 车辆类型 */
  vehicleTypeId!: number | undefined;
  /** 车辆类型 */
  vehicleType!: string | undefined;
  /** 车辆类型备注 */
  vehicleTypeRemark!: string | undefined;
  /** 需求内容 */
  content!: string | undefined;
  /** 发布时间 */
  publishTime!: dayjs.Dayjs | undefined;
  /** 状态 */
  formState!: number | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 平台第三方发布 姓名 */
  sysUserName!: string | undefined;
  /** 平台第三方发布 手机号 */
  sysUserPhone!: string | undefined;
  /** 平台第三方发布 角色 */
  sysUserRole!: string | undefined;
  /** 单据状态 */
  orderState!: number | undefined;
  /** 货单发布时间 */
  transportTime!: dayjs.Dayjs | undefined;
  /** 货单抢单 */
  wlOrderBids!: WlOrderBidListDto[] | undefined;
  quote!: WlQuoteFormListDto;
  /** 货单状态记录 */
  wlOrderStates!: WlOrderStateListDto[] | undefined;
  /** 货单明细 */
  wlOrderWastes!: WlOrderWasteListDto[] | undefined;
  /** 备注 */
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUserName!: string | undefined;
  senderCantonCodeFull!: string | undefined;
  senderCantonCodeFullName!: string | undefined;
  receiverCantonCodeFull!: string | undefined;
  receiverCantonCodeFullName!: string | undefined;
  approveTime!: dayjs.Dayjs | undefined;
  approveComment!: string | undefined;
  /** 租户 */
  tenantId!: number | undefined;
  allWeight!: number | undefined;
  /** 当前用户参与抢单状态 */
  myBidState!: number | undefined;
  /** 装货企业Id */
  senderEntId!: number | undefined;
  /** 创建企业名称 */
  tenantEntName!: string | undefined;
  /** 运单结束时间 */
  transForms!: WlTransFormListDto[] | undefined;
  /** 运输公司 */
  transportEntName!: string | undefined;
  /** 需求车数 */
  needVehicleNumber!: number;
  /** 货单结算方式 */
  accountTypeId!: number | undefined;
  /** 货单结算方式名称 */
  accountTypeName!: string | undefined;
  /** 是否超时，ture：超时，false：没超时 */
  isTimeout!: boolean;
  /** 是否锁住，true：锁住，false：没锁住 */
  isLocked!: boolean;
  /** 排序 */
  idx!: number;
  /** 开始经度 */
  lngStart!: number | undefined;
  /** 开始纬度 */
  latStart!: number | undefined;
  /** 结束经度 */
  lngEnd!: number | undefined;
  /** 结束纬度 */
  latEnd!: number | undefined;
  /** 距离 */
  distance!: number;
  /** 装货企业经度 */
  longitudeSender!: number | undefined;
  /** 装货企业纬度 */
  latitudeSender!: number | undefined;
  /** 卸货企业经度 */
  longitudeReceiver!: number | undefined;
  /** 卸货企业纬度 */
  latitudeReceiver!: number | undefined;
  /** 货单类型，0：普通货单，1：专车单 */
  orderType!: number;
  /** 距离，公里数 */
  distanceKilometers!: number | undefined;
  /** 计价方式，0：一口价，1：单价 */
  valuationType!: number;
  /** 单价价格 */
  unitPrice!: number | undefined;
  /** 单价单位 */
  unit!: string | undefined;
  /** 专车单状态，0：以保存，1：已发布，2：已推送 */
  specialOrderStatus!: number | undefined;
  /** 是否释放专车单到物流企业公共池，false：不释放，true：释放 */
  isSpecialOrderReleased!: boolean | undefined;
  /** 记录货单完成状态的时间 */
  completeTime!: dayjs.Dayjs | undefined;
  /** 是否可用编辑 */
  isCanEdit!: boolean;
  /** 价格是否审核，false：未审核，true：已审核 */
  priceApproved!: boolean;
  /** 价差类型 */
  priceDiffTypeID!: number | undefined;
  priceDiffTypeName!: string | undefined;
  /** 价差 */
  priceDifference!: number | undefined;
  /** 最终显示价格 */
  finalPrice!: number | undefined;
  /** 实际是否有报车 */
  isRealBid!: boolean;
  /** 是否是 兰陵万里 的货单，false：不是，true：是 */
  isBelongLLWL!: boolean;
  /** 处置企业负责人ID */
  disposalSysUserId!: number | undefined;
  /** 处置企业负责人 */
  disposalSysUserName!: string | undefined;
  /** 签到明细 */
  transportInfos!: WlTransportInfoListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.quoteId = _data['quoteId'];
      this.orderCode = _data['orderCode'];
      this.senderEntname = _data['senderEntname'];
      this.senderCantonCode = _data['senderCantonCode'];
      this.senderAddress = _data['senderAddress'];
      this.receiverEntname = _data['receiverEntname'];
      this.receiverCantonCode = _data['receiverCantonCode'];
      this.receiverAddress = _data['receiverAddress'];
      this.senderName = _data['senderName'];
      this.senderPhone = _data['senderPhone'];
      this.receiverName = _data['receiverName'];
      this.receiverPhone = _data['receiverPhone'];
      this.shippingTime = _data['shippingTime']
        ? dayjs(_data['shippingTime'].toString())
        : <any>undefined;
      this.transportPrice = _data['transportPrice'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleType = _data['vehicleType'];
      this.vehicleTypeRemark = _data['vehicleTypeRemark'];
      this.content = _data['content'];
      this.publishTime = _data['publishTime']
        ? dayjs(_data['publishTime'].toString())
        : <any>undefined;
      this.formState = _data['formState'];
      this.sysUserId = _data['sysUserId'];
      this.sysUserName = _data['sysUserName'];
      this.sysUserPhone = _data['sysUserPhone'];
      this.sysUserRole = _data['sysUserRole'];
      this.orderState = _data['orderState'];
      this.transportTime = _data['transportTime']
        ? dayjs(_data['transportTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['wlOrderBids'])) {
        this.wlOrderBids = [] as any;
        for (let item of _data['wlOrderBids'])
          this.wlOrderBids!.push(WlOrderBidListDto.fromJS(item, _mappings));
      }
      this.quote = _data['quote']
        ? WlQuoteFormListDto.fromJS(_data['quote'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['wlOrderStates'])) {
        this.wlOrderStates = [] as any;
        for (let item of _data['wlOrderStates'])
          this.wlOrderStates!.push(WlOrderStateListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['wlOrderWastes'])) {
        this.wlOrderWastes = [] as any;
        for (let item of _data['wlOrderWastes'])
          this.wlOrderWastes!.push(WlOrderWasteListDto.fromJS(item, _mappings));
      }
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUserName = _data['creatorUserName'];
      this.senderCantonCodeFull = _data['senderCantonCodeFull'];
      this.senderCantonCodeFullName = _data['senderCantonCodeFullName'];
      this.receiverCantonCodeFull = _data['receiverCantonCodeFull'];
      this.receiverCantonCodeFullName = _data['receiverCantonCodeFullName'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.approveComment = _data['approveComment'];
      this.tenantId = _data['tenantId'];
      this.allWeight = _data['allWeight'];
      this.myBidState = _data['myBidState'];
      this.senderEntId = _data['senderEntId'];
      this.tenantEntName = _data['tenantEntName'];
      if (Array.isArray(_data['transForms'])) {
        this.transForms = [] as any;
        for (let item of _data['transForms'])
          this.transForms!.push(WlTransFormListDto.fromJS(item, _mappings));
      }
      this.transportEntName = _data['transportEntName'];
      this.needVehicleNumber = _data['needVehicleNumber'];
      this.accountTypeId = _data['accountTypeId'];
      this.accountTypeName = _data['accountTypeName'];
      this.isTimeout = _data['isTimeout'];
      this.isLocked = _data['isLocked'];
      this.idx = _data['idx'];
      this.lngStart = _data['lngStart'];
      this.latStart = _data['latStart'];
      this.lngEnd = _data['lngEnd'];
      this.latEnd = _data['latEnd'];
      this.distance = _data['distance'];
      this.longitudeSender = _data['longitudeSender'];
      this.latitudeSender = _data['latitudeSender'];
      this.longitudeReceiver = _data['longitudeReceiver'];
      this.latitudeReceiver = _data['latitudeReceiver'];
      this.orderType = _data['orderType'];
      this.distanceKilometers = _data['distanceKilometers'];
      this.valuationType = _data['valuationType'];
      this.unitPrice = _data['unitPrice'];
      this.unit = _data['unit'];
      this.specialOrderStatus = _data['specialOrderStatus'];
      this.isSpecialOrderReleased = _data['isSpecialOrderReleased'];
      this.completeTime = _data['completeTime']
        ? dayjs(_data['completeTime'].toString())
        : <any>undefined;
      this.isCanEdit = _data['isCanEdit'];
      this.priceApproved = _data['priceApproved'];
      this.priceDiffTypeID = _data['priceDiffTypeID'];
      this.priceDiffTypeName = _data['priceDiffTypeName'];
      this.priceDifference = _data['priceDifference'];
      this.finalPrice = _data['finalPrice'];
      this.isRealBid = _data['isRealBid'];
      this.isBelongLLWL = _data['isBelongLLWL'];
      this.disposalSysUserId = _data['disposalSysUserId'];
      this.disposalSysUserName = _data['disposalSysUserName'];
      if (Array.isArray(_data['transportInfos'])) {
        this.transportInfos = [] as any;
        for (let item of _data['transportInfos'])
          this.transportInfos!.push(WlTransportInfoListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderFormListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderFormListDto>(data, _mappings, WlOrderFormListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['quoteId'] = this.quoteId;
    data['orderCode'] = this.orderCode;
    data['senderEntname'] = this.senderEntname;
    data['senderCantonCode'] = this.senderCantonCode;
    data['senderAddress'] = this.senderAddress;
    data['receiverEntname'] = this.receiverEntname;
    data['receiverCantonCode'] = this.receiverCantonCode;
    data['receiverAddress'] = this.receiverAddress;
    data['senderName'] = this.senderName;
    data['senderPhone'] = this.senderPhone;
    data['receiverName'] = this.receiverName;
    data['receiverPhone'] = this.receiverPhone;
    data['shippingTime'] = this.shippingTime ? this.shippingTime.toISOString() : <any>undefined;
    data['transportPrice'] = this.transportPrice;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleType'] = this.vehicleType;
    data['vehicleTypeRemark'] = this.vehicleTypeRemark;
    data['content'] = this.content;
    data['publishTime'] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
    data['formState'] = this.formState;
    data['sysUserId'] = this.sysUserId;
    data['sysUserName'] = this.sysUserName;
    data['sysUserPhone'] = this.sysUserPhone;
    data['sysUserRole'] = this.sysUserRole;
    data['orderState'] = this.orderState;
    data['transportTime'] = this.transportTime ? this.transportTime.toISOString() : <any>undefined;
    if (Array.isArray(this.wlOrderBids)) {
      data['wlOrderBids'] = [];
      for (let item of this.wlOrderBids) data['wlOrderBids'].push(item.toJSON());
    }
    data['quote'] = this.quote ? this.quote.toJSON() : <any>undefined;
    if (Array.isArray(this.wlOrderStates)) {
      data['wlOrderStates'] = [];
      for (let item of this.wlOrderStates) data['wlOrderStates'].push(item.toJSON());
    }
    if (Array.isArray(this.wlOrderWastes)) {
      data['wlOrderWastes'] = [];
      for (let item of this.wlOrderWastes) data['wlOrderWastes'].push(item.toJSON());
    }
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUserName'] = this.creatorUserName;
    data['senderCantonCodeFull'] = this.senderCantonCodeFull;
    data['senderCantonCodeFullName'] = this.senderCantonCodeFullName;
    data['receiverCantonCodeFull'] = this.receiverCantonCodeFull;
    data['receiverCantonCodeFullName'] = this.receiverCantonCodeFullName;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['approveComment'] = this.approveComment;
    data['tenantId'] = this.tenantId;
    data['allWeight'] = this.allWeight;
    data['myBidState'] = this.myBidState;
    data['senderEntId'] = this.senderEntId;
    data['tenantEntName'] = this.tenantEntName;
    if (Array.isArray(this.transForms)) {
      data['transForms'] = [];
      for (let item of this.transForms) data['transForms'].push(item.toJSON());
    }
    data['transportEntName'] = this.transportEntName;
    data['needVehicleNumber'] = this.needVehicleNumber;
    data['accountTypeId'] = this.accountTypeId;
    data['accountTypeName'] = this.accountTypeName;
    data['isTimeout'] = this.isTimeout;
    data['isLocked'] = this.isLocked;
    data['idx'] = this.idx;
    data['lngStart'] = this.lngStart;
    data['latStart'] = this.latStart;
    data['lngEnd'] = this.lngEnd;
    data['latEnd'] = this.latEnd;
    data['distance'] = this.distance;
    data['longitudeSender'] = this.longitudeSender;
    data['latitudeSender'] = this.latitudeSender;
    data['longitudeReceiver'] = this.longitudeReceiver;
    data['latitudeReceiver'] = this.latitudeReceiver;
    data['orderType'] = this.orderType;
    data['distanceKilometers'] = this.distanceKilometers;
    data['valuationType'] = this.valuationType;
    data['unitPrice'] = this.unitPrice;
    data['unit'] = this.unit;
    data['specialOrderStatus'] = this.specialOrderStatus;
    data['isSpecialOrderReleased'] = this.isSpecialOrderReleased;
    data['completeTime'] = this.completeTime ? this.completeTime.toISOString() : <any>undefined;
    data['isCanEdit'] = this.isCanEdit;
    data['priceApproved'] = this.priceApproved;
    data['priceDiffTypeID'] = this.priceDiffTypeID;
    data['priceDiffTypeName'] = this.priceDiffTypeName;
    data['priceDifference'] = this.priceDifference;
    data['finalPrice'] = this.finalPrice;
    data['isRealBid'] = this.isRealBid;
    data['isBelongLLWL'] = this.isBelongLLWL;
    data['disposalSysUserId'] = this.disposalSysUserId;
    data['disposalSysUserName'] = this.disposalSysUserName;
    if (Array.isArray(this.transportInfos)) {
      data['transportInfos'] = [];
      for (let item of this.transportInfos) data['transportInfos'].push(item.toJSON());
    }
    return data;
  }

  clone(): WlOrderFormListDto {
    const json = this.toJSON();
    let result = new WlOrderFormListDto();
    result.init(json);
    return result;
  }
}

export class FollowRecordListDto {
  id!: number | undefined;
  /** 记录类型，0：文本，1：货单，2：日程 */
  recordType!: string | undefined;
  /** 记录标签 */
  recordTags!: string | undefined;
  /** 记录内容 */
  recordContent!: string | undefined;
  /** 外部记录内容 */
  recordJson!: string | undefined;
  /** 外表记录主键 */
  fromId!: number | undefined;
  /** 外表记录表 */
  fromTable!: string | undefined;
  creationTime!: dayjs.Dayjs;
  createUser!: string | undefined;
  entName!: string | undefined;
  orderForm!: WlOrderFormListDto;
  visitingPlan!: VisitingPlanListDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.recordType = _data['recordType'];
      this.recordTags = _data['recordTags'];
      this.recordContent = _data['recordContent'];
      this.recordJson = _data['recordJson'];
      this.fromId = _data['fromId'];
      this.fromTable = _data['fromTable'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.createUser = _data['createUser'];
      this.entName = _data['entName'];
      this.orderForm = _data['orderForm']
        ? WlOrderFormListDto.fromJS(_data['orderForm'], _mappings)
        : <any>undefined;
      this.visitingPlan = _data['visitingPlan']
        ? VisitingPlanListDto.fromJS(_data['visitingPlan'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): FollowRecordListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<FollowRecordListDto>(data, _mappings, FollowRecordListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['recordType'] = this.recordType;
    data['recordTags'] = this.recordTags;
    data['recordContent'] = this.recordContent;
    data['recordJson'] = this.recordJson;
    data['fromId'] = this.fromId;
    data['fromTable'] = this.fromTable;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['createUser'] = this.createUser;
    data['entName'] = this.entName;
    data['orderForm'] = this.orderForm ? this.orderForm.toJSON() : <any>undefined;
    data['visitingPlan'] = this.visitingPlan ? this.visitingPlan.toJSON() : <any>undefined;
    return data;
  }

  clone(): FollowRecordListDto {
    const json = this.toJSON();
    let result = new FollowRecordListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfFollowRecordListDto {
  totalCount!: number;
  items!: FollowRecordListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(FollowRecordListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfFollowRecordListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfFollowRecordListDto>(
      data,
      _mappings,
      PagedResultDtoOfFollowRecordListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfFollowRecordListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfFollowRecordListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑处置企业线索池的Dto */
export class GetCRM_ClueForEditOutput {
  crM_Clue!: CRM_ClueEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.crM_Clue = _data['crM_Clue']
        ? CRM_ClueEditDto.fromJS(_data['crM_Clue'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetCRM_ClueForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetCRM_ClueForEditOutput>(data, _mappings, GetCRM_ClueForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['crM_Clue'] = this.crM_Clue ? this.crM_Clue.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetCRM_ClueForEditOutput {
    const json = this.toJSON();
    let result = new GetCRM_ClueForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfLicenseListDto {
  totalCount!: number;
  items!: LicenseListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(LicenseListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfLicenseListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfLicenseListDto>(
      data,
      _mappings,
      PagedResultDtoOfLicenseListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfLicenseListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfLicenseListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlOrderFormListDto {
  totalCount!: number;
  items!: WlOrderFormListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlOrderFormListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlOrderFormListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlOrderFormListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlOrderFormListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlOrderFormListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlOrderFormListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfCRM_ClueListDto {
  totalCount!: number;
  items!: CRM_ClueListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(CRM_ClueListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfCRM_ClueListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfCRM_ClueListDto>(
      data,
      _mappings,
      PagedResultDtoOfCRM_ClueListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfCRM_ClueListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfCRM_ClueListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfVisitingPlanListDto {
  totalCount!: number;
  items!: VisitingPlanListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(VisitingPlanListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfVisitingPlanListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfVisitingPlanListDto>(
      data,
      _mappings,
      PagedResultDtoOfVisitingPlanListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfVisitingPlanListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfVisitingPlanListDto();
    result.init(json);
    return result;
  }
}

export class CapacityDto {
  /** 序号 */
  index!: number;
  /** 企业名称 */
  entName!: string | undefined;
  /** 车次 */
  capacityCount!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.index = _data['index'];
      this.entName = _data['entName'];
      this.capacityCount = _data['capacityCount'];
    }
  }

  static fromJS(data: any, _mappings?: any): CapacityDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CapacityDto>(data, _mappings, CapacityDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['index'] = this.index;
    data['entName'] = this.entName;
    data['capacityCount'] = this.capacityCount;
    return data;
  }

  clone(): CapacityDto {
    const json = this.toJSON();
    let result = new CapacityDto();
    result.init(json);
    return result;
  }
}

export class CapacityInfo {
  /** 总数量 */
  allCount!: number;
  /** 运力信息 */
  capacityInfos!: CapacityDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.allCount = _data['allCount'];
      if (Array.isArray(_data['capacityInfos'])) {
        this.capacityInfos = [] as any;
        for (let item of _data['capacityInfos'])
          this.capacityInfos!.push(CapacityDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): CapacityInfo | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CapacityInfo>(data, _mappings, CapacityInfo);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['allCount'] = this.allCount;
    if (Array.isArray(this.capacityInfos)) {
      data['capacityInfos'] = [];
      for (let item of this.capacityInfos) data['capacityInfos'].push(item.toJSON());
    }
    return data;
  }

  clone(): CapacityInfo {
    const json = this.toJSON();
    let result = new CapacityInfo();
    result.init(json);
    return result;
  }
}

export class TransInfoDto {
  /** 序号 */
  index!: number;
  /** 企业名称 */
  entName!: string | undefined;
  /** 车次 */
  transCount!: number;
  /** 金额 */
  amount!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.index = _data['index'];
      this.entName = _data['entName'];
      this.transCount = _data['transCount'];
      this.amount = _data['amount'];
    }
  }

  static fromJS(data: any, _mappings?: any): TransInfoDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TransInfoDto>(data, _mappings, TransInfoDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['index'] = this.index;
    data['entName'] = this.entName;
    data['transCount'] = this.transCount;
    data['amount'] = this.amount;
    return data;
  }

  clone(): TransInfoDto {
    const json = this.toJSON();
    let result = new TransInfoDto();
    result.init(json);
    return result;
  }
}

export class TransInfo {
  /** 总车次 */
  allTransCount!: number;
  /** 总金额 */
  allAmount!: number;
  /** 车次信息 */
  transInfos!: TransInfoDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.allTransCount = _data['allTransCount'];
      this.allAmount = _data['allAmount'];
      if (Array.isArray(_data['transInfos'])) {
        this.transInfos = [] as any;
        for (let item of _data['transInfos'])
          this.transInfos!.push(TransInfoDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): TransInfo | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TransInfo>(data, _mappings, TransInfo);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['allTransCount'] = this.allTransCount;
    data['allAmount'] = this.allAmount;
    if (Array.isArray(this.transInfos)) {
      data['transInfos'] = [];
      for (let item of this.transInfos) data['transInfos'].push(item.toJSON());
    }
    return data;
  }

  clone(): TransInfo {
    const json = this.toJSON();
    let result = new TransInfo();
    result.init(json);
    return result;
  }
}

export class VehicleDto {
  /** 车型名称 */
  vehicleName!: string | undefined;
  /** 车型数量 */
  vehicleCount!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.vehicleName = _data['vehicleName'];
      this.vehicleCount = _data['vehicleCount'];
    }
  }

  static fromJS(data: any, _mappings?: any): VehicleDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<VehicleDto>(data, _mappings, VehicleDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['vehicleName'] = this.vehicleName;
    data['vehicleCount'] = this.vehicleCount;
    return data;
  }

  clone(): VehicleDto {
    const json = this.toJSON();
    let result = new VehicleDto();
    result.init(json);
    return result;
  }
}

/** 公用字典的列表DTO Erinyes.BllCommon.CrmDictItems.CrmDictItems */
export class CrmDictItemsEditDto {
  /** Id */
  id!: number | undefined;
  /** 字典代码 */
  dicCode!: string | undefined;
  /** 显示值 */
  dicValue!: string | undefined;
  /** 序号 */
  sn!: number;
  /** 备注 */
  remark!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 创建者 */
  creatorUserId!: number | undefined;
  /** 上次修改者 */
  lastModifierUserId!: number | undefined;
  /** 上次修改时间 */
  lastModificationTime!: dayjs.Dayjs | undefined;
  /** 删除者 */
  deleterUserId!: number | undefined;
  /** 删除时间 */
  deletionTime!: dayjs.Dayjs | undefined;
  /** 是否删除 */
  isDeleted!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.dicCode = _data['dicCode'];
      this.dicValue = _data['dicValue'];
      this.sn = _data['sn'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
    }
  }

  static fromJS(data: any, _mappings?: any): CrmDictItemsEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CrmDictItemsEditDto>(data, _mappings, CrmDictItemsEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['dicCode'] = this.dicCode;
    data['dicValue'] = this.dicValue;
    data['sn'] = this.sn;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    return data;
  }

  clone(): CrmDictItemsEditDto {
    const json = this.toJSON();
    let result = new CrmDictItemsEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateCrmDictItemsInput {
  crmDictItems!: CrmDictItemsEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.crmDictItems = _data['crmDictItems']
        ? CrmDictItemsEditDto.fromJS(_data['crmDictItems'], _mappings)
        : new CrmDictItemsEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateCrmDictItemsInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateCrmDictItemsInput>(
      data,
      _mappings,
      CreateOrUpdateCrmDictItemsInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['crmDictItems'] = this.crmDictItems ? this.crmDictItems.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateCrmDictItemsInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateCrmDictItemsInput();
    result.init(json);
    return result;
  }
}

/** 公用字典的列表DTO Erinyes.BllCommon.CrmDictItems.CrmDictItems */
export class CrmDictItemsListDto {
  id!: number | undefined;
  /** 字典代码 */
  dicCode!: string | undefined;
  /** 显示值 */
  dicValue!: string | undefined;
  /** 序号 */
  sn!: number;
  /** 备注 */
  remark!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 创建者 */
  creatorUserId!: number | undefined;
  /** 上次修改者 */
  lastModifierUserId!: number | undefined;
  /** 上次修改时间 */
  lastModificationTime!: dayjs.Dayjs | undefined;
  /** 删除者 */
  deleterUserId!: number | undefined;
  /** 删除时间 */
  deletionTime!: dayjs.Dayjs | undefined;
  /** 是否删除 */
  isDeleted!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.dicCode = _data['dicCode'];
      this.dicValue = _data['dicValue'];
      this.sn = _data['sn'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
    }
  }

  static fromJS(data: any, _mappings?: any): CrmDictItemsListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CrmDictItemsListDto>(data, _mappings, CrmDictItemsListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['dicCode'] = this.dicCode;
    data['dicValue'] = this.dicValue;
    data['sn'] = this.sn;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    return data;
  }

  clone(): CrmDictItemsListDto {
    const json = this.toJSON();
    let result = new CrmDictItemsListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑公用字典的Dto */
export class GetCrmDictItemsForEditOutput {
  crmDictItems!: CrmDictItemsEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.crmDictItems = _data['crmDictItems']
        ? CrmDictItemsEditDto.fromJS(_data['crmDictItems'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetCrmDictItemsForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetCrmDictItemsForEditOutput>(
      data,
      _mappings,
      GetCrmDictItemsForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['crmDictItems'] = this.crmDictItems ? this.crmDictItems.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetCrmDictItemsForEditOutput {
    const json = this.toJSON();
    let result = new GetCrmDictItemsForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfCrmDictItemsListDto {
  totalCount!: number;
  items!: CrmDictItemsListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(CrmDictItemsListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfCrmDictItemsListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfCrmDictItemsListDto>(
      data,
      _mappings,
      PagedResultDtoOfCrmDictItemsListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfCrmDictItemsListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfCrmDictItemsListDto();
    result.init(json);
    return result;
  }
}

export enum FollowUpType {
  打电话 = '打电话',
  微信QQ = '微信QQ',
  发短信 = '发短信',
  发邮件 = '发邮件',
  见面拜访 = '见面拜访',
  活动 = '活动',
}

/** 跟进 DTO */
export class FollowUpEditDto {
  /** Id */
  id!: number | undefined;
  /** 对应的主表ID */
  mainId!: number;
  followUpType!: FollowUpType;
  /** 下一次联系时间 */
  nextContactTime!: dayjs.Dayjs | undefined;
  /** 跟进内容 */
  followContent!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.mainId = _data['mainId'];
      this.followUpType = _data['followUpType'];
      this.nextContactTime = _data['nextContactTime']
        ? dayjs(_data['nextContactTime'].toString())
        : <any>undefined;
      this.followContent = _data['followContent'];
    }
  }

  static fromJS(data: any, _mappings?: any): FollowUpEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<FollowUpEditDto>(data, _mappings, FollowUpEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['mainId'] = this.mainId;
    data['followUpType'] = this.followUpType;
    data['nextContactTime'] = this.nextContactTime
      ? this.nextContactTime.toISOString()
      : <any>undefined;
    data['followContent'] = this.followContent;
    return data;
  }

  clone(): FollowUpEditDto {
    const json = this.toJSON();
    let result = new FollowUpEditDto();
    result.init(json);
    return result;
  }
}

export enum CustomerHWState {
  线索 = '线索',
  已送样 = '已送样',
  已检测 = '已检测',
  不同意接收 = '不同意接收',
  免检 = '免检',
  同意接收 = '同意接收',
  已报价 = '已报价',
  报价不通过 = '报价不通过',
  报价通过 = '报价通过',
  已申请合同 = '已申请合同',
  销售经理不通过合同 = '销售经理不通过合同',
  销售经理通过合同 = '销售经理通过合同',
  总经理不通过合同 = '总经理不通过合同',
  合同通过 = '合同通过',
  派单 = '派单',
  派单不同意接收 = '派单不同意接收',
  派单同意接收 = '派单同意接收',
  入库 = '入库',
  申请开票 = '申请开票',
  开票不通过 = '开票不通过',
  开票通过 = '开票通过',
  财务开票 = '财务开票',
  回款 = '回款',
}

/** 客户危废详情 Erinyes.CRM.Customer_HW */
export class CustomerHWEditDto {
  id!: number;
  remark!: string | undefined;
  currentState!: CustomerHWState;
  /** CustomerId */
  customerId!: number;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 年产量 */
  yearlyOutput!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 原处置单位 */
  origDisposalEntName!: string | undefined;
  /** 原处置价格 元/吨 */
  origUnitCost!: number | undefined;
  /** 包装形式：IBC、吨袋、桶（5L-10L-20L-50L-200L）、托盘、槽车；可多选。 public enum Packaging */
  packagings!: string | undefined;
  /** 附件内容 */
  ossFileNames!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.remark = _data['remark'];
      this.currentState = _data['currentState'];
      this.customerId = _data['customerId'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.unit = _data['unit'];
      this.origDisposalEntName = _data['origDisposalEntName'];
      this.origUnitCost = _data['origUnitCost'];
      this.packagings = _data['packagings'];
      this.ossFileNames = _data['ossFileNames'];
    }
  }

  static fromJS(data: any, _mappings?: any): CustomerHWEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CustomerHWEditDto>(data, _mappings, CustomerHWEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['remark'] = this.remark;
    data['currentState'] = this.currentState;
    data['customerId'] = this.customerId;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['unit'] = this.unit;
    data['origDisposalEntName'] = this.origDisposalEntName;
    data['origUnitCost'] = this.origUnitCost;
    data['packagings'] = this.packagings;
    data['ossFileNames'] = this.ossFileNames;
    return data;
  }

  clone(): CustomerHWEditDto {
    const json = this.toJSON();
    let result = new CustomerHWEditDto();
    result.init(json);
    return result;
  }
}

/** 客户危废详情 Erinyes.CRM.Customer_HW */
export class CustomerHWListDto {
  id!: number;
  remark!: string | undefined;
  /** 是否免检 */
  exemptInspection!: boolean;
  currentState!: CustomerHWState;
  /** CustomerId */
  customerId!: number;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 年产量 */
  yearlyOutput!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 原处置单位 */
  origDisposalEntName!: string | undefined;
  /** 原处置价格 元/吨 */
  origUnitCost!: number | undefined;
  /** 包装形式：IBC、吨袋、桶（5L-10L-20L-50L-200L）、托盘、槽车；可多选。 public enum Packaging */
  packagings!: string | undefined;
  /** 附件内容 */
  ossFileNames!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.remark = _data['remark'];
      this.exemptInspection = _data['exemptInspection'];
      this.currentState = _data['currentState'];
      this.customerId = _data['customerId'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.unit = _data['unit'];
      this.origDisposalEntName = _data['origDisposalEntName'];
      this.origUnitCost = _data['origUnitCost'];
      this.packagings = _data['packagings'];
      this.ossFileNames = _data['ossFileNames'];
    }
  }

  static fromJS(data: any, _mappings?: any): CustomerHWListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CustomerHWListDto>(data, _mappings, CustomerHWListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['remark'] = this.remark;
    data['exemptInspection'] = this.exemptInspection;
    data['currentState'] = this.currentState;
    data['customerId'] = this.customerId;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['unit'] = this.unit;
    data['origDisposalEntName'] = this.origDisposalEntName;
    data['origUnitCost'] = this.origUnitCost;
    data['packagings'] = this.packagings;
    data['ossFileNames'] = this.ossFileNames;
    return data;
  }

  clone(): CustomerHWListDto {
    const json = this.toJSON();
    let result = new CustomerHWListDto();
    result.init(json);
    return result;
  }
}

/** 的列表DTO Erinyes.CRM.Customer */
export class CustomerEditDto {
  /** Id */
  id!: number | undefined;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 联系人 */
  linkName!: string | undefined;
  /** 职务 */
  duty!: string | undefined;
  /** 最大储存量 */
  maxStorageCapacity!: number | undefined;
  /** 手机号 */
  phoneNo!: string | undefined;
  /** 邮箱 */
  email!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 行政区 */
  cantonCode!: string | undefined;
  /** 行政区名称 */
  cantonName!: string | undefined;
  /** 行业 */
  industry!: string | undefined;
  /** 行业名称 */
  industryName!: string | undefined;
  /** EntId */
  entId!: number | undefined;
  /** State */
  state!: number;
  /** 负责人 */
  responsibleUserId!: number | undefined;
  /** 经度 */
  longitude!: number | undefined;
  /** 纬度 */
  latitude!: number | undefined;
  /** 现场照片 */
  ossFileNames!: string | undefined;
  currentState!: CustomerState;
  /** 危废详情 */
  customerHWList!: CustomerHWListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerName = _data['customerName'];
      this.linkName = _data['linkName'];
      this.duty = _data['duty'];
      this.maxStorageCapacity = _data['maxStorageCapacity'];
      this.phoneNo = _data['phoneNo'];
      this.email = _data['email'];
      this.address = _data['address'];
      this.cantonCode = _data['cantonCode'];
      this.cantonName = _data['cantonName'];
      this.industry = _data['industry'];
      this.industryName = _data['industryName'];
      this.entId = _data['entId'];
      this.state = _data['state'];
      this.responsibleUserId = _data['responsibleUserId'];
      this.longitude = _data['longitude'];
      this.latitude = _data['latitude'];
      this.ossFileNames = _data['ossFileNames'];
      this.currentState = _data['currentState'];
      if (Array.isArray(_data['customerHWList'])) {
        this.customerHWList = [] as any;
        for (let item of _data['customerHWList'])
          this.customerHWList!.push(CustomerHWListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): CustomerEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CustomerEditDto>(data, _mappings, CustomerEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerName'] = this.customerName;
    data['linkName'] = this.linkName;
    data['duty'] = this.duty;
    data['maxStorageCapacity'] = this.maxStorageCapacity;
    data['phoneNo'] = this.phoneNo;
    data['email'] = this.email;
    data['address'] = this.address;
    data['cantonCode'] = this.cantonCode;
    data['cantonName'] = this.cantonName;
    data['industry'] = this.industry;
    data['industryName'] = this.industryName;
    data['entId'] = this.entId;
    data['state'] = this.state;
    data['responsibleUserId'] = this.responsibleUserId;
    data['longitude'] = this.longitude;
    data['latitude'] = this.latitude;
    data['ossFileNames'] = this.ossFileNames;
    data['currentState'] = this.currentState;
    if (Array.isArray(this.customerHWList)) {
      data['customerHWList'] = [];
      for (let item of this.customerHWList) data['customerHWList'].push(item.toJSON());
    }
    return data;
  }

  clone(): CustomerEditDto {
    const json = this.toJSON();
    let result = new CustomerEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateCustomerInput {
  customer!: CustomerEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customer = _data['customer']
        ? CustomerEditDto.fromJS(_data['customer'], _mappings)
        : new CustomerEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateCustomerInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateCustomerInput>(
      data,
      _mappings,
      CreateOrUpdateCustomerInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customer'] = this.customer ? this.customer.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateCustomerInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateCustomerInput();
    result.init(json);
    return result;
  }
}

/** 企业线索Dto */
export class EnterpriseClueDto {
  /** 企业ID */
  entId!: number;
  /** 是否已解锁 */
  isViewed!: boolean;
  /** 租户剩余查看线索次数 */
  tenantHasCanViewClueCount!: number;
  /** 租户查看线索一共多少次数 */
  tenantCanViewAllClueCount!: number;
  enterpriseDto!: EnterpriseDto;
  /** 联系人信息 */
  contactListDto!: ContactDto[] | undefined;
  enterpriseHWListDto!: EnterpriseHWDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.isViewed = _data['isViewed'];
      this.tenantHasCanViewClueCount = _data['tenantHasCanViewClueCount'];
      this.tenantCanViewAllClueCount = _data['tenantCanViewAllClueCount'];
      this.enterpriseDto = _data['enterpriseDto']
        ? EnterpriseDto.fromJS(_data['enterpriseDto'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['contactListDto'])) {
        this.contactListDto = [] as any;
        for (let item of _data['contactListDto'])
          this.contactListDto!.push(ContactDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['enterpriseHWListDto'])) {
        this.enterpriseHWListDto = [] as any;
        for (let item of _data['enterpriseHWListDto'])
          this.enterpriseHWListDto!.push(EnterpriseHWDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): EnterpriseClueDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EnterpriseClueDto>(data, _mappings, EnterpriseClueDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['isViewed'] = this.isViewed;
    data['tenantHasCanViewClueCount'] = this.tenantHasCanViewClueCount;
    data['tenantCanViewAllClueCount'] = this.tenantCanViewAllClueCount;
    data['enterpriseDto'] = this.enterpriseDto ? this.enterpriseDto.toJSON() : <any>undefined;
    if (Array.isArray(this.contactListDto)) {
      data['contactListDto'] = [];
      for (let item of this.contactListDto) data['contactListDto'].push(item.toJSON());
    }
    if (Array.isArray(this.enterpriseHWListDto)) {
      data['enterpriseHWListDto'] = [];
      for (let item of this.enterpriseHWListDto) data['enterpriseHWListDto'].push(item.toJSON());
    }
    return data;
  }

  clone(): EnterpriseClueDto {
    const json = this.toJSON();
    let result = new EnterpriseClueDto();
    result.init(json);
    return result;
  }
}

/** 跟进记录通用Dto */
export class FollowUpCommonDto {
  id!: number;
  followUpType!: FollowUpType;
  /** 下一次联系时间 */
  nextContactTime!: dayjs.Dayjs | undefined;
  /** 跟进内容 */
  followContent!: string | undefined;
  /** 创建人姓名 */
  createUserName!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 创建人ID */
  creatorUserId!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.followUpType = _data['followUpType'];
      this.nextContactTime = _data['nextContactTime']
        ? dayjs(_data['nextContactTime'].toString())
        : <any>undefined;
      this.followContent = _data['followContent'];
      this.createUserName = _data['createUserName'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
    }
  }

  static fromJS(data: any, _mappings?: any): FollowUpCommonDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<FollowUpCommonDto>(data, _mappings, FollowUpCommonDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['followUpType'] = this.followUpType;
    data['nextContactTime'] = this.nextContactTime
      ? this.nextContactTime.toISOString()
      : <any>undefined;
    data['followContent'] = this.followContent;
    data['createUserName'] = this.createUserName;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    return data;
  }

  clone(): FollowUpCommonDto {
    const json = this.toJSON();
    let result = new FollowUpCommonDto();
    result.init(json);
    return result;
  }
}

export enum SamplingState {
  待检测 = '待检测',
  待审核 = '待审核',
  同意接收 = '同意接收',
  不同意接收 = '不同意接收',
  不同意接收已回滚 = '不同意接收已回滚',
}

/** 实验室的列表DTO Erinyes.CRM.Laboratory */
export class LaboratoryEditDto {
  /** Id */
  id!: number | undefined;
  /** 对应的取样信息 */
  samplingId!: number | undefined;
  /** 主要成分 */
  component!: string | undefined;
  remark!: string | undefined;
  /** 成分含量 % */
  componentContent!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.samplingId = _data['samplingId'];
      this.component = _data['component'];
      this.remark = _data['remark'];
      this.componentContent = _data['componentContent'];
    }
  }

  static fromJS(data: any, _mappings?: any): LaboratoryEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LaboratoryEditDto>(data, _mappings, LaboratoryEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['samplingId'] = this.samplingId;
    data['component'] = this.component;
    data['remark'] = this.remark;
    data['componentContent'] = this.componentContent;
    return data;
  }

  clone(): LaboratoryEditDto {
    const json = this.toJSON();
    let result = new LaboratoryEditDto();
    result.init(json);
    return result;
  }
}

/** 取样的列表DTO Erinyes.CRM.Sampling */
export class SamplingListDto {
  id!: number;
  /** 客户Id */
  customerId!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 是否免检 */
  exemptInspection!: boolean;
  /** 接收样品时间 */
  receivingTime!: dayjs.Dayjs | undefined;
  /** 样品编号 */
  samplingNo!: string | undefined;
  /** 当前状态 */
  samplingState!: string | undefined;
  samplingStateEnum!: SamplingState;
  /** 审核时间 */
  approveTime!: dayjs.Dayjs | undefined;
  /** 审核人 */
  approveUserName!: string | undefined;
  /** 负责人Id */
  responsibleUserId!: number | undefined;
  /** 负责人 */
  responsibleUserName!: string | undefined;
  /** 审核意见 */
  reason!: string | undefined;
  /** 检测报告 */
  libReportFiles!: string | undefined;
  remark!: string | undefined;
  /** 主成分/含量 */
  component!: string | undefined;
  /** 产废工艺 */
  productionProcess!: string | undefined;
  /** 附件 */
  samplingOssFileNames!: string | undefined;
  /** 检测结果 */
  laboratoryList!: LaboratoryEditDto[] | undefined;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 年产量 */
  yearlyOutput!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 原处置单位 */
  origDisposalEntName!: string | undefined;
  /** 原处置价格 元/吨 */
  origUnitCost!: number | undefined;
  /** 包装形式：IBC、吨袋、桶（5L-10L-20L-50L-200L）、托盘、槽车；可多选。 public enum Packaging */
  packagings!: string | undefined;
  /** 附件内容 */
  ossFileNames!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerId = _data['customerId'];
      this.customerName = _data['customerName'];
      this.cantonName = _data['cantonName'];
      this.exemptInspection = _data['exemptInspection'];
      this.receivingTime = _data['receivingTime']
        ? dayjs(_data['receivingTime'].toString())
        : <any>undefined;
      this.samplingNo = _data['samplingNo'];
      this.samplingState = _data['samplingState'];
      this.samplingStateEnum = _data['samplingStateEnum'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.approveUserName = _data['approveUserName'];
      this.responsibleUserId = _data['responsibleUserId'];
      this.responsibleUserName = _data['responsibleUserName'];
      this.reason = _data['reason'];
      this.libReportFiles = _data['libReportFiles'];
      this.remark = _data['remark'];
      this.component = _data['component'];
      this.productionProcess = _data['productionProcess'];
      this.samplingOssFileNames = _data['samplingOssFileNames'];
      if (Array.isArray(_data['laboratoryList'])) {
        this.laboratoryList = [] as any;
        for (let item of _data['laboratoryList'])
          this.laboratoryList!.push(LaboratoryEditDto.fromJS(item, _mappings));
      }
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.unit = _data['unit'];
      this.origDisposalEntName = _data['origDisposalEntName'];
      this.origUnitCost = _data['origUnitCost'];
      this.packagings = _data['packagings'];
      this.ossFileNames = _data['ossFileNames'];
    }
  }

  static fromJS(data: any, _mappings?: any): SamplingListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SamplingListDto>(data, _mappings, SamplingListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerId'] = this.customerId;
    data['customerName'] = this.customerName;
    data['cantonName'] = this.cantonName;
    data['exemptInspection'] = this.exemptInspection;
    data['receivingTime'] = this.receivingTime ? this.receivingTime.toISOString() : <any>undefined;
    data['samplingNo'] = this.samplingNo;
    data['samplingState'] = this.samplingState;
    data['samplingStateEnum'] = this.samplingStateEnum;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['approveUserName'] = this.approveUserName;
    data['responsibleUserId'] = this.responsibleUserId;
    data['responsibleUserName'] = this.responsibleUserName;
    data['reason'] = this.reason;
    data['libReportFiles'] = this.libReportFiles;
    data['remark'] = this.remark;
    data['component'] = this.component;
    data['productionProcess'] = this.productionProcess;
    data['samplingOssFileNames'] = this.samplingOssFileNames;
    if (Array.isArray(this.laboratoryList)) {
      data['laboratoryList'] = [];
      for (let item of this.laboratoryList) data['laboratoryList'].push(item.toJSON());
    }
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['unit'] = this.unit;
    data['origDisposalEntName'] = this.origDisposalEntName;
    data['origUnitCost'] = this.origUnitCost;
    data['packagings'] = this.packagings;
    data['ossFileNames'] = this.ossFileNames;
    return data;
  }

  clone(): SamplingListDto {
    const json = this.toJSON();
    let result = new SamplingListDto();
    result.init(json);
    return result;
  }
}

export enum ReceiveApprove {
  同意接收 = '同意接收',
  不同意接收 = '不同意接收',
  不同意接收已回滚 = '不同意接收已回滚',
}

/** 派单的列表DTO Erinyes.CRM.DispatchOrder */
export class DispatchOrderListDto {
  id!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 行政区 */
  cantonName!: string | undefined;
  customerState!: CustomerState;
  /** 运输企业车牌号 */
  vehicleNum!: string | undefined;
  /** 车辆 */
  vehicleId!: number | undefined;
  /** 驾驶证 */
  driverLicense!: string | undefined;
  /** 运输企业司机 */
  driverName!: string | undefined;
  /** 驾驶员 */
  driverId!: number | undefined;
  /** 合同 */
  contractId!: number | undefined;
  /** 合同编号 */
  contractNo!: string | undefined;
  /** 预计接收量 */
  predictionWeight!: number | undefined;
  /** 公里数 */
  kilometers!: number | undefined;
  /** 运输时间 */
  transportTime!: dayjs.Dayjs | undefined;
  receiveApprove!: ReceiveApprove;
  /** 审核时间 */
  approveTime!: dayjs.Dayjs | undefined;
  /** 审核人 */
  approveUserId!: number | undefined;
  /** 审核意见 */
  reason!: string | undefined;
  /** 负责人 */
  responsibleUserName!: string | undefined;
  /** 负责人Id */
  responsibleUserId!: number | undefined;
  /** 按次数 报价 */
  byTimes!: boolean;
  /** 处置价格（元/次） */
  unitCostByTimes!: number | undefined;
  /** 服务费（元/次） */
  serviceUnitCostByTimes!: number | undefined;
  /** 是否包含运费 */
  containtCarriage!: boolean;
  /** 单次 运费总价（元/次） */
  carriageCost!: number | undefined;
  /** 创建人Id */
  creatorUserId!: number | undefined;
  remark!: string | undefined;
  /** 报价详情 */
  quotationDetails!: QuotationDetailDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerName = _data['customerName'];
      this.customerId = _data['customerId'];
      this.cantonName = _data['cantonName'];
      this.customerState = _data['customerState'];
      this.vehicleNum = _data['vehicleNum'];
      this.vehicleId = _data['vehicleId'];
      this.driverLicense = _data['driverLicense'];
      this.driverName = _data['driverName'];
      this.driverId = _data['driverId'];
      this.contractId = _data['contractId'];
      this.contractNo = _data['contractNo'];
      this.predictionWeight = _data['predictionWeight'];
      this.kilometers = _data['kilometers'];
      this.transportTime = _data['transportTime']
        ? dayjs(_data['transportTime'].toString())
        : <any>undefined;
      this.receiveApprove = _data['receiveApprove'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.approveUserId = _data['approveUserId'];
      this.reason = _data['reason'];
      this.responsibleUserName = _data['responsibleUserName'];
      this.responsibleUserId = _data['responsibleUserId'];
      this.byTimes = _data['byTimes'];
      this.unitCostByTimes = _data['unitCostByTimes'];
      this.serviceUnitCostByTimes = _data['serviceUnitCostByTimes'];
      this.containtCarriage = _data['containtCarriage'];
      this.carriageCost = _data['carriageCost'];
      this.creatorUserId = _data['creatorUserId'];
      this.remark = _data['remark'];
      if (Array.isArray(_data['quotationDetails'])) {
        this.quotationDetails = [] as any;
        for (let item of _data['quotationDetails'])
          this.quotationDetails!.push(QuotationDetailDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): DispatchOrderListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DispatchOrderListDto>(data, _mappings, DispatchOrderListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerName'] = this.customerName;
    data['customerId'] = this.customerId;
    data['cantonName'] = this.cantonName;
    data['customerState'] = this.customerState;
    data['vehicleNum'] = this.vehicleNum;
    data['vehicleId'] = this.vehicleId;
    data['driverLicense'] = this.driverLicense;
    data['driverName'] = this.driverName;
    data['driverId'] = this.driverId;
    data['contractId'] = this.contractId;
    data['contractNo'] = this.contractNo;
    data['predictionWeight'] = this.predictionWeight;
    data['kilometers'] = this.kilometers;
    data['transportTime'] = this.transportTime ? this.transportTime.toISOString() : <any>undefined;
    data['receiveApprove'] = this.receiveApprove;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['approveUserId'] = this.approveUserId;
    data['reason'] = this.reason;
    data['responsibleUserName'] = this.responsibleUserName;
    data['responsibleUserId'] = this.responsibleUserId;
    data['byTimes'] = this.byTimes;
    data['unitCostByTimes'] = this.unitCostByTimes;
    data['serviceUnitCostByTimes'] = this.serviceUnitCostByTimes;
    data['containtCarriage'] = this.containtCarriage;
    data['carriageCost'] = this.carriageCost;
    data['creatorUserId'] = this.creatorUserId;
    data['remark'] = this.remark;
    if (Array.isArray(this.quotationDetails)) {
      data['quotationDetails'] = [];
      for (let item of this.quotationDetails) data['quotationDetails'].push(item.toJSON());
    }
    return data;
  }

  clone(): DispatchOrderListDto {
    const json = this.toJSON();
    let result = new DispatchOrderListDto();
    result.init(json);
    return result;
  }
}

/** 入库危废详情 Erinyes.CRM.InStorage_HW */
export class InStorageHWDto {
  /** 报价详情Id */
  quotationDetailId!: number;
  /** 运输量 */
  transportWeight!: number | undefined;
  /** 拒收量 */
  rejectedWeight!: number | undefined;
  /** 实际入库量 */
  actualWeight!: number | undefined;
  /** 库位 */
  warehouse!: string | undefined;
  /** 入库时间 */
  inStorageTime!: dayjs.Dayjs | undefined;
  id!: number;
  /** 报价 单价（元/吨） */
  unitCost!: number | undefined;
  /** 服务费单价（元/吨） */
  serviceUnitCost!: number | undefined;
  /** 运费（元/吨） */
  carriageCost!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 年产量 */
  yearlyOutput!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 原处置单位 */
  origDisposalEntName!: string | undefined;
  /** 原处置价格 元/吨 */
  origUnitCost!: number | undefined;
  /** 包装形式：IBC、吨袋、桶（5L-10L-20L-50L-200L）、托盘、槽车；可多选。 public enum Packaging */
  packagings!: string | undefined;
  /** 附件内容 */
  ossFileNames!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.quotationDetailId = _data['quotationDetailId'];
      this.transportWeight = _data['transportWeight'];
      this.rejectedWeight = _data['rejectedWeight'];
      this.actualWeight = _data['actualWeight'];
      this.warehouse = _data['warehouse'];
      this.inStorageTime = _data['inStorageTime']
        ? dayjs(_data['inStorageTime'].toString())
        : <any>undefined;
      this.id = _data['id'];
      this.unitCost = _data['unitCost'];
      this.serviceUnitCost = _data['serviceUnitCost'];
      this.carriageCost = _data['carriageCost'];
      this.remark = _data['remark'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.unit = _data['unit'];
      this.origDisposalEntName = _data['origDisposalEntName'];
      this.origUnitCost = _data['origUnitCost'];
      this.packagings = _data['packagings'];
      this.ossFileNames = _data['ossFileNames'];
    }
  }

  static fromJS(data: any, _mappings?: any): InStorageHWDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<InStorageHWDto>(data, _mappings, InStorageHWDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['quotationDetailId'] = this.quotationDetailId;
    data['transportWeight'] = this.transportWeight;
    data['rejectedWeight'] = this.rejectedWeight;
    data['actualWeight'] = this.actualWeight;
    data['warehouse'] = this.warehouse;
    data['inStorageTime'] = this.inStorageTime ? this.inStorageTime.toISOString() : <any>undefined;
    data['id'] = this.id;
    data['unitCost'] = this.unitCost;
    data['serviceUnitCost'] = this.serviceUnitCost;
    data['carriageCost'] = this.carriageCost;
    data['remark'] = this.remark;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['unit'] = this.unit;
    data['origDisposalEntName'] = this.origDisposalEntName;
    data['origUnitCost'] = this.origUnitCost;
    data['packagings'] = this.packagings;
    data['ossFileNames'] = this.ossFileNames;
    return data;
  }

  clone(): InStorageHWDto {
    const json = this.toJSON();
    let result = new InStorageHWDto();
    result.init(json);
    return result;
  }
}

/** 入库的列表DTO Erinyes.CRM.InStorage */
export class InStorageListDto {
  id!: number;
  /** 派单 */
  dispatchOrderId!: number | undefined;
  /** 开票关联记录 */
  salesInvoiceId!: number | undefined;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 运输企业车牌号 */
  vehicleNum!: string | undefined;
  /** 车辆 */
  vehicleId!: number | undefined;
  /** 库位 */
  warehouse!: string | undefined;
  /** 入库时间 */
  inStorageTime!: dayjs.Dayjs | undefined;
  /** 负责人 */
  responsibleUserName!: string | undefined;
  remark!: string | undefined;
  /** 按次数 报价 */
  byTimes!: boolean;
  /** 处置价格（元/次） */
  unitCostByTimes!: number | undefined;
  /** 服务费（元/次） */
  serviceUnitCostByTimes!: number | undefined;
  /** 是否包含运费 */
  containtCarriage!: boolean;
  /** 单次 运费总价（元/次） */
  carriageCost!: number | undefined;
  /** 实际开票金额 */
  invoiceAmount!: number | undefined;
  /** 应开票金额 */
  shouldInvoiceAmount!: number | undefined;
  /** 入库危废详情 */
  inStorageHWs!: InStorageHWDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.dispatchOrderId = _data['dispatchOrderId'];
      this.salesInvoiceId = _data['salesInvoiceId'];
      this.customerName = _data['customerName'];
      this.customerId = _data['customerId'];
      this.cantonName = _data['cantonName'];
      this.vehicleNum = _data['vehicleNum'];
      this.vehicleId = _data['vehicleId'];
      this.warehouse = _data['warehouse'];
      this.inStorageTime = _data['inStorageTime']
        ? dayjs(_data['inStorageTime'].toString())
        : <any>undefined;
      this.responsibleUserName = _data['responsibleUserName'];
      this.remark = _data['remark'];
      this.byTimes = _data['byTimes'];
      this.unitCostByTimes = _data['unitCostByTimes'];
      this.serviceUnitCostByTimes = _data['serviceUnitCostByTimes'];
      this.containtCarriage = _data['containtCarriage'];
      this.carriageCost = _data['carriageCost'];
      this.invoiceAmount = _data['invoiceAmount'];
      this.shouldInvoiceAmount = _data['shouldInvoiceAmount'];
      if (Array.isArray(_data['inStorageHWs'])) {
        this.inStorageHWs = [] as any;
        for (let item of _data['inStorageHWs'])
          this.inStorageHWs!.push(InStorageHWDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): InStorageListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<InStorageListDto>(data, _mappings, InStorageListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['dispatchOrderId'] = this.dispatchOrderId;
    data['salesInvoiceId'] = this.salesInvoiceId;
    data['customerName'] = this.customerName;
    data['customerId'] = this.customerId;
    data['cantonName'] = this.cantonName;
    data['vehicleNum'] = this.vehicleNum;
    data['vehicleId'] = this.vehicleId;
    data['warehouse'] = this.warehouse;
    data['inStorageTime'] = this.inStorageTime ? this.inStorageTime.toISOString() : <any>undefined;
    data['responsibleUserName'] = this.responsibleUserName;
    data['remark'] = this.remark;
    data['byTimes'] = this.byTimes;
    data['unitCostByTimes'] = this.unitCostByTimes;
    data['serviceUnitCostByTimes'] = this.serviceUnitCostByTimes;
    data['containtCarriage'] = this.containtCarriage;
    data['carriageCost'] = this.carriageCost;
    data['invoiceAmount'] = this.invoiceAmount;
    data['shouldInvoiceAmount'] = this.shouldInvoiceAmount;
    if (Array.isArray(this.inStorageHWs)) {
      data['inStorageHWs'] = [];
      for (let item of this.inStorageHWs) data['inStorageHWs'].push(item.toJSON());
    }
    return data;
  }

  clone(): InStorageListDto {
    const json = this.toJSON();
    let result = new InStorageListDto();
    result.init(json);
    return result;
  }
}

/** 销售开票管理的列表DTO Erinyes.CRM.Invoice_Sales */
export class Invoice_SalesListDto {
  id!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 实际入库总量 */
  actualAllWeight!: number | undefined;
  /** 申请批次数、待开批次数 */
  batchCount!: number;
  /** 合同单价 */
  contractUnitCost!: number | undefined;
  /** 实际单价 */
  unitCost!: number | undefined;
  /** 应该开票金额 */
  needInvoiceAmount!: number | undefined;
  /** 已开票金额 */
  invoiceAmount!: number | undefined;
  approveState!: ApproveState;
  /** 审核时间 */
  approveTime!: dayjs.Dayjs | undefined;
  /** 负责人Id */
  responsibleUserId!: number | undefined;
  /** 创建人Id */
  creatorUserId!: number | undefined;
  /** 审核建议 */
  reason!: string | undefined;
  /** 入库记录 */
  inStorageList!: InStorageListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerName = _data['customerName'];
      this.customerId = _data['customerId'];
      this.cantonName = _data['cantonName'];
      this.actualAllWeight = _data['actualAllWeight'];
      this.batchCount = _data['batchCount'];
      this.contractUnitCost = _data['contractUnitCost'];
      this.unitCost = _data['unitCost'];
      this.needInvoiceAmount = _data['needInvoiceAmount'];
      this.invoiceAmount = _data['invoiceAmount'];
      this.approveState = _data['approveState'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.responsibleUserId = _data['responsibleUserId'];
      this.creatorUserId = _data['creatorUserId'];
      this.reason = _data['reason'];
      if (Array.isArray(_data['inStorageList'])) {
        this.inStorageList = [] as any;
        for (let item of _data['inStorageList'])
          this.inStorageList!.push(InStorageListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): Invoice_SalesListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Invoice_SalesListDto>(data, _mappings, Invoice_SalesListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerName'] = this.customerName;
    data['customerId'] = this.customerId;
    data['cantonName'] = this.cantonName;
    data['actualAllWeight'] = this.actualAllWeight;
    data['batchCount'] = this.batchCount;
    data['contractUnitCost'] = this.contractUnitCost;
    data['unitCost'] = this.unitCost;
    data['needInvoiceAmount'] = this.needInvoiceAmount;
    data['invoiceAmount'] = this.invoiceAmount;
    data['approveState'] = this.approveState;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['responsibleUserId'] = this.responsibleUserId;
    data['creatorUserId'] = this.creatorUserId;
    data['reason'] = this.reason;
    if (Array.isArray(this.inStorageList)) {
      data['inStorageList'] = [];
      for (let item of this.inStorageList) data['inStorageList'].push(item.toJSON());
    }
    return data;
  }

  clone(): Invoice_SalesListDto {
    const json = this.toJSON();
    let result = new Invoice_SalesListDto();
    result.init(json);
    return result;
  }
}

/** 财务开票的列表DTO Erinyes.CRM.Invoice_Finance */
export class Invoice_FinanceListDto {
  id!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 销售开票 */
  invoiceSalesId!: number | undefined;
  /** 开票编号 */
  invoiceNo!: string | undefined;
  /** 开票时间 */
  invoiceTime!: dayjs.Dayjs | undefined;
  /** 寄出时间 */
  sendTime!: dayjs.Dayjs | undefined;
  /** 快递单号 */
  expressNo!: string | undefined;
  /** 应该开票金额 */
  needInvoiceAmount!: number | undefined;
  /** 开票金额 */
  invoiceAmount!: number | undefined;
  /** 已回款金额 */
  paymentAmount!: number;
  /** 负责人 */
  responsibleUserName!: string | undefined;
  /** 负责人Id */
  responsibleUserId!: number | undefined;
  /** 创建人Id */
  creatorUserId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerName = _data['customerName'];
      this.customerId = _data['customerId'];
      this.invoiceSalesId = _data['invoiceSalesId'];
      this.invoiceNo = _data['invoiceNo'];
      this.invoiceTime = _data['invoiceTime']
        ? dayjs(_data['invoiceTime'].toString())
        : <any>undefined;
      this.sendTime = _data['sendTime'] ? dayjs(_data['sendTime'].toString()) : <any>undefined;
      this.expressNo = _data['expressNo'];
      this.needInvoiceAmount = _data['needInvoiceAmount'];
      this.invoiceAmount = _data['invoiceAmount'];
      this.paymentAmount = _data['paymentAmount'];
      this.responsibleUserName = _data['responsibleUserName'];
      this.responsibleUserId = _data['responsibleUserId'];
      this.creatorUserId = _data['creatorUserId'];
    }
  }

  static fromJS(data: any, _mappings?: any): Invoice_FinanceListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Invoice_FinanceListDto>(data, _mappings, Invoice_FinanceListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerName'] = this.customerName;
    data['customerId'] = this.customerId;
    data['invoiceSalesId'] = this.invoiceSalesId;
    data['invoiceNo'] = this.invoiceNo;
    data['invoiceTime'] = this.invoiceTime ? this.invoiceTime.toISOString() : <any>undefined;
    data['sendTime'] = this.sendTime ? this.sendTime.toISOString() : <any>undefined;
    data['expressNo'] = this.expressNo;
    data['needInvoiceAmount'] = this.needInvoiceAmount;
    data['invoiceAmount'] = this.invoiceAmount;
    data['paymentAmount'] = this.paymentAmount;
    data['responsibleUserName'] = this.responsibleUserName;
    data['responsibleUserId'] = this.responsibleUserId;
    data['creatorUserId'] = this.creatorUserId;
    return data;
  }

  clone(): Invoice_FinanceListDto {
    const json = this.toJSON();
    let result = new Invoice_FinanceListDto();
    result.init(json);
    return result;
  }
}

/** 回款的列表DTO Erinyes.CRM.PaymentCollection */
export class PaymentCollectionDto {
  id!: number;
  /** 财务开票 */
  invoiceFinanceId!: number | undefined;
  /** 回款金额 */
  paymentAmount!: number | undefined;
  remark!: string | undefined;
  /** 回款时间 */
  paymentTime!: dayjs.Dayjs | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.invoiceFinanceId = _data['invoiceFinanceId'];
      this.paymentAmount = _data['paymentAmount'];
      this.remark = _data['remark'];
      this.paymentTime = _data['paymentTime']
        ? dayjs(_data['paymentTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): PaymentCollectionDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PaymentCollectionDto>(data, _mappings, PaymentCollectionDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['invoiceFinanceId'] = this.invoiceFinanceId;
    data['paymentAmount'] = this.paymentAmount;
    data['remark'] = this.remark;
    data['paymentTime'] = this.paymentTime ? this.paymentTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): PaymentCollectionDto {
    const json = this.toJSON();
    let result = new PaymentCollectionDto();
    result.init(json);
    return result;
  }
}

/** 回款的列表DTO Erinyes.CRM.PaymentCollection */
export class PaymentCollectionListDto {
  id!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 已开票金额 */
  invoiceAmount!: number | undefined;
  /** 开票时间 */
  invoiceTime!: dayjs.Dayjs | undefined;
  /** 回款总金额 */
  paymentAllAmount!: number | undefined;
  /** 记录数 */
  recordCount!: number;
  /** 负责人 */
  responsibleUserName!: string | undefined;
  /** 负责人Id */
  responsibleUserId!: number | undefined;
  /** 创建人Id */
  creatorUserId!: number | undefined;
  /** 入库记录 */
  paymentCollectionList!: PaymentCollectionDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerName = _data['customerName'];
      this.customerId = _data['customerId'];
      this.invoiceAmount = _data['invoiceAmount'];
      this.invoiceTime = _data['invoiceTime']
        ? dayjs(_data['invoiceTime'].toString())
        : <any>undefined;
      this.paymentAllAmount = _data['paymentAllAmount'];
      this.recordCount = _data['recordCount'];
      this.responsibleUserName = _data['responsibleUserName'];
      this.responsibleUserId = _data['responsibleUserId'];
      this.creatorUserId = _data['creatorUserId'];
      if (Array.isArray(_data['paymentCollectionList'])) {
        this.paymentCollectionList = [] as any;
        for (let item of _data['paymentCollectionList'])
          this.paymentCollectionList!.push(PaymentCollectionDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PaymentCollectionListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PaymentCollectionListDto>(data, _mappings, PaymentCollectionListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerName'] = this.customerName;
    data['customerId'] = this.customerId;
    data['invoiceAmount'] = this.invoiceAmount;
    data['invoiceTime'] = this.invoiceTime ? this.invoiceTime.toISOString() : <any>undefined;
    data['paymentAllAmount'] = this.paymentAllAmount;
    data['recordCount'] = this.recordCount;
    data['responsibleUserName'] = this.responsibleUserName;
    data['responsibleUserId'] = this.responsibleUserId;
    data['creatorUserId'] = this.creatorUserId;
    if (Array.isArray(this.paymentCollectionList)) {
      data['paymentCollectionList'] = [];
      for (let item of this.paymentCollectionList)
        data['paymentCollectionList'].push(item.toJSON());
    }
    return data;
  }

  clone(): PaymentCollectionListDto {
    const json = this.toJSON();
    let result = new PaymentCollectionListDto();
    result.init(json);
    return result;
  }
}

/** 的列表DTO Erinyes.CRM.Customer */
export class CustomerListDto {
  id!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 行政区 */
  cantonCode!: string | undefined;
  /** 联系人 */
  linkName!: string | undefined;
  /** 职务 */
  duty!: string | undefined;
  /** 最大储存量 */
  maxStorageCapacity!: number | undefined;
  /** 手机号 */
  phoneNo!: string | undefined;
  /** 邮箱 */
  email!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 行业 */
  industry!: string | undefined;
  /** State */
  state!: number;
  /** 创建人姓名 */
  createUserName!: string | undefined;
  /** 负责人 */
  responsibleUserName!: string | undefined;
  /** 负责人Id */
  responsibleUserId!: number | undefined;
  /** 总重量 */
  allWeight!: number | undefined;
  /** 现场照片 */
  ossFileNames!: string | undefined;
  /** 最后跟进记录 */
  lastFollowUpContent!: string | undefined;
  /** 最后跟进时间 */
  lastFollowUpTime!: dayjs.Dayjs | undefined;
  /** 下次联系时间 */
  nextContactTime!: dayjs.Dayjs | undefined;
  currentState!: CustomerState;
  /** 客户危废列表 */
  customerHWs!: CustomerHWListDto[] | undefined;
  /** 跟进记录 */
  customerFollowUps!: FollowUpCommonDto[] | undefined;
  /** 文件列表 */
  filesList!: FileCommonDto[] | undefined;
  /** 样品列表 */
  samplingList!: SamplingListDto[] | undefined;
  /** 样品列表 */
  quotationList!: QuotationListDto[] | undefined;
  /** 合同列表 */
  contractList!: ContractListDto[] | undefined;
  /** 派单列表 */
  dispatchOrderList!: DispatchOrderListDto[] | undefined;
  /** 入库列表 */
  inStorageList!: InStorageListDto[] | undefined;
  /** 销售开票列表 */
  invoiceSalesList!: Invoice_SalesListDto[] | undefined;
  /** 财务开票列表 */
  invoiceFinanceList!: Invoice_FinanceListDto[] | undefined;
  /** 回款列表 */
  paymentCollectionList!: PaymentCollectionListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerName = _data['customerName'];
      this.cantonName = _data['cantonName'];
      this.cantonCode = _data['cantonCode'];
      this.linkName = _data['linkName'];
      this.duty = _data['duty'];
      this.maxStorageCapacity = _data['maxStorageCapacity'];
      this.phoneNo = _data['phoneNo'];
      this.email = _data['email'];
      this.address = _data['address'];
      this.industry = _data['industry'];
      this.state = _data['state'];
      this.createUserName = _data['createUserName'];
      this.responsibleUserName = _data['responsibleUserName'];
      this.responsibleUserId = _data['responsibleUserId'];
      this.allWeight = _data['allWeight'];
      this.ossFileNames = _data['ossFileNames'];
      this.lastFollowUpContent = _data['lastFollowUpContent'];
      this.lastFollowUpTime = _data['lastFollowUpTime']
        ? dayjs(_data['lastFollowUpTime'].toString())
        : <any>undefined;
      this.nextContactTime = _data['nextContactTime']
        ? dayjs(_data['nextContactTime'].toString())
        : <any>undefined;
      this.currentState = _data['currentState'];
      if (Array.isArray(_data['customerHWs'])) {
        this.customerHWs = [] as any;
        for (let item of _data['customerHWs'])
          this.customerHWs!.push(CustomerHWListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['customerFollowUps'])) {
        this.customerFollowUps = [] as any;
        for (let item of _data['customerFollowUps'])
          this.customerFollowUps!.push(FollowUpCommonDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['filesList'])) {
        this.filesList = [] as any;
        for (let item of _data['filesList'])
          this.filesList!.push(FileCommonDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['samplingList'])) {
        this.samplingList = [] as any;
        for (let item of _data['samplingList'])
          this.samplingList!.push(SamplingListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['quotationList'])) {
        this.quotationList = [] as any;
        for (let item of _data['quotationList'])
          this.quotationList!.push(QuotationListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['contractList'])) {
        this.contractList = [] as any;
        for (let item of _data['contractList'])
          this.contractList!.push(ContractListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['dispatchOrderList'])) {
        this.dispatchOrderList = [] as any;
        for (let item of _data['dispatchOrderList'])
          this.dispatchOrderList!.push(DispatchOrderListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['inStorageList'])) {
        this.inStorageList = [] as any;
        for (let item of _data['inStorageList'])
          this.inStorageList!.push(InStorageListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['invoiceSalesList'])) {
        this.invoiceSalesList = [] as any;
        for (let item of _data['invoiceSalesList'])
          this.invoiceSalesList!.push(Invoice_SalesListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['invoiceFinanceList'])) {
        this.invoiceFinanceList = [] as any;
        for (let item of _data['invoiceFinanceList'])
          this.invoiceFinanceList!.push(Invoice_FinanceListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['paymentCollectionList'])) {
        this.paymentCollectionList = [] as any;
        for (let item of _data['paymentCollectionList'])
          this.paymentCollectionList!.push(PaymentCollectionListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): CustomerListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CustomerListDto>(data, _mappings, CustomerListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerName'] = this.customerName;
    data['cantonName'] = this.cantonName;
    data['cantonCode'] = this.cantonCode;
    data['linkName'] = this.linkName;
    data['duty'] = this.duty;
    data['maxStorageCapacity'] = this.maxStorageCapacity;
    data['phoneNo'] = this.phoneNo;
    data['email'] = this.email;
    data['address'] = this.address;
    data['industry'] = this.industry;
    data['state'] = this.state;
    data['createUserName'] = this.createUserName;
    data['responsibleUserName'] = this.responsibleUserName;
    data['responsibleUserId'] = this.responsibleUserId;
    data['allWeight'] = this.allWeight;
    data['ossFileNames'] = this.ossFileNames;
    data['lastFollowUpContent'] = this.lastFollowUpContent;
    data['lastFollowUpTime'] = this.lastFollowUpTime
      ? this.lastFollowUpTime.toISOString()
      : <any>undefined;
    data['nextContactTime'] = this.nextContactTime
      ? this.nextContactTime.toISOString()
      : <any>undefined;
    data['currentState'] = this.currentState;
    if (Array.isArray(this.customerHWs)) {
      data['customerHWs'] = [];
      for (let item of this.customerHWs) data['customerHWs'].push(item.toJSON());
    }
    if (Array.isArray(this.customerFollowUps)) {
      data['customerFollowUps'] = [];
      for (let item of this.customerFollowUps) data['customerFollowUps'].push(item.toJSON());
    }
    if (Array.isArray(this.filesList)) {
      data['filesList'] = [];
      for (let item of this.filesList) data['filesList'].push(item.toJSON());
    }
    if (Array.isArray(this.samplingList)) {
      data['samplingList'] = [];
      for (let item of this.samplingList) data['samplingList'].push(item.toJSON());
    }
    if (Array.isArray(this.quotationList)) {
      data['quotationList'] = [];
      for (let item of this.quotationList) data['quotationList'].push(item.toJSON());
    }
    if (Array.isArray(this.contractList)) {
      data['contractList'] = [];
      for (let item of this.contractList) data['contractList'].push(item.toJSON());
    }
    if (Array.isArray(this.dispatchOrderList)) {
      data['dispatchOrderList'] = [];
      for (let item of this.dispatchOrderList) data['dispatchOrderList'].push(item.toJSON());
    }
    if (Array.isArray(this.inStorageList)) {
      data['inStorageList'] = [];
      for (let item of this.inStorageList) data['inStorageList'].push(item.toJSON());
    }
    if (Array.isArray(this.invoiceSalesList)) {
      data['invoiceSalesList'] = [];
      for (let item of this.invoiceSalesList) data['invoiceSalesList'].push(item.toJSON());
    }
    if (Array.isArray(this.invoiceFinanceList)) {
      data['invoiceFinanceList'] = [];
      for (let item of this.invoiceFinanceList) data['invoiceFinanceList'].push(item.toJSON());
    }
    if (Array.isArray(this.paymentCollectionList)) {
      data['paymentCollectionList'] = [];
      for (let item of this.paymentCollectionList)
        data['paymentCollectionList'].push(item.toJSON());
    }
    return data;
  }

  clone(): CustomerListDto {
    const json = this.toJSON();
    let result = new CustomerListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑的Dto */
export class GetCustomerForEditOutput {
  customer!: CustomerEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customer = _data['customer']
        ? CustomerEditDto.fromJS(_data['customer'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetCustomerForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetCustomerForEditOutput>(data, _mappings, GetCustomerForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customer'] = this.customer ? this.customer.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetCustomerForEditOutput {
    const json = this.toJSON();
    let result = new GetCustomerForEditOutput();
    result.init(json);
    return result;
  }
}

/** 的编辑DTO Erinyes.CRM.Enterprise_HW */
export class EnterpriseHWListDto {
  /** 企业ID */
  entId!: number;
  /** 线索主键 */
  clueId!: number;
  /** 企业名称 */
  entName!: string | undefined;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 是否已解锁 */
  isViewed!: boolean;
  /** 环评是否有效 */
  eiaIsEffective!: boolean | undefined;
  /** 线索内容 */
  clueContent!: string | undefined;
  transferQuantity!: number | undefined;
  /** 八位码 */
  octetcode!: string | undefined;
  /** 父级 */
  parentOctetcode!: string | undefined;
  /** 俗称 */
  vulgo!: string | undefined;
  /** 去向 */
  direction!: string | undefined;
  /** 项目名称 */
  projName!: string | undefined;
  /** 环评阶段 */
  recordState!: string | undefined;
  /** 发布时间 */
  publishTime!: dayjs.Dayjs | undefined;
  /** 线索危废 数据 1：显示危废  0：线索环评 */
  showHWSource!: boolean;
  /** 危废内容 */
  hwContent!: string | undefined;
  /** 是否可以拨打电话 */
  hasPhone!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.clueId = _data['clueId'];
      this.entName = _data['entName'];
      this.cantonName = _data['cantonName'];
      this.isViewed = _data['isViewed'];
      this.eiaIsEffective = _data['eiaIsEffective'];
      this.clueContent = _data['clueContent'];
      this.transferQuantity = _data['transferQuantity'];
      this.octetcode = _data['octetcode'];
      this.parentOctetcode = _data['parentOctetcode'];
      this.vulgo = _data['vulgo'];
      this.direction = _data['direction'];
      this.projName = _data['projName'];
      this.recordState = _data['recordState'];
      this.publishTime = _data['publishTime']
        ? dayjs(_data['publishTime'].toString())
        : <any>undefined;
      this.showHWSource = _data['showHWSource'];
      this.hwContent = _data['hwContent'];
      this.hasPhone = _data['hasPhone'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): EnterpriseHWListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EnterpriseHWListDto>(data, _mappings, EnterpriseHWListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['clueId'] = this.clueId;
    data['entName'] = this.entName;
    data['cantonName'] = this.cantonName;
    data['isViewed'] = this.isViewed;
    data['eiaIsEffective'] = this.eiaIsEffective;
    data['clueContent'] = this.clueContent;
    data['transferQuantity'] = this.transferQuantity;
    data['octetcode'] = this.octetcode;
    data['parentOctetcode'] = this.parentOctetcode;
    data['vulgo'] = this.vulgo;
    data['direction'] = this.direction;
    data['projName'] = this.projName;
    data['recordState'] = this.recordState;
    data['publishTime'] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
    data['showHWSource'] = this.showHWSource;
    data['hwContent'] = this.hwContent;
    data['hasPhone'] = this.hasPhone;
    data['id'] = this.id;
    return data;
  }

  clone(): EnterpriseHWListDto {
    const json = this.toJSON();
    let result = new EnterpriseHWListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfEnterpriseHWListDto {
  totalCount!: number;
  items!: EnterpriseHWListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(EnterpriseHWListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfEnterpriseHWListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfEnterpriseHWListDto>(
      data,
      _mappings,
      PagedResultDtoOfEnterpriseHWListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfEnterpriseHWListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfEnterpriseHWListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfCustomerListDto {
  totalCount!: number;
  items!: CustomerListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(CustomerListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfCustomerListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfCustomerListDto>(
      data,
      _mappings,
      PagedResultDtoOfCustomerListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfCustomerListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfCustomerListDto();
    result.init(json);
    return result;
  }
}

export class TenantCanViewClueDto {
  /** 是否是试用租户 */
  isTrialTenant!: boolean;
  /** 可以查看的次数 */
  canViewCount!: number;
  /** 一共可以查看的次数 */
  canViewAllCount!: number;
  /** 可以查看危废 */
  canViewHW!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.isTrialTenant = _data['isTrialTenant'];
      this.canViewCount = _data['canViewCount'];
      this.canViewAllCount = _data['canViewAllCount'];
      this.canViewHW = _data['canViewHW'];
    }
  }

  static fromJS(data: any, _mappings?: any): TenantCanViewClueDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TenantCanViewClueDto>(data, _mappings, TenantCanViewClueDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['isTrialTenant'] = this.isTrialTenant;
    data['canViewCount'] = this.canViewCount;
    data['canViewAllCount'] = this.canViewAllCount;
    data['canViewHW'] = this.canViewHW;
    return data;
  }

  clone(): TenantCanViewClueDto {
    const json = this.toJSON();
    let result = new TenantCanViewClueDto();
    result.init(json);
    return result;
  }
}

/** 的编辑DTO Erinyes.CRM.Enterprise_HW */
export class TenantViewedClueListDto {
  id!: number;
  /** 企业ID */
  entId!: number;
  /** 企业名称 */
  entName!: string | undefined;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 线索内容 */
  clueContent!: string | undefined;
  /** 危废重量 */
  hwWeight!: number | undefined;
  /** 是否转换成销售线索   0 未 1 已转换 */
  importType!: number;
  /** 销售线索主键 */
  customerId!: number;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs | undefined;
  /** 线索危废 数据 1：显示危废  0：线索环评 */
  showHWSource!: boolean;
  /** 危废内容 */
  hwContent!: string | undefined;
  /** 是否解锁 */
  isViewed!: boolean;
  /** 是否可以拨打电话 */
  hasPhone!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.entId = _data['entId'];
      this.entName = _data['entName'];
      this.cantonName = _data['cantonName'];
      this.clueContent = _data['clueContent'];
      this.hwWeight = _data['hwWeight'];
      this.importType = _data['importType'];
      this.customerId = _data['customerId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.showHWSource = _data['showHWSource'];
      this.hwContent = _data['hwContent'];
      this.isViewed = _data['isViewed'];
      this.hasPhone = _data['hasPhone'];
    }
  }

  static fromJS(data: any, _mappings?: any): TenantViewedClueListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TenantViewedClueListDto>(data, _mappings, TenantViewedClueListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['entId'] = this.entId;
    data['entName'] = this.entName;
    data['cantonName'] = this.cantonName;
    data['clueContent'] = this.clueContent;
    data['hwWeight'] = this.hwWeight;
    data['importType'] = this.importType;
    data['customerId'] = this.customerId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['showHWSource'] = this.showHWSource;
    data['hwContent'] = this.hwContent;
    data['isViewed'] = this.isViewed;
    data['hasPhone'] = this.hasPhone;
    return data;
  }

  clone(): TenantViewedClueListDto {
    const json = this.toJSON();
    let result = new TenantViewedClueListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfTenantViewedClueListDto {
  totalCount!: number;
  items!: TenantViewedClueListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(TenantViewedClueListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfTenantViewedClueListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfTenantViewedClueListDto>(
      data,
      _mappings,
      PagedResultDtoOfTenantViewedClueListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfTenantViewedClueListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfTenantViewedClueListDto();
    result.init(json);
    return result;
  }
}

/** 通用Dto */
export class CommonDashboardDto {
  /** 当前显示值 */
  showNum!: number;
  /** 当前显示值 */
  showDecimalNum!: number | undefined;
  /** 已完成 */
  doneNum!: number;
  /** 进行中 */
  doningNum!: number;
  /** 增减比例 */
  increase!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.showNum = _data['showNum'];
      this.showDecimalNum = _data['showDecimalNum'];
      this.doneNum = _data['doneNum'];
      this.doningNum = _data['doningNum'];
      this.increase = _data['increase'];
    }
  }

  static fromJS(data: any, _mappings?: any): CommonDashboardDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CommonDashboardDto>(data, _mappings, CommonDashboardDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['showNum'] = this.showNum;
    data['showDecimalNum'] = this.showDecimalNum;
    data['doneNum'] = this.doneNum;
    data['doningNum'] = this.doningNum;
    data['increase'] = this.increase;
    return data;
  }

  clone(): CommonDashboardDto {
    const json = this.toJSON();
    let result = new CommonDashboardDto();
    result.init(json);
    return result;
  }
}

/** 客户汇总 */
export class CustomerDto {
  customerCount!: CommonDashboardDto;
  followCount!: CommonDashboardDto;
  needUnblockCount!: CommonDashboardDto;
  contractCount!: CommonDashboardDto;
  waybillCount!: CommonDashboardDto;
  /** 拜访日程 */
  visitingPlanList!: VisitingPlanListDto[] | undefined;
  /** 跟进记录 */
  followRecordList!: FollowRecordListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customerCount = _data['customerCount']
        ? CommonDashboardDto.fromJS(_data['customerCount'], _mappings)
        : <any>undefined;
      this.followCount = _data['followCount']
        ? CommonDashboardDto.fromJS(_data['followCount'], _mappings)
        : <any>undefined;
      this.needUnblockCount = _data['needUnblockCount']
        ? CommonDashboardDto.fromJS(_data['needUnblockCount'], _mappings)
        : <any>undefined;
      this.contractCount = _data['contractCount']
        ? CommonDashboardDto.fromJS(_data['contractCount'], _mappings)
        : <any>undefined;
      this.waybillCount = _data['waybillCount']
        ? CommonDashboardDto.fromJS(_data['waybillCount'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['visitingPlanList'])) {
        this.visitingPlanList = [] as any;
        for (let item of _data['visitingPlanList'])
          this.visitingPlanList!.push(VisitingPlanListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['followRecordList'])) {
        this.followRecordList = [] as any;
        for (let item of _data['followRecordList'])
          this.followRecordList!.push(FollowRecordListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): CustomerDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CustomerDto>(data, _mappings, CustomerDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customerCount'] = this.customerCount ? this.customerCount.toJSON() : <any>undefined;
    data['followCount'] = this.followCount ? this.followCount.toJSON() : <any>undefined;
    data['needUnblockCount'] = this.needUnblockCount
      ? this.needUnblockCount.toJSON()
      : <any>undefined;
    data['contractCount'] = this.contractCount ? this.contractCount.toJSON() : <any>undefined;
    data['waybillCount'] = this.waybillCount ? this.waybillCount.toJSON() : <any>undefined;
    if (Array.isArray(this.visitingPlanList)) {
      data['visitingPlanList'] = [];
      for (let item of this.visitingPlanList) data['visitingPlanList'].push(item.toJSON());
    }
    if (Array.isArray(this.followRecordList)) {
      data['followRecordList'] = [];
      for (let item of this.followRecordList) data['followRecordList'].push(item.toJSON());
    }
    return data;
  }

  clone(): CustomerDto {
    const json = this.toJSON();
    let result = new CustomerDto();
    result.init(json);
    return result;
  }
}

export class CustomerServiceCommonDto {
  entId!: number | undefined;
  /** 序号 */
  index!: number;
  /** 企业名字 */
  entName!: string | undefined;
  /** 数量 */
  count!: number;
  tenantId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.index = _data['index'];
      this.entName = _data['entName'];
      this.count = _data['count'];
      this.tenantId = _data['tenantId'];
    }
  }

  static fromJS(data: any, _mappings?: any): CustomerServiceCommonDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CustomerServiceCommonDto>(data, _mappings, CustomerServiceCommonDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['index'] = this.index;
    data['entName'] = this.entName;
    data['count'] = this.count;
    data['tenantId'] = this.tenantId;
    return data;
  }

  clone(): CustomerServiceCommonDto {
    const json = this.toJSON();
    let result = new CustomerServiceCommonDto();
    result.init(json);
    return result;
  }
}

/** 客服 */
export class CustomerServiceDto {
  /** 推送条数 */
  pushCount!: number;
  /** 推送企业数 */
  pushEntCount!: number;
  /** 活跃企业 */
  activeEnts!: CustomerServiceCommonDto[] | undefined;
  /** 推送企业 */
  pushEnts!: CustomerServiceCommonDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.pushCount = _data['pushCount'];
      this.pushEntCount = _data['pushEntCount'];
      if (Array.isArray(_data['activeEnts'])) {
        this.activeEnts = [] as any;
        for (let item of _data['activeEnts'])
          this.activeEnts!.push(CustomerServiceCommonDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['pushEnts'])) {
        this.pushEnts = [] as any;
        for (let item of _data['pushEnts'])
          this.pushEnts!.push(CustomerServiceCommonDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): CustomerServiceDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CustomerServiceDto>(data, _mappings, CustomerServiceDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['pushCount'] = this.pushCount;
    data['pushEntCount'] = this.pushEntCount;
    if (Array.isArray(this.activeEnts)) {
      data['activeEnts'] = [];
      for (let item of this.activeEnts) data['activeEnts'].push(item.toJSON());
    }
    if (Array.isArray(this.pushEnts)) {
      data['pushEnts'] = [];
      for (let item of this.pushEnts) data['pushEnts'].push(item.toJSON());
    }
    return data;
  }

  clone(): CustomerServiceDto {
    const json = this.toJSON();
    let result = new CustomerServiceDto();
    result.init(json);
    return result;
  }
}

/** Portal Dto */
export class DashboardDto {
  customer!: CommonDashboardDto;
  shippingList!: CommonDashboardDto;
  trainNumber!: CommonDashboardDto;
  transportationVolume!: CommonDashboardDto;
  amount!: CommonDashboardDto;
  logistics!: CommonDashboardDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customer = _data['customer']
        ? CommonDashboardDto.fromJS(_data['customer'], _mappings)
        : <any>undefined;
      this.shippingList = _data['shippingList']
        ? CommonDashboardDto.fromJS(_data['shippingList'], _mappings)
        : <any>undefined;
      this.trainNumber = _data['trainNumber']
        ? CommonDashboardDto.fromJS(_data['trainNumber'], _mappings)
        : <any>undefined;
      this.transportationVolume = _data['transportationVolume']
        ? CommonDashboardDto.fromJS(_data['transportationVolume'], _mappings)
        : <any>undefined;
      this.amount = _data['amount']
        ? CommonDashboardDto.fromJS(_data['amount'], _mappings)
        : <any>undefined;
      this.logistics = _data['logistics']
        ? CommonDashboardDto.fromJS(_data['logistics'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): DashboardDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DashboardDto>(data, _mappings, DashboardDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customer'] = this.customer ? this.customer.toJSON() : <any>undefined;
    data['shippingList'] = this.shippingList ? this.shippingList.toJSON() : <any>undefined;
    data['trainNumber'] = this.trainNumber ? this.trainNumber.toJSON() : <any>undefined;
    data['transportationVolume'] = this.transportationVolume
      ? this.transportationVolume.toJSON()
      : <any>undefined;
    data['amount'] = this.amount ? this.amount.toJSON() : <any>undefined;
    data['logistics'] = this.logistics ? this.logistics.toJSON() : <any>undefined;
    return data;
  }

  clone(): DashboardDto {
    const json = this.toJSON();
    let result = new DashboardDto();
    result.init(json);
    return result;
  }
}

/** 物流 */
export class LogisticsDto {
  /** 货单数 */
  shippingListCount!: number;
  /** 运单数 */
  waybillCount!: number;
  /** 运输量 */
  transportationVolume!: number | undefined;
  /** 金额 */
  amount!: number | undefined;
  /** 新客户 */
  newCustomer!: number;
  /** 老客户 */
  oldCustomer!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.shippingListCount = _data['shippingListCount'];
      this.waybillCount = _data['waybillCount'];
      this.transportationVolume = _data['transportationVolume'];
      this.amount = _data['amount'];
      this.newCustomer = _data['newCustomer'];
      this.oldCustomer = _data['oldCustomer'];
    }
  }

  static fromJS(data: any, _mappings?: any): LogisticsDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LogisticsDto>(data, _mappings, LogisticsDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['shippingListCount'] = this.shippingListCount;
    data['waybillCount'] = this.waybillCount;
    data['transportationVolume'] = this.transportationVolume;
    data['amount'] = this.amount;
    data['newCustomer'] = this.newCustomer;
    data['oldCustomer'] = this.oldCustomer;
    return data;
  }

  clone(): LogisticsDto {
    const json = this.toJSON();
    let result = new LogisticsDto();
    result.init(json);
    return result;
  }
}

/** 销售 */
export class SalesDto {
  /** 企业数 */
  entCount!: number;
  /** 解锁数 */
  unblockCount!: number;
  /** 合同数 */
  contractCount!: number;
  /** 新增货单数 */
  shippingListCount!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entCount = _data['entCount'];
      this.unblockCount = _data['unblockCount'];
      this.contractCount = _data['contractCount'];
      this.shippingListCount = _data['shippingListCount'];
    }
  }

  static fromJS(data: any, _mappings?: any): SalesDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SalesDto>(data, _mappings, SalesDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entCount'] = this.entCount;
    data['unblockCount'] = this.unblockCount;
    data['contractCount'] = this.contractCount;
    data['shippingListCount'] = this.shippingListCount;
    return data;
  }

  clone(): SalesDto {
    const json = this.toJSON();
    let result = new SalesDto();
    result.init(json);
    return result;
  }
}

/** 通用Dto */
export class CommonDto {
  showNum!: number;
  increase!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.showNum = _data['showNum'];
      this.increase = _data['increase'];
    }
  }

  static fromJS(data: any, _mappings?: any): CommonDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CommonDto>(data, _mappings, CommonDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['showNum'] = this.showNum;
    data['increase'] = this.increase;
    return data;
  }

  clone(): CommonDto {
    const json = this.toJSON();
    let result = new CommonDto();
    result.init(json);
    return result;
  }
}

/** Portal Dto */
export class DashboardReportDto {
  customer!: CommonDto;
  sampling!: CommonDto;
  laboratory!: CommonDto;
  quotation!: CommonDto;
  contract!: CommonDto;
  dispatchOrder!: CommonDto;
  inStorage!: CommonDto;
  followCount!: CommonDto;
  invoice_Sales!: CommonDto;
  invoice_Finance!: CommonDto;
  paymentCollection!: CommonDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customer = _data['customer']
        ? CommonDto.fromJS(_data['customer'], _mappings)
        : <any>undefined;
      this.sampling = _data['sampling']
        ? CommonDto.fromJS(_data['sampling'], _mappings)
        : <any>undefined;
      this.laboratory = _data['laboratory']
        ? CommonDto.fromJS(_data['laboratory'], _mappings)
        : <any>undefined;
      this.quotation = _data['quotation']
        ? CommonDto.fromJS(_data['quotation'], _mappings)
        : <any>undefined;
      this.contract = _data['contract']
        ? CommonDto.fromJS(_data['contract'], _mappings)
        : <any>undefined;
      this.dispatchOrder = _data['dispatchOrder']
        ? CommonDto.fromJS(_data['dispatchOrder'], _mappings)
        : <any>undefined;
      this.inStorage = _data['inStorage']
        ? CommonDto.fromJS(_data['inStorage'], _mappings)
        : <any>undefined;
      this.followCount = _data['followCount']
        ? CommonDto.fromJS(_data['followCount'], _mappings)
        : <any>undefined;
      this.invoice_Sales = _data['invoice_Sales']
        ? CommonDto.fromJS(_data['invoice_Sales'], _mappings)
        : <any>undefined;
      this.invoice_Finance = _data['invoice_Finance']
        ? CommonDto.fromJS(_data['invoice_Finance'], _mappings)
        : <any>undefined;
      this.paymentCollection = _data['paymentCollection']
        ? CommonDto.fromJS(_data['paymentCollection'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): DashboardReportDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DashboardReportDto>(data, _mappings, DashboardReportDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customer'] = this.customer ? this.customer.toJSON() : <any>undefined;
    data['sampling'] = this.sampling ? this.sampling.toJSON() : <any>undefined;
    data['laboratory'] = this.laboratory ? this.laboratory.toJSON() : <any>undefined;
    data['quotation'] = this.quotation ? this.quotation.toJSON() : <any>undefined;
    data['contract'] = this.contract ? this.contract.toJSON() : <any>undefined;
    data['dispatchOrder'] = this.dispatchOrder ? this.dispatchOrder.toJSON() : <any>undefined;
    data['inStorage'] = this.inStorage ? this.inStorage.toJSON() : <any>undefined;
    data['followCount'] = this.followCount ? this.followCount.toJSON() : <any>undefined;
    data['invoice_Sales'] = this.invoice_Sales ? this.invoice_Sales.toJSON() : <any>undefined;
    data['invoice_Finance'] = this.invoice_Finance ? this.invoice_Finance.toJSON() : <any>undefined;
    data['paymentCollection'] = this.paymentCollection
      ? this.paymentCollection.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): DashboardReportDto {
    const json = this.toJSON();
    let result = new DashboardReportDto();
    result.init(json);
    return result;
  }
}

/** 待办事项 */
export class ToDoList {
  /** 客户Id */
  customerId!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 待办描述 */
  toDoDesc!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customerId = _data['customerId'];
      this.customerName = _data['customerName'];
      this.toDoDesc = _data['toDoDesc'];
    }
  }

  static fromJS(data: any, _mappings?: any): ToDoList | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ToDoList>(data, _mappings, ToDoList);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customerId'] = this.customerId;
    data['customerName'] = this.customerName;
    data['toDoDesc'] = this.toDoDesc;
    return data;
  }

  clone(): ToDoList {
    const json = this.toJSON();
    let result = new ToDoList();
    result.init(json);
    return result;
  }
}

/** 业务字典的列表DTO Erinyes.BllCommon.DicItem.DicItem */
export class DicItemEditDto {
  /** Id */
  id!: number | undefined;
  /** 字典代码 */
  dicCode!: string | undefined;
  /** 显示值 */
  dicValue!: string | undefined;
  /** 排序 */
  sn!: number;
  /** 备注 */
  remark!: string | undefined;
  /** 是否是标准数据 */
  isStandard!: boolean | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.dicCode = _data['dicCode'];
      this.dicValue = _data['dicValue'];
      this.sn = _data['sn'];
      this.remark = _data['remark'];
      this.isStandard = _data['isStandard'];
    }
  }

  static fromJS(data: any, _mappings?: any): DicItemEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DicItemEditDto>(data, _mappings, DicItemEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['dicCode'] = this.dicCode;
    data['dicValue'] = this.dicValue;
    data['sn'] = this.sn;
    data['remark'] = this.remark;
    data['isStandard'] = this.isStandard;
    return data;
  }

  clone(): DicItemEditDto {
    const json = this.toJSON();
    let result = new DicItemEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateDicItemInput {
  dicItem!: DicItemEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.dicItem = _data['dicItem']
        ? DicItemEditDto.fromJS(_data['dicItem'], _mappings)
        : new DicItemEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateDicItemInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateDicItemInput>(data, _mappings, CreateOrUpdateDicItemInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['dicItem'] = this.dicItem ? this.dicItem.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateDicItemInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateDicItemInput();
    result.init(json);
    return result;
  }
}

/** 业务字典的列表DTO Erinyes.BllCommon.DicItem.DicItem */
export class DicItemListDto {
  /** 字典代码 */
  dicCode!: string | undefined;
  /** 显示值 */
  dicValue!: string | undefined;
  /** 排序 */
  sn!: number;
  /** 备注 */
  remark!: string | undefined;
  /** 是否是标准数据 */
  isStandard!: boolean | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.dicCode = _data['dicCode'];
      this.dicValue = _data['dicValue'];
      this.sn = _data['sn'];
      this.remark = _data['remark'];
      this.isStandard = _data['isStandard'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): DicItemListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DicItemListDto>(data, _mappings, DicItemListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['dicCode'] = this.dicCode;
    data['dicValue'] = this.dicValue;
    data['sn'] = this.sn;
    data['remark'] = this.remark;
    data['isStandard'] = this.isStandard;
    data['id'] = this.id;
    return data;
  }

  clone(): DicItemListDto {
    const json = this.toJSON();
    let result = new DicItemListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑业务字典的Dto */
export class GetDicItemForEditOutput {
  dicItem!: DicItemEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.dicItem = _data['dicItem']
        ? DicItemEditDto.fromJS(_data['dicItem'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetDicItemForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetDicItemForEditOutput>(data, _mappings, GetDicItemForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['dicItem'] = this.dicItem ? this.dicItem.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetDicItemForEditOutput {
    const json = this.toJSON();
    let result = new GetDicItemForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfDicItemListDto {
  totalCount!: number;
  items!: DicItemListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(DicItemListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfDicItemListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfDicItemListDto>(
      data,
      _mappings,
      PagedResultDtoOfDicItemListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfDicItemListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfDicItemListDto();
    result.init(json);
    return result;
  }
}

/** 待派车辆信息 */
export class DispatchedVehicleAndUserDto {
  /** 运力组合ID */
  capacityId!: number | undefined;
  /** 运力组合当前绑定的 车辆订单Id */
  capacityOrderVehicleId!: number | undefined;
  /** 派单车辆Id */
  orderVehicleId!: number | undefined;
  /** 车头Id */
  vehicleHeadId!: number;
  /** 车头车牌号码 */
  vehicleHeadNumber!: string | undefined;
  /** 车挂Id */
  vehicleTailId!: number | undefined;
  /** 车挂车牌号码 */
  vehicleTailNumber!: string | undefined;
  /** 司机Id */
  driverId!: number | undefined;
  /** 司机名称 */
  driverName!: string | undefined;
  /** 押运员Id */
  escortId!: number | undefined;
  /** 押运员名称 */
  escortName!: string | undefined;
  /** 车辆状态 0:空闲 1:返程  2:过夜 */
  vehicleState!: number;
  /** 空驶、节省里程 */
  emptyMileage!: number | undefined;
  /** 车辆类型 */
  vehicleTypeName!: string | undefined;
  /** 卸货地-行政区 */
  unLoadingPointCantonName!: string | undefined;
  /** 车辆类型 普通栏板、罐车(字典) */
  vehicleTypeId!: number | undefined;
  /** 订单类型 0:普通 1:拼车 2:多趟 */
  orderType!: number;
  /** 拼车或者多趟编号 */
  carPoolOrderNo!: string | undefined;
  /** 多趟顺序 */
  multiPassSN!: number | undefined;
  /** 关联的订单编号 */
  orderDetailNo!: string | undefined;
  /** 关联的子订单ID */
  orderDetailId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.capacityId = _data['capacityId'];
      this.capacityOrderVehicleId = _data['capacityOrderVehicleId'];
      this.orderVehicleId = _data['orderVehicleId'];
      this.vehicleHeadId = _data['vehicleHeadId'];
      this.vehicleHeadNumber = _data['vehicleHeadNumber'];
      this.vehicleTailId = _data['vehicleTailId'];
      this.vehicleTailNumber = _data['vehicleTailNumber'];
      this.driverId = _data['driverId'];
      this.driverName = _data['driverName'];
      this.escortId = _data['escortId'];
      this.escortName = _data['escortName'];
      this.vehicleState = _data['vehicleState'];
      this.emptyMileage = _data['emptyMileage'];
      this.vehicleTypeName = _data['vehicleTypeName'];
      this.unLoadingPointCantonName = _data['unLoadingPointCantonName'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.orderType = _data['orderType'];
      this.carPoolOrderNo = _data['carPoolOrderNo'];
      this.multiPassSN = _data['multiPassSN'];
      this.orderDetailNo = _data['orderDetailNo'];
      this.orderDetailId = _data['orderDetailId'];
    }
  }

  static fromJS(data: any, _mappings?: any): DispatchedVehicleAndUserDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DispatchedVehicleAndUserDto>(
      data,
      _mappings,
      DispatchedVehicleAndUserDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['capacityId'] = this.capacityId;
    data['capacityOrderVehicleId'] = this.capacityOrderVehicleId;
    data['orderVehicleId'] = this.orderVehicleId;
    data['vehicleHeadId'] = this.vehicleHeadId;
    data['vehicleHeadNumber'] = this.vehicleHeadNumber;
    data['vehicleTailId'] = this.vehicleTailId;
    data['vehicleTailNumber'] = this.vehicleTailNumber;
    data['driverId'] = this.driverId;
    data['driverName'] = this.driverName;
    data['escortId'] = this.escortId;
    data['escortName'] = this.escortName;
    data['vehicleState'] = this.vehicleState;
    data['emptyMileage'] = this.emptyMileage;
    data['vehicleTypeName'] = this.vehicleTypeName;
    data['unLoadingPointCantonName'] = this.unLoadingPointCantonName;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['orderType'] = this.orderType;
    data['carPoolOrderNo'] = this.carPoolOrderNo;
    data['multiPassSN'] = this.multiPassSN;
    data['orderDetailNo'] = this.orderDetailNo;
    data['orderDetailId'] = this.orderDetailId;
    return data;
  }

  clone(): DispatchedVehicleAndUserDto {
    const json = this.toJSON();
    let result = new DispatchedVehicleAndUserDto();
    result.init(json);
    return result;
  }
}

export class DailySchedulingDto {
  /** 日期 */
  date!: dayjs.Dayjs;
  /** 待安排任务车辆数量 */
  waitTaskNum!: number;
  /** string 日期 */
  dateStr!: string | undefined;
  /** 是否选中 */
  isActive!: boolean;
  /** 周几 */
  week!: string | undefined;
  /** 月中的第几天 */
  monthDay!: number;
  /** 月 */
  month!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.date = _data['date'] ? dayjs(_data['date'].toString()) : <any>undefined;
      this.waitTaskNum = _data['waitTaskNum'];
      this.dateStr = _data['dateStr'];
      this.isActive = _data['isActive'];
      this.week = _data['week'];
      this.monthDay = _data['monthDay'];
      this.month = _data['month'];
    }
  }

  static fromJS(data: any, _mappings?: any): DailySchedulingDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DailySchedulingDto>(data, _mappings, DailySchedulingDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['date'] = this.date ? this.date.toISOString() : <any>undefined;
    data['waitTaskNum'] = this.waitTaskNum;
    data['dateStr'] = this.dateStr;
    data['isActive'] = this.isActive;
    data['week'] = this.week;
    data['monthDay'] = this.monthDay;
    data['month'] = this.month;
    return data;
  }

  clone(): DailySchedulingDto {
    const json = this.toJSON();
    let result = new DailySchedulingDto();
    result.init(json);
    return result;
  }
}

/** 订单详情货物列表DTO Erinyes.TMS.Order_Goods */
export class Order_GoodsListDto {
  id!: number | undefined;
  /** 用来表格编辑控件的开关行 */
  extId!: number | undefined;
  /** 订单详情id */
  orderDetailId!: number | undefined;
  /** 货物类型(字典) */
  goodsTypeId!: number | undefined;
  goodsTypeName!: string | undefined;
  /** 货物名称 */
  goodsName!: string | undefined;
  /** 危废编码 */
  wasteCode!: string | undefined;
  /** 包装方式(字典) */
  packagingId!: number | undefined;
  packagingName!: string | undefined;
  /** 包装物重量 */
  packagingWeight!: number | undefined;
  /** 数量 */
  count!: number | undefined;
  /** 净重 */
  netWeight!: number | undefined;
  /** 毛重 */
  grossWeight!: number | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.extId = _data['extId'];
      this.orderDetailId = _data['orderDetailId'];
      this.goodsTypeId = _data['goodsTypeId'];
      this.goodsTypeName = _data['goodsTypeName'];
      this.goodsName = _data['goodsName'];
      this.wasteCode = _data['wasteCode'];
      this.packagingId = _data['packagingId'];
      this.packagingName = _data['packagingName'];
      this.packagingWeight = _data['packagingWeight'];
      this.count = _data['count'];
      this.netWeight = _data['netWeight'];
      this.grossWeight = _data['grossWeight'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): Order_GoodsListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Order_GoodsListDto>(data, _mappings, Order_GoodsListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['extId'] = this.extId;
    data['orderDetailId'] = this.orderDetailId;
    data['goodsTypeId'] = this.goodsTypeId;
    data['goodsTypeName'] = this.goodsTypeName;
    data['goodsName'] = this.goodsName;
    data['wasteCode'] = this.wasteCode;
    data['packagingId'] = this.packagingId;
    data['packagingName'] = this.packagingName;
    data['packagingWeight'] = this.packagingWeight;
    data['count'] = this.count;
    data['netWeight'] = this.netWeight;
    data['grossWeight'] = this.grossWeight;
    data['remark'] = this.remark;
    return data;
  }

  clone(): Order_GoodsListDto {
    const json = this.toJSON();
    let result = new Order_GoodsListDto();
    result.init(json);
    return result;
  }
}

/** 待派单的订单和车辆需求信息 */
export class DispatchedOrderVehicleDto {
  id!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 子订单编号 */
  orderNo!: string | undefined;
  /** 计划装货时间 */
  planLoadingTime!: dayjs.Dayjs | undefined;
  /** 计划到货时间 */
  planUnloadingTime!: dayjs.Dayjs | undefined;
  /** 提货点 */
  loadingPointId!: number | undefined;
  /** 多装 */
  multiLoadingPoints!: boolean;
  /** 多卸 */
  multiUnLoadingPoints!: boolean;
  /** 提货点名称 */
  loadingPointName!: string | undefined;
  /** 送货点 */
  unLoadingPointId!: number | undefined;
  /** 送货点名称 */
  unLoadingPointName!: string | undefined;
  /** 车辆类型(字典) */
  vehicleTypeId!: number | undefined;
  vehicleTypeName!: string | undefined;
  /** 车辆标准30、20、10吨 */
  vehicleStandardsId!: number | undefined;
  vehicleStandardName!: string | undefined;
  /** 备注 */
  remark!: string | undefined;
  goodsList!: Order_GoodsListDto[] | undefined;
  /** 商品显示文字 */
  goodsStr!: string | undefined;
  /** 车辆状态 0:空闲 1:返程  2:过夜 */
  vehicleState!: number | undefined;
  /** 状态 0:待调度 1:待执行 2:运输中 3:已完成 */
  state!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerName = _data['customerName'];
      this.orderNo = _data['orderNo'];
      this.planLoadingTime = _data['planLoadingTime']
        ? dayjs(_data['planLoadingTime'].toString())
        : <any>undefined;
      this.planUnloadingTime = _data['planUnloadingTime']
        ? dayjs(_data['planUnloadingTime'].toString())
        : <any>undefined;
      this.loadingPointId = _data['loadingPointId'];
      this.multiLoadingPoints = _data['multiLoadingPoints'];
      this.multiUnLoadingPoints = _data['multiUnLoadingPoints'];
      this.loadingPointName = _data['loadingPointName'];
      this.unLoadingPointId = _data['unLoadingPointId'];
      this.unLoadingPointName = _data['unLoadingPointName'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleTypeName = _data['vehicleTypeName'];
      this.vehicleStandardsId = _data['vehicleStandardsId'];
      this.vehicleStandardName = _data['vehicleStandardName'];
      this.remark = _data['remark'];
      if (Array.isArray(_data['goodsList'])) {
        this.goodsList = [] as any;
        for (let item of _data['goodsList'])
          this.goodsList!.push(Order_GoodsListDto.fromJS(item, _mappings));
      }
      this.goodsStr = _data['goodsStr'];
      this.vehicleState = _data['vehicleState'];
      this.state = _data['state'];
    }
  }

  static fromJS(data: any, _mappings?: any): DispatchedOrderVehicleDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DispatchedOrderVehicleDto>(data, _mappings, DispatchedOrderVehicleDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerName'] = this.customerName;
    data['orderNo'] = this.orderNo;
    data['planLoadingTime'] = this.planLoadingTime
      ? this.planLoadingTime.toISOString()
      : <any>undefined;
    data['planUnloadingTime'] = this.planUnloadingTime
      ? this.planUnloadingTime.toISOString()
      : <any>undefined;
    data['loadingPointId'] = this.loadingPointId;
    data['multiLoadingPoints'] = this.multiLoadingPoints;
    data['multiUnLoadingPoints'] = this.multiUnLoadingPoints;
    data['loadingPointName'] = this.loadingPointName;
    data['unLoadingPointId'] = this.unLoadingPointId;
    data['unLoadingPointName'] = this.unLoadingPointName;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleTypeName'] = this.vehicleTypeName;
    data['vehicleStandardsId'] = this.vehicleStandardsId;
    data['vehicleStandardName'] = this.vehicleStandardName;
    data['remark'] = this.remark;
    if (Array.isArray(this.goodsList)) {
      data['goodsList'] = [];
      for (let item of this.goodsList) data['goodsList'].push(item.toJSON());
    }
    data['goodsStr'] = this.goodsStr;
    data['vehicleState'] = this.vehicleState;
    data['state'] = this.state;
    return data;
  }

  clone(): DispatchedOrderVehicleDto {
    const json = this.toJSON();
    let result = new DispatchedOrderVehicleDto();
    result.init(json);
    return result;
  }
}

/** 已派单的订单和车辆需求信息 */
export class DispatchedDoneOrderVehicleDto {
  id!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 订单车辆编号 */
  orderVehicleNo!: string | undefined;
  /** 子订单编号 */
  orderNo!: string | undefined;
  /** 计划装货时间 */
  planLoadingTime!: dayjs.Dayjs | undefined;
  /** 计划到货时间 */
  planUnloadingTime!: dayjs.Dayjs | undefined;
  /** 提货点 */
  loadingPointId!: number | undefined;
  /** 提货点名称 */
  loadingPointName!: string | undefined;
  /** 送货点 */
  unLoadingPointId!: number | undefined;
  /** 送货点名称 */
  unLoadingPointName!: string | undefined;
  /** 多装 */
  multiLoadingPoints!: boolean;
  /** 多卸 */
  multiUnLoadingPoints!: boolean;
  /** 车辆类型(字典) */
  vehicleTypeId!: number | undefined;
  vehicleTypeName!: string | undefined;
  /** 车头Id */
  vehicleHeadId!: number;
  /** 车头车牌号码 */
  vehicleHeadNumber!: string | undefined;
  /** 车挂Id */
  vehicleTailId!: number;
  /** 车挂车牌号码 */
  vehicleTailNumber!: string | undefined;
  /** 司机Id */
  driverId!: number;
  /** 司机名称 */
  driverName!: string | undefined;
  /** 押运员Id */
  escortId!: number;
  /** 押运员名称 */
  escortName!: string | undefined;
  /** 状态 0:待调度 -------------1:待执行 2:运输中 3:已完成 */
  state!: number;
  /** 备注 */
  remark!: string | undefined;
  goodsList!: Order_GoodsListDto[] | undefined;
  /** 车辆状态 0:空闲 1:返程  2:过夜 */
  vehicleState!: number | undefined;
  /** 商品显示文字 */
  goodsStr!: string | undefined;
  /** 订单类型 0:普通 1:拼车 2:多趟 */
  orderType!: number;
  /** 拼车或者多趟编号 */
  carPoolOrderNo!: string | undefined;
  /** 多趟顺序 */
  multiPassSN!: number | undefined;
  /** 运费 */
  carriage!: number | undefined;
  /** 滞留费 */
  demurrage!: number | undefined;
  /** 装卸费 */
  loadingUnloadingCost!: number | undefined;
  /** 过磅费 */
  weighingCost!: number | undefined;
  /** 其它费用 */
  otherCost!: number | undefined;
  /** 折扣 */
  discount!: number | undefined;
  /** 减免 */
  reduction!: number | undefined;
  /** 管理费 */
  manageCost!: number | undefined;
  /** 总费用 */
  totalCost!: number | undefined;
  /** 运费备注信息 */
  carriageRemark!: string | undefined;
  /** 核算金额 */
  accountsCost!: number | undefined;
  /** 核算说明 */
  accountsRemark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerName = _data['customerName'];
      this.orderVehicleNo = _data['orderVehicleNo'];
      this.orderNo = _data['orderNo'];
      this.planLoadingTime = _data['planLoadingTime']
        ? dayjs(_data['planLoadingTime'].toString())
        : <any>undefined;
      this.planUnloadingTime = _data['planUnloadingTime']
        ? dayjs(_data['planUnloadingTime'].toString())
        : <any>undefined;
      this.loadingPointId = _data['loadingPointId'];
      this.loadingPointName = _data['loadingPointName'];
      this.unLoadingPointId = _data['unLoadingPointId'];
      this.unLoadingPointName = _data['unLoadingPointName'];
      this.multiLoadingPoints = _data['multiLoadingPoints'];
      this.multiUnLoadingPoints = _data['multiUnLoadingPoints'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleTypeName = _data['vehicleTypeName'];
      this.vehicleHeadId = _data['vehicleHeadId'];
      this.vehicleHeadNumber = _data['vehicleHeadNumber'];
      this.vehicleTailId = _data['vehicleTailId'];
      this.vehicleTailNumber = _data['vehicleTailNumber'];
      this.driverId = _data['driverId'];
      this.driverName = _data['driverName'];
      this.escortId = _data['escortId'];
      this.escortName = _data['escortName'];
      this.state = _data['state'];
      this.remark = _data['remark'];
      if (Array.isArray(_data['goodsList'])) {
        this.goodsList = [] as any;
        for (let item of _data['goodsList'])
          this.goodsList!.push(Order_GoodsListDto.fromJS(item, _mappings));
      }
      this.vehicleState = _data['vehicleState'];
      this.goodsStr = _data['goodsStr'];
      this.orderType = _data['orderType'];
      this.carPoolOrderNo = _data['carPoolOrderNo'];
      this.multiPassSN = _data['multiPassSN'];
      this.carriage = _data['carriage'];
      this.demurrage = _data['demurrage'];
      this.loadingUnloadingCost = _data['loadingUnloadingCost'];
      this.weighingCost = _data['weighingCost'];
      this.otherCost = _data['otherCost'];
      this.discount = _data['discount'];
      this.reduction = _data['reduction'];
      this.manageCost = _data['manageCost'];
      this.totalCost = _data['totalCost'];
      this.carriageRemark = _data['carriageRemark'];
      this.accountsCost = _data['accountsCost'];
      this.accountsRemark = _data['accountsRemark'];
    }
  }

  static fromJS(data: any, _mappings?: any): DispatchedDoneOrderVehicleDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DispatchedDoneOrderVehicleDto>(
      data,
      _mappings,
      DispatchedDoneOrderVehicleDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerName'] = this.customerName;
    data['orderVehicleNo'] = this.orderVehicleNo;
    data['orderNo'] = this.orderNo;
    data['planLoadingTime'] = this.planLoadingTime
      ? this.planLoadingTime.toISOString()
      : <any>undefined;
    data['planUnloadingTime'] = this.planUnloadingTime
      ? this.planUnloadingTime.toISOString()
      : <any>undefined;
    data['loadingPointId'] = this.loadingPointId;
    data['loadingPointName'] = this.loadingPointName;
    data['unLoadingPointId'] = this.unLoadingPointId;
    data['unLoadingPointName'] = this.unLoadingPointName;
    data['multiLoadingPoints'] = this.multiLoadingPoints;
    data['multiUnLoadingPoints'] = this.multiUnLoadingPoints;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleTypeName'] = this.vehicleTypeName;
    data['vehicleHeadId'] = this.vehicleHeadId;
    data['vehicleHeadNumber'] = this.vehicleHeadNumber;
    data['vehicleTailId'] = this.vehicleTailId;
    data['vehicleTailNumber'] = this.vehicleTailNumber;
    data['driverId'] = this.driverId;
    data['driverName'] = this.driverName;
    data['escortId'] = this.escortId;
    data['escortName'] = this.escortName;
    data['state'] = this.state;
    data['remark'] = this.remark;
    if (Array.isArray(this.goodsList)) {
      data['goodsList'] = [];
      for (let item of this.goodsList) data['goodsList'].push(item.toJSON());
    }
    data['vehicleState'] = this.vehicleState;
    data['goodsStr'] = this.goodsStr;
    data['orderType'] = this.orderType;
    data['carPoolOrderNo'] = this.carPoolOrderNo;
    data['multiPassSN'] = this.multiPassSN;
    data['carriage'] = this.carriage;
    data['demurrage'] = this.demurrage;
    data['loadingUnloadingCost'] = this.loadingUnloadingCost;
    data['weighingCost'] = this.weighingCost;
    data['otherCost'] = this.otherCost;
    data['discount'] = this.discount;
    data['reduction'] = this.reduction;
    data['manageCost'] = this.manageCost;
    data['totalCost'] = this.totalCost;
    data['carriageRemark'] = this.carriageRemark;
    data['accountsCost'] = this.accountsCost;
    data['accountsRemark'] = this.accountsRemark;
    return data;
  }

  clone(): DispatchedDoneOrderVehicleDto {
    const json = this.toJSON();
    let result = new DispatchedDoneOrderVehicleDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfDispatchedDoneOrderVehicleDto {
  totalCount!: number;
  items!: DispatchedDoneOrderVehicleDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(DispatchedDoneOrderVehicleDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfDispatchedDoneOrderVehicleDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfDispatchedDoneOrderVehicleDto>(
      data,
      _mappings,
      PagedResultDtoOfDispatchedDoneOrderVehicleDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfDispatchedDoneOrderVehicleDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfDispatchedDoneOrderVehicleDto();
    result.init(json);
    return result;
  }
}

export class OrderVehicleCost {
  orderVehicleId!: number | undefined;
  /** 运费 */
  carriage!: number | undefined;
  /** 滞留费 */
  demurrage!: number | undefined;
  /** 装卸费 */
  loadingUnloadingCost!: number | undefined;
  /** 过磅费 */
  weighingCost!: number | undefined;
  /** 其它费用 */
  otherCost!: number | undefined;
  /** 折扣 */
  discount!: number | undefined;
  /** 减免 */
  reduction!: number | undefined;
  /** 管理费 */
  manageCost!: number | undefined;
  /** 运费备注信息 */
  carriageRemark!: string | undefined;
  /** 总费用 */
  totalCost!: number | undefined;
  /** 核算金额 */
  accountsCost!: number | undefined;
  /** 核算说明 */
  accountsRemark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderVehicleId = _data['orderVehicleId'];
      this.carriage = _data['carriage'];
      this.demurrage = _data['demurrage'];
      this.loadingUnloadingCost = _data['loadingUnloadingCost'];
      this.weighingCost = _data['weighingCost'];
      this.otherCost = _data['otherCost'];
      this.discount = _data['discount'];
      this.reduction = _data['reduction'];
      this.manageCost = _data['manageCost'];
      this.carriageRemark = _data['carriageRemark'];
      this.totalCost = _data['totalCost'];
      this.accountsCost = _data['accountsCost'];
      this.accountsRemark = _data['accountsRemark'];
    }
  }

  static fromJS(data: any, _mappings?: any): OrderVehicleCost | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<OrderVehicleCost>(data, _mappings, OrderVehicleCost);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderVehicleId'] = this.orderVehicleId;
    data['carriage'] = this.carriage;
    data['demurrage'] = this.demurrage;
    data['loadingUnloadingCost'] = this.loadingUnloadingCost;
    data['weighingCost'] = this.weighingCost;
    data['otherCost'] = this.otherCost;
    data['discount'] = this.discount;
    data['reduction'] = this.reduction;
    data['manageCost'] = this.manageCost;
    data['carriageRemark'] = this.carriageRemark;
    data['totalCost'] = this.totalCost;
    data['accountsCost'] = this.accountsCost;
    data['accountsRemark'] = this.accountsRemark;
    return data;
  }

  clone(): OrderVehicleCost {
    const json = this.toJSON();
    let result = new OrderVehicleCost();
    result.init(json);
    return result;
  }
}

/** 派单的列表DTO Erinyes.CRM.DispatchOrder */
export class DispatchOrderEditDto {
  /** Id */
  id!: number | undefined;
  /** 合同编号 */
  contractNo!: string | undefined;
  /** 合同 */
  contractId!: number | undefined;
  /** 客户信息 */
  customerId!: number;
  /** 车辆 */
  vehicleId!: number | undefined;
  /** 驾驶员 */
  driverId!: number | undefined;
  /** 预计接收量 */
  predictionWeight!: number | undefined;
  /** 公里数 */
  kilometers!: number | undefined;
  /** 运输时间 */
  transportTime!: dayjs.Dayjs | undefined;
  receiveApprove!: ReceiveApprove;
  /** 审核时间 */
  approveTime!: dayjs.Dayjs | undefined;
  /** 审核人 */
  approveUserId!: number | undefined;
  remark!: string | undefined;
  /** 审核意见 */
  reason!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.contractNo = _data['contractNo'];
      this.contractId = _data['contractId'];
      this.customerId = _data['customerId'];
      this.vehicleId = _data['vehicleId'];
      this.driverId = _data['driverId'];
      this.predictionWeight = _data['predictionWeight'];
      this.kilometers = _data['kilometers'];
      this.transportTime = _data['transportTime']
        ? dayjs(_data['transportTime'].toString())
        : <any>undefined;
      this.receiveApprove = _data['receiveApprove'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.approveUserId = _data['approveUserId'];
      this.remark = _data['remark'];
      this.reason = _data['reason'];
    }
  }

  static fromJS(data: any, _mappings?: any): DispatchOrderEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DispatchOrderEditDto>(data, _mappings, DispatchOrderEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['contractNo'] = this.contractNo;
    data['contractId'] = this.contractId;
    data['customerId'] = this.customerId;
    data['vehicleId'] = this.vehicleId;
    data['driverId'] = this.driverId;
    data['predictionWeight'] = this.predictionWeight;
    data['kilometers'] = this.kilometers;
    data['transportTime'] = this.transportTime ? this.transportTime.toISOString() : <any>undefined;
    data['receiveApprove'] = this.receiveApprove;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['approveUserId'] = this.approveUserId;
    data['remark'] = this.remark;
    data['reason'] = this.reason;
    return data;
  }

  clone(): DispatchOrderEditDto {
    const json = this.toJSON();
    let result = new DispatchOrderEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateDispatchOrderInput {
  dispatchOrder!: DispatchOrderEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.dispatchOrder = _data['dispatchOrder']
        ? DispatchOrderEditDto.fromJS(_data['dispatchOrder'], _mappings)
        : new DispatchOrderEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateDispatchOrderInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateDispatchOrderInput>(
      data,
      _mappings,
      CreateOrUpdateDispatchOrderInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['dispatchOrder'] = this.dispatchOrder ? this.dispatchOrder.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateDispatchOrderInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateDispatchOrderInput();
    result.init(json);
    return result;
  }
}

/** 派单的列表DTO Erinyes.CRM.DispatchOrder */
export class DispatchDetailDto {
  id!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 合同 */
  contractId!: number | undefined;
  /** 合同编号 */
  contractNo!: string | undefined;
  /** 预计接收量 */
  predictionWeight!: number | undefined;
  /** 公里数 */
  kilometers!: number | undefined;
  /** 运输时间 */
  transportTime!: dayjs.Dayjs | undefined;
  receiveApprove!: ReceiveApprove;
  /** 审核时间 */
  approveTime!: dayjs.Dayjs | undefined;
  /** 审核人 */
  approveUserId!: number | undefined;
  /** 审核意见 */
  reason!: string | undefined;
  /** 负责人 */
  responsibleUserName!: string | undefined;
  /** 负责人Id */
  responsibleUserId!: number | undefined;
  /** 创建人Id */
  creatorUserId!: number | undefined;
  remark!: string | undefined;
  /** 车辆 */
  vehicleId!: number | undefined;
  /** 驾驶员 */
  driverId!: number | undefined;
  /** 车辆编号 */
  vehicleNo!: string | undefined;
  /** 运输企业车牌号 */
  vehicleNum!: string | undefined;
  /** 驾驶证 */
  driverLicense!: string | undefined;
  /** 运输企业司机 */
  driverName!: string | undefined;
  /** 运输企业司机手机号 */
  driverPhone!: string | undefined;
  /** 运输企业司机身份证 */
  driverNo!: string | undefined;
  /** 按次数 报价 */
  byTimes!: boolean;
  /** 处置价格（元/次） */
  unitCostByTimes!: number | undefined;
  /** 服务费（元/次） */
  serviceUnitCostByTimes!: number | undefined;
  /** 是否包含运费 */
  containtCarriage!: boolean;
  /** 单次 运费总价（元/次） */
  carriageCost!: number | undefined;
  /** 报价详情 */
  quotationDetails!: QuotationDetailDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerName = _data['customerName'];
      this.customerId = _data['customerId'];
      this.cantonName = _data['cantonName'];
      this.contractId = _data['contractId'];
      this.contractNo = _data['contractNo'];
      this.predictionWeight = _data['predictionWeight'];
      this.kilometers = _data['kilometers'];
      this.transportTime = _data['transportTime']
        ? dayjs(_data['transportTime'].toString())
        : <any>undefined;
      this.receiveApprove = _data['receiveApprove'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.approveUserId = _data['approveUserId'];
      this.reason = _data['reason'];
      this.responsibleUserName = _data['responsibleUserName'];
      this.responsibleUserId = _data['responsibleUserId'];
      this.creatorUserId = _data['creatorUserId'];
      this.remark = _data['remark'];
      this.vehicleId = _data['vehicleId'];
      this.driverId = _data['driverId'];
      this.vehicleNo = _data['vehicleNo'];
      this.vehicleNum = _data['vehicleNum'];
      this.driverLicense = _data['driverLicense'];
      this.driverName = _data['driverName'];
      this.driverPhone = _data['driverPhone'];
      this.driverNo = _data['driverNo'];
      this.byTimes = _data['byTimes'];
      this.unitCostByTimes = _data['unitCostByTimes'];
      this.serviceUnitCostByTimes = _data['serviceUnitCostByTimes'];
      this.containtCarriage = _data['containtCarriage'];
      this.carriageCost = _data['carriageCost'];
      if (Array.isArray(_data['quotationDetails'])) {
        this.quotationDetails = [] as any;
        for (let item of _data['quotationDetails'])
          this.quotationDetails!.push(QuotationDetailDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): DispatchDetailDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DispatchDetailDto>(data, _mappings, DispatchDetailDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerName'] = this.customerName;
    data['customerId'] = this.customerId;
    data['cantonName'] = this.cantonName;
    data['contractId'] = this.contractId;
    data['contractNo'] = this.contractNo;
    data['predictionWeight'] = this.predictionWeight;
    data['kilometers'] = this.kilometers;
    data['transportTime'] = this.transportTime ? this.transportTime.toISOString() : <any>undefined;
    data['receiveApprove'] = this.receiveApprove;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['approveUserId'] = this.approveUserId;
    data['reason'] = this.reason;
    data['responsibleUserName'] = this.responsibleUserName;
    data['responsibleUserId'] = this.responsibleUserId;
    data['creatorUserId'] = this.creatorUserId;
    data['remark'] = this.remark;
    data['vehicleId'] = this.vehicleId;
    data['driverId'] = this.driverId;
    data['vehicleNo'] = this.vehicleNo;
    data['vehicleNum'] = this.vehicleNum;
    data['driverLicense'] = this.driverLicense;
    data['driverName'] = this.driverName;
    data['driverPhone'] = this.driverPhone;
    data['driverNo'] = this.driverNo;
    data['byTimes'] = this.byTimes;
    data['unitCostByTimes'] = this.unitCostByTimes;
    data['serviceUnitCostByTimes'] = this.serviceUnitCostByTimes;
    data['containtCarriage'] = this.containtCarriage;
    data['carriageCost'] = this.carriageCost;
    if (Array.isArray(this.quotationDetails)) {
      data['quotationDetails'] = [];
      for (let item of this.quotationDetails) data['quotationDetails'].push(item.toJSON());
    }
    return data;
  }

  clone(): DispatchDetailDto {
    const json = this.toJSON();
    let result = new DispatchDetailDto();
    result.init(json);
    return result;
  }
}

/** 派单的列表DTO Erinyes.CRM.DispatchOrder */
export class DispatchShareDetailDto {
  id!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 车辆 */
  vehicleId!: number | undefined;
  /** 驾驶员 */
  driverId!: number | undefined;
  /** 车辆编号 */
  vehicleNo!: string | undefined;
  /** 运输企业车牌号 */
  vehicleNum!: string | undefined;
  /** 驾驶证 */
  driverLicense!: string | undefined;
  /** 运输企业司机 */
  driverName!: string | undefined;
  /** 运输企业司机手机号 */
  driverPhone!: string | undefined;
  /** 运输企业司机身份证 */
  driverNo!: string | undefined;
  /** 物流公司名称 */
  entName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerName = _data['customerName'];
      this.vehicleId = _data['vehicleId'];
      this.driverId = _data['driverId'];
      this.vehicleNo = _data['vehicleNo'];
      this.vehicleNum = _data['vehicleNum'];
      this.driverLicense = _data['driverLicense'];
      this.driverName = _data['driverName'];
      this.driverPhone = _data['driverPhone'];
      this.driverNo = _data['driverNo'];
      this.entName = _data['entName'];
    }
  }

  static fromJS(data: any, _mappings?: any): DispatchShareDetailDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DispatchShareDetailDto>(data, _mappings, DispatchShareDetailDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerName'] = this.customerName;
    data['vehicleId'] = this.vehicleId;
    data['driverId'] = this.driverId;
    data['vehicleNo'] = this.vehicleNo;
    data['vehicleNum'] = this.vehicleNum;
    data['driverLicense'] = this.driverLicense;
    data['driverName'] = this.driverName;
    data['driverPhone'] = this.driverPhone;
    data['driverNo'] = this.driverNo;
    data['entName'] = this.entName;
    return data;
  }

  clone(): DispatchShareDetailDto {
    const json = this.toJSON();
    let result = new DispatchShareDetailDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑派单的Dto */
export class GetDispatchOrderForEditOutput {
  dispatchOrder!: DispatchOrderEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.dispatchOrder = _data['dispatchOrder']
        ? DispatchOrderEditDto.fromJS(_data['dispatchOrder'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetDispatchOrderForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetDispatchOrderForEditOutput>(
      data,
      _mappings,
      GetDispatchOrderForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['dispatchOrder'] = this.dispatchOrder ? this.dispatchOrder.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetDispatchOrderForEditOutput {
    const json = this.toJSON();
    let result = new GetDispatchOrderForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfDispatchOrderListDto {
  totalCount!: number;
  items!: DispatchOrderListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(DispatchOrderListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfDispatchOrderListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfDispatchOrderListDto>(
      data,
      _mappings,
      PagedResultDtoOfDispatchOrderListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfDispatchOrderListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfDispatchOrderListDto();
    result.init(json);
    return result;
  }
}

/** 司机管理的列表DTO Erinyes.CRM.Driver */
export class DriverEditDto {
  /** Id */
  id!: number | undefined;
  /** 物流公司 */
  logisticsCompanyId!: number | undefined;
  /** 物流公司名称 */
  logisticsCompanyName!: string | undefined;
  /** 司机名称 */
  driverName!: string | undefined;
  /** 手机号 */
  driverPhone!: string | undefined;
  /** 身份证 */
  driverNo!: string | undefined;
  /** 附件 */
  ossFileNames!: string | undefined;
  remark!: string | undefined;
  /** 身份证文件 */
  driverNoOssFile!: string | undefined;
  /** 驾驶证文件 */
  driverLicenseOssFile!: string | undefined;
  /** 从业资格证文件 */
  qualificationOssFile!: string | undefined;
  /** 押运员 false：司机  true：押运员 */
  supercargo!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.logisticsCompanyId = _data['logisticsCompanyId'];
      this.logisticsCompanyName = _data['logisticsCompanyName'];
      this.driverName = _data['driverName'];
      this.driverPhone = _data['driverPhone'];
      this.driverNo = _data['driverNo'];
      this.ossFileNames = _data['ossFileNames'];
      this.remark = _data['remark'];
      this.driverNoOssFile = _data['driverNoOssFile'];
      this.driverLicenseOssFile = _data['driverLicenseOssFile'];
      this.qualificationOssFile = _data['qualificationOssFile'];
      this.supercargo = _data['supercargo'];
    }
  }

  static fromJS(data: any, _mappings?: any): DriverEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DriverEditDto>(data, _mappings, DriverEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['logisticsCompanyId'] = this.logisticsCompanyId;
    data['logisticsCompanyName'] = this.logisticsCompanyName;
    data['driverName'] = this.driverName;
    data['driverPhone'] = this.driverPhone;
    data['driverNo'] = this.driverNo;
    data['ossFileNames'] = this.ossFileNames;
    data['remark'] = this.remark;
    data['driverNoOssFile'] = this.driverNoOssFile;
    data['driverLicenseOssFile'] = this.driverLicenseOssFile;
    data['qualificationOssFile'] = this.qualificationOssFile;
    data['supercargo'] = this.supercargo;
    return data;
  }

  clone(): DriverEditDto {
    const json = this.toJSON();
    let result = new DriverEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateDriverInput {
  driver!: DriverEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.driver = _data['driver']
        ? DriverEditDto.fromJS(_data['driver'], _mappings)
        : new DriverEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateDriverInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateDriverInput>(data, _mappings, CreateOrUpdateDriverInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateDriverInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateDriverInput();
    result.init(json);
    return result;
  }
}

/** 司机管理的列表DTO Erinyes.CRM.Driver */
export class DriverListDto {
  id!: number;
  /** 物流公司 */
  logisticsCompanyId!: number | undefined;
  /** 物流公司名称 */
  logisticsCompanyName!: string | undefined;
  /** 驾驶证 */
  driverLicense!: string | undefined;
  /** 司机名称 */
  driverName!: string | undefined;
  /** 手机号 */
  driverPhone!: string | undefined;
  /** 身份证 */
  driverNo!: string | undefined;
  /** 附件 */
  ossFileNames!: string | undefined;
  remark!: string | undefined;
  /** 身份证文件 */
  driverNoOssFile!: string | undefined;
  /** 驾驶证文件 */
  driverLicenseOssFile!: string | undefined;
  /** 从业资格证文件 */
  qualificationOssFile!: string | undefined;
  /** 押运员 false：司机  true：押运员 */
  supercargo!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.logisticsCompanyId = _data['logisticsCompanyId'];
      this.logisticsCompanyName = _data['logisticsCompanyName'];
      this.driverLicense = _data['driverLicense'];
      this.driverName = _data['driverName'];
      this.driverPhone = _data['driverPhone'];
      this.driverNo = _data['driverNo'];
      this.ossFileNames = _data['ossFileNames'];
      this.remark = _data['remark'];
      this.driverNoOssFile = _data['driverNoOssFile'];
      this.driverLicenseOssFile = _data['driverLicenseOssFile'];
      this.qualificationOssFile = _data['qualificationOssFile'];
      this.supercargo = _data['supercargo'];
    }
  }

  static fromJS(data: any, _mappings?: any): DriverListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DriverListDto>(data, _mappings, DriverListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['logisticsCompanyId'] = this.logisticsCompanyId;
    data['logisticsCompanyName'] = this.logisticsCompanyName;
    data['driverLicense'] = this.driverLicense;
    data['driverName'] = this.driverName;
    data['driverPhone'] = this.driverPhone;
    data['driverNo'] = this.driverNo;
    data['ossFileNames'] = this.ossFileNames;
    data['remark'] = this.remark;
    data['driverNoOssFile'] = this.driverNoOssFile;
    data['driverLicenseOssFile'] = this.driverLicenseOssFile;
    data['qualificationOssFile'] = this.qualificationOssFile;
    data['supercargo'] = this.supercargo;
    return data;
  }

  clone(): DriverListDto {
    const json = this.toJSON();
    let result = new DriverListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑司机管理的Dto */
export class GetDriverForEditOutput {
  driver!: DriverEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.driver = _data['driver']
        ? DriverEditDto.fromJS(_data['driver'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetDriverForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetDriverForEditOutput>(data, _mappings, GetDriverForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetDriverForEditOutput {
    const json = this.toJSON();
    let result = new GetDriverForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfDriverListDto {
  totalCount!: number;
  items!: DriverListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(DriverListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfDriverListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfDriverListDto>(
      data,
      _mappings,
      PagedResultDtoOfDriverListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfDriverListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfDriverListDto();
    result.init(json);
    return result;
  }
}

/** 电话记录详情的列表DTO Erinyes.CRM.DypSecretReport */
export class DypSecretReportEditDto {
  /** Id */
  id!: number | undefined;
  /** pool_key */
  pool_key!: string | undefined;
  /** sub_id */
  sub_id!: number;
  /** call_id */
  call_id!: string | undefined;
  /** phone_no */
  phone_no!: string | undefined;
  /** secret_no */
  secret_no!: string | undefined;
  /** peer_no */
  peer_no!: string | undefined;
  /** called_display_no */
  called_display_no!: string | undefined;
  /** call_type */
  call_type!: number;
  /** call_time */
  call_time!: string | undefined;
  /** start_time */
  start_time!: string | undefined;
  /** call_out_time */
  call_out_time!: string | undefined;
  /** ReturnValue */
  returnValue!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.pool_key = _data['pool_key'];
      this.sub_id = _data['sub_id'];
      this.call_id = _data['call_id'];
      this.phone_no = _data['phone_no'];
      this.secret_no = _data['secret_no'];
      this.peer_no = _data['peer_no'];
      this.called_display_no = _data['called_display_no'];
      this.call_type = _data['call_type'];
      this.call_time = _data['call_time'];
      this.start_time = _data['start_time'];
      this.call_out_time = _data['call_out_time'];
      this.returnValue = _data['returnValue'];
    }
  }

  static fromJS(data: any, _mappings?: any): DypSecretReportEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DypSecretReportEditDto>(data, _mappings, DypSecretReportEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['pool_key'] = this.pool_key;
    data['sub_id'] = this.sub_id;
    data['call_id'] = this.call_id;
    data['phone_no'] = this.phone_no;
    data['secret_no'] = this.secret_no;
    data['peer_no'] = this.peer_no;
    data['called_display_no'] = this.called_display_no;
    data['call_type'] = this.call_type;
    data['call_time'] = this.call_time;
    data['start_time'] = this.start_time;
    data['call_out_time'] = this.call_out_time;
    data['returnValue'] = this.returnValue;
    return data;
  }

  clone(): DypSecretReportEditDto {
    const json = this.toJSON();
    let result = new DypSecretReportEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateDypSecretReportInput {
  dypSecretReport!: DypSecretReportEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.dypSecretReport = _data['dypSecretReport']
        ? DypSecretReportEditDto.fromJS(_data['dypSecretReport'], _mappings)
        : new DypSecretReportEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateDypSecretReportInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateDypSecretReportInput>(
      data,
      _mappings,
      CreateOrUpdateDypSecretReportInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['dypSecretReport'] = this.dypSecretReport ? this.dypSecretReport.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateDypSecretReportInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateDypSecretReportInput();
    result.init(json);
    return result;
  }
}

/** 电话记录详情的列表DTO Erinyes.CRM.DypSecretReport */
export class DypSecretReportListDto {
  id!: number | undefined;
  /** pool_key */
  pool_key!: string | undefined;
  /** sub_id */
  sub_id!: number;
  /** call_id */
  call_id!: string | undefined;
  /** phone_no */
  phone_no!: string | undefined;
  /** secret_no */
  secret_no!: string | undefined;
  /** peer_no */
  peer_no!: string | undefined;
  /** called_display_no */
  called_display_no!: string | undefined;
  /** call_type */
  call_type!: number;
  /** call_time */
  call_time!: string | undefined;
  /** start_time */
  start_time!: string | undefined;
  /** call_out_time */
  call_out_time!: string | undefined;
  /** ReturnValue */
  returnValue!: string | undefined;
  /** ReturnValue */
  record_url!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.pool_key = _data['pool_key'];
      this.sub_id = _data['sub_id'];
      this.call_id = _data['call_id'];
      this.phone_no = _data['phone_no'];
      this.secret_no = _data['secret_no'];
      this.peer_no = _data['peer_no'];
      this.called_display_no = _data['called_display_no'];
      this.call_type = _data['call_type'];
      this.call_time = _data['call_time'];
      this.start_time = _data['start_time'];
      this.call_out_time = _data['call_out_time'];
      this.returnValue = _data['returnValue'];
      this.record_url = _data['record_url'];
    }
  }

  static fromJS(data: any, _mappings?: any): DypSecretReportListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DypSecretReportListDto>(data, _mappings, DypSecretReportListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['pool_key'] = this.pool_key;
    data['sub_id'] = this.sub_id;
    data['call_id'] = this.call_id;
    data['phone_no'] = this.phone_no;
    data['secret_no'] = this.secret_no;
    data['peer_no'] = this.peer_no;
    data['called_display_no'] = this.called_display_no;
    data['call_type'] = this.call_type;
    data['call_time'] = this.call_time;
    data['start_time'] = this.start_time;
    data['call_out_time'] = this.call_out_time;
    data['returnValue'] = this.returnValue;
    data['record_url'] = this.record_url;
    return data;
  }

  clone(): DypSecretReportListDto {
    const json = this.toJSON();
    let result = new DypSecretReportListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑电话记录详情的Dto */
export class GetDypSecretReportForEditOutput {
  dypSecretReport!: DypSecretReportEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.dypSecretReport = _data['dypSecretReport']
        ? DypSecretReportEditDto.fromJS(_data['dypSecretReport'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetDypSecretReportForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetDypSecretReportForEditOutput>(
      data,
      _mappings,
      GetDypSecretReportForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['dypSecretReport'] = this.dypSecretReport ? this.dypSecretReport.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetDypSecretReportForEditOutput {
    const json = this.toJSON();
    let result = new GetDypSecretReportForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfDypSecretReportListDto {
  totalCount!: number;
  items!: DypSecretReportListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(DypSecretReportListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfDypSecretReportListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfDypSecretReportListDto>(
      data,
      _mappings,
      PagedResultDtoOfDypSecretReportListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfDypSecretReportListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfDypSecretReportListDto();
    result.init(json);
    return result;
  }
}

export class EditionEditDto {
  id!: number | undefined;
  displayName!: string | undefined;
  monthlyPrice!: number | undefined;
  annualPrice!: number | undefined;
  trialDayCount!: number | undefined;
  waitingDayAfterExpire!: number | undefined;
  expiringEditionId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.displayName = _data['displayName'];
      this.monthlyPrice = _data['monthlyPrice'];
      this.annualPrice = _data['annualPrice'];
      this.trialDayCount = _data['trialDayCount'];
      this.waitingDayAfterExpire = _data['waitingDayAfterExpire'];
      this.expiringEditionId = _data['expiringEditionId'];
    }
  }

  static fromJS(data: any, _mappings?: any): EditionEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EditionEditDto>(data, _mappings, EditionEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['displayName'] = this.displayName;
    data['monthlyPrice'] = this.monthlyPrice;
    data['annualPrice'] = this.annualPrice;
    data['trialDayCount'] = this.trialDayCount;
    data['waitingDayAfterExpire'] = this.waitingDayAfterExpire;
    data['expiringEditionId'] = this.expiringEditionId;
    return data;
  }

  clone(): EditionEditDto {
    const json = this.toJSON();
    let result = new EditionEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateEditionDto {
  edition!: EditionEditDto;
  featureValues!: NameValueDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.edition = _data['edition']
        ? EditionEditDto.fromJS(_data['edition'], _mappings)
        : new EditionEditDto();
      if (Array.isArray(_data['featureValues'])) {
        this.featureValues = [] as any;
        for (let item of _data['featureValues'])
          this.featureValues!.push(NameValueDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateEditionDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateEditionDto>(data, _mappings, CreateOrUpdateEditionDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['edition'] = this.edition ? this.edition.toJSON() : <any>undefined;
    if (Array.isArray(this.featureValues)) {
      data['featureValues'] = [];
      for (let item of this.featureValues) data['featureValues'].push(item.toJSON());
    }
    return data;
  }

  clone(): CreateOrUpdateEditionDto {
    const json = this.toJSON();
    let result = new CreateOrUpdateEditionDto();
    result.init(json);
    return result;
  }
}

export class IValueValidator {
  readonly name!: string | undefined;
  readonly attributes!: { [key: string]: any } | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      (<any>this).name = _data['name'];
      if (_data['attributes']) {
        (<any>this).attributes = {} as any;
        for (let key in _data['attributes']) {
          if (_data['attributes'].hasOwnProperty(key))
            (<any>(<any>this).attributes)![key] = _data['attributes'][key];
        }
      }
    }
  }

  static fromJS(data: any, _mappings?: any): IValueValidator | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<IValueValidator>(data, _mappings, IValueValidator);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    if (this.attributes) {
      data['attributes'] = {};
      for (let key in this.attributes) {
        if (this.attributes.hasOwnProperty(key))
          (<any>data['attributes'])[key] = this.attributes[key];
      }
    }
    return data;
  }

  clone(): IValueValidator {
    const json = this.toJSON();
    let result = new IValueValidator();
    result.init(json);
    return result;
  }
}

export class LocalizableComboboxItemDto {
  value!: string | undefined;
  displayText!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.value = _data['value'];
      this.displayText = _data['displayText'];
    }
  }

  static fromJS(data: any, _mappings?: any): LocalizableComboboxItemDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LocalizableComboboxItemDto>(data, _mappings, LocalizableComboboxItemDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value;
    data['displayText'] = this.displayText;
    return data;
  }

  clone(): LocalizableComboboxItemDto {
    const json = this.toJSON();
    let result = new LocalizableComboboxItemDto();
    result.init(json);
    return result;
  }
}

export class LocalizableComboboxItemSourceDto {
  items!: LocalizableComboboxItemDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(LocalizableComboboxItemDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): LocalizableComboboxItemSourceDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LocalizableComboboxItemSourceDto>(
      data,
      _mappings,
      LocalizableComboboxItemSourceDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): LocalizableComboboxItemSourceDto {
    const json = this.toJSON();
    let result = new LocalizableComboboxItemSourceDto();
    result.init(json);
    return result;
  }
}

export class FeatureInputTypeDto {
  name!: string | undefined;
  attributes!: { [key: string]: any } | undefined;
  validator!: IValueValidator;
  itemSource!: LocalizableComboboxItemSourceDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      if (_data['attributes']) {
        this.attributes = {} as any;
        for (let key in _data['attributes']) {
          if (_data['attributes'].hasOwnProperty(key))
            (<any>this.attributes)![key] = _data['attributes'][key];
        }
      }
      this.validator = _data['validator']
        ? IValueValidator.fromJS(_data['validator'], _mappings)
        : <any>undefined;
      this.itemSource = _data['itemSource']
        ? LocalizableComboboxItemSourceDto.fromJS(_data['itemSource'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): FeatureInputTypeDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<FeatureInputTypeDto>(data, _mappings, FeatureInputTypeDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    if (this.attributes) {
      data['attributes'] = {};
      for (let key in this.attributes) {
        if (this.attributes.hasOwnProperty(key))
          (<any>data['attributes'])[key] = this.attributes[key];
      }
    }
    data['validator'] = this.validator ? this.validator.toJSON() : <any>undefined;
    data['itemSource'] = this.itemSource ? this.itemSource.toJSON() : <any>undefined;
    return data;
  }

  clone(): FeatureInputTypeDto {
    const json = this.toJSON();
    let result = new FeatureInputTypeDto();
    result.init(json);
    return result;
  }
}

export class FlatFeatureDto {
  parentName!: string | undefined;
  name!: string | undefined;
  displayName!: string | undefined;
  description!: string | undefined;
  defaultValue!: string | undefined;
  inputType!: FeatureInputTypeDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.parentName = _data['parentName'];
      this.name = _data['name'];
      this.displayName = _data['displayName'];
      this.description = _data['description'];
      this.defaultValue = _data['defaultValue'];
      this.inputType = _data['inputType']
        ? FeatureInputTypeDto.fromJS(_data['inputType'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): FlatFeatureDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<FlatFeatureDto>(data, _mappings, FlatFeatureDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['parentName'] = this.parentName;
    data['name'] = this.name;
    data['displayName'] = this.displayName;
    data['description'] = this.description;
    data['defaultValue'] = this.defaultValue;
    data['inputType'] = this.inputType ? this.inputType.toJSON() : <any>undefined;
    return data;
  }

  clone(): FlatFeatureDto {
    const json = this.toJSON();
    let result = new FlatFeatureDto();
    result.init(json);
    return result;
  }
}

export class GetEditionEditOutput {
  edition!: EditionEditDto;
  featureValues!: NameValueDto[] | undefined;
  features!: FlatFeatureDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.edition = _data['edition']
        ? EditionEditDto.fromJS(_data['edition'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['featureValues'])) {
        this.featureValues = [] as any;
        for (let item of _data['featureValues'])
          this.featureValues!.push(NameValueDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['features'])) {
        this.features = [] as any;
        for (let item of _data['features'])
          this.features!.push(FlatFeatureDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetEditionEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetEditionEditOutput>(data, _mappings, GetEditionEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['edition'] = this.edition ? this.edition.toJSON() : <any>undefined;
    if (Array.isArray(this.featureValues)) {
      data['featureValues'] = [];
      for (let item of this.featureValues) data['featureValues'].push(item.toJSON());
    }
    if (Array.isArray(this.features)) {
      data['features'] = [];
      for (let item of this.features) data['features'].push(item.toJSON());
    }
    return data;
  }

  clone(): GetEditionEditOutput {
    const json = this.toJSON();
    let result = new GetEditionEditOutput();
    result.init(json);
    return result;
  }
}

export class EditionListDto {
  name!: string | undefined;
  displayName!: string | undefined;
  creationTime!: dayjs.Dayjs;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.displayName = _data['displayName'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): EditionListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EditionListDto>(data, _mappings, EditionListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['displayName'] = this.displayName;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['id'] = this.id;
    return data;
  }

  clone(): EditionListDto {
    const json = this.toJSON();
    let result = new EditionListDto();
    result.init(json);
    return result;
  }
}

export class ListResultDtoOfEditionListDto {
  items!: EditionListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(EditionListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ListResultDtoOfEditionListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ListResultDtoOfEditionListDto>(
      data,
      _mappings,
      ListResultDtoOfEditionListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): ListResultDtoOfEditionListDto {
    const json = this.toJSON();
    let result = new ListResultDtoOfEditionListDto();
    result.init(json);
    return result;
  }
}

export class MoveTenantsToAnotherEditionDto {
  sourceEditionId!: number;
  targetEditionId!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.sourceEditionId = _data['sourceEditionId'];
      this.targetEditionId = _data['targetEditionId'];
    }
  }

  static fromJS(data: any, _mappings?: any): MoveTenantsToAnotherEditionDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<MoveTenantsToAnotherEditionDto>(
      data,
      _mappings,
      MoveTenantsToAnotherEditionDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['sourceEditionId'] = this.sourceEditionId;
    data['targetEditionId'] = this.targetEditionId;
    return data;
  }

  clone(): MoveTenantsToAnotherEditionDto {
    const json = this.toJSON();
    let result = new MoveTenantsToAnotherEditionDto();
    result.init(json);
    return result;
  }
}

/** 企业询价的列表DTO Erinyes.CRM.Enquiry */
export class EnquiryEditDto {
  /** Id */
  id!: number | undefined;
  /** 活动编号 */
  billNo!: string | undefined;
  /** 需求标题 */
  title!: string | undefined;
  /** 需求描述 */
  description!: string | undefined;
  /** 申请时间 */
  applyTime!: dayjs.Dayjs;
  /** 现场照片 */
  images!: string | undefined;
  /** 企业名称 */
  entName!: string | undefined;
  /** 联系人 */
  linkName!: string | undefined;
  /** 联系手机 */
  linkPhone!: string | undefined;
  /** Guid标识 */
  guidId!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.billNo = _data['billNo'];
      this.title = _data['title'];
      this.description = _data['description'];
      this.applyTime = _data['applyTime'] ? dayjs(_data['applyTime'].toString()) : <any>undefined;
      this.images = _data['images'];
      this.entName = _data['entName'];
      this.linkName = _data['linkName'];
      this.linkPhone = _data['linkPhone'];
      this.guidId = _data['guidId'];
    }
  }

  static fromJS(data: any, _mappings?: any): EnquiryEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EnquiryEditDto>(data, _mappings, EnquiryEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['billNo'] = this.billNo;
    data['title'] = this.title;
    data['description'] = this.description;
    data['applyTime'] = this.applyTime ? this.applyTime.toISOString() : <any>undefined;
    data['images'] = this.images;
    data['entName'] = this.entName;
    data['linkName'] = this.linkName;
    data['linkPhone'] = this.linkPhone;
    data['guidId'] = this.guidId;
    return data;
  }

  clone(): EnquiryEditDto {
    const json = this.toJSON();
    let result = new EnquiryEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateEnquiryInput {
  enquiry!: EnquiryEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enquiry = _data['enquiry']
        ? EnquiryEditDto.fromJS(_data['enquiry'], _mappings)
        : new EnquiryEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateEnquiryInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateEnquiryInput>(data, _mappings, CreateOrUpdateEnquiryInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enquiry'] = this.enquiry ? this.enquiry.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateEnquiryInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateEnquiryInput();
    result.init(json);
    return result;
  }
}

export enum WinTheBidStateEnum {
  审核中 = '审核中',
  通过 = '通过',
  未通过 = '未通过',
}

export enum BidPromotionTypeEnum {
  整体报价 = '整体报价',
  单个报价 = '单个报价',
}

export class Enquiry_BidHW {
  enquiryBidId!: number | undefined;
  enquiryBid!: Enquiry_Bid;
  bidDescription!: string | undefined;
  unit!: string | undefined;
  minUnitCost!: number | undefined;
  maxUnitCost!: number | undefined;
  needLabReport!: boolean | undefined;
  isWinBid!: boolean | undefined;
  orgId!: number | undefined;
  tenant!: Tenant;
  wasteCode!: string | undefined;
  commonName!: string | undefined;
  yearlyOutput!: number | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enquiryBidId = _data['enquiryBidId'];
      this.enquiryBid = _data['enquiryBid']
        ? Enquiry_Bid.fromJS(_data['enquiryBid'], _mappings)
        : <any>undefined;
      this.bidDescription = _data['bidDescription'];
      this.unit = _data['unit'];
      this.minUnitCost = _data['minUnitCost'];
      this.maxUnitCost = _data['maxUnitCost'];
      this.needLabReport = _data['needLabReport'];
      this.isWinBid = _data['isWinBid'];
      this.orgId = _data['orgId'];
      this.tenant = _data['tenant'] ? Tenant.fromJS(_data['tenant'], _mappings) : <any>undefined;
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Enquiry_BidHW | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Enquiry_BidHW>(data, _mappings, Enquiry_BidHW);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enquiryBidId'] = this.enquiryBidId;
    data['enquiryBid'] = this.enquiryBid ? this.enquiryBid.toJSON() : <any>undefined;
    data['bidDescription'] = this.bidDescription;
    data['unit'] = this.unit;
    data['minUnitCost'] = this.minUnitCost;
    data['maxUnitCost'] = this.maxUnitCost;
    data['needLabReport'] = this.needLabReport;
    data['isWinBid'] = this.isWinBid;
    data['orgId'] = this.orgId;
    data['tenant'] = this.tenant ? this.tenant.toJSON() : <any>undefined;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Enquiry_BidHW {
    const json = this.toJSON();
    let result = new Enquiry_BidHW();
    result.init(json);
    return result;
  }
}

export class Enquiry_Bid {
  enquiryId!: number | undefined;
  enquiry!: Enquiry;
  bidDescription!: string | undefined;
  unit!: string | undefined;
  minUnitCost!: number | undefined;
  maxUnitCost!: number | undefined;
  needLabReport!: boolean | undefined;
  isWinBid!: boolean | undefined;
  winTheBidState!: WinTheBidStateEnum;
  orgId!: number | undefined;
  tenant!: Tenant;
  bidPromotionType!: BidPromotionTypeEnum;
  readonly enquiry_BidHWs!: Enquiry_BidHW[] | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enquiryId = _data['enquiryId'];
      this.enquiry = _data['enquiry']
        ? Enquiry.fromJS(_data['enquiry'], _mappings)
        : <any>undefined;
      this.bidDescription = _data['bidDescription'];
      this.unit = _data['unit'];
      this.minUnitCost = _data['minUnitCost'];
      this.maxUnitCost = _data['maxUnitCost'];
      this.needLabReport = _data['needLabReport'];
      this.isWinBid = _data['isWinBid'];
      this.winTheBidState = _data['winTheBidState'];
      this.orgId = _data['orgId'];
      this.tenant = _data['tenant'] ? Tenant.fromJS(_data['tenant'], _mappings) : <any>undefined;
      this.bidPromotionType = _data['bidPromotionType'];
      if (Array.isArray(_data['enquiry_BidHWs'])) {
        (<any>this).enquiry_BidHWs = [] as any;
        for (let item of _data['enquiry_BidHWs'])
          (<any>this).enquiry_BidHWs!.push(Enquiry_BidHW.fromJS(item, _mappings));
      }
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Enquiry_Bid | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Enquiry_Bid>(data, _mappings, Enquiry_Bid);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enquiryId'] = this.enquiryId;
    data['enquiry'] = this.enquiry ? this.enquiry.toJSON() : <any>undefined;
    data['bidDescription'] = this.bidDescription;
    data['unit'] = this.unit;
    data['minUnitCost'] = this.minUnitCost;
    data['maxUnitCost'] = this.maxUnitCost;
    data['needLabReport'] = this.needLabReport;
    data['isWinBid'] = this.isWinBid;
    data['winTheBidState'] = this.winTheBidState;
    data['orgId'] = this.orgId;
    data['tenant'] = this.tenant ? this.tenant.toJSON() : <any>undefined;
    data['bidPromotionType'] = this.bidPromotionType;
    if (Array.isArray(this.enquiry_BidHWs)) {
      data['enquiry_BidHWs'] = [];
      for (let item of this.enquiry_BidHWs) data['enquiry_BidHWs'].push(item.toJSON());
    }
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Enquiry_Bid {
    const json = this.toJSON();
    let result = new Enquiry_Bid();
    result.init(json);
    return result;
  }
}

export class Enquiry {
  billNo!: string | undefined;
  title!: string | undefined;
  description!: string | undefined;
  applyTime!: dayjs.Dayjs;
  images!: string | undefined;
  entName!: string | undefined;
  linkName!: string | undefined;
  linkPhone!: string | undefined;
  guidId!: string | undefined;
  readonly enquiry_HWs!: Enquiry_HW[] | undefined;
  readonly enquiry_Bids!: Enquiry_Bid[] | undefined;
  orgId!: number | undefined;
  isWinBid!: boolean;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.billNo = _data['billNo'];
      this.title = _data['title'];
      this.description = _data['description'];
      this.applyTime = _data['applyTime'] ? dayjs(_data['applyTime'].toString()) : <any>undefined;
      this.images = _data['images'];
      this.entName = _data['entName'];
      this.linkName = _data['linkName'];
      this.linkPhone = _data['linkPhone'];
      this.guidId = _data['guidId'];
      if (Array.isArray(_data['enquiry_HWs'])) {
        (<any>this).enquiry_HWs = [] as any;
        for (let item of _data['enquiry_HWs'])
          (<any>this).enquiry_HWs!.push(Enquiry_HW.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['enquiry_Bids'])) {
        (<any>this).enquiry_Bids = [] as any;
        for (let item of _data['enquiry_Bids'])
          (<any>this).enquiry_Bids!.push(Enquiry_Bid.fromJS(item, _mappings));
      }
      this.orgId = _data['orgId'];
      this.isWinBid = _data['isWinBid'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Enquiry | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Enquiry>(data, _mappings, Enquiry);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['billNo'] = this.billNo;
    data['title'] = this.title;
    data['description'] = this.description;
    data['applyTime'] = this.applyTime ? this.applyTime.toISOString() : <any>undefined;
    data['images'] = this.images;
    data['entName'] = this.entName;
    data['linkName'] = this.linkName;
    data['linkPhone'] = this.linkPhone;
    data['guidId'] = this.guidId;
    if (Array.isArray(this.enquiry_HWs)) {
      data['enquiry_HWs'] = [];
      for (let item of this.enquiry_HWs) data['enquiry_HWs'].push(item.toJSON());
    }
    if (Array.isArray(this.enquiry_Bids)) {
      data['enquiry_Bids'] = [];
      for (let item of this.enquiry_Bids) data['enquiry_Bids'].push(item.toJSON());
    }
    data['orgId'] = this.orgId;
    data['isWinBid'] = this.isWinBid;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Enquiry {
    const json = this.toJSON();
    let result = new Enquiry();
    result.init(json);
    return result;
  }
}

export class Enquiry_HW {
  enquiryId!: number | undefined;
  enquiry!: Enquiry;
  wasteCode!: string | undefined;
  commonName!: string | undefined;
  yearlyOutput!: number | undefined;
  unit!: string | undefined;
  orgId!: number | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enquiryId = _data['enquiryId'];
      this.enquiry = _data['enquiry']
        ? Enquiry.fromJS(_data['enquiry'], _mappings)
        : <any>undefined;
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.unit = _data['unit'];
      this.orgId = _data['orgId'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Enquiry_HW | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Enquiry_HW>(data, _mappings, Enquiry_HW);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enquiryId'] = this.enquiryId;
    data['enquiry'] = this.enquiry ? this.enquiry.toJSON() : <any>undefined;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['unit'] = this.unit;
    data['orgId'] = this.orgId;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Enquiry_HW {
    const json = this.toJSON();
    let result = new Enquiry_HW();
    result.init(json);
    return result;
  }
}

export class Enquiry_BidDto {
  /** 报价单外键 */
  enquiryBidId!: number;
  /** 报价单危废外键 */
  enquiryBidHWId!: number | undefined;
  winTheBidState!: WinTheBidStateEnum;
  bidPromotionType!: BidPromotionTypeEnum;
  /** 是否中标 */
  isWinBid!: boolean | undefined;
  bidDescription!: string | undefined;
  /** 最少单价 */
  minUnitCost!: number | undefined;
  /** 最多单价 */
  maxUnitCost!: number | undefined;
  /** 需要化验单 */
  needLabReport!: boolean | undefined;
  /** 危废编码 */
  wasteCode!: string | undefined;
  /** 危废俗称 */
  commonName!: string | undefined;
  /** 年产量 */
  yearlyOutput!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 危废信息 */
  hwNames!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enquiryBidId = _data['enquiryBidId'];
      this.enquiryBidHWId = _data['enquiryBidHWId'];
      this.winTheBidState = _data['winTheBidState'];
      this.bidPromotionType = _data['bidPromotionType'];
      this.isWinBid = _data['isWinBid'];
      this.bidDescription = _data['bidDescription'];
      this.minUnitCost = _data['minUnitCost'];
      this.maxUnitCost = _data['maxUnitCost'];
      this.needLabReport = _data['needLabReport'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.unit = _data['unit'];
      this.hwNames = _data['hwNames'];
    }
  }

  static fromJS(data: any, _mappings?: any): Enquiry_BidDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Enquiry_BidDto>(data, _mappings, Enquiry_BidDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enquiryBidId'] = this.enquiryBidId;
    data['enquiryBidHWId'] = this.enquiryBidHWId;
    data['winTheBidState'] = this.winTheBidState;
    data['bidPromotionType'] = this.bidPromotionType;
    data['isWinBid'] = this.isWinBid;
    data['bidDescription'] = this.bidDescription;
    data['minUnitCost'] = this.minUnitCost;
    data['maxUnitCost'] = this.maxUnitCost;
    data['needLabReport'] = this.needLabReport;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['unit'] = this.unit;
    data['hwNames'] = this.hwNames;
    return data;
  }

  clone(): Enquiry_BidDto {
    const json = this.toJSON();
    let result = new Enquiry_BidDto();
    result.init(json);
    return result;
  }
}

/** 企业询价的列表DTO Erinyes.CRM.Enquiry */
export class EnquiryListDto {
  id!: number;
  /** 活动编号 */
  billNo!: string | undefined;
  /** 需求标题 */
  title!: string | undefined;
  /** 需求描述 */
  description!: string | undefined;
  /** 申请时间 */
  applyTime!: dayjs.Dayjs;
  /** 现场照片 */
  images!: string | undefined;
  /** 企业名称 */
  entName!: string | undefined;
  /** 联系人 */
  linkName!: string | undefined;
  /** 联系手机 */
  linkPhone!: string | undefined;
  /** Guid标识 */
  guidId!: string | undefined;
  /** 询价危废信息 */
  enquiry_HWs!: Enquiry_HW[] | undefined;
  /** 询价竞价信息 */
  enquiry_Bids!: Enquiry_Bid[] | undefined;
  /** 是否中标 */
  isWinBid!: boolean;
  /** 能否竞价  false  不可以  true 可以 */
  isCanBid!: boolean;
  /** 重量 */
  weight!: number | undefined;
  enquiryBidInfo!: Enquiry_BidDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.billNo = _data['billNo'];
      this.title = _data['title'];
      this.description = _data['description'];
      this.applyTime = _data['applyTime'] ? dayjs(_data['applyTime'].toString()) : <any>undefined;
      this.images = _data['images'];
      this.entName = _data['entName'];
      this.linkName = _data['linkName'];
      this.linkPhone = _data['linkPhone'];
      this.guidId = _data['guidId'];
      if (Array.isArray(_data['enquiry_HWs'])) {
        this.enquiry_HWs = [] as any;
        for (let item of _data['enquiry_HWs'])
          this.enquiry_HWs!.push(Enquiry_HW.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['enquiry_Bids'])) {
        this.enquiry_Bids = [] as any;
        for (let item of _data['enquiry_Bids'])
          this.enquiry_Bids!.push(Enquiry_Bid.fromJS(item, _mappings));
      }
      this.isWinBid = _data['isWinBid'];
      this.isCanBid = _data['isCanBid'];
      this.weight = _data['weight'];
      this.enquiryBidInfo = _data['enquiryBidInfo']
        ? Enquiry_BidDto.fromJS(_data['enquiryBidInfo'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): EnquiryListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EnquiryListDto>(data, _mappings, EnquiryListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['billNo'] = this.billNo;
    data['title'] = this.title;
    data['description'] = this.description;
    data['applyTime'] = this.applyTime ? this.applyTime.toISOString() : <any>undefined;
    data['images'] = this.images;
    data['entName'] = this.entName;
    data['linkName'] = this.linkName;
    data['linkPhone'] = this.linkPhone;
    data['guidId'] = this.guidId;
    if (Array.isArray(this.enquiry_HWs)) {
      data['enquiry_HWs'] = [];
      for (let item of this.enquiry_HWs) data['enquiry_HWs'].push(item.toJSON());
    }
    if (Array.isArray(this.enquiry_Bids)) {
      data['enquiry_Bids'] = [];
      for (let item of this.enquiry_Bids) data['enquiry_Bids'].push(item.toJSON());
    }
    data['isWinBid'] = this.isWinBid;
    data['isCanBid'] = this.isCanBid;
    data['weight'] = this.weight;
    data['enquiryBidInfo'] = this.enquiryBidInfo ? this.enquiryBidInfo.toJSON() : <any>undefined;
    return data;
  }

  clone(): EnquiryListDto {
    const json = this.toJSON();
    let result = new EnquiryListDto();
    result.init(json);
    return result;
  }
}

/** 企业询价危废信息的列表DTO Erinyes.CRM.Enquiry_HW */
export class Enquiry_HWListDto {
  id!: number;
  /** 询价外键 */
  enquiryId!: number | undefined;
  enquiry!: Enquiry;
  /** 废物大类 */
  wasteType!: string | undefined;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 年产量 */
  yearlyOutput!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  hwBidRecord!: Enquiry_BidHW;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.enquiryId = _data['enquiryId'];
      this.enquiry = _data['enquiry']
        ? Enquiry.fromJS(_data['enquiry'], _mappings)
        : <any>undefined;
      this.wasteType = _data['wasteType'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.unit = _data['unit'];
      this.hwBidRecord = _data['hwBidRecord']
        ? Enquiry_BidHW.fromJS(_data['hwBidRecord'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): Enquiry_HWListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Enquiry_HWListDto>(data, _mappings, Enquiry_HWListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['enquiryId'] = this.enquiryId;
    data['enquiry'] = this.enquiry ? this.enquiry.toJSON() : <any>undefined;
    data['wasteType'] = this.wasteType;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['unit'] = this.unit;
    data['hwBidRecord'] = this.hwBidRecord ? this.hwBidRecord.toJSON() : <any>undefined;
    return data;
  }

  clone(): Enquiry_HWListDto {
    const json = this.toJSON();
    let result = new Enquiry_HWListDto();
    result.init(json);
    return result;
  }
}

export class EnquiryDetailListDto {
  id!: number;
  /** 活动编号 */
  billNo!: string | undefined;
  /** 需求标题 */
  title!: string | undefined;
  /** 需求描述 */
  description!: string | undefined;
  /** 申请时间 */
  applyTime!: dayjs.Dayjs;
  /** 现场照片 */
  images!: string | undefined;
  /** 企业名称 */
  entName!: string | undefined;
  /** 联系人 */
  linkName!: string | undefined;
  /** 联系手机 */
  linkPhone!: string | undefined;
  /** 是否中标 */
  isWinBid!: boolean;
  /** 询价危废信息 */
  enquiry_HWs!: Enquiry_HWListDto[] | undefined;
  /** 能否竞价  false  不可以  true 可以 */
  isCanBid!: boolean;
  enquiryBidInfo!: Enquiry_BidDto;
  enquiry_Bids!: Enquiry_Bid[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.billNo = _data['billNo'];
      this.title = _data['title'];
      this.description = _data['description'];
      this.applyTime = _data['applyTime'] ? dayjs(_data['applyTime'].toString()) : <any>undefined;
      this.images = _data['images'];
      this.entName = _data['entName'];
      this.linkName = _data['linkName'];
      this.linkPhone = _data['linkPhone'];
      this.isWinBid = _data['isWinBid'];
      if (Array.isArray(_data['enquiry_HWs'])) {
        this.enquiry_HWs = [] as any;
        for (let item of _data['enquiry_HWs'])
          this.enquiry_HWs!.push(Enquiry_HWListDto.fromJS(item, _mappings));
      }
      this.isCanBid = _data['isCanBid'];
      this.enquiryBidInfo = _data['enquiryBidInfo']
        ? Enquiry_BidDto.fromJS(_data['enquiryBidInfo'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['enquiry_Bids'])) {
        this.enquiry_Bids = [] as any;
        for (let item of _data['enquiry_Bids'])
          this.enquiry_Bids!.push(Enquiry_Bid.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): EnquiryDetailListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EnquiryDetailListDto>(data, _mappings, EnquiryDetailListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['billNo'] = this.billNo;
    data['title'] = this.title;
    data['description'] = this.description;
    data['applyTime'] = this.applyTime ? this.applyTime.toISOString() : <any>undefined;
    data['images'] = this.images;
    data['entName'] = this.entName;
    data['linkName'] = this.linkName;
    data['linkPhone'] = this.linkPhone;
    data['isWinBid'] = this.isWinBid;
    if (Array.isArray(this.enquiry_HWs)) {
      data['enquiry_HWs'] = [];
      for (let item of this.enquiry_HWs) data['enquiry_HWs'].push(item.toJSON());
    }
    data['isCanBid'] = this.isCanBid;
    data['enquiryBidInfo'] = this.enquiryBidInfo ? this.enquiryBidInfo.toJSON() : <any>undefined;
    if (Array.isArray(this.enquiry_Bids)) {
      data['enquiry_Bids'] = [];
      for (let item of this.enquiry_Bids) data['enquiry_Bids'].push(item.toJSON());
    }
    return data;
  }

  clone(): EnquiryDetailListDto {
    const json = this.toJSON();
    let result = new EnquiryDetailListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑企业询价的Dto */
export class GetEnquiryForEditOutput {
  enquiry!: EnquiryEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enquiry = _data['enquiry']
        ? EnquiryEditDto.fromJS(_data['enquiry'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetEnquiryForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetEnquiryForEditOutput>(data, _mappings, GetEnquiryForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enquiry'] = this.enquiry ? this.enquiry.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetEnquiryForEditOutput {
    const json = this.toJSON();
    let result = new GetEnquiryForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfEnquiryListDto {
  totalCount!: number;
  items!: EnquiryListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(EnquiryListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfEnquiryListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfEnquiryListDto>(
      data,
      _mappings,
      PagedResultDtoOfEnquiryListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfEnquiryListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfEnquiryListDto();
    result.init(json);
    return result;
  }
}

/** 产废企业报价的列表DTO Erinyes.CRM.Enquiry_Bid */
export class Enquiry_BidEditDto {
  /** Id */
  id!: number | undefined;
  /** 询价单外键 */
  enquiryId!: number | undefined;
  enquiry!: Enquiry;
  /** 报价说明 */
  bidDescription!: string | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 最少单价 */
  minUnitCost!: number | undefined;
  /** 最多单价 */
  maxUnitCost!: number | undefined;
  /** 需要化验单 */
  needLabReport!: boolean | undefined;
  /** 是否中标 */
  isWinBid!: boolean | undefined;
  tenant!: Tenant;
  winTheBidState!: WinTheBidStateEnum;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.enquiryId = _data['enquiryId'];
      this.enquiry = _data['enquiry']
        ? Enquiry.fromJS(_data['enquiry'], _mappings)
        : <any>undefined;
      this.bidDescription = _data['bidDescription'];
      this.unit = _data['unit'];
      this.minUnitCost = _data['minUnitCost'];
      this.maxUnitCost = _data['maxUnitCost'];
      this.needLabReport = _data['needLabReport'];
      this.isWinBid = _data['isWinBid'];
      this.tenant = _data['tenant'] ? Tenant.fromJS(_data['tenant'], _mappings) : <any>undefined;
      this.winTheBidState = _data['winTheBidState'];
    }
  }

  static fromJS(data: any, _mappings?: any): Enquiry_BidEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Enquiry_BidEditDto>(data, _mappings, Enquiry_BidEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['enquiryId'] = this.enquiryId;
    data['enquiry'] = this.enquiry ? this.enquiry.toJSON() : <any>undefined;
    data['bidDescription'] = this.bidDescription;
    data['unit'] = this.unit;
    data['minUnitCost'] = this.minUnitCost;
    data['maxUnitCost'] = this.maxUnitCost;
    data['needLabReport'] = this.needLabReport;
    data['isWinBid'] = this.isWinBid;
    data['tenant'] = this.tenant ? this.tenant.toJSON() : <any>undefined;
    data['winTheBidState'] = this.winTheBidState;
    return data;
  }

  clone(): Enquiry_BidEditDto {
    const json = this.toJSON();
    let result = new Enquiry_BidEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateEnquiry_BidInput {
  enquiry_Bid!: Enquiry_BidEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enquiry_Bid = _data['enquiry_Bid']
        ? Enquiry_BidEditDto.fromJS(_data['enquiry_Bid'], _mappings)
        : new Enquiry_BidEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateEnquiry_BidInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateEnquiry_BidInput>(
      data,
      _mappings,
      CreateOrUpdateEnquiry_BidInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enquiry_Bid'] = this.enquiry_Bid ? this.enquiry_Bid.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateEnquiry_BidInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateEnquiry_BidInput();
    result.init(json);
    return result;
  }
}

/** 产废企业报价的列表DTO Erinyes.CRM.Enquiry_Bid */
export class EnquiryBidEditDto {
  /** 询价单外键 */
  enquiryId!: number;
  /** 询价报价外键 */
  enquiryBidId!: number | undefined;
  bidPromotionType!: BidPromotionTypeEnum;
  /** 危废IDs */
  enquiryHWIds!: number[] | undefined;
  /** 报价说明 */
  bidDescription!: string | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 最少单价 */
  minUnitCost!: number | undefined;
  /** 最多单价 */
  maxUnitCost!: number | undefined;
  /** 需要化验单 */
  needLabReport!: boolean | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enquiryId = _data['enquiryId'];
      this.enquiryBidId = _data['enquiryBidId'];
      this.bidPromotionType = _data['bidPromotionType'];
      if (Array.isArray(_data['enquiryHWIds'])) {
        this.enquiryHWIds = [] as any;
        for (let item of _data['enquiryHWIds']) this.enquiryHWIds!.push(item);
      }
      this.bidDescription = _data['bidDescription'];
      this.unit = _data['unit'];
      this.minUnitCost = _data['minUnitCost'];
      this.maxUnitCost = _data['maxUnitCost'];
      this.needLabReport = _data['needLabReport'];
    }
  }

  static fromJS(data: any, _mappings?: any): EnquiryBidEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EnquiryBidEditDto>(data, _mappings, EnquiryBidEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enquiryId'] = this.enquiryId;
    data['enquiryBidId'] = this.enquiryBidId;
    data['bidPromotionType'] = this.bidPromotionType;
    if (Array.isArray(this.enquiryHWIds)) {
      data['enquiryHWIds'] = [];
      for (let item of this.enquiryHWIds) data['enquiryHWIds'].push(item);
    }
    data['bidDescription'] = this.bidDescription;
    data['unit'] = this.unit;
    data['minUnitCost'] = this.minUnitCost;
    data['maxUnitCost'] = this.maxUnitCost;
    data['needLabReport'] = this.needLabReport;
    return data;
  }

  clone(): EnquiryBidEditDto {
    const json = this.toJSON();
    let result = new EnquiryBidEditDto();
    result.init(json);
    return result;
  }
}

/** 产废企业报价的列表DTO Erinyes.CRM.Enquiry_Bid */
export class Enquiry_BidListDto {
  id!: number;
  /** 询价单外键 */
  enquiryId!: number | undefined;
  /** 询价危废信息 */
  enquiry_HWs!: Enquiry_HW[] | undefined;
  enquiry!: Enquiry;
  /** 报价说明 */
  bidDescription!: string | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 最少单价 */
  minUnitCost!: number | undefined;
  /** 最多单价 */
  maxUnitCost!: number | undefined;
  /** 需要化验单 */
  needLabReport!: boolean | undefined;
  /** 是否中标 */
  isWinBid!: boolean | undefined;
  tenant!: Tenant;
  /** 报价时间 */
  creationTime!: dayjs.Dayjs;
  winTheBidState!: WinTheBidStateEnum;
  bidPromotionType!: BidPromotionTypeEnum;
  /** 询价竞价危废信息 */
  enquiry_BidHWs!: Enquiry_BidHW[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.enquiryId = _data['enquiryId'];
      if (Array.isArray(_data['enquiry_HWs'])) {
        this.enquiry_HWs = [] as any;
        for (let item of _data['enquiry_HWs'])
          this.enquiry_HWs!.push(Enquiry_HW.fromJS(item, _mappings));
      }
      this.enquiry = _data['enquiry']
        ? Enquiry.fromJS(_data['enquiry'], _mappings)
        : <any>undefined;
      this.bidDescription = _data['bidDescription'];
      this.unit = _data['unit'];
      this.minUnitCost = _data['minUnitCost'];
      this.maxUnitCost = _data['maxUnitCost'];
      this.needLabReport = _data['needLabReport'];
      this.isWinBid = _data['isWinBid'];
      this.tenant = _data['tenant'] ? Tenant.fromJS(_data['tenant'], _mappings) : <any>undefined;
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.winTheBidState = _data['winTheBidState'];
      this.bidPromotionType = _data['bidPromotionType'];
      if (Array.isArray(_data['enquiry_BidHWs'])) {
        this.enquiry_BidHWs = [] as any;
        for (let item of _data['enquiry_BidHWs'])
          this.enquiry_BidHWs!.push(Enquiry_BidHW.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): Enquiry_BidListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Enquiry_BidListDto>(data, _mappings, Enquiry_BidListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['enquiryId'] = this.enquiryId;
    if (Array.isArray(this.enquiry_HWs)) {
      data['enquiry_HWs'] = [];
      for (let item of this.enquiry_HWs) data['enquiry_HWs'].push(item.toJSON());
    }
    data['enquiry'] = this.enquiry ? this.enquiry.toJSON() : <any>undefined;
    data['bidDescription'] = this.bidDescription;
    data['unit'] = this.unit;
    data['minUnitCost'] = this.minUnitCost;
    data['maxUnitCost'] = this.maxUnitCost;
    data['needLabReport'] = this.needLabReport;
    data['isWinBid'] = this.isWinBid;
    data['tenant'] = this.tenant ? this.tenant.toJSON() : <any>undefined;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['winTheBidState'] = this.winTheBidState;
    data['bidPromotionType'] = this.bidPromotionType;
    if (Array.isArray(this.enquiry_BidHWs)) {
      data['enquiry_BidHWs'] = [];
      for (let item of this.enquiry_BidHWs) data['enquiry_BidHWs'].push(item.toJSON());
    }
    return data;
  }

  clone(): Enquiry_BidListDto {
    const json = this.toJSON();
    let result = new Enquiry_BidListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑产废企业报价的Dto */
export class GetEnquiry_BidForEditOutput {
  enquiry_Bid!: Enquiry_BidEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enquiry_Bid = _data['enquiry_Bid']
        ? Enquiry_BidEditDto.fromJS(_data['enquiry_Bid'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetEnquiry_BidForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetEnquiry_BidForEditOutput>(
      data,
      _mappings,
      GetEnquiry_BidForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enquiry_Bid'] = this.enquiry_Bid ? this.enquiry_Bid.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetEnquiry_BidForEditOutput {
    const json = this.toJSON();
    let result = new GetEnquiry_BidForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfEnquiry_BidListDto {
  totalCount!: number;
  items!: Enquiry_BidListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Enquiry_BidListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfEnquiry_BidListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfEnquiry_BidListDto>(
      data,
      _mappings,
      PagedResultDtoOfEnquiry_BidListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfEnquiry_BidListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfEnquiry_BidListDto();
    result.init(json);
    return result;
  }
}

/** 企业询价危废信息的列表DTO Erinyes.CRM.Enquiry_HW */
export class Enquiry_HWEditDto {
  /** Id */
  id!: number | undefined;
  /** 询价外键 */
  enquiryId!: number | undefined;
  enquiry!: Enquiry;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 年产量 */
  yearlyOutput!: number | undefined;
  /** 单位 */
  unit!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.enquiryId = _data['enquiryId'];
      this.enquiry = _data['enquiry']
        ? Enquiry.fromJS(_data['enquiry'], _mappings)
        : <any>undefined;
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.unit = _data['unit'];
    }
  }

  static fromJS(data: any, _mappings?: any): Enquiry_HWEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Enquiry_HWEditDto>(data, _mappings, Enquiry_HWEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['enquiryId'] = this.enquiryId;
    data['enquiry'] = this.enquiry ? this.enquiry.toJSON() : <any>undefined;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['unit'] = this.unit;
    return data;
  }

  clone(): Enquiry_HWEditDto {
    const json = this.toJSON();
    let result = new Enquiry_HWEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateEnquiry_HWInput {
  enquiry_HW!: Enquiry_HWEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enquiry_HW = _data['enquiry_HW']
        ? Enquiry_HWEditDto.fromJS(_data['enquiry_HW'], _mappings)
        : new Enquiry_HWEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateEnquiry_HWInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateEnquiry_HWInput>(
      data,
      _mappings,
      CreateOrUpdateEnquiry_HWInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enquiry_HW'] = this.enquiry_HW ? this.enquiry_HW.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateEnquiry_HWInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateEnquiry_HWInput();
    result.init(json);
    return result;
  }
}

/** 读取可编辑企业询价危废信息的Dto */
export class GetEnquiry_HWForEditOutput {
  enquiry_HW!: Enquiry_HWEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.enquiry_HW = _data['enquiry_HW']
        ? Enquiry_HWEditDto.fromJS(_data['enquiry_HW'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetEnquiry_HWForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetEnquiry_HWForEditOutput>(data, _mappings, GetEnquiry_HWForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['enquiry_HW'] = this.enquiry_HW ? this.enquiry_HW.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetEnquiry_HWForEditOutput {
    const json = this.toJSON();
    let result = new GetEnquiry_HWForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfEnquiry_HWListDto {
  totalCount!: number;
  items!: Enquiry_HWListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Enquiry_HWListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfEnquiry_HWListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfEnquiry_HWListDto>(
      data,
      _mappings,
      PagedResultDtoOfEnquiry_HWListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfEnquiry_HWListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfEnquiry_HWListDto();
    result.init(json);
    return result;
  }
}

export class T {
  init(_data?: any, _mappings?: any) {}

  static fromJS(data: any, _mappings?: any): T | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<T>(data, _mappings, T);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    return data;
  }

  clone(): T {
    const json = this.toJSON();
    let result = new T();
    result.init(json);
    return result;
  }
}

export class GaodeResponsepath {
  distance!: number;
  duration!: number;
  restriction!: number;
  steps!: T[] | undefined;
  strategy!: string | undefined;
  toll_distance!: number;
  tolls!: number;
  traffic_lights!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.distance = _data['distance'];
      this.duration = _data['duration'];
      this.restriction = _data['restriction'];
      if (Array.isArray(_data['steps'])) {
        this.steps = [] as any;
        for (let item of _data['steps']) this.steps!.push(T.fromJS(item, _mappings));
      }
      this.strategy = _data['strategy'];
      this.toll_distance = _data['toll_distance'];
      this.tolls = _data['tolls'];
      this.traffic_lights = _data['traffic_lights'];
    }
  }

  static fromJS(data: any, _mappings?: any): GaodeResponsepath | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GaodeResponsepath>(data, _mappings, GaodeResponsepath);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['distance'] = this.distance;
    data['duration'] = this.duration;
    data['restriction'] = this.restriction;
    if (Array.isArray(this.steps)) {
      data['steps'] = [];
      for (let item of this.steps) data['steps'].push(item.toJSON());
    }
    data['strategy'] = this.strategy;
    data['toll_distance'] = this.toll_distance;
    data['tolls'] = this.tolls;
    data['traffic_lights'] = this.traffic_lights;
    return data;
  }

  clone(): GaodeResponsepath {
    const json = this.toJSON();
    let result = new GaodeResponsepath();
    result.init(json);
    return result;
  }
}

export class GaodeResponseRoute {
  origin!: string | undefined;
  destination!: string | undefined;
  paths!: GaodeResponsepath[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.origin = _data['origin'];
      this.destination = _data['destination'];
      if (Array.isArray(_data['paths'])) {
        this.paths = [] as any;
        for (let item of _data['paths'])
          this.paths!.push(GaodeResponsepath.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GaodeResponseRoute | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GaodeResponseRoute>(data, _mappings, GaodeResponseRoute);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['origin'] = this.origin;
    data['destination'] = this.destination;
    if (Array.isArray(this.paths)) {
      data['paths'] = [];
      for (let item of this.paths) data['paths'].push(item.toJSON());
    }
    return data;
  }

  clone(): GaodeResponseRoute {
    const json = this.toJSON();
    let result = new GaodeResponseRoute();
    result.init(json);
    return result;
  }
}

export class GaodeResponseData {
  route!: GaodeResponseRoute;
  count!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.route = _data['route']
        ? GaodeResponseRoute.fromJS(_data['route'], _mappings)
        : <any>undefined;
      this.count = _data['count'];
    }
  }

  static fromJS(data: any, _mappings?: any): GaodeResponseData | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GaodeResponseData>(data, _mappings, GaodeResponseData);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['route'] = this.route ? this.route.toJSON() : <any>undefined;
    data['count'] = this.count;
    return data;
  }

  clone(): GaodeResponseData {
    const json = this.toJSON();
    let result = new GaodeResponseData();
    result.init(json);
    return result;
  }
}

export class GaodeResponse {
  data!: GaodeResponseData;
  errcode!: number;
  errdetail!: string | undefined;
  errmsg!: string | undefined;
  ext!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.data = _data['data']
        ? GaodeResponseData.fromJS(_data['data'], _mappings)
        : <any>undefined;
      this.errcode = _data['errcode'];
      this.errdetail = _data['errdetail'];
      this.errmsg = _data['errmsg'];
      this.ext = _data['ext'];
    }
  }

  static fromJS(data: any, _mappings?: any): GaodeResponse | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GaodeResponse>(data, _mappings, GaodeResponse);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['data'] = this.data ? this.data.toJSON() : <any>undefined;
    data['errcode'] = this.errcode;
    data['errdetail'] = this.errdetail;
    data['errmsg'] = this.errmsg;
    data['ext'] = this.ext;
    return data;
  }

  clone(): GaodeResponse {
    const json = this.toJSON();
    let result = new GaodeResponse();
    result.init(json);
    return result;
  }
}

/** GPS的列表DTO !:GPS */
export class GPSListDto {
  id!: number;
  /** 车辆Id */
  vehicleId!: number | undefined;
  /** 车牌号 */
  vehicleNumber!: string | undefined;
  /** 定位时间 */
  positionTime!: dayjs.Dayjs;
  /** 接收时间 */
  receiveTime!: dayjs.Dayjs;
  /** 入网时间 */
  joinNetworkTime!: dayjs.Dayjs;
  /** 经度 */
  longitude!: number;
  /** 纬度 */
  latitude!: number;
  /** 海拔 */
  seaPull!: number;
  /** 方向 */
  direction!: number;
  /** 速度(公里/小时) */
  speed!: number;
  /** 状态(点火,定位) */
  state!: string | undefined;
  /** 地理位置 */
  location!: string | undefined;
  /** GPS ID */
  carId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.vehicleId = _data['vehicleId'];
      this.vehicleNumber = _data['vehicleNumber'];
      this.positionTime = _data['positionTime']
        ? dayjs(_data['positionTime'].toString())
        : <any>undefined;
      this.receiveTime = _data['receiveTime']
        ? dayjs(_data['receiveTime'].toString())
        : <any>undefined;
      this.joinNetworkTime = _data['joinNetworkTime']
        ? dayjs(_data['joinNetworkTime'].toString())
        : <any>undefined;
      this.longitude = _data['longitude'];
      this.latitude = _data['latitude'];
      this.seaPull = _data['seaPull'];
      this.direction = _data['direction'];
      this.speed = _data['speed'];
      this.state = _data['state'];
      this.location = _data['location'];
      this.carId = _data['carId'];
    }
  }

  static fromJS(data: any, _mappings?: any): GPSListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GPSListDto>(data, _mappings, GPSListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['vehicleId'] = this.vehicleId;
    data['vehicleNumber'] = this.vehicleNumber;
    data['positionTime'] = this.positionTime ? this.positionTime.toISOString() : <any>undefined;
    data['receiveTime'] = this.receiveTime ? this.receiveTime.toISOString() : <any>undefined;
    data['joinNetworkTime'] = this.joinNetworkTime
      ? this.joinNetworkTime.toISOString()
      : <any>undefined;
    data['longitude'] = this.longitude;
    data['latitude'] = this.latitude;
    data['seaPull'] = this.seaPull;
    data['direction'] = this.direction;
    data['speed'] = this.speed;
    data['state'] = this.state;
    data['location'] = this.location;
    data['carId'] = this.carId;
    return data;
  }

  clone(): GPSListDto {
    const json = this.toJSON();
    let result = new GPSListDto();
    result.init(json);
    return result;
  }
}

export class EntityDtoOfString {
  id!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): EntityDtoOfString | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EntityDtoOfString>(data, _mappings, EntityDtoOfString);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    return data;
  }

  clone(): EntityDtoOfString {
    const json = this.toJSON();
    let result = new EntityDtoOfString();
    result.init(json);
    return result;
  }
}

export class HostCacheDto {
  name!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
    }
  }

  static fromJS(data: any, _mappings?: any): HostCacheDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<HostCacheDto>(data, _mappings, HostCacheDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    return data;
  }

  clone(): HostCacheDto {
    const json = this.toJSON();
    let result = new HostCacheDto();
    result.init(json);
    return result;
  }
}

export class ListResultDtoOfHostCacheDto {
  items!: HostCacheDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(HostCacheDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ListResultDtoOfHostCacheDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ListResultDtoOfHostCacheDto>(
      data,
      _mappings,
      ListResultDtoOfHostCacheDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): ListResultDtoOfHostCacheDto {
    const json = this.toJSON();
    let result = new ListResultDtoOfHostCacheDto();
    result.init(json);
    return result;
  }
}

export class GeneralSettingsEditDto {
  /** 时区 */
  timezone!: string | undefined;
  /** 这个字段只用于比较用户的时区与默认时区 */
  timezoneForComparison!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.timezone = _data['timezone'];
      this.timezoneForComparison = _data['timezoneForComparison'];
    }
  }

  static fromJS(data: any, _mappings?: any): GeneralSettingsEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GeneralSettingsEditDto>(data, _mappings, GeneralSettingsEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['timezone'] = this.timezone;
    data['timezoneForComparison'] = this.timezoneForComparison;
    return data;
  }

  clone(): GeneralSettingsEditDto {
    const json = this.toJSON();
    let result = new GeneralSettingsEditDto();
    result.init(json);
    return result;
  }
}

export enum ValidateCodeType {
  Number = 'Number',
  English = 'English',
  NumberAndLetter = 'NumberAndLetter',
  Hanzi = 'Hanzi',
}

/** 网站全局管理设置 */
export class HostUserManagementSettingsEditDto {
  /** 是否必须验证邮箱才能登陆 */
  isEmailConfirmationRequiredForLogin!: boolean;
  /** 是否启用短信验证 */
  smsVerificationEnabled!: boolean;
  /** 是否启用Cookie内容 */
  isCookieConsentEnabled!: boolean;
  /** 宿主用户登陆使用验证码 */
  useCaptchaOnUserLogin!: boolean;
  captchaOnUserLoginType!: ValidateCodeType;
  /** 宿主用户登陆验证码长度 */
  captchaOnUserLoginLength!: number;
  isQuickThemeSelectEnabled!: boolean;
  externalLoginProviders!: string[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.isEmailConfirmationRequiredForLogin = _data['isEmailConfirmationRequiredForLogin'];
      this.smsVerificationEnabled = _data['smsVerificationEnabled'];
      this.isCookieConsentEnabled = _data['isCookieConsentEnabled'];
      this.useCaptchaOnUserLogin = _data['useCaptchaOnUserLogin'];
      this.captchaOnUserLoginType = _data['captchaOnUserLoginType'];
      this.captchaOnUserLoginLength = _data['captchaOnUserLoginLength'];
      this.isQuickThemeSelectEnabled = _data['isQuickThemeSelectEnabled'];
      if (Array.isArray(_data['externalLoginProviders'])) {
        this.externalLoginProviders = [] as any;
        for (let item of _data['externalLoginProviders']) this.externalLoginProviders!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): HostUserManagementSettingsEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<HostUserManagementSettingsEditDto>(
      data,
      _mappings,
      HostUserManagementSettingsEditDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['isEmailConfirmationRequiredForLogin'] = this.isEmailConfirmationRequiredForLogin;
    data['smsVerificationEnabled'] = this.smsVerificationEnabled;
    data['isCookieConsentEnabled'] = this.isCookieConsentEnabled;
    data['useCaptchaOnUserLogin'] = this.useCaptchaOnUserLogin;
    data['captchaOnUserLoginType'] = this.captchaOnUserLoginType;
    data['captchaOnUserLoginLength'] = this.captchaOnUserLoginLength;
    data['isQuickThemeSelectEnabled'] = this.isQuickThemeSelectEnabled;
    if (Array.isArray(this.externalLoginProviders)) {
      data['externalLoginProviders'] = [];
      for (let item of this.externalLoginProviders) data['externalLoginProviders'].push(item);
    }
    return data;
  }

  clone(): HostUserManagementSettingsEditDto {
    const json = this.toJSON();
    let result = new HostUserManagementSettingsEditDto();
    result.init(json);
    return result;
  }
}

export class EmailSettingsEditDto {
  /** 默认发件人邮箱地址 */
  defaultFromAddress!: string | undefined;
  /** 邮箱显示名称 */
  defaultFromDisplayName!: string | undefined;
  /** 发件人邮箱SMTP服务器Host */
  smtpHost!: string | undefined;
  /** 发件人邮箱SMTP服务器端口 */
  smtpPort!: number;
  /** 发件人校验名称 */
  smtpUserName!: string | undefined;
  /** 发件人校验密码 */
  smtpPassword!: string | undefined;
  /** 发件人 */
  smtpDomain!: string | undefined;
  /** 使用ssl */
  smtpEnableSsl!: boolean;
  /** 使用默认凭据 */
  smtpUseDefaultCredentials!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.defaultFromAddress = _data['defaultFromAddress'];
      this.defaultFromDisplayName = _data['defaultFromDisplayName'];
      this.smtpHost = _data['smtpHost'];
      this.smtpPort = _data['smtpPort'];
      this.smtpUserName = _data['smtpUserName'];
      this.smtpPassword = _data['smtpPassword'];
      this.smtpDomain = _data['smtpDomain'];
      this.smtpEnableSsl = _data['smtpEnableSsl'];
      this.smtpUseDefaultCredentials = _data['smtpUseDefaultCredentials'];
    }
  }

  static fromJS(data: any, _mappings?: any): EmailSettingsEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EmailSettingsEditDto>(data, _mappings, EmailSettingsEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['defaultFromAddress'] = this.defaultFromAddress;
    data['defaultFromDisplayName'] = this.defaultFromDisplayName;
    data['smtpHost'] = this.smtpHost;
    data['smtpPort'] = this.smtpPort;
    data['smtpUserName'] = this.smtpUserName;
    data['smtpPassword'] = this.smtpPassword;
    data['smtpDomain'] = this.smtpDomain;
    data['smtpEnableSsl'] = this.smtpEnableSsl;
    data['smtpUseDefaultCredentials'] = this.smtpUseDefaultCredentials;
    return data;
  }

  clone(): EmailSettingsEditDto {
    const json = this.toJSON();
    let result = new EmailSettingsEditDto();
    result.init(json);
    return result;
  }
}

export class TenantManagementSettingsEditDto {
  /** 允许注册 */
  allowSelfRegistration!: boolean;
  /** 注册租户默认激活 */
  isNewRegisteredTenantActiveByDefault!: boolean;
  /** 宿主租户注册使用验证码 */
  useCaptchaOnTenantRegistration!: boolean;
  captchaOnTenantRegistrationType!: ValidateCodeType;
  /** 宿主租户注册验证码长度 */
  captchaOnTenantRegistrationLength!: number;
  /** 默认版本id */
  defaultEditionId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.allowSelfRegistration = _data['allowSelfRegistration'];
      this.isNewRegisteredTenantActiveByDefault = _data['isNewRegisteredTenantActiveByDefault'];
      this.useCaptchaOnTenantRegistration = _data['useCaptchaOnTenantRegistration'];
      this.captchaOnTenantRegistrationType = _data['captchaOnTenantRegistrationType'];
      this.captchaOnTenantRegistrationLength = _data['captchaOnTenantRegistrationLength'];
      this.defaultEditionId = _data['defaultEditionId'];
    }
  }

  static fromJS(data: any, _mappings?: any): TenantManagementSettingsEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TenantManagementSettingsEditDto>(
      data,
      _mappings,
      TenantManagementSettingsEditDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['allowSelfRegistration'] = this.allowSelfRegistration;
    data['isNewRegisteredTenantActiveByDefault'] = this.isNewRegisteredTenantActiveByDefault;
    data['useCaptchaOnTenantRegistration'] = this.useCaptchaOnTenantRegistration;
    data['captchaOnTenantRegistrationType'] = this.captchaOnTenantRegistrationType;
    data['captchaOnTenantRegistrationLength'] = this.captchaOnTenantRegistrationLength;
    data['defaultEditionId'] = this.defaultEditionId;
    return data;
  }

  clone(): TenantManagementSettingsEditDto {
    const json = this.toJSON();
    let result = new TenantManagementSettingsEditDto();
    result.init(json);
    return result;
  }
}

export class PasswordComplexitySetting {
  requireDigit!: boolean;
  requireLowercase!: boolean;
  requireNonAlphanumeric!: boolean;
  requireUppercase!: boolean;
  requiredLength!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.requireDigit = _data['requireDigit'];
      this.requireLowercase = _data['requireLowercase'];
      this.requireNonAlphanumeric = _data['requireNonAlphanumeric'];
      this.requireUppercase = _data['requireUppercase'];
      this.requiredLength = _data['requiredLength'];
    }
  }

  static fromJS(data: any, _mappings?: any): PasswordComplexitySetting | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PasswordComplexitySetting>(data, _mappings, PasswordComplexitySetting);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['requireDigit'] = this.requireDigit;
    data['requireLowercase'] = this.requireLowercase;
    data['requireNonAlphanumeric'] = this.requireNonAlphanumeric;
    data['requireUppercase'] = this.requireUppercase;
    data['requiredLength'] = this.requiredLength;
    return data;
  }

  clone(): PasswordComplexitySetting {
    const json = this.toJSON();
    let result = new PasswordComplexitySetting();
    result.init(json);
    return result;
  }
}

export class UserLockOutSettingsEditDto {
  /** 是否启用 */
  isEnabled!: boolean;
  /** 登陆校验错误锁定账户最大次数 */
  maxFailedAccessAttemptsBeforeLockout!: number;
  /** 默认锁定时间 */
  defaultAccountLockoutSeconds!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.isEnabled = _data['isEnabled'];
      this.maxFailedAccessAttemptsBeforeLockout = _data['maxFailedAccessAttemptsBeforeLockout'];
      this.defaultAccountLockoutSeconds = _data['defaultAccountLockoutSeconds'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserLockOutSettingsEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserLockOutSettingsEditDto>(data, _mappings, UserLockOutSettingsEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['isEnabled'] = this.isEnabled;
    data['maxFailedAccessAttemptsBeforeLockout'] = this.maxFailedAccessAttemptsBeforeLockout;
    data['defaultAccountLockoutSeconds'] = this.defaultAccountLockoutSeconds;
    return data;
  }

  clone(): UserLockOutSettingsEditDto {
    const json = this.toJSON();
    let result = new UserLockOutSettingsEditDto();
    result.init(json);
    return result;
  }
}

export class TwoFactorLoginSettingsEditDto {
  isEnabledForApplication!: boolean;
  /** 是否启用 */
  isEnabled!: boolean;
  /** 邮箱启用 */
  isEmailProviderEnabled!: boolean;
  /** 短信启用 */
  isSmsProviderEnabled!: boolean;
  /** 浏览器‘记住我’启用 */
  isRememberBrowserEnabled!: boolean;
  /** google校验启用 */
  isGoogleAuthenticatorEnabled!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.isEnabledForApplication = _data['isEnabledForApplication'];
      this.isEnabled = _data['isEnabled'];
      this.isEmailProviderEnabled = _data['isEmailProviderEnabled'];
      this.isSmsProviderEnabled = _data['isSmsProviderEnabled'];
      this.isRememberBrowserEnabled = _data['isRememberBrowserEnabled'];
      this.isGoogleAuthenticatorEnabled = _data['isGoogleAuthenticatorEnabled'];
    }
  }

  static fromJS(data: any, _mappings?: any): TwoFactorLoginSettingsEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TwoFactorLoginSettingsEditDto>(
      data,
      _mappings,
      TwoFactorLoginSettingsEditDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['isEnabledForApplication'] = this.isEnabledForApplication;
    data['isEnabled'] = this.isEnabled;
    data['isEmailProviderEnabled'] = this.isEmailProviderEnabled;
    data['isSmsProviderEnabled'] = this.isSmsProviderEnabled;
    data['isRememberBrowserEnabled'] = this.isRememberBrowserEnabled;
    data['isGoogleAuthenticatorEnabled'] = this.isGoogleAuthenticatorEnabled;
    return data;
  }

  clone(): TwoFactorLoginSettingsEditDto {
    const json = this.toJSON();
    let result = new TwoFactorLoginSettingsEditDto();
    result.init(json);
    return result;
  }
}

export class SecuritySettingsEditDto {
  /** 使用默认密码校验设置 */
  useDefaultPasswordComplexitySettings!: boolean;
  passwordComplexity!: PasswordComplexitySetting;
  defaultPasswordComplexity!: PasswordComplexitySetting;
  userLockOut!: UserLockOutSettingsEditDto;
  twoFactorLogin!: TwoFactorLoginSettingsEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.useDefaultPasswordComplexitySettings = _data['useDefaultPasswordComplexitySettings'];
      this.passwordComplexity = _data['passwordComplexity']
        ? PasswordComplexitySetting.fromJS(_data['passwordComplexity'], _mappings)
        : <any>undefined;
      this.defaultPasswordComplexity = _data['defaultPasswordComplexity']
        ? PasswordComplexitySetting.fromJS(_data['defaultPasswordComplexity'], _mappings)
        : <any>undefined;
      this.userLockOut = _data['userLockOut']
        ? UserLockOutSettingsEditDto.fromJS(_data['userLockOut'], _mappings)
        : <any>undefined;
      this.twoFactorLogin = _data['twoFactorLogin']
        ? TwoFactorLoginSettingsEditDto.fromJS(_data['twoFactorLogin'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): SecuritySettingsEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SecuritySettingsEditDto>(data, _mappings, SecuritySettingsEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['useDefaultPasswordComplexitySettings'] = this.useDefaultPasswordComplexitySettings;
    data['passwordComplexity'] = this.passwordComplexity
      ? this.passwordComplexity.toJSON()
      : <any>undefined;
    data['defaultPasswordComplexity'] = this.defaultPasswordComplexity
      ? this.defaultPasswordComplexity.toJSON()
      : <any>undefined;
    data['userLockOut'] = this.userLockOut ? this.userLockOut.toJSON() : <any>undefined;
    data['twoFactorLogin'] = this.twoFactorLogin ? this.twoFactorLogin.toJSON() : <any>undefined;
    return data;
  }

  clone(): SecuritySettingsEditDto {
    const json = this.toJSON();
    let result = new SecuritySettingsEditDto();
    result.init(json);
    return result;
  }
}

export class HostBillingSettingsEditDto {
  legalName!: string | undefined;
  address!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.legalName = _data['legalName'];
      this.address = _data['address'];
    }
  }

  static fromJS(data: any, _mappings?: any): HostBillingSettingsEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<HostBillingSettingsEditDto>(data, _mappings, HostBillingSettingsEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['legalName'] = this.legalName;
    data['address'] = this.address;
    return data;
  }

  clone(): HostBillingSettingsEditDto {
    const json = this.toJSON();
    let result = new HostBillingSettingsEditDto();
    result.init(json);
    return result;
  }
}

export class HostSettingsEditDto {
  general!: GeneralSettingsEditDto;
  userManagement!: HostUserManagementSettingsEditDto;
  email!: EmailSettingsEditDto;
  tenantManagement!: TenantManagementSettingsEditDto;
  security!: SecuritySettingsEditDto;
  billing!: HostBillingSettingsEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.general = _data['general']
        ? GeneralSettingsEditDto.fromJS(_data['general'], _mappings)
        : new GeneralSettingsEditDto();
      this.userManagement = _data['userManagement']
        ? HostUserManagementSettingsEditDto.fromJS(_data['userManagement'], _mappings)
        : new HostUserManagementSettingsEditDto();
      this.email = _data['email']
        ? EmailSettingsEditDto.fromJS(_data['email'], _mappings)
        : new EmailSettingsEditDto();
      this.tenantManagement = _data['tenantManagement']
        ? TenantManagementSettingsEditDto.fromJS(_data['tenantManagement'], _mappings)
        : new TenantManagementSettingsEditDto();
      this.security = _data['security']
        ? SecuritySettingsEditDto.fromJS(_data['security'], _mappings)
        : new SecuritySettingsEditDto();
      this.billing = _data['billing']
        ? HostBillingSettingsEditDto.fromJS(_data['billing'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): HostSettingsEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<HostSettingsEditDto>(data, _mappings, HostSettingsEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['general'] = this.general ? this.general.toJSON() : <any>undefined;
    data['userManagement'] = this.userManagement ? this.userManagement.toJSON() : <any>undefined;
    data['email'] = this.email ? this.email.toJSON() : <any>undefined;
    data['tenantManagement'] = this.tenantManagement
      ? this.tenantManagement.toJSON()
      : <any>undefined;
    data['security'] = this.security ? this.security.toJSON() : <any>undefined;
    data['billing'] = this.billing ? this.billing.toJSON() : <any>undefined;
    return data;
  }

  clone(): HostSettingsEditDto {
    const json = this.toJSON();
    let result = new HostSettingsEditDto();
    result.init(json);
    return result;
  }
}

export class SendTestEmailInput {
  /** 邮箱地址 */
  emailAddress!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.emailAddress = _data['emailAddress'];
    }
  }

  static fromJS(data: any, _mappings?: any): SendTestEmailInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SendTestEmailInput>(data, _mappings, SendTestEmailInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['emailAddress'] = this.emailAddress;
    return data;
  }

  clone(): SendTestEmailInput {
    const json = this.toJSON();
    let result = new SendTestEmailInput();
    result.init(json);
    return result;
  }
}

/** 处置企业可以处置的危废详情信息 */
export class DisposalEntWastCodeDetails {
  /** 企业Id */
  entId!: number;
  /** 企业名称 */
  entName!: string | undefined;
  /** 许可证编号 */
  licenseNo!: string | undefined;
  /** 处置代码详情 */
  wastCodeList!: string[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.entName = _data['entName'];
      this.licenseNo = _data['licenseNo'];
      if (Array.isArray(_data['wastCodeList'])) {
        this.wastCodeList = [] as any;
        for (let item of _data['wastCodeList']) this.wastCodeList!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): DisposalEntWastCodeDetails | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DisposalEntWastCodeDetails>(data, _mappings, DisposalEntWastCodeDetails);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['entName'] = this.entName;
    data['licenseNo'] = this.licenseNo;
    if (Array.isArray(this.wastCodeList)) {
      data['wastCodeList'] = [];
      for (let item of this.wastCodeList) data['wastCodeList'].push(item);
    }
    return data;
  }

  clone(): DisposalEntWastCodeDetails {
    const json = this.toJSON();
    let result = new DisposalEntWastCodeDetails();
    result.init(json);
    return result;
  }
}

/** 入库的列表DTO Erinyes.CRM.InStorage */
export class InStorageEditDto {
  /** Id */
  id!: number | undefined;
  /** 派单 */
  dispatchOrderId!: number | undefined;
  /** 销售开票 */
  salesInvoiceId!: number | undefined;
  /** 库位 */
  warehouse!: string | undefined;
  /** 入库时间 */
  inStorageTime!: dayjs.Dayjs | undefined;
  remark!: string | undefined;
  /** 入库危废详情 */
  inStorageHWEditList!: InStorageHWDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.dispatchOrderId = _data['dispatchOrderId'];
      this.salesInvoiceId = _data['salesInvoiceId'];
      this.warehouse = _data['warehouse'];
      this.inStorageTime = _data['inStorageTime']
        ? dayjs(_data['inStorageTime'].toString())
        : <any>undefined;
      this.remark = _data['remark'];
      if (Array.isArray(_data['inStorageHWEditList'])) {
        this.inStorageHWEditList = [] as any;
        for (let item of _data['inStorageHWEditList'])
          this.inStorageHWEditList!.push(InStorageHWDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): InStorageEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<InStorageEditDto>(data, _mappings, InStorageEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['dispatchOrderId'] = this.dispatchOrderId;
    data['salesInvoiceId'] = this.salesInvoiceId;
    data['warehouse'] = this.warehouse;
    data['inStorageTime'] = this.inStorageTime ? this.inStorageTime.toISOString() : <any>undefined;
    data['remark'] = this.remark;
    if (Array.isArray(this.inStorageHWEditList)) {
      data['inStorageHWEditList'] = [];
      for (let item of this.inStorageHWEditList) data['inStorageHWEditList'].push(item.toJSON());
    }
    return data;
  }

  clone(): InStorageEditDto {
    const json = this.toJSON();
    let result = new InStorageEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateInStorageInput {
  inStorage!: InStorageEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.inStorage = _data['inStorage']
        ? InStorageEditDto.fromJS(_data['inStorage'], _mappings)
        : new InStorageEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateInStorageInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateInStorageInput>(
      data,
      _mappings,
      CreateOrUpdateInStorageInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['inStorage'] = this.inStorage ? this.inStorage.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateInStorageInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateInStorageInput();
    result.init(json);
    return result;
  }
}

/** 入库的列表DTO Erinyes.CRM.InStorage */
export class InStorageDetailDto {
  id!: number;
  /** 派单 */
  dispatchOrderId!: number | undefined;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 库位 */
  warehouse!: string | undefined;
  /** 入库时间 */
  inStorageTime!: dayjs.Dayjs | undefined;
  /** 负责人 */
  responsibleUserName!: string | undefined;
  /** 负责人Id */
  responsibleUserId!: number | undefined;
  /** 创建人Id */
  creatorUserId!: number | undefined;
  remark!: string | undefined;
  /** 合同编号 */
  contractNo!: string | undefined;
  /** 预计接收量 */
  predictionWeight!: number | undefined;
  /** 运输时间 */
  transportTime!: dayjs.Dayjs | undefined;
  receiveApprove!: ReceiveApprove;
  /** 审核时间 */
  approveTime!: dayjs.Dayjs | undefined;
  /** 审核人 */
  approveUserId!: number | undefined;
  /** 审核意见 */
  reason!: string | undefined;
  /** 车辆 */
  vehicleId!: number | undefined;
  /** 司机Id */
  driverId!: number | undefined;
  /** 车辆编号 */
  vehicleNo!: string | undefined;
  /** 运输企业车牌号 */
  vehicleNum!: string | undefined;
  /** 驾驶证 */
  driverLicense!: string | undefined;
  /** 运输企业司机 */
  driverName!: string | undefined;
  /** 运输企业司机手机号 */
  driverPhone!: string | undefined;
  /** 运输企业司机身份证 */
  driverNo!: string | undefined;
  /** 按次数 报价 */
  byTimes!: boolean;
  /** 处置价格（元/次） */
  unitCostByTimes!: number | undefined;
  /** 服务费（元/次） */
  serviceUnitCostByTimes!: number | undefined;
  /** 是否包含运费 */
  containtCarriage!: boolean;
  /** 单次 运费总价（元/次） */
  carriageCost!: number | undefined;
  /** 入库危废详情 */
  inStorageHWs!: InStorageHWDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.dispatchOrderId = _data['dispatchOrderId'];
      this.customerName = _data['customerName'];
      this.customerId = _data['customerId'];
      this.cantonName = _data['cantonName'];
      this.warehouse = _data['warehouse'];
      this.inStorageTime = _data['inStorageTime']
        ? dayjs(_data['inStorageTime'].toString())
        : <any>undefined;
      this.responsibleUserName = _data['responsibleUserName'];
      this.responsibleUserId = _data['responsibleUserId'];
      this.creatorUserId = _data['creatorUserId'];
      this.remark = _data['remark'];
      this.contractNo = _data['contractNo'];
      this.predictionWeight = _data['predictionWeight'];
      this.transportTime = _data['transportTime']
        ? dayjs(_data['transportTime'].toString())
        : <any>undefined;
      this.receiveApprove = _data['receiveApprove'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.approveUserId = _data['approveUserId'];
      this.reason = _data['reason'];
      this.vehicleId = _data['vehicleId'];
      this.driverId = _data['driverId'];
      this.vehicleNo = _data['vehicleNo'];
      this.vehicleNum = _data['vehicleNum'];
      this.driverLicense = _data['driverLicense'];
      this.driverName = _data['driverName'];
      this.driverPhone = _data['driverPhone'];
      this.driverNo = _data['driverNo'];
      this.byTimes = _data['byTimes'];
      this.unitCostByTimes = _data['unitCostByTimes'];
      this.serviceUnitCostByTimes = _data['serviceUnitCostByTimes'];
      this.containtCarriage = _data['containtCarriage'];
      this.carriageCost = _data['carriageCost'];
      if (Array.isArray(_data['inStorageHWs'])) {
        this.inStorageHWs = [] as any;
        for (let item of _data['inStorageHWs'])
          this.inStorageHWs!.push(InStorageHWDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): InStorageDetailDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<InStorageDetailDto>(data, _mappings, InStorageDetailDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['dispatchOrderId'] = this.dispatchOrderId;
    data['customerName'] = this.customerName;
    data['customerId'] = this.customerId;
    data['cantonName'] = this.cantonName;
    data['warehouse'] = this.warehouse;
    data['inStorageTime'] = this.inStorageTime ? this.inStorageTime.toISOString() : <any>undefined;
    data['responsibleUserName'] = this.responsibleUserName;
    data['responsibleUserId'] = this.responsibleUserId;
    data['creatorUserId'] = this.creatorUserId;
    data['remark'] = this.remark;
    data['contractNo'] = this.contractNo;
    data['predictionWeight'] = this.predictionWeight;
    data['transportTime'] = this.transportTime ? this.transportTime.toISOString() : <any>undefined;
    data['receiveApprove'] = this.receiveApprove;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['approveUserId'] = this.approveUserId;
    data['reason'] = this.reason;
    data['vehicleId'] = this.vehicleId;
    data['driverId'] = this.driverId;
    data['vehicleNo'] = this.vehicleNo;
    data['vehicleNum'] = this.vehicleNum;
    data['driverLicense'] = this.driverLicense;
    data['driverName'] = this.driverName;
    data['driverPhone'] = this.driverPhone;
    data['driverNo'] = this.driverNo;
    data['byTimes'] = this.byTimes;
    data['unitCostByTimes'] = this.unitCostByTimes;
    data['serviceUnitCostByTimes'] = this.serviceUnitCostByTimes;
    data['containtCarriage'] = this.containtCarriage;
    data['carriageCost'] = this.carriageCost;
    if (Array.isArray(this.inStorageHWs)) {
      data['inStorageHWs'] = [];
      for (let item of this.inStorageHWs) data['inStorageHWs'].push(item.toJSON());
    }
    return data;
  }

  clone(): InStorageDetailDto {
    const json = this.toJSON();
    let result = new InStorageDetailDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑入库的Dto */
export class GetInStorageForEditOutput {
  inStorage!: InStorageEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.inStorage = _data['inStorage']
        ? InStorageEditDto.fromJS(_data['inStorage'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetInStorageForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetInStorageForEditOutput>(data, _mappings, GetInStorageForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['inStorage'] = this.inStorage ? this.inStorage.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetInStorageForEditOutput {
    const json = this.toJSON();
    let result = new GetInStorageForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfInStorageListDto {
  totalCount!: number;
  items!: InStorageListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(InStorageListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfInStorageListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfInStorageListDto>(
      data,
      _mappings,
      PagedResultDtoOfInStorageListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfInStorageListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfInStorageListDto();
    result.init(json);
    return result;
  }
}

export class ImportUserDto {
  name!: string | undefined;
  surname!: string | undefined;
  userName!: string | undefined;
  emailAddress!: string | undefined;
  phoneNumber!: string | undefined;
  password!: string | undefined;
  /** comma separated list */
  assignedRoleNames!: string[] | undefined;
  /** Can be set when reading data from excel or when importing user */
  exception!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.surname = _data['surname'];
      this.userName = _data['userName'];
      this.emailAddress = _data['emailAddress'];
      this.phoneNumber = _data['phoneNumber'];
      this.password = _data['password'];
      if (Array.isArray(_data['assignedRoleNames'])) {
        this.assignedRoleNames = [] as any;
        for (let item of _data['assignedRoleNames']) this.assignedRoleNames!.push(item);
      }
      this.exception = _data['exception'];
    }
  }

  static fromJS(data: any, _mappings?: any): ImportUserDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ImportUserDto>(data, _mappings, ImportUserDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['surname'] = this.surname;
    data['userName'] = this.userName;
    data['emailAddress'] = this.emailAddress;
    data['phoneNumber'] = this.phoneNumber;
    data['password'] = this.password;
    if (Array.isArray(this.assignedRoleNames)) {
      data['assignedRoleNames'] = [];
      for (let item of this.assignedRoleNames) data['assignedRoleNames'].push(item);
    }
    data['exception'] = this.exception;
    return data;
  }

  clone(): ImportUserDto {
    const json = this.toJSON();
    let result = new ImportUserDto();
    result.init(json);
    return result;
  }
}

/** 财务开票的列表DTO Erinyes.CRM.Invoice_Finance */
export class Invoice_FinanceEditDto {
  /** Id */
  id!: number | undefined;
  /** 开票编号 */
  invoiceNo!: string | undefined;
  /** 销售开票 */
  invoiceSalesId!: number | undefined;
  /** 开票时间 */
  invoiceTime!: dayjs.Dayjs | undefined;
  /** 寄出时间 */
  sendTime!: dayjs.Dayjs | undefined;
  /** 快递单号 */
  expressNo!: string | undefined;
  /** 开票金额 */
  invoiceAmount!: number | undefined;
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.invoiceNo = _data['invoiceNo'];
      this.invoiceSalesId = _data['invoiceSalesId'];
      this.invoiceTime = _data['invoiceTime']
        ? dayjs(_data['invoiceTime'].toString())
        : <any>undefined;
      this.sendTime = _data['sendTime'] ? dayjs(_data['sendTime'].toString()) : <any>undefined;
      this.expressNo = _data['expressNo'];
      this.invoiceAmount = _data['invoiceAmount'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): Invoice_FinanceEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Invoice_FinanceEditDto>(data, _mappings, Invoice_FinanceEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['invoiceNo'] = this.invoiceNo;
    data['invoiceSalesId'] = this.invoiceSalesId;
    data['invoiceTime'] = this.invoiceTime ? this.invoiceTime.toISOString() : <any>undefined;
    data['sendTime'] = this.sendTime ? this.sendTime.toISOString() : <any>undefined;
    data['expressNo'] = this.expressNo;
    data['invoiceAmount'] = this.invoiceAmount;
    data['remark'] = this.remark;
    return data;
  }

  clone(): Invoice_FinanceEditDto {
    const json = this.toJSON();
    let result = new Invoice_FinanceEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateInvoice_FinanceInput {
  invoice_Finance!: Invoice_FinanceEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.invoice_Finance = _data['invoice_Finance']
        ? Invoice_FinanceEditDto.fromJS(_data['invoice_Finance'], _mappings)
        : new Invoice_FinanceEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateInvoice_FinanceInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateInvoice_FinanceInput>(
      data,
      _mappings,
      CreateOrUpdateInvoice_FinanceInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['invoice_Finance'] = this.invoice_Finance ? this.invoice_Finance.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateInvoice_FinanceInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateInvoice_FinanceInput();
    result.init(json);
    return result;
  }
}

/** 财务开票的列表DTO Erinyes.CRM.Invoice_Finance */
export class Invoice_FinanceDetailDto {
  id!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 销售开票 */
  invoiceSalesId!: number | undefined;
  /** 开票编号 */
  invoiceNo!: string | undefined;
  /** 开票时间 */
  invoiceTime!: dayjs.Dayjs | undefined;
  /** 寄出时间 */
  sendTime!: dayjs.Dayjs | undefined;
  /** 快递单号 */
  expressNo!: string | undefined;
  /** 应该开票金额 */
  needInvoiceAmount!: number | undefined;
  /** 开票金额 */
  invoiceAmount!: number | undefined;
  /** 已回款金额 */
  paymentAmount!: number;
  /** 负责人 */
  responsibleUserName!: string | undefined;
  /** 负责人Id */
  responsibleUserId!: number | undefined;
  /** 创建人Id */
  creatorUserId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerName = _data['customerName'];
      this.customerId = _data['customerId'];
      this.invoiceSalesId = _data['invoiceSalesId'];
      this.invoiceNo = _data['invoiceNo'];
      this.invoiceTime = _data['invoiceTime']
        ? dayjs(_data['invoiceTime'].toString())
        : <any>undefined;
      this.sendTime = _data['sendTime'] ? dayjs(_data['sendTime'].toString()) : <any>undefined;
      this.expressNo = _data['expressNo'];
      this.needInvoiceAmount = _data['needInvoiceAmount'];
      this.invoiceAmount = _data['invoiceAmount'];
      this.paymentAmount = _data['paymentAmount'];
      this.responsibleUserName = _data['responsibleUserName'];
      this.responsibleUserId = _data['responsibleUserId'];
      this.creatorUserId = _data['creatorUserId'];
    }
  }

  static fromJS(data: any, _mappings?: any): Invoice_FinanceDetailDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Invoice_FinanceDetailDto>(data, _mappings, Invoice_FinanceDetailDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerName'] = this.customerName;
    data['customerId'] = this.customerId;
    data['invoiceSalesId'] = this.invoiceSalesId;
    data['invoiceNo'] = this.invoiceNo;
    data['invoiceTime'] = this.invoiceTime ? this.invoiceTime.toISOString() : <any>undefined;
    data['sendTime'] = this.sendTime ? this.sendTime.toISOString() : <any>undefined;
    data['expressNo'] = this.expressNo;
    data['needInvoiceAmount'] = this.needInvoiceAmount;
    data['invoiceAmount'] = this.invoiceAmount;
    data['paymentAmount'] = this.paymentAmount;
    data['responsibleUserName'] = this.responsibleUserName;
    data['responsibleUserId'] = this.responsibleUserId;
    data['creatorUserId'] = this.creatorUserId;
    return data;
  }

  clone(): Invoice_FinanceDetailDto {
    const json = this.toJSON();
    let result = new Invoice_FinanceDetailDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑财务开票的Dto */
export class GetInvoice_FinanceForEditOutput {
  invoice_Finance!: Invoice_FinanceEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.invoice_Finance = _data['invoice_Finance']
        ? Invoice_FinanceEditDto.fromJS(_data['invoice_Finance'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetInvoice_FinanceForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetInvoice_FinanceForEditOutput>(
      data,
      _mappings,
      GetInvoice_FinanceForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['invoice_Finance'] = this.invoice_Finance ? this.invoice_Finance.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetInvoice_FinanceForEditOutput {
    const json = this.toJSON();
    let result = new GetInvoice_FinanceForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfInvoice_FinanceListDto {
  totalCount!: number;
  items!: Invoice_FinanceListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Invoice_FinanceListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfInvoice_FinanceListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfInvoice_FinanceListDto>(
      data,
      _mappings,
      PagedResultDtoOfInvoice_FinanceListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfInvoice_FinanceListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfInvoice_FinanceListDto();
    result.init(json);
    return result;
  }
}

/** 销售开票管理的列表DTO Erinyes.CRM.Dtos.InvoiceSalesDetails */
export class Invoice_SalesDetailEditDto {
  /** Id */
  id!: number | undefined;
  /** 销售开票 */
  invoiceSaleId!: number | undefined;
  /** 开票类型  处置、运输、服务、其它 */
  invoiceType!: string | undefined;
  /** 金额 */
  amount!: number;
  /** 是不是系统数据  true:是（从入库和报价计算出来的费用） false:否（手动添加的费用） */
  isSystem!: boolean | undefined;
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.invoiceSaleId = _data['invoiceSaleId'];
      this.invoiceType = _data['invoiceType'];
      this.amount = _data['amount'];
      this.isSystem = _data['isSystem'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): Invoice_SalesDetailEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Invoice_SalesDetailEditDto>(data, _mappings, Invoice_SalesDetailEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['invoiceSaleId'] = this.invoiceSaleId;
    data['invoiceType'] = this.invoiceType;
    data['amount'] = this.amount;
    data['isSystem'] = this.isSystem;
    data['remark'] = this.remark;
    return data;
  }

  clone(): Invoice_SalesDetailEditDto {
    const json = this.toJSON();
    let result = new Invoice_SalesDetailEditDto();
    result.init(json);
    return result;
  }
}

/** 销售开票管理的列表DTO Erinyes.CRM.Invoice_Sales */
export class Invoice_SalesEditDto {
  /** Id */
  id!: number | undefined;
  /** 客户信息 */
  customerId!: number;
  /** 实际入库总量 */
  actualAllWeight!: number | undefined;
  /** 合同单价 */
  contractUnitCost!: number | undefined;
  /** 实际单价 */
  unitCost!: number | undefined;
  /** 开票金额 */
  invoiceAmount!: number | undefined;
  approveState!: ApproveState;
  /** 审核时间 */
  approveTime!: dayjs.Dayjs | undefined;
  /** 审核建议 */
  reason!: string | undefined;
  /** 入库记录Id List */
  inStorageIdList!: number[] | undefined;
  remark!: string | undefined;
  /** 销售开票详情 */
  invoiceSalesDetailList!: Invoice_SalesDetailEditDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerId = _data['customerId'];
      this.actualAllWeight = _data['actualAllWeight'];
      this.contractUnitCost = _data['contractUnitCost'];
      this.unitCost = _data['unitCost'];
      this.invoiceAmount = _data['invoiceAmount'];
      this.approveState = _data['approveState'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.reason = _data['reason'];
      if (Array.isArray(_data['inStorageIdList'])) {
        this.inStorageIdList = [] as any;
        for (let item of _data['inStorageIdList']) this.inStorageIdList!.push(item);
      }
      this.remark = _data['remark'];
      if (Array.isArray(_data['invoiceSalesDetailList'])) {
        this.invoiceSalesDetailList = [] as any;
        for (let item of _data['invoiceSalesDetailList'])
          this.invoiceSalesDetailList!.push(Invoice_SalesDetailEditDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): Invoice_SalesEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Invoice_SalesEditDto>(data, _mappings, Invoice_SalesEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerId'] = this.customerId;
    data['actualAllWeight'] = this.actualAllWeight;
    data['contractUnitCost'] = this.contractUnitCost;
    data['unitCost'] = this.unitCost;
    data['invoiceAmount'] = this.invoiceAmount;
    data['approveState'] = this.approveState;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['reason'] = this.reason;
    if (Array.isArray(this.inStorageIdList)) {
      data['inStorageIdList'] = [];
      for (let item of this.inStorageIdList) data['inStorageIdList'].push(item);
    }
    data['remark'] = this.remark;
    if (Array.isArray(this.invoiceSalesDetailList)) {
      data['invoiceSalesDetailList'] = [];
      for (let item of this.invoiceSalesDetailList)
        data['invoiceSalesDetailList'].push(item.toJSON());
    }
    return data;
  }

  clone(): Invoice_SalesEditDto {
    const json = this.toJSON();
    let result = new Invoice_SalesEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateInvoice_SalesInput {
  invoice_Sales!: Invoice_SalesEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.invoice_Sales = _data['invoice_Sales']
        ? Invoice_SalesEditDto.fromJS(_data['invoice_Sales'], _mappings)
        : new Invoice_SalesEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateInvoice_SalesInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateInvoice_SalesInput>(
      data,
      _mappings,
      CreateOrUpdateInvoice_SalesInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['invoice_Sales'] = this.invoice_Sales ? this.invoice_Sales.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateInvoice_SalesInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateInvoice_SalesInput();
    result.init(json);
    return result;
  }
}

export class Customer_FollowUp {
  customerId!: number;
  customer!: Customer;
  followUpType!: FollowUpType;
  nextContactTime!: dayjs.Dayjs | undefined;
  followContent!: string | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customerId = _data['customerId'];
      this.customer = _data['customer']
        ? Customer.fromJS(_data['customer'], _mappings)
        : <any>undefined;
      this.followUpType = _data['followUpType'];
      this.nextContactTime = _data['nextContactTime']
        ? dayjs(_data['nextContactTime'].toString())
        : <any>undefined;
      this.followContent = _data['followContent'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Customer_FollowUp | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Customer_FollowUp>(data, _mappings, Customer_FollowUp);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customerId'] = this.customerId;
    data['customer'] = this.customer ? this.customer.toJSON() : <any>undefined;
    data['followUpType'] = this.followUpType;
    data['nextContactTime'] = this.nextContactTime
      ? this.nextContactTime.toISOString()
      : <any>undefined;
    data['followContent'] = this.followContent;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Customer_FollowUp {
    const json = this.toJSON();
    let result = new Customer_FollowUp();
    result.init(json);
    return result;
  }
}

export enum FileType {
  客户 = '客户',
  取样 = '取样',
  实验室 = '实验室',
  报价 = '报价',
  合同 = '合同',
}

export class Customer_Files {
  customerId!: number;
  customer!: Customer;
  fileName!: string | undefined;
  fileType!: FileType;
  fileSize!: string | undefined;
  filePath!: string | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customerId = _data['customerId'];
      this.customer = _data['customer']
        ? Customer.fromJS(_data['customer'], _mappings)
        : <any>undefined;
      this.fileName = _data['fileName'];
      this.fileType = _data['fileType'];
      this.fileSize = _data['fileSize'];
      this.filePath = _data['filePath'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Customer_Files | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Customer_Files>(data, _mappings, Customer_Files);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customerId'] = this.customerId;
    data['customer'] = this.customer ? this.customer.toJSON() : <any>undefined;
    data['fileName'] = this.fileName;
    data['fileType'] = this.fileType;
    data['fileSize'] = this.fileSize;
    data['filePath'] = this.filePath;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Customer_Files {
    const json = this.toJSON();
    let result = new Customer_Files();
    result.init(json);
    return result;
  }
}

export class Laboratory {
  samplingId!: number | undefined;
  sampling!: Sampling;
  component!: string | undefined;
  componentContent!: number | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.samplingId = _data['samplingId'];
      this.sampling = _data['sampling']
        ? Sampling.fromJS(_data['sampling'], _mappings)
        : <any>undefined;
      this.component = _data['component'];
      this.componentContent = _data['componentContent'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Laboratory | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Laboratory>(data, _mappings, Laboratory);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['samplingId'] = this.samplingId;
    data['sampling'] = this.sampling ? this.sampling.toJSON() : <any>undefined;
    data['component'] = this.component;
    data['componentContent'] = this.componentContent;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Laboratory {
    const json = this.toJSON();
    let result = new Laboratory();
    result.init(json);
    return result;
  }
}

export class Sampling {
  customerHWId!: number | undefined;
  customerHW!: Customer_HW;
  readonly laboratorys!: Laboratory[] | undefined;
  receivingTime!: dayjs.Dayjs | undefined;
  samplingNo!: string | undefined;
  exemptInspection!: boolean;
  samplingState!: SamplingState;
  receiveApprove!: ReceiveApprove;
  approveTime!: dayjs.Dayjs | undefined;
  approveUserId!: number | undefined;
  approveUser!: User;
  labReportFiles!: string | undefined;
  component!: string | undefined;
  productionProcess!: string | undefined;
  ossFileNames!: string | undefined;
  reason!: string | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customerHWId = _data['customerHWId'];
      this.customerHW = _data['customerHW']
        ? Customer_HW.fromJS(_data['customerHW'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['laboratorys'])) {
        (<any>this).laboratorys = [] as any;
        for (let item of _data['laboratorys'])
          (<any>this).laboratorys!.push(Laboratory.fromJS(item, _mappings));
      }
      this.receivingTime = _data['receivingTime']
        ? dayjs(_data['receivingTime'].toString())
        : <any>undefined;
      this.samplingNo = _data['samplingNo'];
      this.exemptInspection = _data['exemptInspection'];
      this.samplingState = _data['samplingState'];
      this.receiveApprove = _data['receiveApprove'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.approveUserId = _data['approveUserId'];
      this.approveUser = _data['approveUser']
        ? User.fromJS(_data['approveUser'], _mappings)
        : <any>undefined;
      this.labReportFiles = _data['labReportFiles'];
      this.component = _data['component'];
      this.productionProcess = _data['productionProcess'];
      this.ossFileNames = _data['ossFileNames'];
      this.reason = _data['reason'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Sampling | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Sampling>(data, _mappings, Sampling);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customerHWId'] = this.customerHWId;
    data['customerHW'] = this.customerHW ? this.customerHW.toJSON() : <any>undefined;
    if (Array.isArray(this.laboratorys)) {
      data['laboratorys'] = [];
      for (let item of this.laboratorys) data['laboratorys'].push(item.toJSON());
    }
    data['receivingTime'] = this.receivingTime ? this.receivingTime.toISOString() : <any>undefined;
    data['samplingNo'] = this.samplingNo;
    data['exemptInspection'] = this.exemptInspection;
    data['samplingState'] = this.samplingState;
    data['receiveApprove'] = this.receiveApprove;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['approveUserId'] = this.approveUserId;
    data['approveUser'] = this.approveUser ? this.approveUser.toJSON() : <any>undefined;
    data['labReportFiles'] = this.labReportFiles;
    data['component'] = this.component;
    data['productionProcess'] = this.productionProcess;
    data['ossFileNames'] = this.ossFileNames;
    data['reason'] = this.reason;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Sampling {
    const json = this.toJSON();
    let result = new Sampling();
    result.init(json);
    return result;
  }
}

export class Customer_HW {
  customerId!: number;
  customer!: Customer;
  readonly samplings!: Sampling[] | undefined;
  origDisposalEntName!: string | undefined;
  origUnitCost!: number | undefined;
  packagings!: string | undefined;
  currentState!: CustomerHWState;
  wasteCode!: string | undefined;
  commonName!: string | undefined;
  yearlyOutput!: number | undefined;
  ossFileNames!: string | undefined;
  unit!: string | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customerId = _data['customerId'];
      this.customer = _data['customer']
        ? Customer.fromJS(_data['customer'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['samplings'])) {
        (<any>this).samplings = [] as any;
        for (let item of _data['samplings'])
          (<any>this).samplings!.push(Sampling.fromJS(item, _mappings));
      }
      this.origDisposalEntName = _data['origDisposalEntName'];
      this.origUnitCost = _data['origUnitCost'];
      this.packagings = _data['packagings'];
      this.currentState = _data['currentState'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.ossFileNames = _data['ossFileNames'];
      this.unit = _data['unit'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Customer_HW | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Customer_HW>(data, _mappings, Customer_HW);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customerId'] = this.customerId;
    data['customer'] = this.customer ? this.customer.toJSON() : <any>undefined;
    if (Array.isArray(this.samplings)) {
      data['samplings'] = [];
      for (let item of this.samplings) data['samplings'].push(item.toJSON());
    }
    data['origDisposalEntName'] = this.origDisposalEntName;
    data['origUnitCost'] = this.origUnitCost;
    data['packagings'] = this.packagings;
    data['currentState'] = this.currentState;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['ossFileNames'] = this.ossFileNames;
    data['unit'] = this.unit;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Customer_HW {
    const json = this.toJSON();
    let result = new Customer_HW();
    result.init(json);
    return result;
  }
}

export class Quotation_Details {
  quotationId!: number | undefined;
  quotation!: Quotation;
  customerHWId!: number | undefined;
  customerHW!: Customer_HW;
  unitCost!: number | undefined;
  serviceUnitCost!: number | undefined;
  carriageCost!: number | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.quotationId = _data['quotationId'];
      this.quotation = _data['quotation']
        ? Quotation.fromJS(_data['quotation'], _mappings)
        : <any>undefined;
      this.customerHWId = _data['customerHWId'];
      this.customerHW = _data['customerHW']
        ? Customer_HW.fromJS(_data['customerHW'], _mappings)
        : <any>undefined;
      this.unitCost = _data['unitCost'];
      this.serviceUnitCost = _data['serviceUnitCost'];
      this.carriageCost = _data['carriageCost'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Quotation_Details | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Quotation_Details>(data, _mappings, Quotation_Details);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['quotationId'] = this.quotationId;
    data['quotation'] = this.quotation ? this.quotation.toJSON() : <any>undefined;
    data['customerHWId'] = this.customerHWId;
    data['customerHW'] = this.customerHW ? this.customerHW.toJSON() : <any>undefined;
    data['unitCost'] = this.unitCost;
    data['serviceUnitCost'] = this.serviceUnitCost;
    data['carriageCost'] = this.carriageCost;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Quotation_Details {
    const json = this.toJSON();
    let result = new Quotation_Details();
    result.init(json);
    return result;
  }
}

export class Quotation {
  customerId!: number | undefined;
  customer!: Customer;
  readonly quotationDetails!: Quotation_Details[] | undefined;
  approveState!: ApproveState;
  approveTime!: dayjs.Dayjs | undefined;
  approveUserId!: number | undefined;
  approveUser!: User;
  reason!: string | undefined;
  totalCost!: number | undefined;
  containtCarriage!: boolean;
  carriageCost!: number | undefined;
  byTimes!: boolean;
  unitCostByTimes!: number | undefined;
  serviceUnitCostByTimes!: number | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customerId = _data['customerId'];
      this.customer = _data['customer']
        ? Customer.fromJS(_data['customer'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['quotationDetails'])) {
        (<any>this).quotationDetails = [] as any;
        for (let item of _data['quotationDetails'])
          (<any>this).quotationDetails!.push(Quotation_Details.fromJS(item, _mappings));
      }
      this.approveState = _data['approveState'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.approveUserId = _data['approveUserId'];
      this.approveUser = _data['approveUser']
        ? User.fromJS(_data['approveUser'], _mappings)
        : <any>undefined;
      this.reason = _data['reason'];
      this.totalCost = _data['totalCost'];
      this.containtCarriage = _data['containtCarriage'];
      this.carriageCost = _data['carriageCost'];
      this.byTimes = _data['byTimes'];
      this.unitCostByTimes = _data['unitCostByTimes'];
      this.serviceUnitCostByTimes = _data['serviceUnitCostByTimes'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Quotation | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Quotation>(data, _mappings, Quotation);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customerId'] = this.customerId;
    data['customer'] = this.customer ? this.customer.toJSON() : <any>undefined;
    if (Array.isArray(this.quotationDetails)) {
      data['quotationDetails'] = [];
      for (let item of this.quotationDetails) data['quotationDetails'].push(item.toJSON());
    }
    data['approveState'] = this.approveState;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['approveUserId'] = this.approveUserId;
    data['approveUser'] = this.approveUser ? this.approveUser.toJSON() : <any>undefined;
    data['reason'] = this.reason;
    data['totalCost'] = this.totalCost;
    data['containtCarriage'] = this.containtCarriage;
    data['carriageCost'] = this.carriageCost;
    data['byTimes'] = this.byTimes;
    data['unitCostByTimes'] = this.unitCostByTimes;
    data['serviceUnitCostByTimes'] = this.serviceUnitCostByTimes;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Quotation {
    const json = this.toJSON();
    let result = new Quotation();
    result.init(json);
    return result;
  }
}

export class InvoiceInformation {
  entName!: string | undefined;
  taxNumber!: string | undefined;
  address!: string | undefined;
  phoneNo!: string | undefined;
  bankName!: string | undefined;
  accountNumber!: string | undefined;
  ossFileNames!: string | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entName = _data['entName'];
      this.taxNumber = _data['taxNumber'];
      this.address = _data['address'];
      this.phoneNo = _data['phoneNo'];
      this.bankName = _data['bankName'];
      this.accountNumber = _data['accountNumber'];
      this.ossFileNames = _data['ossFileNames'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): InvoiceInformation | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<InvoiceInformation>(data, _mappings, InvoiceInformation);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entName'] = this.entName;
    data['taxNumber'] = this.taxNumber;
    data['address'] = this.address;
    data['phoneNo'] = this.phoneNo;
    data['bankName'] = this.bankName;
    data['accountNumber'] = this.accountNumber;
    data['ossFileNames'] = this.ossFileNames;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): InvoiceInformation {
    const json = this.toJSON();
    let result = new InvoiceInformation();
    result.init(json);
    return result;
  }
}

export class Contract {
  quotationId!: number | undefined;
  quotation!: Quotation;
  invoiceInformationId!: number | undefined;
  invoiceInformation!: InvoiceInformation;
  contractNo!: string | undefined;
  accountPeriod!: number;
  salesManagerApproveState!: ApproveState;
  salesManagerApproveTime!: dayjs.Dayjs | undefined;
  salesManagerApproveUserId!: number | undefined;
  salesManagerApproveUser!: User;
  salesManagerReason!: string | undefined;
  generalManagerApproveState!: ApproveState;
  generalManagerApproveTime!: dayjs.Dayjs | undefined;
  generalManagerApproveUserId!: number | undefined;
  generalManagerApproveUser!: User;
  generalManagerReason!: string | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.quotationId = _data['quotationId'];
      this.quotation = _data['quotation']
        ? Quotation.fromJS(_data['quotation'], _mappings)
        : <any>undefined;
      this.invoiceInformationId = _data['invoiceInformationId'];
      this.invoiceInformation = _data['invoiceInformation']
        ? InvoiceInformation.fromJS(_data['invoiceInformation'], _mappings)
        : <any>undefined;
      this.contractNo = _data['contractNo'];
      this.accountPeriod = _data['accountPeriod'];
      this.salesManagerApproveState = _data['salesManagerApproveState'];
      this.salesManagerApproveTime = _data['salesManagerApproveTime']
        ? dayjs(_data['salesManagerApproveTime'].toString())
        : <any>undefined;
      this.salesManagerApproveUserId = _data['salesManagerApproveUserId'];
      this.salesManagerApproveUser = _data['salesManagerApproveUser']
        ? User.fromJS(_data['salesManagerApproveUser'], _mappings)
        : <any>undefined;
      this.salesManagerReason = _data['salesManagerReason'];
      this.generalManagerApproveState = _data['generalManagerApproveState'];
      this.generalManagerApproveTime = _data['generalManagerApproveTime']
        ? dayjs(_data['generalManagerApproveTime'].toString())
        : <any>undefined;
      this.generalManagerApproveUserId = _data['generalManagerApproveUserId'];
      this.generalManagerApproveUser = _data['generalManagerApproveUser']
        ? User.fromJS(_data['generalManagerApproveUser'], _mappings)
        : <any>undefined;
      this.generalManagerReason = _data['generalManagerReason'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Contract | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Contract>(data, _mappings, Contract);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['quotationId'] = this.quotationId;
    data['quotation'] = this.quotation ? this.quotation.toJSON() : <any>undefined;
    data['invoiceInformationId'] = this.invoiceInformationId;
    data['invoiceInformation'] = this.invoiceInformation
      ? this.invoiceInformation.toJSON()
      : <any>undefined;
    data['contractNo'] = this.contractNo;
    data['accountPeriod'] = this.accountPeriod;
    data['salesManagerApproveState'] = this.salesManagerApproveState;
    data['salesManagerApproveTime'] = this.salesManagerApproveTime
      ? this.salesManagerApproveTime.toISOString()
      : <any>undefined;
    data['salesManagerApproveUserId'] = this.salesManagerApproveUserId;
    data['salesManagerApproveUser'] = this.salesManagerApproveUser
      ? this.salesManagerApproveUser.toJSON()
      : <any>undefined;
    data['salesManagerReason'] = this.salesManagerReason;
    data['generalManagerApproveState'] = this.generalManagerApproveState;
    data['generalManagerApproveTime'] = this.generalManagerApproveTime
      ? this.generalManagerApproveTime.toISOString()
      : <any>undefined;
    data['generalManagerApproveUserId'] = this.generalManagerApproveUserId;
    data['generalManagerApproveUser'] = this.generalManagerApproveUser
      ? this.generalManagerApproveUser.toJSON()
      : <any>undefined;
    data['generalManagerReason'] = this.generalManagerReason;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Contract {
    const json = this.toJSON();
    let result = new Contract();
    result.init(json);
    return result;
  }
}

export class LogisticsCompany {
  entName!: string | undefined;
  cantonCode!: string | undefined;
  linkName!: string | undefined;
  phoneNo!: string | undefined;
  address!: string | undefined;
  ossFileNames!: string | undefined;
  businessLicenseOssFile!: string | undefined;
  roadTransportLicenseOssFile!: string | undefined;
  transportContractOssFile!: string | undefined;
  insuranceOssFile!: string | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entName = _data['entName'];
      this.cantonCode = _data['cantonCode'];
      this.linkName = _data['linkName'];
      this.phoneNo = _data['phoneNo'];
      this.address = _data['address'];
      this.ossFileNames = _data['ossFileNames'];
      this.businessLicenseOssFile = _data['businessLicenseOssFile'];
      this.roadTransportLicenseOssFile = _data['roadTransportLicenseOssFile'];
      this.transportContractOssFile = _data['transportContractOssFile'];
      this.insuranceOssFile = _data['insuranceOssFile'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): LogisticsCompany | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LogisticsCompany>(data, _mappings, LogisticsCompany);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entName'] = this.entName;
    data['cantonCode'] = this.cantonCode;
    data['linkName'] = this.linkName;
    data['phoneNo'] = this.phoneNo;
    data['address'] = this.address;
    data['ossFileNames'] = this.ossFileNames;
    data['businessLicenseOssFile'] = this.businessLicenseOssFile;
    data['roadTransportLicenseOssFile'] = this.roadTransportLicenseOssFile;
    data['transportContractOssFile'] = this.transportContractOssFile;
    data['insuranceOssFile'] = this.insuranceOssFile;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): LogisticsCompany {
    const json = this.toJSON();
    let result = new LogisticsCompany();
    result.init(json);
    return result;
  }
}

export class Vehicle {
  logisticsCompanyId!: number | undefined;
  logisticsCompany!: LogisticsCompany;
  vehicleNo!: string | undefined;
  vehicleNum!: string | undefined;
  ossFileNames!: string | undefined;
  drivingLicenseOssFile!: string | undefined;
  roadTransportLicenseOssFile!: string | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.logisticsCompanyId = _data['logisticsCompanyId'];
      this.logisticsCompany = _data['logisticsCompany']
        ? LogisticsCompany.fromJS(_data['logisticsCompany'], _mappings)
        : <any>undefined;
      this.vehicleNo = _data['vehicleNo'];
      this.vehicleNum = _data['vehicleNum'];
      this.ossFileNames = _data['ossFileNames'];
      this.drivingLicenseOssFile = _data['drivingLicenseOssFile'];
      this.roadTransportLicenseOssFile = _data['roadTransportLicenseOssFile'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Vehicle | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Vehicle>(data, _mappings, Vehicle);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['logisticsCompanyId'] = this.logisticsCompanyId;
    data['logisticsCompany'] = this.logisticsCompany
      ? this.logisticsCompany.toJSON()
      : <any>undefined;
    data['vehicleNo'] = this.vehicleNo;
    data['vehicleNum'] = this.vehicleNum;
    data['ossFileNames'] = this.ossFileNames;
    data['drivingLicenseOssFile'] = this.drivingLicenseOssFile;
    data['roadTransportLicenseOssFile'] = this.roadTransportLicenseOssFile;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Vehicle {
    const json = this.toJSON();
    let result = new Vehicle();
    result.init(json);
    return result;
  }
}

export class Driver {
  logisticsCompanyId!: number | undefined;
  logisticsCompany!: LogisticsCompany;
  driverName!: string | undefined;
  driverPhone!: string | undefined;
  driverNo!: string | undefined;
  driverNoOssFile!: string | undefined;
  driverLicense!: string | undefined;
  driverLicenseOssFile!: string | undefined;
  qualificationOssFile!: string | undefined;
  ossFileNames!: string | undefined;
  supercargo!: boolean;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.logisticsCompanyId = _data['logisticsCompanyId'];
      this.logisticsCompany = _data['logisticsCompany']
        ? LogisticsCompany.fromJS(_data['logisticsCompany'], _mappings)
        : <any>undefined;
      this.driverName = _data['driverName'];
      this.driverPhone = _data['driverPhone'];
      this.driverNo = _data['driverNo'];
      this.driverNoOssFile = _data['driverNoOssFile'];
      this.driverLicense = _data['driverLicense'];
      this.driverLicenseOssFile = _data['driverLicenseOssFile'];
      this.qualificationOssFile = _data['qualificationOssFile'];
      this.ossFileNames = _data['ossFileNames'];
      this.supercargo = _data['supercargo'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Driver | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Driver>(data, _mappings, Driver);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['logisticsCompanyId'] = this.logisticsCompanyId;
    data['logisticsCompany'] = this.logisticsCompany
      ? this.logisticsCompany.toJSON()
      : <any>undefined;
    data['driverName'] = this.driverName;
    data['driverPhone'] = this.driverPhone;
    data['driverNo'] = this.driverNo;
    data['driverNoOssFile'] = this.driverNoOssFile;
    data['driverLicense'] = this.driverLicense;
    data['driverLicenseOssFile'] = this.driverLicenseOssFile;
    data['qualificationOssFile'] = this.qualificationOssFile;
    data['ossFileNames'] = this.ossFileNames;
    data['supercargo'] = this.supercargo;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Driver {
    const json = this.toJSON();
    let result = new Driver();
    result.init(json);
    return result;
  }
}

export class InStorage_HW {
  inStorageId!: number;
  inStorage!: InStorage;
  quotationDetailId!: number;
  quotationDetail!: Quotation_Details;
  transportWeight!: number | undefined;
  rejectedWeight!: number | undefined;
  actualWeight!: number | undefined;
  warehouse!: string | undefined;
  inStorageTime!: dayjs.Dayjs | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.inStorageId = _data['inStorageId'];
      this.inStorage = _data['inStorage']
        ? InStorage.fromJS(_data['inStorage'], _mappings)
        : <any>undefined;
      this.quotationDetailId = _data['quotationDetailId'];
      this.quotationDetail = _data['quotationDetail']
        ? Quotation_Details.fromJS(_data['quotationDetail'], _mappings)
        : <any>undefined;
      this.transportWeight = _data['transportWeight'];
      this.rejectedWeight = _data['rejectedWeight'];
      this.actualWeight = _data['actualWeight'];
      this.warehouse = _data['warehouse'];
      this.inStorageTime = _data['inStorageTime']
        ? dayjs(_data['inStorageTime'].toString())
        : <any>undefined;
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): InStorage_HW | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<InStorage_HW>(data, _mappings, InStorage_HW);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['inStorageId'] = this.inStorageId;
    data['inStorage'] = this.inStorage ? this.inStorage.toJSON() : <any>undefined;
    data['quotationDetailId'] = this.quotationDetailId;
    data['quotationDetail'] = this.quotationDetail ? this.quotationDetail.toJSON() : <any>undefined;
    data['transportWeight'] = this.transportWeight;
    data['rejectedWeight'] = this.rejectedWeight;
    data['actualWeight'] = this.actualWeight;
    data['warehouse'] = this.warehouse;
    data['inStorageTime'] = this.inStorageTime ? this.inStorageTime.toISOString() : <any>undefined;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): InStorage_HW {
    const json = this.toJSON();
    let result = new InStorage_HW();
    result.init(json);
    return result;
  }
}

export class InStorage {
  dispatchOrderId!: number | undefined;
  dispatchOrder!: DispatchOrder;
  salesInvoiceId!: number | undefined;
  salesInvoice!: Invoice_Sales;
  readonly inStorageHWs!: InStorage_HW[] | undefined;
  warehouse!: string | undefined;
  inStorageTime!: dayjs.Dayjs | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.dispatchOrderId = _data['dispatchOrderId'];
      this.dispatchOrder = _data['dispatchOrder']
        ? DispatchOrder.fromJS(_data['dispatchOrder'], _mappings)
        : <any>undefined;
      this.salesInvoiceId = _data['salesInvoiceId'];
      this.salesInvoice = _data['salesInvoice']
        ? Invoice_Sales.fromJS(_data['salesInvoice'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['inStorageHWs'])) {
        (<any>this).inStorageHWs = [] as any;
        for (let item of _data['inStorageHWs'])
          (<any>this).inStorageHWs!.push(InStorage_HW.fromJS(item, _mappings));
      }
      this.warehouse = _data['warehouse'];
      this.inStorageTime = _data['inStorageTime']
        ? dayjs(_data['inStorageTime'].toString())
        : <any>undefined;
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): InStorage | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<InStorage>(data, _mappings, InStorage);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['dispatchOrderId'] = this.dispatchOrderId;
    data['dispatchOrder'] = this.dispatchOrder ? this.dispatchOrder.toJSON() : <any>undefined;
    data['salesInvoiceId'] = this.salesInvoiceId;
    data['salesInvoice'] = this.salesInvoice ? this.salesInvoice.toJSON() : <any>undefined;
    if (Array.isArray(this.inStorageHWs)) {
      data['inStorageHWs'] = [];
      for (let item of this.inStorageHWs) data['inStorageHWs'].push(item.toJSON());
    }
    data['warehouse'] = this.warehouse;
    data['inStorageTime'] = this.inStorageTime ? this.inStorageTime.toISOString() : <any>undefined;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): InStorage {
    const json = this.toJSON();
    let result = new InStorage();
    result.init(json);
    return result;
  }
}

export class DispatchOrder {
  contractId!: number | undefined;
  contract!: Contract;
  customerId!: number;
  customer!: Customer;
  vehicleId!: number | undefined;
  vehicle!: Vehicle;
  driverId!: number | undefined;
  driver!: Driver;
  readonly inStorages!: InStorage[] | undefined;
  predictionWeight!: number | undefined;
  kilometers!: number | undefined;
  transportTime!: dayjs.Dayjs | undefined;
  receiveApprove!: ReceiveApprove;
  approveTime!: dayjs.Dayjs | undefined;
  approveUserId!: number | undefined;
  approveUser!: User;
  reason!: string | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.contractId = _data['contractId'];
      this.contract = _data['contract']
        ? Contract.fromJS(_data['contract'], _mappings)
        : <any>undefined;
      this.customerId = _data['customerId'];
      this.customer = _data['customer']
        ? Customer.fromJS(_data['customer'], _mappings)
        : <any>undefined;
      this.vehicleId = _data['vehicleId'];
      this.vehicle = _data['vehicle']
        ? Vehicle.fromJS(_data['vehicle'], _mappings)
        : <any>undefined;
      this.driverId = _data['driverId'];
      this.driver = _data['driver'] ? Driver.fromJS(_data['driver'], _mappings) : <any>undefined;
      if (Array.isArray(_data['inStorages'])) {
        (<any>this).inStorages = [] as any;
        for (let item of _data['inStorages'])
          (<any>this).inStorages!.push(InStorage.fromJS(item, _mappings));
      }
      this.predictionWeight = _data['predictionWeight'];
      this.kilometers = _data['kilometers'];
      this.transportTime = _data['transportTime']
        ? dayjs(_data['transportTime'].toString())
        : <any>undefined;
      this.receiveApprove = _data['receiveApprove'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.approveUserId = _data['approveUserId'];
      this.approveUser = _data['approveUser']
        ? User.fromJS(_data['approveUser'], _mappings)
        : <any>undefined;
      this.reason = _data['reason'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): DispatchOrder | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DispatchOrder>(data, _mappings, DispatchOrder);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['contractId'] = this.contractId;
    data['contract'] = this.contract ? this.contract.toJSON() : <any>undefined;
    data['customerId'] = this.customerId;
    data['customer'] = this.customer ? this.customer.toJSON() : <any>undefined;
    data['vehicleId'] = this.vehicleId;
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    data['driverId'] = this.driverId;
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    if (Array.isArray(this.inStorages)) {
      data['inStorages'] = [];
      for (let item of this.inStorages) data['inStorages'].push(item.toJSON());
    }
    data['predictionWeight'] = this.predictionWeight;
    data['kilometers'] = this.kilometers;
    data['transportTime'] = this.transportTime ? this.transportTime.toISOString() : <any>undefined;
    data['receiveApprove'] = this.receiveApprove;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['approveUserId'] = this.approveUserId;
    data['approveUser'] = this.approveUser ? this.approveUser.toJSON() : <any>undefined;
    data['reason'] = this.reason;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): DispatchOrder {
    const json = this.toJSON();
    let result = new DispatchOrder();
    result.init(json);
    return result;
  }
}

export class Customer {
  readonly customerFollowUps!: Customer_FollowUp[] | undefined;
  readonly customerFiles!: Customer_Files[] | undefined;
  readonly customerHWs!: Customer_HW[] | undefined;
  readonly quotations!: Quotation[] | undefined;
  readonly dispatchOrders!: DispatchOrder[] | undefined;
  readonly invoiceSales!: Invoice_Sales[] | undefined;
  customerName!: string | undefined;
  cantonCode!: string | undefined;
  linkName!: string | undefined;
  duty!: string | undefined;
  maxStorageCapacity!: number | undefined;
  phoneNo!: string | undefined;
  email!: string | undefined;
  address!: string | undefined;
  industry!: string | undefined;
  longitude!: number | undefined;
  latitude!: number | undefined;
  entId!: number | undefined;
  ent!: Enterprise_Async;
  state!: number;
  responsibleUserId!: number | undefined;
  responsibleUser!: User;
  ossFileNames!: string | undefined;
  currentState!: CustomerState;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['customerFollowUps'])) {
        (<any>this).customerFollowUps = [] as any;
        for (let item of _data['customerFollowUps'])
          (<any>this).customerFollowUps!.push(Customer_FollowUp.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['customerFiles'])) {
        (<any>this).customerFiles = [] as any;
        for (let item of _data['customerFiles'])
          (<any>this).customerFiles!.push(Customer_Files.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['customerHWs'])) {
        (<any>this).customerHWs = [] as any;
        for (let item of _data['customerHWs'])
          (<any>this).customerHWs!.push(Customer_HW.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['quotations'])) {
        (<any>this).quotations = [] as any;
        for (let item of _data['quotations'])
          (<any>this).quotations!.push(Quotation.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['dispatchOrders'])) {
        (<any>this).dispatchOrders = [] as any;
        for (let item of _data['dispatchOrders'])
          (<any>this).dispatchOrders!.push(DispatchOrder.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['invoiceSales'])) {
        (<any>this).invoiceSales = [] as any;
        for (let item of _data['invoiceSales'])
          (<any>this).invoiceSales!.push(Invoice_Sales.fromJS(item, _mappings));
      }
      this.customerName = _data['customerName'];
      this.cantonCode = _data['cantonCode'];
      this.linkName = _data['linkName'];
      this.duty = _data['duty'];
      this.maxStorageCapacity = _data['maxStorageCapacity'];
      this.phoneNo = _data['phoneNo'];
      this.email = _data['email'];
      this.address = _data['address'];
      this.industry = _data['industry'];
      this.longitude = _data['longitude'];
      this.latitude = _data['latitude'];
      this.entId = _data['entId'];
      this.ent = _data['ent'] ? Enterprise_Async.fromJS(_data['ent'], _mappings) : <any>undefined;
      this.state = _data['state'];
      this.responsibleUserId = _data['responsibleUserId'];
      this.responsibleUser = _data['responsibleUser']
        ? User.fromJS(_data['responsibleUser'], _mappings)
        : <any>undefined;
      this.ossFileNames = _data['ossFileNames'];
      this.currentState = _data['currentState'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Customer | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Customer>(data, _mappings, Customer);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.customerFollowUps)) {
      data['customerFollowUps'] = [];
      for (let item of this.customerFollowUps) data['customerFollowUps'].push(item.toJSON());
    }
    if (Array.isArray(this.customerFiles)) {
      data['customerFiles'] = [];
      for (let item of this.customerFiles) data['customerFiles'].push(item.toJSON());
    }
    if (Array.isArray(this.customerHWs)) {
      data['customerHWs'] = [];
      for (let item of this.customerHWs) data['customerHWs'].push(item.toJSON());
    }
    if (Array.isArray(this.quotations)) {
      data['quotations'] = [];
      for (let item of this.quotations) data['quotations'].push(item.toJSON());
    }
    if (Array.isArray(this.dispatchOrders)) {
      data['dispatchOrders'] = [];
      for (let item of this.dispatchOrders) data['dispatchOrders'].push(item.toJSON());
    }
    if (Array.isArray(this.invoiceSales)) {
      data['invoiceSales'] = [];
      for (let item of this.invoiceSales) data['invoiceSales'].push(item.toJSON());
    }
    data['customerName'] = this.customerName;
    data['cantonCode'] = this.cantonCode;
    data['linkName'] = this.linkName;
    data['duty'] = this.duty;
    data['maxStorageCapacity'] = this.maxStorageCapacity;
    data['phoneNo'] = this.phoneNo;
    data['email'] = this.email;
    data['address'] = this.address;
    data['industry'] = this.industry;
    data['longitude'] = this.longitude;
    data['latitude'] = this.latitude;
    data['entId'] = this.entId;
    data['ent'] = this.ent ? this.ent.toJSON() : <any>undefined;
    data['state'] = this.state;
    data['responsibleUserId'] = this.responsibleUserId;
    data['responsibleUser'] = this.responsibleUser ? this.responsibleUser.toJSON() : <any>undefined;
    data['ossFileNames'] = this.ossFileNames;
    data['currentState'] = this.currentState;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Customer {
    const json = this.toJSON();
    let result = new Customer();
    result.init(json);
    return result;
  }
}

export class PaymentCollection {
  invoiceFinanceId!: number | undefined;
  invoiceFinance!: Invoice_Finance;
  paymentAmount!: number | undefined;
  paymentTime!: dayjs.Dayjs | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.invoiceFinanceId = _data['invoiceFinanceId'];
      this.invoiceFinance = _data['invoiceFinance']
        ? Invoice_Finance.fromJS(_data['invoiceFinance'], _mappings)
        : <any>undefined;
      this.paymentAmount = _data['paymentAmount'];
      this.paymentTime = _data['paymentTime']
        ? dayjs(_data['paymentTime'].toString())
        : <any>undefined;
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): PaymentCollection | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PaymentCollection>(data, _mappings, PaymentCollection);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['invoiceFinanceId'] = this.invoiceFinanceId;
    data['invoiceFinance'] = this.invoiceFinance ? this.invoiceFinance.toJSON() : <any>undefined;
    data['paymentAmount'] = this.paymentAmount;
    data['paymentTime'] = this.paymentTime ? this.paymentTime.toISOString() : <any>undefined;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): PaymentCollection {
    const json = this.toJSON();
    let result = new PaymentCollection();
    result.init(json);
    return result;
  }
}

export class Invoice_Finance {
  invoiceSalesId!: number | undefined;
  invoiceSales!: Invoice_Sales;
  readonly paymentCollections!: PaymentCollection[] | undefined;
  invoiceNo!: string | undefined;
  invoiceTime!: dayjs.Dayjs | undefined;
  sendTime!: dayjs.Dayjs | undefined;
  expressNo!: string | undefined;
  invoiceAmount!: number | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.invoiceSalesId = _data['invoiceSalesId'];
      this.invoiceSales = _data['invoiceSales']
        ? Invoice_Sales.fromJS(_data['invoiceSales'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['paymentCollections'])) {
        (<any>this).paymentCollections = [] as any;
        for (let item of _data['paymentCollections'])
          (<any>this).paymentCollections!.push(PaymentCollection.fromJS(item, _mappings));
      }
      this.invoiceNo = _data['invoiceNo'];
      this.invoiceTime = _data['invoiceTime']
        ? dayjs(_data['invoiceTime'].toString())
        : <any>undefined;
      this.sendTime = _data['sendTime'] ? dayjs(_data['sendTime'].toString()) : <any>undefined;
      this.expressNo = _data['expressNo'];
      this.invoiceAmount = _data['invoiceAmount'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Invoice_Finance | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Invoice_Finance>(data, _mappings, Invoice_Finance);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['invoiceSalesId'] = this.invoiceSalesId;
    data['invoiceSales'] = this.invoiceSales ? this.invoiceSales.toJSON() : <any>undefined;
    if (Array.isArray(this.paymentCollections)) {
      data['paymentCollections'] = [];
      for (let item of this.paymentCollections) data['paymentCollections'].push(item.toJSON());
    }
    data['invoiceNo'] = this.invoiceNo;
    data['invoiceTime'] = this.invoiceTime ? this.invoiceTime.toISOString() : <any>undefined;
    data['sendTime'] = this.sendTime ? this.sendTime.toISOString() : <any>undefined;
    data['expressNo'] = this.expressNo;
    data['invoiceAmount'] = this.invoiceAmount;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Invoice_Finance {
    const json = this.toJSON();
    let result = new Invoice_Finance();
    result.init(json);
    return result;
  }
}

export class Invoice_Sales {
  customerId!: number;
  customer!: Customer;
  readonly invoiceSalesDetails!: Invoice_SalesDetails[] | undefined;
  readonly inStorages!: InStorage[] | undefined;
  readonly invoiceFinanceCollections!: Invoice_Finance[] | undefined;
  actualAllWeight!: number | undefined;
  contractUnitCost!: number | undefined;
  unitCost!: number | undefined;
  invoiceAmount!: number | undefined;
  needInvoiceAmount!: number | undefined;
  approveState!: ApproveState;
  approveUserId!: number | undefined;
  approveUser!: User;
  approveTime!: dayjs.Dayjs | undefined;
  reason!: string | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.customerId = _data['customerId'];
      this.customer = _data['customer']
        ? Customer.fromJS(_data['customer'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['invoiceSalesDetails'])) {
        (<any>this).invoiceSalesDetails = [] as any;
        for (let item of _data['invoiceSalesDetails'])
          (<any>this).invoiceSalesDetails!.push(Invoice_SalesDetails.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['inStorages'])) {
        (<any>this).inStorages = [] as any;
        for (let item of _data['inStorages'])
          (<any>this).inStorages!.push(InStorage.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['invoiceFinanceCollections'])) {
        (<any>this).invoiceFinanceCollections = [] as any;
        for (let item of _data['invoiceFinanceCollections'])
          (<any>this).invoiceFinanceCollections!.push(Invoice_Finance.fromJS(item, _mappings));
      }
      this.actualAllWeight = _data['actualAllWeight'];
      this.contractUnitCost = _data['contractUnitCost'];
      this.unitCost = _data['unitCost'];
      this.invoiceAmount = _data['invoiceAmount'];
      this.needInvoiceAmount = _data['needInvoiceAmount'];
      this.approveState = _data['approveState'];
      this.approveUserId = _data['approveUserId'];
      this.approveUser = _data['approveUser']
        ? User.fromJS(_data['approveUser'], _mappings)
        : <any>undefined;
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.reason = _data['reason'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Invoice_Sales | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Invoice_Sales>(data, _mappings, Invoice_Sales);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['customerId'] = this.customerId;
    data['customer'] = this.customer ? this.customer.toJSON() : <any>undefined;
    if (Array.isArray(this.invoiceSalesDetails)) {
      data['invoiceSalesDetails'] = [];
      for (let item of this.invoiceSalesDetails) data['invoiceSalesDetails'].push(item.toJSON());
    }
    if (Array.isArray(this.inStorages)) {
      data['inStorages'] = [];
      for (let item of this.inStorages) data['inStorages'].push(item.toJSON());
    }
    if (Array.isArray(this.invoiceFinanceCollections)) {
      data['invoiceFinanceCollections'] = [];
      for (let item of this.invoiceFinanceCollections)
        data['invoiceFinanceCollections'].push(item.toJSON());
    }
    data['actualAllWeight'] = this.actualAllWeight;
    data['contractUnitCost'] = this.contractUnitCost;
    data['unitCost'] = this.unitCost;
    data['invoiceAmount'] = this.invoiceAmount;
    data['needInvoiceAmount'] = this.needInvoiceAmount;
    data['approveState'] = this.approveState;
    data['approveUserId'] = this.approveUserId;
    data['approveUser'] = this.approveUser ? this.approveUser.toJSON() : <any>undefined;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['reason'] = this.reason;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Invoice_Sales {
    const json = this.toJSON();
    let result = new Invoice_Sales();
    result.init(json);
    return result;
  }
}

export class Invoice_SalesDetails {
  invoiceSaleId!: number;
  invoiceSale!: Invoice_Sales;
  invoiceType!: string | undefined;
  amount!: number;
  isSystem!: boolean | undefined;
  remark!: string | undefined;
  tenantId!: number;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  creatorUser!: User;
  lastModifierUserId!: number | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  isDeleted!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.invoiceSaleId = _data['invoiceSaleId'];
      this.invoiceSale = _data['invoiceSale']
        ? Invoice_Sales.fromJS(_data['invoiceSale'], _mappings)
        : <any>undefined;
      this.invoiceType = _data['invoiceType'];
      this.amount = _data['amount'];
      this.isSystem = _data['isSystem'];
      this.remark = _data['remark'];
      this.tenantId = _data['tenantId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.creatorUser = _data['creatorUser']
        ? User.fromJS(_data['creatorUser'], _mappings)
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): Invoice_SalesDetails | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Invoice_SalesDetails>(data, _mappings, Invoice_SalesDetails);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['invoiceSaleId'] = this.invoiceSaleId;
    data['invoiceSale'] = this.invoiceSale ? this.invoiceSale.toJSON() : <any>undefined;
    data['invoiceType'] = this.invoiceType;
    data['amount'] = this.amount;
    data['isSystem'] = this.isSystem;
    data['remark'] = this.remark;
    data['tenantId'] = this.tenantId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['creatorUser'] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['id'] = this.id;
    return data;
  }

  clone(): Invoice_SalesDetails {
    const json = this.toJSON();
    let result = new Invoice_SalesDetails();
    result.init(json);
    return result;
  }
}

/** 销售开票详情 */
export class InvoiceSalesDetails {
  id!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 申请批次数、待开批次数 */
  batchCount!: number;
  approveState!: ApproveState;
  approveStateStr!: string | undefined;
  /** 审核时间 */
  approveTime!: dayjs.Dayjs | undefined;
  /** 实际开票金额 */
  invoiceAmount!: number | undefined;
  /** 实际入库重量 */
  actualWeight!: number | undefined;
  /** 拒收重量 */
  rejectedWeight!: number | undefined;
  /** 入库详情 */
  inStorageList!: InStorageListDto[] | undefined;
  /** 销售开票详情列表 */
  invoiceSalesDetailList!: Invoice_SalesDetails[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerName = _data['customerName'];
      this.customerId = _data['customerId'];
      this.cantonName = _data['cantonName'];
      this.batchCount = _data['batchCount'];
      this.approveState = _data['approveState'];
      this.approveStateStr = _data['approveStateStr'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.invoiceAmount = _data['invoiceAmount'];
      this.actualWeight = _data['actualWeight'];
      this.rejectedWeight = _data['rejectedWeight'];
      if (Array.isArray(_data['inStorageList'])) {
        this.inStorageList = [] as any;
        for (let item of _data['inStorageList'])
          this.inStorageList!.push(InStorageListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['invoiceSalesDetailList'])) {
        this.invoiceSalesDetailList = [] as any;
        for (let item of _data['invoiceSalesDetailList'])
          this.invoiceSalesDetailList!.push(Invoice_SalesDetails.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): InvoiceSalesDetails | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<InvoiceSalesDetails>(data, _mappings, InvoiceSalesDetails);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerName'] = this.customerName;
    data['customerId'] = this.customerId;
    data['cantonName'] = this.cantonName;
    data['batchCount'] = this.batchCount;
    data['approveState'] = this.approveState;
    data['approveStateStr'] = this.approveStateStr;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['invoiceAmount'] = this.invoiceAmount;
    data['actualWeight'] = this.actualWeight;
    data['rejectedWeight'] = this.rejectedWeight;
    if (Array.isArray(this.inStorageList)) {
      data['inStorageList'] = [];
      for (let item of this.inStorageList) data['inStorageList'].push(item.toJSON());
    }
    if (Array.isArray(this.invoiceSalesDetailList)) {
      data['invoiceSalesDetailList'] = [];
      for (let item of this.invoiceSalesDetailList)
        data['invoiceSalesDetailList'].push(item.toJSON());
    }
    return data;
  }

  clone(): InvoiceSalesDetails {
    const json = this.toJSON();
    let result = new InvoiceSalesDetails();
    result.init(json);
    return result;
  }
}

/** 读取可编辑销售开票管理的Dto */
export class GetInvoice_SalesForEditOutput {
  invoice_Sales!: Invoice_SalesEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.invoice_Sales = _data['invoice_Sales']
        ? Invoice_SalesEditDto.fromJS(_data['invoice_Sales'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetInvoice_SalesForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetInvoice_SalesForEditOutput>(
      data,
      _mappings,
      GetInvoice_SalesForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['invoice_Sales'] = this.invoice_Sales ? this.invoice_Sales.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetInvoice_SalesForEditOutput {
    const json = this.toJSON();
    let result = new GetInvoice_SalesForEditOutput();
    result.init(json);
    return result;
  }
}

/** 销售开票详情 */
export class Invoice_SalesDetailDto {
  /** 处置费用 */
  disposalAmount!: number | undefined;
  /** 运输费用 */
  carriageAmount!: number | undefined;
  /** 实际入库重量 */
  actualWeight!: number | undefined;
  /** 拒收重量 */
  rejectedWeight!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.disposalAmount = _data['disposalAmount'];
      this.carriageAmount = _data['carriageAmount'];
      this.actualWeight = _data['actualWeight'];
      this.rejectedWeight = _data['rejectedWeight'];
    }
  }

  static fromJS(data: any, _mappings?: any): Invoice_SalesDetailDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Invoice_SalesDetailDto>(data, _mappings, Invoice_SalesDetailDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['disposalAmount'] = this.disposalAmount;
    data['carriageAmount'] = this.carriageAmount;
    data['actualWeight'] = this.actualWeight;
    data['rejectedWeight'] = this.rejectedWeight;
    return data;
  }

  clone(): Invoice_SalesDetailDto {
    const json = this.toJSON();
    let result = new Invoice_SalesDetailDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfInvoice_SalesListDto {
  totalCount!: number;
  items!: Invoice_SalesListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Invoice_SalesListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfInvoice_SalesListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfInvoice_SalesListDto>(
      data,
      _mappings,
      PagedResultDtoOfInvoice_SalesListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfInvoice_SalesListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfInvoice_SalesListDto();
    result.init(json);
    return result;
  }
}

/** 开票资料的列表DTO Erinyes.CRM.InvoiceInformation */
export class InvoiceInformationEditDto {
  /** Id */
  id!: number | undefined;
  /** 公司名称 */
  entName!: string | undefined;
  /** 纳税人识别号 */
  taxNumber!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 电话 */
  phoneNo!: string | undefined;
  /** 开户行 */
  bankName!: string | undefined;
  /** 账号 */
  accountNumber!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.entName = _data['entName'];
      this.taxNumber = _data['taxNumber'];
      this.address = _data['address'];
      this.phoneNo = _data['phoneNo'];
      this.bankName = _data['bankName'];
      this.accountNumber = _data['accountNumber'];
    }
  }

  static fromJS(data: any, _mappings?: any): InvoiceInformationEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<InvoiceInformationEditDto>(data, _mappings, InvoiceInformationEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['entName'] = this.entName;
    data['taxNumber'] = this.taxNumber;
    data['address'] = this.address;
    data['phoneNo'] = this.phoneNo;
    data['bankName'] = this.bankName;
    data['accountNumber'] = this.accountNumber;
    return data;
  }

  clone(): InvoiceInformationEditDto {
    const json = this.toJSON();
    let result = new InvoiceInformationEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateInvoiceInformationInput {
  invoiceInformation!: InvoiceInformationEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.invoiceInformation = _data['invoiceInformation']
        ? InvoiceInformationEditDto.fromJS(_data['invoiceInformation'], _mappings)
        : new InvoiceInformationEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateInvoiceInformationInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateInvoiceInformationInput>(
      data,
      _mappings,
      CreateOrUpdateInvoiceInformationInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['invoiceInformation'] = this.invoiceInformation
      ? this.invoiceInformation.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateInvoiceInformationInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateInvoiceInformationInput();
    result.init(json);
    return result;
  }
}

/** 开票资料的列表DTO Erinyes.CRM.InvoiceInformation */
export class InvoiceInformationListDto {
  id!: number;
  /** 公司名称 */
  entName!: string | undefined;
  /** 纳税人识别号 */
  taxNumber!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 电话 */
  phoneNo!: string | undefined;
  /** 开户行 */
  bankName!: string | undefined;
  /** 账号 */
  accountNumber!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.entName = _data['entName'];
      this.taxNumber = _data['taxNumber'];
      this.address = _data['address'];
      this.phoneNo = _data['phoneNo'];
      this.bankName = _data['bankName'];
      this.accountNumber = _data['accountNumber'];
    }
  }

  static fromJS(data: any, _mappings?: any): InvoiceInformationListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<InvoiceInformationListDto>(data, _mappings, InvoiceInformationListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['entName'] = this.entName;
    data['taxNumber'] = this.taxNumber;
    data['address'] = this.address;
    data['phoneNo'] = this.phoneNo;
    data['bankName'] = this.bankName;
    data['accountNumber'] = this.accountNumber;
    return data;
  }

  clone(): InvoiceInformationListDto {
    const json = this.toJSON();
    let result = new InvoiceInformationListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑开票资料的Dto */
export class GetInvoiceInformationForEditOutput {
  invoiceInformation!: InvoiceInformationEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.invoiceInformation = _data['invoiceInformation']
        ? InvoiceInformationEditDto.fromJS(_data['invoiceInformation'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetInvoiceInformationForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetInvoiceInformationForEditOutput>(
      data,
      _mappings,
      GetInvoiceInformationForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['invoiceInformation'] = this.invoiceInformation
      ? this.invoiceInformation.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): GetInvoiceInformationForEditOutput {
    const json = this.toJSON();
    let result = new GetInvoiceInformationForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfInvoiceInformationListDto {
  totalCount!: number;
  items!: InvoiceInformationListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(InvoiceInformationListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfInvoiceInformationListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfInvoiceInformationListDto>(
      data,
      _mappings,
      PagedResultDtoOfInvoiceInformationListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfInvoiceInformationListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfInvoiceInformationListDto();
    result.init(json);
    return result;
  }
}

export class LanguageEditDto {
  id!: number | undefined;
  name!: string | undefined;
  icon!: string | undefined;
  isEnabled!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.name = _data['name'];
      this.icon = _data['icon'];
      this.isEnabled = _data['isEnabled'];
    }
  }

  static fromJS(data: any, _mappings?: any): LanguageEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LanguageEditDto>(data, _mappings, LanguageEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['name'] = this.name;
    data['icon'] = this.icon;
    data['isEnabled'] = this.isEnabled;
    return data;
  }

  clone(): LanguageEditDto {
    const json = this.toJSON();
    let result = new LanguageEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateLanguageInput {
  language!: LanguageEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.language = _data['language']
        ? LanguageEditDto.fromJS(_data['language'], _mappings)
        : new LanguageEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateLanguageInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateLanguageInput>(
      data,
      _mappings,
      CreateOrUpdateLanguageInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['language'] = this.language ? this.language.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateLanguageInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateLanguageInput();
    result.init(json);
    return result;
  }
}

export class ComboboxItemDto {
  value!: string | undefined;
  displayText!: string | undefined;
  isSelected!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.value = _data['value'];
      this.displayText = _data['displayText'];
      this.isSelected = _data['isSelected'];
    }
  }

  static fromJS(data: any, _mappings?: any): ComboboxItemDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ComboboxItemDto>(data, _mappings, ComboboxItemDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value;
    data['displayText'] = this.displayText;
    data['isSelected'] = this.isSelected;
    return data;
  }

  clone(): ComboboxItemDto {
    const json = this.toJSON();
    let result = new ComboboxItemDto();
    result.init(json);
    return result;
  }
}

export class GetLanguageForEditOutput {
  language!: LanguageEditDto;
  /** 所有的语言名称 */
  languageNames!: ComboboxItemDto[] | undefined;
  /** 所有的国旗 */
  flags!: ComboboxItemDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.language = _data['language']
        ? LanguageEditDto.fromJS(_data['language'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['languageNames'])) {
        this.languageNames = [] as any;
        for (let item of _data['languageNames'])
          this.languageNames!.push(ComboboxItemDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['flags'])) {
        this.flags = [] as any;
        for (let item of _data['flags']) this.flags!.push(ComboboxItemDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetLanguageForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetLanguageForEditOutput>(data, _mappings, GetLanguageForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['language'] = this.language ? this.language.toJSON() : <any>undefined;
    if (Array.isArray(this.languageNames)) {
      data['languageNames'] = [];
      for (let item of this.languageNames) data['languageNames'].push(item.toJSON());
    }
    if (Array.isArray(this.flags)) {
      data['flags'] = [];
      for (let item of this.flags) data['flags'].push(item.toJSON());
    }
    return data;
  }

  clone(): GetLanguageForEditOutput {
    const json = this.toJSON();
    let result = new GetLanguageForEditOutput();
    result.init(json);
    return result;
  }
}

export class LanguageListDto {
  tenantId!: number | undefined;
  /** 名称 */
  name!: string | undefined;
  /** 显示名称 */
  displayName!: string | undefined;
  /** 图标 */
  icon!: string | undefined;
  isDisabled!: boolean;
  isDeleted!: boolean;
  deleterUserId!: number | undefined;
  deletionTime!: dayjs.Dayjs | undefined;
  lastModificationTime!: dayjs.Dayjs | undefined;
  lastModifierUserId!: number | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.name = _data['name'];
      this.displayName = _data['displayName'];
      this.icon = _data['icon'];
      this.isDisabled = _data['isDisabled'];
      this.isDeleted = _data['isDeleted'];
      this.deleterUserId = _data['deleterUserId'];
      this.deletionTime = _data['deletionTime']
        ? dayjs(_data['deletionTime'].toString())
        : <any>undefined;
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): LanguageListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LanguageListDto>(data, _mappings, LanguageListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['name'] = this.name;
    data['displayName'] = this.displayName;
    data['icon'] = this.icon;
    data['isDisabled'] = this.isDisabled;
    data['isDeleted'] = this.isDeleted;
    data['deleterUserId'] = this.deleterUserId;
    data['deletionTime'] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['id'] = this.id;
    return data;
  }

  clone(): LanguageListDto {
    const json = this.toJSON();
    let result = new LanguageListDto();
    result.init(json);
    return result;
  }
}

export class GetLanguagesOutput {
  /** 默认语言名称 */
  defaultLanguageName!: string | undefined;
  items!: LanguageListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.defaultLanguageName = _data['defaultLanguageName'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(LanguageListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetLanguagesOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetLanguagesOutput>(data, _mappings, GetLanguagesOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['defaultLanguageName'] = this.defaultLanguageName;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): GetLanguagesOutput {
    const json = this.toJSON();
    let result = new GetLanguagesOutput();
    result.init(json);
    return result;
  }
}

export class LanguageTextListDto {
  /** 键 */
  key!: string | undefined;
  /** 原始值 */
  baseValue!: string | undefined;
  /** 目标值 */
  targetValue!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.key = _data['key'];
      this.baseValue = _data['baseValue'];
      this.targetValue = _data['targetValue'];
    }
  }

  static fromJS(data: any, _mappings?: any): LanguageTextListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LanguageTextListDto>(data, _mappings, LanguageTextListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['key'] = this.key;
    data['baseValue'] = this.baseValue;
    data['targetValue'] = this.targetValue;
    return data;
  }

  clone(): LanguageTextListDto {
    const json = this.toJSON();
    let result = new LanguageTextListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfLanguageTextListDto {
  totalCount!: number;
  items!: LanguageTextListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(LanguageTextListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfLanguageTextListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfLanguageTextListDto>(
      data,
      _mappings,
      PagedResultDtoOfLanguageTextListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfLanguageTextListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfLanguageTextListDto();
    result.init(json);
    return result;
  }
}

export class SetDefaultLanguageInput {
  name!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
    }
  }

  static fromJS(data: any, _mappings?: any): SetDefaultLanguageInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SetDefaultLanguageInput>(data, _mappings, SetDefaultLanguageInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    return data;
  }

  clone(): SetDefaultLanguageInput {
    const json = this.toJSON();
    let result = new SetDefaultLanguageInput();
    result.init(json);
    return result;
  }
}

/** 更新语言输入信息 */
export class UpdateLanguageTextInput {
  languageName!: string | undefined;
  sourceName!: string | undefined;
  /** 键 */
  key!: string | undefined;
  /** 值 */
  value!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.languageName = _data['languageName'];
      this.sourceName = _data['sourceName'];
      this.key = _data['key'];
      this.value = _data['value'];
    }
  }

  static fromJS(data: any, _mappings?: any): UpdateLanguageTextInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UpdateLanguageTextInput>(data, _mappings, UpdateLanguageTextInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['languageName'] = this.languageName;
    data['sourceName'] = this.sourceName;
    data['key'] = this.key;
    data['value'] = this.value;
    return data;
  }

  clone(): UpdateLanguageTextInput {
    const json = this.toJSON();
    let result = new UpdateLanguageTextInput();
    result.init(json);
    return result;
  }
}

/** 物流公司的列表DTO Erinyes.CRM.LogisticsCompany */
export class LogisticsCompanyEditDto {
  /** Id */
  id!: number | undefined;
  /** 行政区 */
  cantonCode!: string | undefined;
  /** 联系人 */
  linkName!: string | undefined;
  /** 联系电话 */
  phoneNo!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 附件 */
  ossFileNames!: string | undefined;
  /** 公司名称 */
  entName!: string | undefined;
  remark!: string | undefined;
  /** 经营许可证文件 */
  businessLicenseOssFile!: string | undefined;
  /** 道路运输许可证文件 */
  roadTransportLicenseOssFile!: string | undefined;
  /** 运输合同许可证文件 */
  transportContractOssFile!: string | undefined;
  /** 保险许可证文件 */
  insuranceOssFile!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.cantonCode = _data['cantonCode'];
      this.linkName = _data['linkName'];
      this.phoneNo = _data['phoneNo'];
      this.address = _data['address'];
      this.ossFileNames = _data['ossFileNames'];
      this.entName = _data['entName'];
      this.remark = _data['remark'];
      this.businessLicenseOssFile = _data['businessLicenseOssFile'];
      this.roadTransportLicenseOssFile = _data['roadTransportLicenseOssFile'];
      this.transportContractOssFile = _data['transportContractOssFile'];
      this.insuranceOssFile = _data['insuranceOssFile'];
    }
  }

  static fromJS(data: any, _mappings?: any): LogisticsCompanyEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LogisticsCompanyEditDto>(data, _mappings, LogisticsCompanyEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['cantonCode'] = this.cantonCode;
    data['linkName'] = this.linkName;
    data['phoneNo'] = this.phoneNo;
    data['address'] = this.address;
    data['ossFileNames'] = this.ossFileNames;
    data['entName'] = this.entName;
    data['remark'] = this.remark;
    data['businessLicenseOssFile'] = this.businessLicenseOssFile;
    data['roadTransportLicenseOssFile'] = this.roadTransportLicenseOssFile;
    data['transportContractOssFile'] = this.transportContractOssFile;
    data['insuranceOssFile'] = this.insuranceOssFile;
    return data;
  }

  clone(): LogisticsCompanyEditDto {
    const json = this.toJSON();
    let result = new LogisticsCompanyEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateLogisticsCompanyInput {
  logisticsCompany!: LogisticsCompanyEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.logisticsCompany = _data['logisticsCompany']
        ? LogisticsCompanyEditDto.fromJS(_data['logisticsCompany'], _mappings)
        : new LogisticsCompanyEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateLogisticsCompanyInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateLogisticsCompanyInput>(
      data,
      _mappings,
      CreateOrUpdateLogisticsCompanyInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['logisticsCompany'] = this.logisticsCompany
      ? this.logisticsCompany.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateLogisticsCompanyInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateLogisticsCompanyInput();
    result.init(json);
    return result;
  }
}

/** 物流公司的列表DTO Erinyes.CRM.LogisticsCompany */
export class LogisticsCompanyListDto {
  id!: number;
  /** 行政区 */
  cantonCode!: string | undefined;
  /** 行政区 */
  cantonName!: string | undefined;
  /** 联系人 */
  linkName!: string | undefined;
  /** 联系电话 */
  phoneNo!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 附件 */
  ossFileNames!: string | undefined;
  /** 公司名称 */
  entName!: string | undefined;
  remark!: string | undefined;
  /** 经营许可证文件 */
  businessLicenseOssFile!: string | undefined;
  /** 道路运输许可证文件 */
  roadTransportLicenseOssFile!: string | undefined;
  /** 运输合同许可证文件 */
  transportContractOssFile!: string | undefined;
  /** 保险许可证文件 */
  insuranceOssFile!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.cantonCode = _data['cantonCode'];
      this.cantonName = _data['cantonName'];
      this.linkName = _data['linkName'];
      this.phoneNo = _data['phoneNo'];
      this.address = _data['address'];
      this.ossFileNames = _data['ossFileNames'];
      this.entName = _data['entName'];
      this.remark = _data['remark'];
      this.businessLicenseOssFile = _data['businessLicenseOssFile'];
      this.roadTransportLicenseOssFile = _data['roadTransportLicenseOssFile'];
      this.transportContractOssFile = _data['transportContractOssFile'];
      this.insuranceOssFile = _data['insuranceOssFile'];
    }
  }

  static fromJS(data: any, _mappings?: any): LogisticsCompanyListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LogisticsCompanyListDto>(data, _mappings, LogisticsCompanyListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['cantonCode'] = this.cantonCode;
    data['cantonName'] = this.cantonName;
    data['linkName'] = this.linkName;
    data['phoneNo'] = this.phoneNo;
    data['address'] = this.address;
    data['ossFileNames'] = this.ossFileNames;
    data['entName'] = this.entName;
    data['remark'] = this.remark;
    data['businessLicenseOssFile'] = this.businessLicenseOssFile;
    data['roadTransportLicenseOssFile'] = this.roadTransportLicenseOssFile;
    data['transportContractOssFile'] = this.transportContractOssFile;
    data['insuranceOssFile'] = this.insuranceOssFile;
    return data;
  }

  clone(): LogisticsCompanyListDto {
    const json = this.toJSON();
    let result = new LogisticsCompanyListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑物流公司的Dto */
export class GetLogisticsCompanyForEditOutput {
  logisticsCompany!: LogisticsCompanyEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.logisticsCompany = _data['logisticsCompany']
        ? LogisticsCompanyEditDto.fromJS(_data['logisticsCompany'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetLogisticsCompanyForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetLogisticsCompanyForEditOutput>(
      data,
      _mappings,
      GetLogisticsCompanyForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['logisticsCompany'] = this.logisticsCompany
      ? this.logisticsCompany.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): GetLogisticsCompanyForEditOutput {
    const json = this.toJSON();
    let result = new GetLogisticsCompanyForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfLogisticsCompanyListDto {
  totalCount!: number;
  items!: LogisticsCompanyListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(LogisticsCompanyListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfLogisticsCompanyListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfLogisticsCompanyListDto>(
      data,
      _mappings,
      PagedResultDtoOfLogisticsCompanyListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfLogisticsCompanyListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfLogisticsCompanyListDto();
    result.init(json);
    return result;
  }
}

/** 的列表DTO Erinyes.PublicNews.NewsList */
export class NewsListEditDto {
  /** Id */
  id!: number | undefined;
  /** 标题 */
  title!: string | undefined;
  /** 副标题 */
  subTitle!: string | undefined;
  /** 封面图片地址 */
  coverPicture!: string | undefined;
  /** 文章链接地址 */
  articleLink!: string | undefined;
  /** 发布时间 */
  publishTime!: dayjs.Dayjs | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.title = _data['title'];
      this.subTitle = _data['subTitle'];
      this.coverPicture = _data['coverPicture'];
      this.articleLink = _data['articleLink'];
      this.publishTime = _data['publishTime']
        ? dayjs(_data['publishTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): NewsListEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<NewsListEditDto>(data, _mappings, NewsListEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['title'] = this.title;
    data['subTitle'] = this.subTitle;
    data['coverPicture'] = this.coverPicture;
    data['articleLink'] = this.articleLink;
    data['publishTime'] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): NewsListEditDto {
    const json = this.toJSON();
    let result = new NewsListEditDto();
    result.init(json);
    return result;
  }
}

export class NewsReadLogListDto {
  id!: number;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 文章id */
  newsId!: number | undefined;
  news!: NewsListListDto;
  /** 是否已读，true：已读，false：未读 */
  isRead!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.newsId = _data['newsId'];
      this.news = _data['news'] ? NewsListListDto.fromJS(_data['news'], _mappings) : <any>undefined;
      this.isRead = _data['isRead'];
    }
  }

  static fromJS(data: any, _mappings?: any): NewsReadLogListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<NewsReadLogListDto>(data, _mappings, NewsReadLogListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['newsId'] = this.newsId;
    data['news'] = this.news ? this.news.toJSON() : <any>undefined;
    data['isRead'] = this.isRead;
    return data;
  }

  clone(): NewsReadLogListDto {
    const json = this.toJSON();
    let result = new NewsReadLogListDto();
    result.init(json);
    return result;
  }
}

/** 资讯列表DTO Erinyes.PublicNews.NewsList */
export class NewsListListDto {
  id!: number;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 标题 */
  title!: string | undefined;
  /** 副标题 */
  subTitle!: string | undefined;
  /** 封面图片地址 */
  coverPicture!: string | undefined;
  /** 文章链接地址 */
  articleLink!: string | undefined;
  /** 是否已读，true：已读，false：未读 */
  isRead!: boolean;
  /** 发布时间 */
  publishTime!: dayjs.Dayjs | undefined;
  newsReadLogList!: NewsReadLogListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.title = _data['title'];
      this.subTitle = _data['subTitle'];
      this.coverPicture = _data['coverPicture'];
      this.articleLink = _data['articleLink'];
      this.isRead = _data['isRead'];
      this.publishTime = _data['publishTime']
        ? dayjs(_data['publishTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['newsReadLogList'])) {
        this.newsReadLogList = [] as any;
        for (let item of _data['newsReadLogList'])
          this.newsReadLogList!.push(NewsReadLogListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): NewsListListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<NewsListListDto>(data, _mappings, NewsListListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['title'] = this.title;
    data['subTitle'] = this.subTitle;
    data['coverPicture'] = this.coverPicture;
    data['articleLink'] = this.articleLink;
    data['isRead'] = this.isRead;
    data['publishTime'] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
    if (Array.isArray(this.newsReadLogList)) {
      data['newsReadLogList'] = [];
      for (let item of this.newsReadLogList) data['newsReadLogList'].push(item.toJSON());
    }
    return data;
  }

  clone(): NewsListListDto {
    const json = this.toJSON();
    let result = new NewsListListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfNewsListListDto {
  totalCount!: number;
  items!: NewsListListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(NewsListListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfNewsListListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfNewsListListDto>(
      data,
      _mappings,
      PagedResultDtoOfNewsListListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfNewsListListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfNewsListListDto();
    result.init(json);
    return result;
  }
}

export class NotificationSubscriptionWithDisplayNameDto {
  displayName!: string | undefined;
  description!: string | undefined;
  name!: string | undefined;
  isSubscribed!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.displayName = _data['displayName'];
      this.description = _data['description'];
      this.name = _data['name'];
      this.isSubscribed = _data['isSubscribed'];
    }
  }

  static fromJS(data: any, _mappings?: any): NotificationSubscriptionWithDisplayNameDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<NotificationSubscriptionWithDisplayNameDto>(
      data,
      _mappings,
      NotificationSubscriptionWithDisplayNameDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['displayName'] = this.displayName;
    data['description'] = this.description;
    data['name'] = this.name;
    data['isSubscribed'] = this.isSubscribed;
    return data;
  }

  clone(): NotificationSubscriptionWithDisplayNameDto {
    const json = this.toJSON();
    let result = new NotificationSubscriptionWithDisplayNameDto();
    result.init(json);
    return result;
  }
}

export class GetNotificationSettingsOutput {
  receiveNotifications!: boolean;
  notifications!: NotificationSubscriptionWithDisplayNameDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.receiveNotifications = _data['receiveNotifications'];
      if (Array.isArray(_data['notifications'])) {
        this.notifications = [] as any;
        for (let item of _data['notifications'])
          this.notifications!.push(
            NotificationSubscriptionWithDisplayNameDto.fromJS(item, _mappings),
          );
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetNotificationSettingsOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetNotificationSettingsOutput>(
      data,
      _mappings,
      GetNotificationSettingsOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['receiveNotifications'] = this.receiveNotifications;
    if (Array.isArray(this.notifications)) {
      data['notifications'] = [];
      for (let item of this.notifications) data['notifications'].push(item.toJSON());
    }
    return data;
  }

  clone(): GetNotificationSettingsOutput {
    const json = this.toJSON();
    let result = new GetNotificationSettingsOutput();
    result.init(json);
    return result;
  }
}

export enum UserNotificationState {
  Unread = 'Unread',
  Read = 'Read',
}

export class NotificationData {
  readonly type!: string | undefined;
  properties!: { [key: string]: any } | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      (<any>this).type = _data['type'];
      if (_data['properties']) {
        this.properties = {} as any;
        for (let key in _data['properties']) {
          if (_data['properties'].hasOwnProperty(key))
            (<any>this.properties)![key] = _data['properties'][key];
        }
      }
    }
  }

  static fromJS(data: any, _mappings?: any): NotificationData | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<NotificationData>(data, _mappings, NotificationData);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['type'] = this.type;
    if (this.properties) {
      data['properties'] = {};
      for (let key in this.properties) {
        if (this.properties.hasOwnProperty(key))
          (<any>data['properties'])[key] = this.properties[key];
      }
    }
    return data;
  }

  clone(): NotificationData {
    const json = this.toJSON();
    let result = new NotificationData();
    result.init(json);
    return result;
  }
}

export enum NotificationSeverity {
  Info = 'Info',
  Success = 'Success',
  Warn = 'Warn',
  Error = 'Error',
  Fatal = 'Fatal',
}

export class TenantNotification {
  tenantId!: number | undefined;
  notificationName!: string | undefined;
  data!: NotificationData;
  entityType!: string | undefined;
  entityTypeName!: string | undefined;
  entityId!: any | undefined;
  severity!: NotificationSeverity;
  creationTime!: dayjs.Dayjs;
  id!: string;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.notificationName = _data['notificationName'];
      this.data = _data['data']
        ? NotificationData.fromJS(_data['data'], _mappings)
        : <any>undefined;
      this.entityType = _data['entityType'];
      this.entityTypeName = _data['entityTypeName'];
      this.entityId = _data['entityId'];
      this.severity = _data['severity'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): TenantNotification | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TenantNotification>(data, _mappings, TenantNotification);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['notificationName'] = this.notificationName;
    data['data'] = this.data ? this.data.toJSON() : <any>undefined;
    data['entityType'] = this.entityType;
    data['entityTypeName'] = this.entityTypeName;
    data['entityId'] = this.entityId;
    data['severity'] = this.severity;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['id'] = this.id;
    return data;
  }

  clone(): TenantNotification {
    const json = this.toJSON();
    let result = new TenantNotification();
    result.init(json);
    return result;
  }
}

export class UserNotification {
  tenantId!: number | undefined;
  userId!: number;
  state!: UserNotificationState;
  notification!: TenantNotification;
  id!: string;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.userId = _data['userId'];
      this.state = _data['state'];
      this.notification = _data['notification']
        ? TenantNotification.fromJS(_data['notification'], _mappings)
        : <any>undefined;
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserNotification | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserNotification>(data, _mappings, UserNotification);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['userId'] = this.userId;
    data['state'] = this.state;
    data['notification'] = this.notification ? this.notification.toJSON() : <any>undefined;
    data['id'] = this.id;
    return data;
  }

  clone(): UserNotification {
    const json = this.toJSON();
    let result = new UserNotification();
    result.init(json);
    return result;
  }
}

export class GetNotificationsOutput {
  /** 未阅读消息数量 */
  unreadCount!: number;
  totalCount!: number;
  items!: UserNotification[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.unreadCount = _data['unreadCount'];
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(UserNotification.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetNotificationsOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetNotificationsOutput>(data, _mappings, GetNotificationsOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['unreadCount'] = this.unreadCount;
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): GetNotificationsOutput {
    const json = this.toJSON();
    let result = new GetNotificationsOutput();
    result.init(json);
    return result;
  }
}

export class UserNotificationInfo {
  tenantId!: number | undefined;
  userId!: number;
  tenantNotificationId!: string;
  state!: UserNotificationState;
  creationTime!: dayjs.Dayjs;
  id!: string;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.userId = _data['userId'];
      this.tenantNotificationId = _data['tenantNotificationId'];
      this.state = _data['state'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserNotificationInfo | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserNotificationInfo>(data, _mappings, UserNotificationInfo);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['userId'] = this.userId;
    data['tenantNotificationId'] = this.tenantNotificationId;
    data['state'] = this.state;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['id'] = this.id;
    return data;
  }

  clone(): UserNotificationInfo {
    const json = this.toJSON();
    let result = new UserNotificationInfo();
    result.init(json);
    return result;
  }
}

export class TenantNotificationInfo {
  tenantId!: number | undefined;
  notificationName!: string | undefined;
  data!: string | undefined;
  dataTypeName!: string | undefined;
  entityTypeName!: string | undefined;
  entityTypeAssemblyQualifiedName!: string | undefined;
  entityId!: string | undefined;
  severity!: NotificationSeverity;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  id!: string;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.notificationName = _data['notificationName'];
      this.data = _data['data'];
      this.dataTypeName = _data['dataTypeName'];
      this.entityTypeName = _data['entityTypeName'];
      this.entityTypeAssemblyQualifiedName = _data['entityTypeAssemblyQualifiedName'];
      this.entityId = _data['entityId'];
      this.severity = _data['severity'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): TenantNotificationInfo | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TenantNotificationInfo>(data, _mappings, TenantNotificationInfo);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['notificationName'] = this.notificationName;
    data['data'] = this.data;
    data['dataTypeName'] = this.dataTypeName;
    data['entityTypeName'] = this.entityTypeName;
    data['entityTypeAssemblyQualifiedName'] = this.entityTypeAssemblyQualifiedName;
    data['entityId'] = this.entityId;
    data['severity'] = this.severity;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['id'] = this.id;
    return data;
  }

  clone(): TenantNotificationInfo {
    const json = this.toJSON();
    let result = new TenantNotificationInfo();
    result.init(json);
    return result;
  }
}

export class UserNotificationInfoWithNotificationInfo {
  userNotification!: UserNotificationInfo;
  notification!: TenantNotificationInfo;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.userNotification = _data['userNotification']
        ? UserNotificationInfo.fromJS(_data['userNotification'], _mappings)
        : <any>undefined;
      this.notification = _data['notification']
        ? TenantNotificationInfo.fromJS(_data['notification'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): UserNotificationInfoWithNotificationInfo | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserNotificationInfoWithNotificationInfo>(
      data,
      _mappings,
      UserNotificationInfoWithNotificationInfo,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userNotification'] = this.userNotification
      ? this.userNotification.toJSON()
      : <any>undefined;
    data['notification'] = this.notification ? this.notification.toJSON() : <any>undefined;
    return data;
  }

  clone(): UserNotificationInfoWithNotificationInfo {
    const json = this.toJSON();
    let result = new UserNotificationInfoWithNotificationInfo();
    result.init(json);
    return result;
  }
}

export class EntityDtoOfGuid {
  id!: string;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): EntityDtoOfGuid | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EntityDtoOfGuid>(data, _mappings, EntityDtoOfGuid);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    return data;
  }

  clone(): EntityDtoOfGuid {
    const json = this.toJSON();
    let result = new EntityDtoOfGuid();
    result.init(json);
    return result;
  }
}

export class NotificationSubscriptionDto {
  name!: string | undefined;
  isSubscribed!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.isSubscribed = _data['isSubscribed'];
    }
  }

  static fromJS(data: any, _mappings?: any): NotificationSubscriptionDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<NotificationSubscriptionDto>(
      data,
      _mappings,
      NotificationSubscriptionDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['isSubscribed'] = this.isSubscribed;
    return data;
  }

  clone(): NotificationSubscriptionDto {
    const json = this.toJSON();
    let result = new NotificationSubscriptionDto();
    result.init(json);
    return result;
  }
}

export class UpdateNotificationSettingsInput {
  receiveNotifications!: boolean;
  notifications!: NotificationSubscriptionDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.receiveNotifications = _data['receiveNotifications'];
      if (Array.isArray(_data['notifications'])) {
        this.notifications = [] as any;
        for (let item of _data['notifications'])
          this.notifications!.push(NotificationSubscriptionDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): UpdateNotificationSettingsInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UpdateNotificationSettingsInput>(
      data,
      _mappings,
      UpdateNotificationSettingsInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['receiveNotifications'] = this.receiveNotifications;
    if (Array.isArray(this.notifications)) {
      data['notifications'] = [];
      for (let item of this.notifications) data['notifications'].push(item.toJSON());
    }
    return data;
  }

  clone(): UpdateNotificationSettingsInput {
    const json = this.toJSON();
    let result = new UpdateNotificationSettingsInput();
    result.init(json);
    return result;
  }
}

export class Business_license {
  guFei_Cookie!: string | undefined;
  enterprisE_BUSINESS_CARD_OCR_STATUS!: string | undefined;
  enterprisE_NAME_CH!: string | undefined;
  enterprisE_STATUS!: string | undefined;
  enterprisE_REGISTER_ID!: string | undefined;
  enterprisE_ID!: string | undefined;
  enterprisE_REGISTER_ADDRESS!: string | undefined;
  enterprisE_COUNTRY_ID!: string | undefined;
  enterprisE_PROVINCE!: string | undefined;
  enterprisE_CITY!: string | undefined;
  enterprisE_DISTRICT!: string | undefined;
  enterprisE_BANK_ADDRESS!: string | undefined;
  enterprisE_TEL!: string | undefined;
  enterprisE_BANK_NAME!: string | undefined;
  enterprisE_BANK_COUNTRY_ID!: string | undefined;
  enterprisE_BANK_PROVINCE!: string | undefined;
  enterprisE_BANK_CITY!: string | undefined;
  enterprisE_BANK_DISTRICT!: string | undefined;
  enterprisE_BANK_ID!: string | undefined;
  enterprisE_OWNER!: string | undefined;
  enterprisE_CAPITAL!: string | undefined;
  enterprisE_TIME!: string | undefined;
  enterprisE_TYPE!: string | undefined;
  enterprisE_INDUSTRY!: string | undefined;
  enterprisE_ORGANIZATION!: string | undefined;
  enterprisE_USED_NAME!: string | undefined;
  enterprisE_NAME_EN!: string | undefined;
  enterprisE_INSURED!: string | undefined;
  enterprisE_PEOPLE!: string | undefined;
  enterprisE_SCOPE!: string | undefined;
  enterprisE_VALID_DATE_START!: string | undefined;
  enterprisE_VALID_DATE_END!: string | undefined;
  enterprisE_REGISTER_ADDRESS_CITY!: string | undefined;
  enterprisE_REGISTER_ADDRESS_DISTRICT!: string | undefined;
  enterprisE_REGISTER_ADDRESS_FORMAT_ADDRESS!: string | undefined;
  enterprisE_REGISTER_ADDRESS_GPS!: string | undefined;
  enterprisE_REGISTER_ADDRESS_PROVINCE!: string | undefined;
  enterprisE_TAXPAYER_REGISTER_ID!: string | undefined;
  enterprisE_UNIVERSAL_CREDIT_ID_AGENCY_CODE!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.guFei_Cookie = _data['guFei_Cookie'];
      this.enterprisE_BUSINESS_CARD_OCR_STATUS = _data['enterprisE_BUSINESS_CARD_OCR_STATUS'];
      this.enterprisE_NAME_CH = _data['enterprisE_NAME_CH'];
      this.enterprisE_STATUS = _data['enterprisE_STATUS'];
      this.enterprisE_REGISTER_ID = _data['enterprisE_REGISTER_ID'];
      this.enterprisE_ID = _data['enterprisE_ID'];
      this.enterprisE_REGISTER_ADDRESS = _data['enterprisE_REGISTER_ADDRESS'];
      this.enterprisE_COUNTRY_ID = _data['enterprisE_COUNTRY_ID'];
      this.enterprisE_PROVINCE = _data['enterprisE_PROVINCE'];
      this.enterprisE_CITY = _data['enterprisE_CITY'];
      this.enterprisE_DISTRICT = _data['enterprisE_DISTRICT'];
      this.enterprisE_BANK_ADDRESS = _data['enterprisE_BANK_ADDRESS'];
      this.enterprisE_TEL = _data['enterprisE_TEL'];
      this.enterprisE_BANK_NAME = _data['enterprisE_BANK_NAME'];
      this.enterprisE_BANK_COUNTRY_ID = _data['enterprisE_BANK_COUNTRY_ID'];
      this.enterprisE_BANK_PROVINCE = _data['enterprisE_BANK_PROVINCE'];
      this.enterprisE_BANK_CITY = _data['enterprisE_BANK_CITY'];
      this.enterprisE_BANK_DISTRICT = _data['enterprisE_BANK_DISTRICT'];
      this.enterprisE_BANK_ID = _data['enterprisE_BANK_ID'];
      this.enterprisE_OWNER = _data['enterprisE_OWNER'];
      this.enterprisE_CAPITAL = _data['enterprisE_CAPITAL'];
      this.enterprisE_TIME = _data['enterprisE_TIME'];
      this.enterprisE_TYPE = _data['enterprisE_TYPE'];
      this.enterprisE_INDUSTRY = _data['enterprisE_INDUSTRY'];
      this.enterprisE_ORGANIZATION = _data['enterprisE_ORGANIZATION'];
      this.enterprisE_USED_NAME = _data['enterprisE_USED_NAME'];
      this.enterprisE_NAME_EN = _data['enterprisE_NAME_EN'];
      this.enterprisE_INSURED = _data['enterprisE_INSURED'];
      this.enterprisE_PEOPLE = _data['enterprisE_PEOPLE'];
      this.enterprisE_SCOPE = _data['enterprisE_SCOPE'];
      this.enterprisE_VALID_DATE_START = _data['enterprisE_VALID_DATE_START'];
      this.enterprisE_VALID_DATE_END = _data['enterprisE_VALID_DATE_END'];
      this.enterprisE_REGISTER_ADDRESS_CITY = _data['enterprisE_REGISTER_ADDRESS_CITY'];
      this.enterprisE_REGISTER_ADDRESS_DISTRICT = _data['enterprisE_REGISTER_ADDRESS_DISTRICT'];
      this.enterprisE_REGISTER_ADDRESS_FORMAT_ADDRESS =
        _data['enterprisE_REGISTER_ADDRESS_FORMAT_ADDRESS'];
      this.enterprisE_REGISTER_ADDRESS_GPS = _data['enterprisE_REGISTER_ADDRESS_GPS'];
      this.enterprisE_REGISTER_ADDRESS_PROVINCE = _data['enterprisE_REGISTER_ADDRESS_PROVINCE'];
      this.enterprisE_TAXPAYER_REGISTER_ID = _data['enterprisE_TAXPAYER_REGISTER_ID'];
      this.enterprisE_UNIVERSAL_CREDIT_ID_AGENCY_CODE =
        _data['enterprisE_UNIVERSAL_CREDIT_ID_AGENCY_CODE'];
    }
  }

  static fromJS(data: any, _mappings?: any): Business_license | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Business_license>(data, _mappings, Business_license);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['guFei_Cookie'] = this.guFei_Cookie;
    data['enterprisE_BUSINESS_CARD_OCR_STATUS'] = this.enterprisE_BUSINESS_CARD_OCR_STATUS;
    data['enterprisE_NAME_CH'] = this.enterprisE_NAME_CH;
    data['enterprisE_STATUS'] = this.enterprisE_STATUS;
    data['enterprisE_REGISTER_ID'] = this.enterprisE_REGISTER_ID;
    data['enterprisE_ID'] = this.enterprisE_ID;
    data['enterprisE_REGISTER_ADDRESS'] = this.enterprisE_REGISTER_ADDRESS;
    data['enterprisE_COUNTRY_ID'] = this.enterprisE_COUNTRY_ID;
    data['enterprisE_PROVINCE'] = this.enterprisE_PROVINCE;
    data['enterprisE_CITY'] = this.enterprisE_CITY;
    data['enterprisE_DISTRICT'] = this.enterprisE_DISTRICT;
    data['enterprisE_BANK_ADDRESS'] = this.enterprisE_BANK_ADDRESS;
    data['enterprisE_TEL'] = this.enterprisE_TEL;
    data['enterprisE_BANK_NAME'] = this.enterprisE_BANK_NAME;
    data['enterprisE_BANK_COUNTRY_ID'] = this.enterprisE_BANK_COUNTRY_ID;
    data['enterprisE_BANK_PROVINCE'] = this.enterprisE_BANK_PROVINCE;
    data['enterprisE_BANK_CITY'] = this.enterprisE_BANK_CITY;
    data['enterprisE_BANK_DISTRICT'] = this.enterprisE_BANK_DISTRICT;
    data['enterprisE_BANK_ID'] = this.enterprisE_BANK_ID;
    data['enterprisE_OWNER'] = this.enterprisE_OWNER;
    data['enterprisE_CAPITAL'] = this.enterprisE_CAPITAL;
    data['enterprisE_TIME'] = this.enterprisE_TIME;
    data['enterprisE_TYPE'] = this.enterprisE_TYPE;
    data['enterprisE_INDUSTRY'] = this.enterprisE_INDUSTRY;
    data['enterprisE_ORGANIZATION'] = this.enterprisE_ORGANIZATION;
    data['enterprisE_USED_NAME'] = this.enterprisE_USED_NAME;
    data['enterprisE_NAME_EN'] = this.enterprisE_NAME_EN;
    data['enterprisE_INSURED'] = this.enterprisE_INSURED;
    data['enterprisE_PEOPLE'] = this.enterprisE_PEOPLE;
    data['enterprisE_SCOPE'] = this.enterprisE_SCOPE;
    data['enterprisE_VALID_DATE_START'] = this.enterprisE_VALID_DATE_START;
    data['enterprisE_VALID_DATE_END'] = this.enterprisE_VALID_DATE_END;
    data['enterprisE_REGISTER_ADDRESS_CITY'] = this.enterprisE_REGISTER_ADDRESS_CITY;
    data['enterprisE_REGISTER_ADDRESS_DISTRICT'] = this.enterprisE_REGISTER_ADDRESS_DISTRICT;
    data['enterprisE_REGISTER_ADDRESS_FORMAT_ADDRESS'] =
      this.enterprisE_REGISTER_ADDRESS_FORMAT_ADDRESS;
    data['enterprisE_REGISTER_ADDRESS_GPS'] = this.enterprisE_REGISTER_ADDRESS_GPS;
    data['enterprisE_REGISTER_ADDRESS_PROVINCE'] = this.enterprisE_REGISTER_ADDRESS_PROVINCE;
    data['enterprisE_TAXPAYER_REGISTER_ID'] = this.enterprisE_TAXPAYER_REGISTER_ID;
    data['enterprisE_UNIVERSAL_CREDIT_ID_AGENCY_CODE'] =
      this.enterprisE_UNIVERSAL_CREDIT_ID_AGENCY_CODE;
    return data;
  }

  clone(): Business_license {
    const json = this.toJSON();
    let result = new Business_license();
    result.init(json);
    return result;
  }
}

/** 订单详情车辆列表DTO Erinyes.TMS.Order_Vehicles */
export class Order_VehiclesListDto {
  id!: number | undefined;
  /** 订单车辆编号 */
  orderVehicleNo!: string | undefined;
  /** 用来表格编辑控件的开关行 */
  extId!: number | undefined;
  /** 订单详情id */
  orderDetailId!: number | undefined;
  orderDetailNo!: string | undefined;
  /** 开始时间 */
  startTime!: dayjs.Dayjs | undefined;
  /** 完成时间 */
  endTime!: dayjs.Dayjs | undefined;
  /** 计划装货时间 */
  planLoadingTime!: dayjs.Dayjs | undefined;
  /** 计划到货时间 */
  planUnloadingTime!: dayjs.Dayjs | undefined;
  /** 车辆类型(字典) */
  vehicleTypeId!: number | undefined;
  vehicleType!: CrmDictItems;
  vehicleTypeName!: string | undefined;
  /** 提货点名称 */
  loadingPointName!: string | undefined;
  /** 送货点名称 */
  unLoadingPointName!: string | undefined;
  /** 车头 */
  vehicleHeadId!: number | undefined;
  /** 车头车牌号码 */
  vehicleHeadNumber!: string | undefined;
  /** 车挂 */
  vehicleTailId!: number | undefined;
  /** 车挂车牌号码 */
  vehicleTailNumber!: string | undefined;
  /** 司机 */
  userDriverId!: number | undefined;
  /** 司机名称 */
  driverName!: string | undefined;
  /** 押运员 */
  userEscortId!: number | undefined;
  /** 押运员名称 */
  escortName!: string | undefined;
  /** 车辆状态 0:空闲 1:返程  2:过夜 */
  vehicleState!: number | undefined;
  /** 空驶、节省里程 */
  emptyMileage!: number | undefined;
  /** 状态 0:待调度 1:待执行 2:运输中 3:已完成 */
  state!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 需要的车辆数 */
  count!: number;
  /** 订单类型 0:普通 1:拼车 2:多趟 */
  orderType!: number;
  /** 拼车或者多趟车辆订单id */
  carPoolOrderVehicleId!: number | undefined;
  /** 拼车或者多趟编号 */
  carPoolOrderNo!: string | undefined;
  /** 多趟顺序 */
  multiPassSN!: number | undefined;
  /** 运费 */
  carriage!: number | undefined;
  /** 滞留费 */
  demurrage!: number | undefined;
  /** 装卸费 */
  loadingUnloadingCost!: number | undefined;
  /** 过磅费 */
  weighingCost!: number | undefined;
  /** 其它费用 */
  otherCost!: number | undefined;
  /** 折扣 */
  discount!: number | undefined;
  /** 减免 */
  reduction!: number | undefined;
  /** 管理费 */
  manageCost!: number | undefined;
  /** 总费用 */
  totalCost!: number | undefined;
  /** 运费备注信息 */
  carriageRemark!: string | undefined;
  /** 核算金额 */
  accountsCost!: number | undefined;
  /** 核算说明 */
  accountsRemark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.orderVehicleNo = _data['orderVehicleNo'];
      this.extId = _data['extId'];
      this.orderDetailId = _data['orderDetailId'];
      this.orderDetailNo = _data['orderDetailNo'];
      this.startTime = _data['startTime'] ? dayjs(_data['startTime'].toString()) : <any>undefined;
      this.endTime = _data['endTime'] ? dayjs(_data['endTime'].toString()) : <any>undefined;
      this.planLoadingTime = _data['planLoadingTime']
        ? dayjs(_data['planLoadingTime'].toString())
        : <any>undefined;
      this.planUnloadingTime = _data['planUnloadingTime']
        ? dayjs(_data['planUnloadingTime'].toString())
        : <any>undefined;
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleType = _data['vehicleType']
        ? CrmDictItems.fromJS(_data['vehicleType'], _mappings)
        : <any>undefined;
      this.vehicleTypeName = _data['vehicleTypeName'];
      this.loadingPointName = _data['loadingPointName'];
      this.unLoadingPointName = _data['unLoadingPointName'];
      this.vehicleHeadId = _data['vehicleHeadId'];
      this.vehicleHeadNumber = _data['vehicleHeadNumber'];
      this.vehicleTailId = _data['vehicleTailId'];
      this.vehicleTailNumber = _data['vehicleTailNumber'];
      this.userDriverId = _data['userDriverId'];
      this.driverName = _data['driverName'];
      this.userEscortId = _data['userEscortId'];
      this.escortName = _data['escortName'];
      this.vehicleState = _data['vehicleState'];
      this.emptyMileage = _data['emptyMileage'];
      this.state = _data['state'];
      this.remark = _data['remark'];
      this.count = _data['count'];
      this.orderType = _data['orderType'];
      this.carPoolOrderVehicleId = _data['carPoolOrderVehicleId'];
      this.carPoolOrderNo = _data['carPoolOrderNo'];
      this.multiPassSN = _data['multiPassSN'];
      this.carriage = _data['carriage'];
      this.demurrage = _data['demurrage'];
      this.loadingUnloadingCost = _data['loadingUnloadingCost'];
      this.weighingCost = _data['weighingCost'];
      this.otherCost = _data['otherCost'];
      this.discount = _data['discount'];
      this.reduction = _data['reduction'];
      this.manageCost = _data['manageCost'];
      this.totalCost = _data['totalCost'];
      this.carriageRemark = _data['carriageRemark'];
      this.accountsCost = _data['accountsCost'];
      this.accountsRemark = _data['accountsRemark'];
    }
  }

  static fromJS(data: any, _mappings?: any): Order_VehiclesListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Order_VehiclesListDto>(data, _mappings, Order_VehiclesListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['orderVehicleNo'] = this.orderVehicleNo;
    data['extId'] = this.extId;
    data['orderDetailId'] = this.orderDetailId;
    data['orderDetailNo'] = this.orderDetailNo;
    data['startTime'] = this.startTime ? this.startTime.toISOString() : <any>undefined;
    data['endTime'] = this.endTime ? this.endTime.toISOString() : <any>undefined;
    data['planLoadingTime'] = this.planLoadingTime
      ? this.planLoadingTime.toISOString()
      : <any>undefined;
    data['planUnloadingTime'] = this.planUnloadingTime
      ? this.planUnloadingTime.toISOString()
      : <any>undefined;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleType'] = this.vehicleType ? this.vehicleType.toJSON() : <any>undefined;
    data['vehicleTypeName'] = this.vehicleTypeName;
    data['loadingPointName'] = this.loadingPointName;
    data['unLoadingPointName'] = this.unLoadingPointName;
    data['vehicleHeadId'] = this.vehicleHeadId;
    data['vehicleHeadNumber'] = this.vehicleHeadNumber;
    data['vehicleTailId'] = this.vehicleTailId;
    data['vehicleTailNumber'] = this.vehicleTailNumber;
    data['userDriverId'] = this.userDriverId;
    data['driverName'] = this.driverName;
    data['userEscortId'] = this.userEscortId;
    data['escortName'] = this.escortName;
    data['vehicleState'] = this.vehicleState;
    data['emptyMileage'] = this.emptyMileage;
    data['state'] = this.state;
    data['remark'] = this.remark;
    data['count'] = this.count;
    data['orderType'] = this.orderType;
    data['carPoolOrderVehicleId'] = this.carPoolOrderVehicleId;
    data['carPoolOrderNo'] = this.carPoolOrderNo;
    data['multiPassSN'] = this.multiPassSN;
    data['carriage'] = this.carriage;
    data['demurrage'] = this.demurrage;
    data['loadingUnloadingCost'] = this.loadingUnloadingCost;
    data['weighingCost'] = this.weighingCost;
    data['otherCost'] = this.otherCost;
    data['discount'] = this.discount;
    data['reduction'] = this.reduction;
    data['manageCost'] = this.manageCost;
    data['totalCost'] = this.totalCost;
    data['carriageRemark'] = this.carriageRemark;
    data['accountsCost'] = this.accountsCost;
    data['accountsRemark'] = this.accountsRemark;
    return data;
  }

  clone(): Order_VehiclesListDto {
    const json = this.toJSON();
    let result = new Order_VehiclesListDto();
    result.init(json);
    return result;
  }
}

/** 订单装卸点 */
export class Order_OrderLoadingUnloadingPointsDto {
  id!: number | undefined;
  /** 订单详情id */
  orderDetailId!: number | undefined;
  /** 装卸点 */
  pointId!: number | undefined;
  /** 点位名称 */
  pointName!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 是装货点吗 true:装货点  false;卸货地 */
  isLoadingPoint!: boolean;
  /** 经度 */
  longitude!: number | undefined;
  /** 纬度 */
  latitude!: number | undefined;
  /** 联系人 */
  contactName!: string | undefined;
  /** 联系人电话 */
  contactPhone!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.orderDetailId = _data['orderDetailId'];
      this.pointId = _data['pointId'];
      this.pointName = _data['pointName'];
      this.address = _data['address'];
      this.isLoadingPoint = _data['isLoadingPoint'];
      this.longitude = _data['longitude'];
      this.latitude = _data['latitude'];
      this.contactName = _data['contactName'];
      this.contactPhone = _data['contactPhone'];
    }
  }

  static fromJS(data: any, _mappings?: any): Order_OrderLoadingUnloadingPointsDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Order_OrderLoadingUnloadingPointsDto>(
      data,
      _mappings,
      Order_OrderLoadingUnloadingPointsDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['orderDetailId'] = this.orderDetailId;
    data['pointId'] = this.pointId;
    data['pointName'] = this.pointName;
    data['address'] = this.address;
    data['isLoadingPoint'] = this.isLoadingPoint;
    data['longitude'] = this.longitude;
    data['latitude'] = this.latitude;
    data['contactName'] = this.contactName;
    data['contactPhone'] = this.contactPhone;
    return data;
  }

  clone(): Order_OrderLoadingUnloadingPointsDto {
    const json = this.toJSON();
    let result = new Order_OrderLoadingUnloadingPointsDto();
    result.init(json);
    return result;
  }
}

/** 主订单的列表DTO Erinyes.TMS.Order_OrderDetail */
export class Order_OrderDetailEditDto {
  /** Id */
  id!: number | undefined;
  /** 用来表格编辑控件的开关行 */
  extId!: number | undefined;
  goodsList!: Order_GoodsListDto[] | undefined;
  /** 商品显示文字 */
  goodsDesc!: string | undefined;
  /** 商品显示文字 */
  goodsStr!: string | undefined;
  vehiclesList!: Order_VehiclesListDto[] | undefined;
  /** 车辆信息显示文字 */
  vehiclesStr!: string | undefined;
  /** 订单id */
  orderId!: number | undefined;
  /** 子订单编号 */
  orderNo!: string | undefined;
  /** 计划装货时间 */
  planLoadingTime!: dayjs.Dayjs | undefined;
  /** 计划到货时间 */
  planUnloadingTime!: dayjs.Dayjs | undefined;
  /** 提货点 */
  loadingPointId!: number | undefined;
  /** 多装 */
  multiLoadingPoints!: boolean;
  /** 提货点显示文字 */
  loadingPointStr!: string | undefined;
  /** 送货点 */
  unLoadingPointId!: number | undefined;
  /** 多卸 */
  multiUnLoadingPoints!: boolean;
  /** 送货点显示文字 */
  unLoadingPointStr!: string | undefined;
  /** 订单多装多卸点位信息 */
  orderLoadingUnloadingPointsDto!: Order_OrderLoadingUnloadingPointsDto[] | undefined;
  /** 结算显示文字 */
  balanceStr!: string | undefined;
  /** 是否往返 */
  roundTrip!: boolean;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.extId = _data['extId'];
      if (Array.isArray(_data['goodsList'])) {
        this.goodsList = [] as any;
        for (let item of _data['goodsList'])
          this.goodsList!.push(Order_GoodsListDto.fromJS(item, _mappings));
      }
      this.goodsDesc = _data['goodsDesc'];
      this.goodsStr = _data['goodsStr'];
      if (Array.isArray(_data['vehiclesList'])) {
        this.vehiclesList = [] as any;
        for (let item of _data['vehiclesList'])
          this.vehiclesList!.push(Order_VehiclesListDto.fromJS(item, _mappings));
      }
      this.vehiclesStr = _data['vehiclesStr'];
      this.orderId = _data['orderId'];
      this.orderNo = _data['orderNo'];
      this.planLoadingTime = _data['planLoadingTime']
        ? dayjs(_data['planLoadingTime'].toString())
        : <any>undefined;
      this.planUnloadingTime = _data['planUnloadingTime']
        ? dayjs(_data['planUnloadingTime'].toString())
        : <any>undefined;
      this.loadingPointId = _data['loadingPointId'];
      this.multiLoadingPoints = _data['multiLoadingPoints'];
      this.loadingPointStr = _data['loadingPointStr'];
      this.unLoadingPointId = _data['unLoadingPointId'];
      this.multiUnLoadingPoints = _data['multiUnLoadingPoints'];
      this.unLoadingPointStr = _data['unLoadingPointStr'];
      if (Array.isArray(_data['orderLoadingUnloadingPointsDto'])) {
        this.orderLoadingUnloadingPointsDto = [] as any;
        for (let item of _data['orderLoadingUnloadingPointsDto'])
          this.orderLoadingUnloadingPointsDto!.push(
            Order_OrderLoadingUnloadingPointsDto.fromJS(item, _mappings),
          );
      }
      this.balanceStr = _data['balanceStr'];
      this.roundTrip = _data['roundTrip'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): Order_OrderDetailEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Order_OrderDetailEditDto>(data, _mappings, Order_OrderDetailEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['extId'] = this.extId;
    if (Array.isArray(this.goodsList)) {
      data['goodsList'] = [];
      for (let item of this.goodsList) data['goodsList'].push(item.toJSON());
    }
    data['goodsDesc'] = this.goodsDesc;
    data['goodsStr'] = this.goodsStr;
    if (Array.isArray(this.vehiclesList)) {
      data['vehiclesList'] = [];
      for (let item of this.vehiclesList) data['vehiclesList'].push(item.toJSON());
    }
    data['vehiclesStr'] = this.vehiclesStr;
    data['orderId'] = this.orderId;
    data['orderNo'] = this.orderNo;
    data['planLoadingTime'] = this.planLoadingTime
      ? this.planLoadingTime.toISOString()
      : <any>undefined;
    data['planUnloadingTime'] = this.planUnloadingTime
      ? this.planUnloadingTime.toISOString()
      : <any>undefined;
    data['loadingPointId'] = this.loadingPointId;
    data['multiLoadingPoints'] = this.multiLoadingPoints;
    data['loadingPointStr'] = this.loadingPointStr;
    data['unLoadingPointId'] = this.unLoadingPointId;
    data['multiUnLoadingPoints'] = this.multiUnLoadingPoints;
    data['unLoadingPointStr'] = this.unLoadingPointStr;
    if (Array.isArray(this.orderLoadingUnloadingPointsDto)) {
      data['orderLoadingUnloadingPointsDto'] = [];
      for (let item of this.orderLoadingUnloadingPointsDto)
        data['orderLoadingUnloadingPointsDto'].push(item.toJSON());
    }
    data['balanceStr'] = this.balanceStr;
    data['roundTrip'] = this.roundTrip;
    data['remark'] = this.remark;
    return data;
  }

  clone(): Order_OrderDetailEditDto {
    const json = this.toJSON();
    let result = new Order_OrderDetailEditDto();
    result.init(json);
    return result;
  }
}

/** 主订单的列表DTO Erinyes.TMS.Order_Order */
export class Order_OrderEditDto {
  /** Id */
  id!: number | undefined;
  /** 客户id */
  customerId!: number | undefined;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 合同id */
  contractId!: number | undefined;
  /** 订单编号 */
  orderNo!: string | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 订单详情 */
  orderDetailList!: Order_OrderDetailEditDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerId = _data['customerId'];
      this.customerName = _data['customerName'];
      this.contractId = _data['contractId'];
      this.orderNo = _data['orderNo'];
      this.remark = _data['remark'];
      if (Array.isArray(_data['orderDetailList'])) {
        this.orderDetailList = [] as any;
        for (let item of _data['orderDetailList'])
          this.orderDetailList!.push(Order_OrderDetailEditDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): Order_OrderEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Order_OrderEditDto>(data, _mappings, Order_OrderEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerId'] = this.customerId;
    data['customerName'] = this.customerName;
    data['contractId'] = this.contractId;
    data['orderNo'] = this.orderNo;
    data['remark'] = this.remark;
    if (Array.isArray(this.orderDetailList)) {
      data['orderDetailList'] = [];
      for (let item of this.orderDetailList) data['orderDetailList'].push(item.toJSON());
    }
    return data;
  }

  clone(): Order_OrderEditDto {
    const json = this.toJSON();
    let result = new Order_OrderEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateOrder_OrderInput {
  order_Order!: Order_OrderEditDto;
  /** 订单详情 */
  orderDetailList!: Order_OrderDetailEditDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.order_Order = _data['order_Order']
        ? Order_OrderEditDto.fromJS(_data['order_Order'], _mappings)
        : new Order_OrderEditDto();
      if (Array.isArray(_data['orderDetailList'])) {
        this.orderDetailList = [] as any;
        for (let item of _data['orderDetailList'])
          this.orderDetailList!.push(Order_OrderDetailEditDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateOrder_OrderInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateOrder_OrderInput>(
      data,
      _mappings,
      CreateOrUpdateOrder_OrderInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['order_Order'] = this.order_Order ? this.order_Order.toJSON() : <any>undefined;
    if (Array.isArray(this.orderDetailList)) {
      data['orderDetailList'] = [];
      for (let item of this.orderDetailList) data['orderDetailList'].push(item.toJSON());
    }
    return data;
  }

  clone(): CreateOrUpdateOrder_OrderInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateOrder_OrderInput();
    result.init(json);
    return result;
  }
}

/** 主订单详情的列表DTO Erinyes.TMS.Order_OrderDetail */
export class Order_OrderDetailListDto {
  /** Id */
  id!: number | undefined;
  /** 用来表格编辑控件的开关行 */
  extId!: number | undefined;
  goodsList!: Order_GoodsListDto[] | undefined;
  /** 商品显示文字 */
  goodsDesc!: string | undefined;
  /** 商品显示文字 */
  goodsStr!: string | undefined;
  vehiclesList!: Order_VehiclesListDto[] | undefined;
  /** 车辆信息显示文字 */
  vehiclesStr!: string | undefined;
  /** 订单id */
  orderId!: number | undefined;
  /** 子订单编号 */
  orderNo!: string | undefined;
  /** 计划装货时间 */
  planLoadingTime!: dayjs.Dayjs | undefined;
  /** 计划到货时间 */
  planUnloadingTime!: dayjs.Dayjs | undefined;
  /** 提货点 */
  loadingPointId!: number | undefined;
  loadingPoint!: Transability_LoadingUnloadingPoint;
  /** 提货点显示文字 */
  loadingPointStr!: string | undefined;
  /** 送货点 */
  unLoadingPointId!: number | undefined;
  unLoadingPoint!: Transability_LoadingUnloadingPoint;
  /** 送货点显示文字 */
  unLoadingPointStr!: string | undefined;
  /** 结算显示文字 */
  balanceStr!: string | undefined;
  /** 是否往返 */
  roundTrip!: boolean;
  /** 备注 */
  remark!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 创建企业名称 */
  createEntName!: string | undefined;
  /** 装货地址 */
  loadingPointAddress!: string | undefined;
  /** 卸货地址 */
  unLoadingPointAddress!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.extId = _data['extId'];
      if (Array.isArray(_data['goodsList'])) {
        this.goodsList = [] as any;
        for (let item of _data['goodsList'])
          this.goodsList!.push(Order_GoodsListDto.fromJS(item, _mappings));
      }
      this.goodsDesc = _data['goodsDesc'];
      this.goodsStr = _data['goodsStr'];
      if (Array.isArray(_data['vehiclesList'])) {
        this.vehiclesList = [] as any;
        for (let item of _data['vehiclesList'])
          this.vehiclesList!.push(Order_VehiclesListDto.fromJS(item, _mappings));
      }
      this.vehiclesStr = _data['vehiclesStr'];
      this.orderId = _data['orderId'];
      this.orderNo = _data['orderNo'];
      this.planLoadingTime = _data['planLoadingTime']
        ? dayjs(_data['planLoadingTime'].toString())
        : <any>undefined;
      this.planUnloadingTime = _data['planUnloadingTime']
        ? dayjs(_data['planUnloadingTime'].toString())
        : <any>undefined;
      this.loadingPointId = _data['loadingPointId'];
      this.loadingPoint = _data['loadingPoint']
        ? Transability_LoadingUnloadingPoint.fromJS(_data['loadingPoint'], _mappings)
        : <any>undefined;
      this.loadingPointStr = _data['loadingPointStr'];
      this.unLoadingPointId = _data['unLoadingPointId'];
      this.unLoadingPoint = _data['unLoadingPoint']
        ? Transability_LoadingUnloadingPoint.fromJS(_data['unLoadingPoint'], _mappings)
        : <any>undefined;
      this.unLoadingPointStr = _data['unLoadingPointStr'];
      this.balanceStr = _data['balanceStr'];
      this.roundTrip = _data['roundTrip'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.createEntName = _data['createEntName'];
      this.loadingPointAddress = _data['loadingPointAddress'];
      this.unLoadingPointAddress = _data['unLoadingPointAddress'];
    }
  }

  static fromJS(data: any, _mappings?: any): Order_OrderDetailListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Order_OrderDetailListDto>(data, _mappings, Order_OrderDetailListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['extId'] = this.extId;
    if (Array.isArray(this.goodsList)) {
      data['goodsList'] = [];
      for (let item of this.goodsList) data['goodsList'].push(item.toJSON());
    }
    data['goodsDesc'] = this.goodsDesc;
    data['goodsStr'] = this.goodsStr;
    if (Array.isArray(this.vehiclesList)) {
      data['vehiclesList'] = [];
      for (let item of this.vehiclesList) data['vehiclesList'].push(item.toJSON());
    }
    data['vehiclesStr'] = this.vehiclesStr;
    data['orderId'] = this.orderId;
    data['orderNo'] = this.orderNo;
    data['planLoadingTime'] = this.planLoadingTime
      ? this.planLoadingTime.toISOString()
      : <any>undefined;
    data['planUnloadingTime'] = this.planUnloadingTime
      ? this.planUnloadingTime.toISOString()
      : <any>undefined;
    data['loadingPointId'] = this.loadingPointId;
    data['loadingPoint'] = this.loadingPoint ? this.loadingPoint.toJSON() : <any>undefined;
    data['loadingPointStr'] = this.loadingPointStr;
    data['unLoadingPointId'] = this.unLoadingPointId;
    data['unLoadingPoint'] = this.unLoadingPoint ? this.unLoadingPoint.toJSON() : <any>undefined;
    data['unLoadingPointStr'] = this.unLoadingPointStr;
    data['balanceStr'] = this.balanceStr;
    data['roundTrip'] = this.roundTrip;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['createEntName'] = this.createEntName;
    data['loadingPointAddress'] = this.loadingPointAddress;
    data['unLoadingPointAddress'] = this.unLoadingPointAddress;
    return data;
  }

  clone(): Order_OrderDetailListDto {
    const json = this.toJSON();
    let result = new Order_OrderDetailListDto();
    result.init(json);
    return result;
  }
}

/** 主订单的列表DTO Erinyes.TMS.Order_Order */
export class Order_OrderListDto {
  id!: number | undefined;
  /** 订单编号 */
  orderNo!: string | undefined;
  orderDetailList!: Order_OrderDetailListDto[] | undefined;
  /** 来源：0 手动创建 1:运费系统 */
  sourceType!: number;
  /** 客户id */
  customerId!: number | undefined;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.orderNo = _data['orderNo'];
      if (Array.isArray(_data['orderDetailList'])) {
        this.orderDetailList = [] as any;
        for (let item of _data['orderDetailList'])
          this.orderDetailList!.push(Order_OrderDetailListDto.fromJS(item, _mappings));
      }
      this.sourceType = _data['sourceType'];
      this.customerId = _data['customerId'];
      this.customerName = _data['customerName'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): Order_OrderListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Order_OrderListDto>(data, _mappings, Order_OrderListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['orderNo'] = this.orderNo;
    if (Array.isArray(this.orderDetailList)) {
      data['orderDetailList'] = [];
      for (let item of this.orderDetailList) data['orderDetailList'].push(item.toJSON());
    }
    data['sourceType'] = this.sourceType;
    data['customerId'] = this.customerId;
    data['customerName'] = this.customerName;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): Order_OrderListDto {
    const json = this.toJSON();
    let result = new Order_OrderListDto();
    result.init(json);
    return result;
  }
}

/** 主订单的列表DTO Erinyes.TMS.Order_OrderDetail */
export class DriverOrEscortOrderDto {
  /** 车辆订单Id */
  id!: number | undefined;
  /** Id */
  orderVehicleId!: number | undefined;
  /** 客户id */
  customerId!: number | undefined;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 订单车辆编号 */
  orderVehicleNo!: string | undefined;
  /** 车头 */
  vehicleHeadId!: number | undefined;
  /** 车头车牌号码 */
  vehicleHeadNumber!: string | undefined;
  /** 车挂 */
  vehicleTailId!: number | undefined;
  /** 车挂车牌号码 */
  vehicleTailNumber!: string | undefined;
  /** 司机 */
  userDriverId!: number | undefined;
  /** 司机名称 */
  driverName!: string | undefined;
  /** 押运员 */
  userEscortId!: number | undefined;
  /** 押运员名称 */
  escortName!: string | undefined;
  goodsList!: Order_GoodsListDto[] | undefined;
  /** 商品显示文字 */
  goodsStr!: string | undefined;
  /** 商品描述信息 */
  goodsDesc!: string | undefined;
  /** 子订单编号 */
  orderNo!: string | undefined;
  /** 计划装卸货 索引位置 */
  planLoadAndUnLoadTimeIndex!: number;
  /** 计划装卸货 索引长度 */
  planLoadAndUnLoadTimeIndexLength!: number;
  /** 计划装货时间 */
  planLoadingTime!: dayjs.Dayjs | undefined;
  /** 计划到货时间 */
  planUnloadingTime!: dayjs.Dayjs | undefined;
  /** 提货点 */
  loadingPointId!: number | undefined;
  /** 多装 */
  multiLoadingPoints!: boolean;
  /** 提货点显示文字 */
  loadingPointStr!: string | undefined;
  /** 提货点经度 */
  loadingPointLongitude!: number | undefined;
  /** 提货点纬度 */
  loadingPointLatitude!: number | undefined;
  /** 提货点联系人 */
  loadingPointContactName!: string | undefined;
  /** 提货点联系人电话 */
  loadingPointContactPhone!: string | undefined;
  /** 送货点 */
  unLoadingPointId!: number | undefined;
  /** 送货点经度 */
  unLoadingPointLongitude!: number | undefined;
  /** 送货点纬度 */
  unLoadingPointLatitude!: number | undefined;
  /** 送货点联系人 */
  unLoadingPointContactName!: string | undefined;
  /** 送货点联系人电话 */
  unLoadingPointContactPhone!: string | undefined;
  /** 多卸 */
  multiUnLoadingPoints!: boolean;
  /** 送货点显示文字 */
  unLoadingPointStr!: string | undefined;
  /** 订单多装多卸点位信息 */
  orderLoadingUnloadingPointsDto!: Order_OrderLoadingUnloadingPointsDto[] | undefined;
  /** 是否往返 */
  roundTrip!: boolean;
  /** 备注 */
  remark!: string | undefined;
  /** 状态 0:待调度 1:待执行 2:运输中 3:已完成 */
  state!: number;
  /** 状态 0:待调度 1:待执行 2:运输中 3:已完成 */
  stateDesc!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.orderVehicleId = _data['orderVehicleId'];
      this.customerId = _data['customerId'];
      this.customerName = _data['customerName'];
      this.orderVehicleNo = _data['orderVehicleNo'];
      this.vehicleHeadId = _data['vehicleHeadId'];
      this.vehicleHeadNumber = _data['vehicleHeadNumber'];
      this.vehicleTailId = _data['vehicleTailId'];
      this.vehicleTailNumber = _data['vehicleTailNumber'];
      this.userDriverId = _data['userDriverId'];
      this.driverName = _data['driverName'];
      this.userEscortId = _data['userEscortId'];
      this.escortName = _data['escortName'];
      if (Array.isArray(_data['goodsList'])) {
        this.goodsList = [] as any;
        for (let item of _data['goodsList'])
          this.goodsList!.push(Order_GoodsListDto.fromJS(item, _mappings));
      }
      this.goodsStr = _data['goodsStr'];
      this.goodsDesc = _data['goodsDesc'];
      this.orderNo = _data['orderNo'];
      this.planLoadAndUnLoadTimeIndex = _data['planLoadAndUnLoadTimeIndex'];
      this.planLoadAndUnLoadTimeIndexLength = _data['planLoadAndUnLoadTimeIndexLength'];
      this.planLoadingTime = _data['planLoadingTime']
        ? dayjs(_data['planLoadingTime'].toString())
        : <any>undefined;
      this.planUnloadingTime = _data['planUnloadingTime']
        ? dayjs(_data['planUnloadingTime'].toString())
        : <any>undefined;
      this.loadingPointId = _data['loadingPointId'];
      this.multiLoadingPoints = _data['multiLoadingPoints'];
      this.loadingPointStr = _data['loadingPointStr'];
      this.loadingPointLongitude = _data['loadingPointLongitude'];
      this.loadingPointLatitude = _data['loadingPointLatitude'];
      this.loadingPointContactName = _data['loadingPointContactName'];
      this.loadingPointContactPhone = _data['loadingPointContactPhone'];
      this.unLoadingPointId = _data['unLoadingPointId'];
      this.unLoadingPointLongitude = _data['unLoadingPointLongitude'];
      this.unLoadingPointLatitude = _data['unLoadingPointLatitude'];
      this.unLoadingPointContactName = _data['unLoadingPointContactName'];
      this.unLoadingPointContactPhone = _data['unLoadingPointContactPhone'];
      this.multiUnLoadingPoints = _data['multiUnLoadingPoints'];
      this.unLoadingPointStr = _data['unLoadingPointStr'];
      if (Array.isArray(_data['orderLoadingUnloadingPointsDto'])) {
        this.orderLoadingUnloadingPointsDto = [] as any;
        for (let item of _data['orderLoadingUnloadingPointsDto'])
          this.orderLoadingUnloadingPointsDto!.push(
            Order_OrderLoadingUnloadingPointsDto.fromJS(item, _mappings),
          );
      }
      this.roundTrip = _data['roundTrip'];
      this.remark = _data['remark'];
      this.state = _data['state'];
      this.stateDesc = _data['stateDesc'];
    }
  }

  static fromJS(data: any, _mappings?: any): DriverOrEscortOrderDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DriverOrEscortOrderDto>(data, _mappings, DriverOrEscortOrderDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['orderVehicleId'] = this.orderVehicleId;
    data['customerId'] = this.customerId;
    data['customerName'] = this.customerName;
    data['orderVehicleNo'] = this.orderVehicleNo;
    data['vehicleHeadId'] = this.vehicleHeadId;
    data['vehicleHeadNumber'] = this.vehicleHeadNumber;
    data['vehicleTailId'] = this.vehicleTailId;
    data['vehicleTailNumber'] = this.vehicleTailNumber;
    data['userDriverId'] = this.userDriverId;
    data['driverName'] = this.driverName;
    data['userEscortId'] = this.userEscortId;
    data['escortName'] = this.escortName;
    if (Array.isArray(this.goodsList)) {
      data['goodsList'] = [];
      for (let item of this.goodsList) data['goodsList'].push(item.toJSON());
    }
    data['goodsStr'] = this.goodsStr;
    data['goodsDesc'] = this.goodsDesc;
    data['orderNo'] = this.orderNo;
    data['planLoadAndUnLoadTimeIndex'] = this.planLoadAndUnLoadTimeIndex;
    data['planLoadAndUnLoadTimeIndexLength'] = this.planLoadAndUnLoadTimeIndexLength;
    data['planLoadingTime'] = this.planLoadingTime
      ? this.planLoadingTime.toISOString()
      : <any>undefined;
    data['planUnloadingTime'] = this.planUnloadingTime
      ? this.planUnloadingTime.toISOString()
      : <any>undefined;
    data['loadingPointId'] = this.loadingPointId;
    data['multiLoadingPoints'] = this.multiLoadingPoints;
    data['loadingPointStr'] = this.loadingPointStr;
    data['loadingPointLongitude'] = this.loadingPointLongitude;
    data['loadingPointLatitude'] = this.loadingPointLatitude;
    data['loadingPointContactName'] = this.loadingPointContactName;
    data['loadingPointContactPhone'] = this.loadingPointContactPhone;
    data['unLoadingPointId'] = this.unLoadingPointId;
    data['unLoadingPointLongitude'] = this.unLoadingPointLongitude;
    data['unLoadingPointLatitude'] = this.unLoadingPointLatitude;
    data['unLoadingPointContactName'] = this.unLoadingPointContactName;
    data['unLoadingPointContactPhone'] = this.unLoadingPointContactPhone;
    data['multiUnLoadingPoints'] = this.multiUnLoadingPoints;
    data['unLoadingPointStr'] = this.unLoadingPointStr;
    if (Array.isArray(this.orderLoadingUnloadingPointsDto)) {
      data['orderLoadingUnloadingPointsDto'] = [];
      for (let item of this.orderLoadingUnloadingPointsDto)
        data['orderLoadingUnloadingPointsDto'].push(item.toJSON());
    }
    data['roundTrip'] = this.roundTrip;
    data['remark'] = this.remark;
    data['state'] = this.state;
    data['stateDesc'] = this.stateDesc;
    return data;
  }

  clone(): DriverOrEscortOrderDto {
    const json = this.toJSON();
    let result = new DriverOrEscortOrderDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfDriverOrEscortOrderDto {
  totalCount!: number;
  items!: DriverOrEscortOrderDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(DriverOrEscortOrderDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfDriverOrEscortOrderDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfDriverOrEscortOrderDto>(
      data,
      _mappings,
      PagedResultDtoOfDriverOrEscortOrderDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfDriverOrEscortOrderDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfDriverOrEscortOrderDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑主订单的Dto */
export class GetOrder_OrderForEditOutput {
  order_Order!: Order_OrderEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.order_Order = _data['order_Order']
        ? Order_OrderEditDto.fromJS(_data['order_Order'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetOrder_OrderForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetOrder_OrderForEditOutput>(
      data,
      _mappings,
      GetOrder_OrderForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['order_Order'] = this.order_Order ? this.order_Order.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetOrder_OrderForEditOutput {
    const json = this.toJSON();
    let result = new GetOrder_OrderForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfOrder_OrderListDto {
  totalCount!: number;
  items!: Order_OrderListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Order_OrderListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfOrder_OrderListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfOrder_OrderListDto>(
      data,
      _mappings,
      PagedResultDtoOfOrder_OrderListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfOrder_OrderListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfOrder_OrderListDto();
    result.init(json);
    return result;
  }
}

/** 主订单的列表DTO Erinyes.TMS.Order_OrderDetail */
export class Simple_OrderDetailDto {
  /** 主订单Id */
  orderId!: number | undefined;
  /** 子订单Id */
  orderDetailId!: number | undefined;
  /** 车辆订单Id */
  orderVehicleId!: number | undefined;
  /** 客户id */
  customerId!: number | undefined;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 订单车辆编号 */
  orderVehicleNo!: string | undefined;
  /** 车头 */
  vehicleHeadId!: number | undefined;
  /** 车挂 */
  vehicleTailId!: number | undefined;
  /** 车挂车牌号码 */
  vehicleTailNumber!: string | undefined;
  /** 司机 */
  userDriverId!: number | undefined;
  /** 司机名称 */
  driverName!: string | undefined;
  /** 押运员 */
  userEscortId!: number | undefined;
  /** 押运员名称 */
  escortName!: string | undefined;
  goodsList!: Order_GoodsListDto[] | undefined;
  /** 商品显示文字 */
  goodsStr!: string | undefined;
  /** 商品描述信息 */
  goodsDesc!: string | undefined;
  /** 子订单编号 */
  orderNo!: string | undefined;
  /** 计划装卸货 索引位置 */
  planLoadAndUnLoadTimeIndex!: number;
  /** 计划装卸货 索引长度 */
  planLoadAndUnLoadTimeIndexLength!: number;
  /** 计划装货时间 */
  planLoadingTime!: dayjs.Dayjs | undefined;
  /** 计划到货时间 */
  planUnloadingTime!: dayjs.Dayjs | undefined;
  /** 提货点 */
  loadingPointId!: number | undefined;
  /** 多装 */
  multiLoadingPoints!: boolean;
  /** 提货点显示文字 */
  loadingPointStr!: string | undefined;
  /** 送货点 */
  unLoadingPointId!: number | undefined;
  /** 多卸 */
  multiUnLoadingPoints!: boolean;
  /** 送货点显示文字 */
  unLoadingPointStr!: string | undefined;
  /** 订单多装多卸点位信息 */
  orderLoadingUnloadingPointsDto!: Order_OrderLoadingUnloadingPointsDto[] | undefined;
  /** 是否往返 */
  roundTrip!: boolean;
  /** 备注 */
  remark!: string | undefined;
  /** 状态 0:待调度 1:待执行 2:运输中 3:已完成 */
  state!: number;
  /** 状态 0:待调度 1:待执行 2:运输中 3:已完成 */
  stateDesc!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
      this.orderDetailId = _data['orderDetailId'];
      this.orderVehicleId = _data['orderVehicleId'];
      this.customerId = _data['customerId'];
      this.customerName = _data['customerName'];
      this.orderVehicleNo = _data['orderVehicleNo'];
      this.vehicleHeadId = _data['vehicleHeadId'];
      this.vehicleTailId = _data['vehicleTailId'];
      this.vehicleTailNumber = _data['vehicleTailNumber'];
      this.userDriverId = _data['userDriverId'];
      this.driverName = _data['driverName'];
      this.userEscortId = _data['userEscortId'];
      this.escortName = _data['escortName'];
      if (Array.isArray(_data['goodsList'])) {
        this.goodsList = [] as any;
        for (let item of _data['goodsList'])
          this.goodsList!.push(Order_GoodsListDto.fromJS(item, _mappings));
      }
      this.goodsStr = _data['goodsStr'];
      this.goodsDesc = _data['goodsDesc'];
      this.orderNo = _data['orderNo'];
      this.planLoadAndUnLoadTimeIndex = _data['planLoadAndUnLoadTimeIndex'];
      this.planLoadAndUnLoadTimeIndexLength = _data['planLoadAndUnLoadTimeIndexLength'];
      this.planLoadingTime = _data['planLoadingTime']
        ? dayjs(_data['planLoadingTime'].toString())
        : <any>undefined;
      this.planUnloadingTime = _data['planUnloadingTime']
        ? dayjs(_data['planUnloadingTime'].toString())
        : <any>undefined;
      this.loadingPointId = _data['loadingPointId'];
      this.multiLoadingPoints = _data['multiLoadingPoints'];
      this.loadingPointStr = _data['loadingPointStr'];
      this.unLoadingPointId = _data['unLoadingPointId'];
      this.multiUnLoadingPoints = _data['multiUnLoadingPoints'];
      this.unLoadingPointStr = _data['unLoadingPointStr'];
      if (Array.isArray(_data['orderLoadingUnloadingPointsDto'])) {
        this.orderLoadingUnloadingPointsDto = [] as any;
        for (let item of _data['orderLoadingUnloadingPointsDto'])
          this.orderLoadingUnloadingPointsDto!.push(
            Order_OrderLoadingUnloadingPointsDto.fromJS(item, _mappings),
          );
      }
      this.roundTrip = _data['roundTrip'];
      this.remark = _data['remark'];
      this.state = _data['state'];
      this.stateDesc = _data['stateDesc'];
    }
  }

  static fromJS(data: any, _mappings?: any): Simple_OrderDetailDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Simple_OrderDetailDto>(data, _mappings, Simple_OrderDetailDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    data['orderDetailId'] = this.orderDetailId;
    data['orderVehicleId'] = this.orderVehicleId;
    data['customerId'] = this.customerId;
    data['customerName'] = this.customerName;
    data['orderVehicleNo'] = this.orderVehicleNo;
    data['vehicleHeadId'] = this.vehicleHeadId;
    data['vehicleTailId'] = this.vehicleTailId;
    data['vehicleTailNumber'] = this.vehicleTailNumber;
    data['userDriverId'] = this.userDriverId;
    data['driverName'] = this.driverName;
    data['userEscortId'] = this.userEscortId;
    data['escortName'] = this.escortName;
    if (Array.isArray(this.goodsList)) {
      data['goodsList'] = [];
      for (let item of this.goodsList) data['goodsList'].push(item.toJSON());
    }
    data['goodsStr'] = this.goodsStr;
    data['goodsDesc'] = this.goodsDesc;
    data['orderNo'] = this.orderNo;
    data['planLoadAndUnLoadTimeIndex'] = this.planLoadAndUnLoadTimeIndex;
    data['planLoadAndUnLoadTimeIndexLength'] = this.planLoadAndUnLoadTimeIndexLength;
    data['planLoadingTime'] = this.planLoadingTime
      ? this.planLoadingTime.toISOString()
      : <any>undefined;
    data['planUnloadingTime'] = this.planUnloadingTime
      ? this.planUnloadingTime.toISOString()
      : <any>undefined;
    data['loadingPointId'] = this.loadingPointId;
    data['multiLoadingPoints'] = this.multiLoadingPoints;
    data['loadingPointStr'] = this.loadingPointStr;
    data['unLoadingPointId'] = this.unLoadingPointId;
    data['multiUnLoadingPoints'] = this.multiUnLoadingPoints;
    data['unLoadingPointStr'] = this.unLoadingPointStr;
    if (Array.isArray(this.orderLoadingUnloadingPointsDto)) {
      data['orderLoadingUnloadingPointsDto'] = [];
      for (let item of this.orderLoadingUnloadingPointsDto)
        data['orderLoadingUnloadingPointsDto'].push(item.toJSON());
    }
    data['roundTrip'] = this.roundTrip;
    data['remark'] = this.remark;
    data['state'] = this.state;
    data['stateDesc'] = this.stateDesc;
    return data;
  }

  clone(): Simple_OrderDetailDto {
    const json = this.toJSON();
    let result = new Simple_OrderDetailDto();
    result.init(json);
    return result;
  }
}

export class SimpleModel {
  col!: number;
  dateNow!: dayjs.Dayjs;
  orderDetail!: Simple_OrderDetailDto;
  idx!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.col = _data['col'];
      this.dateNow = _data['dateNow'] ? dayjs(_data['dateNow'].toString()) : <any>undefined;
      this.orderDetail = _data['orderDetail']
        ? Simple_OrderDetailDto.fromJS(_data['orderDetail'], _mappings)
        : <any>undefined;
      this.idx = _data['idx'];
    }
  }

  static fromJS(data: any, _mappings?: any): SimpleModel | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SimpleModel>(data, _mappings, SimpleModel);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['col'] = this.col;
    data['dateNow'] = this.dateNow ? this.dateNow.toISOString() : <any>undefined;
    data['orderDetail'] = this.orderDetail ? this.orderDetail.toJSON() : <any>undefined;
    data['idx'] = this.idx;
    return data;
  }

  clone(): SimpleModel {
    const json = this.toJSON();
    let result = new SimpleModel();
    result.init(json);
    return result;
  }
}

/** 主订单详情的列表DTO Erinyes.TMS.Order_OrderDetail */
export class Simple_OrderListDto {
  /** 车头 */
  vehicleHeadId!: number | undefined;
  /** 是否是整车 */
  isCompleteVehicle!: boolean;
  /** 是否已绑定GPS */
  bindGps!: boolean;
  /** 车头车牌号码 */
  vehicleHeadNumber!: string | undefined;
  /** 车头经营范围-系统导入的数据 */
  businessScopeSystem!: string | undefined;
  /** 订单List */
  simpleModelList!: SimpleModel[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.vehicleHeadId = _data['vehicleHeadId'];
      this.isCompleteVehicle = _data['isCompleteVehicle'];
      this.bindGps = _data['bindGps'];
      this.vehicleHeadNumber = _data['vehicleHeadNumber'];
      this.businessScopeSystem = _data['businessScopeSystem'];
      if (Array.isArray(_data['simpleModelList'])) {
        this.simpleModelList = [] as any;
        for (let item of _data['simpleModelList'])
          this.simpleModelList!.push(SimpleModel.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): Simple_OrderListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Simple_OrderListDto>(data, _mappings, Simple_OrderListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['vehicleHeadId'] = this.vehicleHeadId;
    data['isCompleteVehicle'] = this.isCompleteVehicle;
    data['bindGps'] = this.bindGps;
    data['vehicleHeadNumber'] = this.vehicleHeadNumber;
    data['businessScopeSystem'] = this.businessScopeSystem;
    if (Array.isArray(this.simpleModelList)) {
      data['simpleModelList'] = [];
      for (let item of this.simpleModelList) data['simpleModelList'].push(item.toJSON());
    }
    return data;
  }

  clone(): Simple_OrderListDto {
    const json = this.toJSON();
    let result = new Simple_OrderListDto();
    result.init(json);
    return result;
  }
}

/** 主订单详情的列表DTO */
export class Simple_OrderTimeRangeDto {
  /** 最小时间 */
  minDateTime!: dayjs.Dayjs | undefined;
  /** 最大时间 */
  maxDateTime!: dayjs.Dayjs | undefined;
  /** 车挂 */
  vehicleTailId!: number | undefined;
  /** 司机 */
  userDriverId!: number | undefined;
  /** 客户Id */
  customerId!: number | undefined;
  /** 押运员 */
  userEscortId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.minDateTime = _data['minDateTime']
        ? dayjs(_data['minDateTime'].toString())
        : <any>undefined;
      this.maxDateTime = _data['maxDateTime']
        ? dayjs(_data['maxDateTime'].toString())
        : <any>undefined;
      this.vehicleTailId = _data['vehicleTailId'];
      this.userDriverId = _data['userDriverId'];
      this.customerId = _data['customerId'];
      this.userEscortId = _data['userEscortId'];
    }
  }

  static fromJS(data: any, _mappings?: any): Simple_OrderTimeRangeDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Simple_OrderTimeRangeDto>(data, _mappings, Simple_OrderTimeRangeDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['minDateTime'] = this.minDateTime ? this.minDateTime.toISOString() : <any>undefined;
    data['maxDateTime'] = this.maxDateTime ? this.maxDateTime.toISOString() : <any>undefined;
    data['vehicleTailId'] = this.vehicleTailId;
    data['userDriverId'] = this.userDriverId;
    data['customerId'] = this.customerId;
    data['userEscortId'] = this.userEscortId;
    return data;
  }

  clone(): Simple_OrderTimeRangeDto {
    const json = this.toJSON();
    let result = new Simple_OrderTimeRangeDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfOrder_OrderDetailListDto {
  totalCount!: number;
  items!: Order_OrderDetailListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Order_OrderDetailListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfOrder_OrderDetailListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfOrder_OrderDetailListDto>(
      data,
      _mappings,
      PagedResultDtoOfOrder_OrderDetailListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfOrder_OrderDetailListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfOrder_OrderDetailListDto();
    result.init(json);
    return result;
  }
}

/** 主订单的列表DTO Erinyes.TMS.Order_OrderDetail */
export class Simple_OrderDetailEditDto {
  /** 主订单Id */
  orderId!: number | undefined;
  /** 车辆订单Id */
  orderVehicleId!: number | undefined;
  /** 子订单Id */
  orderDetailId!: number | undefined;
  /** 客户id */
  customerId!: number | undefined;
  goodsList!: Order_GoodsListDto[] | undefined;
  /** 商品描述信息 */
  goodsDesc!: string | undefined;
  /** 子订单编号 */
  orderNo!: string | undefined;
  /** 计划装货时间 */
  planLoadingTime!: dayjs.Dayjs | undefined;
  /** 计划到货时间 */
  planUnloadingTime!: dayjs.Dayjs | undefined;
  /** 提货点 */
  loadingPointId!: number | undefined;
  /** 多装 */
  multiLoadingPoints!: boolean;
  /** 提货点显示文字 */
  loadingPointStr!: string | undefined;
  /** 送货点 */
  unLoadingPointId!: number | undefined;
  /** 多卸 */
  multiUnLoadingPoints!: boolean;
  /** 送货点显示文字 */
  unLoadingPointStr!: string | undefined;
  /** 订单多装多卸点位信息 */
  orderLoadingUnloadingPointsDto!: Order_OrderLoadingUnloadingPointsDto[] | undefined;
  /** 结算显示文字 */
  balanceStr!: string | undefined;
  /** 是否往返 */
  roundTrip!: boolean;
  /** 备注 */
  remark!: string | undefined;
  /** 车辆类型(字典) */
  vehicleTypeId!: number | undefined;
  /** 车辆标准30、20、10吨 */
  vehicleStandardsId!: number | undefined;
  /** 车头 */
  vehicleHeadId!: number | undefined;
  /** 车挂 */
  vehicleTailId!: number | undefined;
  /** 司机 */
  userDriverId!: number | undefined;
  /** 押运员 */
  userEscortId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
      this.orderVehicleId = _data['orderVehicleId'];
      this.orderDetailId = _data['orderDetailId'];
      this.customerId = _data['customerId'];
      if (Array.isArray(_data['goodsList'])) {
        this.goodsList = [] as any;
        for (let item of _data['goodsList'])
          this.goodsList!.push(Order_GoodsListDto.fromJS(item, _mappings));
      }
      this.goodsDesc = _data['goodsDesc'];
      this.orderNo = _data['orderNo'];
      this.planLoadingTime = _data['planLoadingTime']
        ? dayjs(_data['planLoadingTime'].toString())
        : <any>undefined;
      this.planUnloadingTime = _data['planUnloadingTime']
        ? dayjs(_data['planUnloadingTime'].toString())
        : <any>undefined;
      this.loadingPointId = _data['loadingPointId'];
      this.multiLoadingPoints = _data['multiLoadingPoints'];
      this.loadingPointStr = _data['loadingPointStr'];
      this.unLoadingPointId = _data['unLoadingPointId'];
      this.multiUnLoadingPoints = _data['multiUnLoadingPoints'];
      this.unLoadingPointStr = _data['unLoadingPointStr'];
      if (Array.isArray(_data['orderLoadingUnloadingPointsDto'])) {
        this.orderLoadingUnloadingPointsDto = [] as any;
        for (let item of _data['orderLoadingUnloadingPointsDto'])
          this.orderLoadingUnloadingPointsDto!.push(
            Order_OrderLoadingUnloadingPointsDto.fromJS(item, _mappings),
          );
      }
      this.balanceStr = _data['balanceStr'];
      this.roundTrip = _data['roundTrip'];
      this.remark = _data['remark'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleStandardsId = _data['vehicleStandardsId'];
      this.vehicleHeadId = _data['vehicleHeadId'];
      this.vehicleTailId = _data['vehicleTailId'];
      this.userDriverId = _data['userDriverId'];
      this.userEscortId = _data['userEscortId'];
    }
  }

  static fromJS(data: any, _mappings?: any): Simple_OrderDetailEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Simple_OrderDetailEditDto>(data, _mappings, Simple_OrderDetailEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    data['orderVehicleId'] = this.orderVehicleId;
    data['orderDetailId'] = this.orderDetailId;
    data['customerId'] = this.customerId;
    if (Array.isArray(this.goodsList)) {
      data['goodsList'] = [];
      for (let item of this.goodsList) data['goodsList'].push(item.toJSON());
    }
    data['goodsDesc'] = this.goodsDesc;
    data['orderNo'] = this.orderNo;
    data['planLoadingTime'] = this.planLoadingTime
      ? this.planLoadingTime.toISOString()
      : <any>undefined;
    data['planUnloadingTime'] = this.planUnloadingTime
      ? this.planUnloadingTime.toISOString()
      : <any>undefined;
    data['loadingPointId'] = this.loadingPointId;
    data['multiLoadingPoints'] = this.multiLoadingPoints;
    data['loadingPointStr'] = this.loadingPointStr;
    data['unLoadingPointId'] = this.unLoadingPointId;
    data['multiUnLoadingPoints'] = this.multiUnLoadingPoints;
    data['unLoadingPointStr'] = this.unLoadingPointStr;
    if (Array.isArray(this.orderLoadingUnloadingPointsDto)) {
      data['orderLoadingUnloadingPointsDto'] = [];
      for (let item of this.orderLoadingUnloadingPointsDto)
        data['orderLoadingUnloadingPointsDto'].push(item.toJSON());
    }
    data['balanceStr'] = this.balanceStr;
    data['roundTrip'] = this.roundTrip;
    data['remark'] = this.remark;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleStandardsId'] = this.vehicleStandardsId;
    data['vehicleHeadId'] = this.vehicleHeadId;
    data['vehicleTailId'] = this.vehicleTailId;
    data['userDriverId'] = this.userDriverId;
    data['userEscortId'] = this.userEscortId;
    return data;
  }

  clone(): Simple_OrderDetailEditDto {
    const json = this.toJSON();
    let result = new Simple_OrderDetailEditDto();
    result.init(json);
    return result;
  }
}

export class RolesToOrganizationUnitInput {
  roleIds!: number[] | undefined;
  organizationUnitId!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['roleIds'])) {
        this.roleIds = [] as any;
        for (let item of _data['roleIds']) this.roleIds!.push(item);
      }
      this.organizationUnitId = _data['organizationUnitId'];
    }
  }

  static fromJS(data: any, _mappings?: any): RolesToOrganizationUnitInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<RolesToOrganizationUnitInput>(
      data,
      _mappings,
      RolesToOrganizationUnitInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.roleIds)) {
      data['roleIds'] = [];
      for (let item of this.roleIds) data['roleIds'].push(item);
    }
    data['organizationUnitId'] = this.organizationUnitId;
    return data;
  }

  clone(): RolesToOrganizationUnitInput {
    const json = this.toJSON();
    let result = new RolesToOrganizationUnitInput();
    result.init(json);
    return result;
  }
}

export class UsersToOrganizationUnitInput {
  userIds!: number[] | undefined;
  organizationUnitId!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['userIds'])) {
        this.userIds = [] as any;
        for (let item of _data['userIds']) this.userIds!.push(item);
      }
      this.organizationUnitId = _data['organizationUnitId'];
    }
  }

  static fromJS(data: any, _mappings?: any): UsersToOrganizationUnitInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UsersToOrganizationUnitInput>(
      data,
      _mappings,
      UsersToOrganizationUnitInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.userIds)) {
      data['userIds'] = [];
      for (let item of this.userIds) data['userIds'].push(item);
    }
    data['organizationUnitId'] = this.organizationUnitId;
    return data;
  }

  clone(): UsersToOrganizationUnitInput {
    const json = this.toJSON();
    let result = new UsersToOrganizationUnitInput();
    result.init(json);
    return result;
  }
}

export class CreateOrganizationUnitInput {
  parentId!: number | undefined;
  displayName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.parentId = _data['parentId'];
      this.displayName = _data['displayName'];
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrganizationUnitInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrganizationUnitInput>(
      data,
      _mappings,
      CreateOrganizationUnitInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['parentId'] = this.parentId;
    data['displayName'] = this.displayName;
    return data;
  }

  clone(): CreateOrganizationUnitInput {
    const json = this.toJSON();
    let result = new CreateOrganizationUnitInput();
    result.init(json);
    return result;
  }
}

/** 组织机构列表Dto */
export class OrganizationUnitListDto {
  parentId!: number | undefined;
  code!: string | undefined;
  displayName!: string | undefined;
  memberCount!: number;
  roleCount!: number;
  lastModificationTime!: dayjs.Dayjs | undefined;
  lastModifierUserId!: number | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.parentId = _data['parentId'];
      this.code = _data['code'];
      this.displayName = _data['displayName'];
      this.memberCount = _data['memberCount'];
      this.roleCount = _data['roleCount'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): OrganizationUnitListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<OrganizationUnitListDto>(data, _mappings, OrganizationUnitListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['parentId'] = this.parentId;
    data['code'] = this.code;
    data['displayName'] = this.displayName;
    data['memberCount'] = this.memberCount;
    data['roleCount'] = this.roleCount;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['id'] = this.id;
    return data;
  }

  clone(): OrganizationUnitListDto {
    const json = this.toJSON();
    let result = new OrganizationUnitListDto();
    result.init(json);
    return result;
  }
}

export class FindUsersInput {
  organizationUnitId!: number;
  maxResultCount!: number;
  skipCount!: number;
  filterText!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.organizationUnitId = _data['organizationUnitId'];
      this.maxResultCount = _data['maxResultCount'];
      this.skipCount = _data['skipCount'];
      this.filterText = _data['filterText'];
    }
  }

  static fromJS(data: any, _mappings?: any): FindUsersInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<FindUsersInput>(data, _mappings, FindUsersInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['organizationUnitId'] = this.organizationUnitId;
    data['maxResultCount'] = this.maxResultCount;
    data['skipCount'] = this.skipCount;
    data['filterText'] = this.filterText;
    return data;
  }

  clone(): FindUsersInput {
    const json = this.toJSON();
    let result = new FindUsersInput();
    result.init(json);
    return result;
  }
}

export class ListResultDtoOfOrganizationUnitListDto {
  items!: OrganizationUnitListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(OrganizationUnitListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ListResultDtoOfOrganizationUnitListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ListResultDtoOfOrganizationUnitListDto>(
      data,
      _mappings,
      ListResultDtoOfOrganizationUnitListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): ListResultDtoOfOrganizationUnitListDto {
    const json = this.toJSON();
    let result = new ListResultDtoOfOrganizationUnitListDto();
    result.init(json);
    return result;
  }
}

export class OrganizationUnitRoleListDto {
  displayName!: string | undefined;
  name!: string | undefined;
  addedTime!: dayjs.Dayjs;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.displayName = _data['displayName'];
      this.name = _data['name'];
      this.addedTime = _data['addedTime'] ? dayjs(_data['addedTime'].toString()) : <any>undefined;
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): OrganizationUnitRoleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<OrganizationUnitRoleListDto>(
      data,
      _mappings,
      OrganizationUnitRoleListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['displayName'] = this.displayName;
    data['name'] = this.name;
    data['addedTime'] = this.addedTime ? this.addedTime.toISOString() : <any>undefined;
    data['id'] = this.id;
    return data;
  }

  clone(): OrganizationUnitRoleListDto {
    const json = this.toJSON();
    let result = new OrganizationUnitRoleListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfOrganizationUnitRoleListDto {
  totalCount!: number;
  items!: OrganizationUnitRoleListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(OrganizationUnitRoleListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfOrganizationUnitRoleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfOrganizationUnitRoleListDto>(
      data,
      _mappings,
      PagedResultDtoOfOrganizationUnitRoleListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfOrganizationUnitRoleListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfOrganizationUnitRoleListDto();
    result.init(json);
    return result;
  }
}

export class OrganizationUnitUserListDto {
  userName!: string | undefined;
  realName!: string | undefined;
  addedTime!: dayjs.Dayjs;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.userName = _data['userName'];
      this.realName = _data['realName'];
      this.addedTime = _data['addedTime'] ? dayjs(_data['addedTime'].toString()) : <any>undefined;
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): OrganizationUnitUserListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<OrganizationUnitUserListDto>(
      data,
      _mappings,
      OrganizationUnitUserListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userName'] = this.userName;
    data['realName'] = this.realName;
    data['addedTime'] = this.addedTime ? this.addedTime.toISOString() : <any>undefined;
    data['id'] = this.id;
    return data;
  }

  clone(): OrganizationUnitUserListDto {
    const json = this.toJSON();
    let result = new OrganizationUnitUserListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfOrganizationUnitUserListDto {
  totalCount!: number;
  items!: OrganizationUnitUserListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(OrganizationUnitUserListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfOrganizationUnitUserListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfOrganizationUnitUserListDto>(
      data,
      _mappings,
      PagedResultDtoOfOrganizationUnitUserListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfOrganizationUnitUserListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfOrganizationUnitUserListDto();
    result.init(json);
    return result;
  }
}

export class UserToOrganizationUnitInput {
  userId!: number;
  organizationUnitId!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.organizationUnitId = _data['organizationUnitId'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserToOrganizationUnitInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserToOrganizationUnitInput>(
      data,
      _mappings,
      UserToOrganizationUnitInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['organizationUnitId'] = this.organizationUnitId;
    return data;
  }

  clone(): UserToOrganizationUnitInput {
    const json = this.toJSON();
    let result = new UserToOrganizationUnitInput();
    result.init(json);
    return result;
  }
}

export class MoveOrganizationUnitInput {
  id!: number;
  newParentId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.newParentId = _data['newParentId'];
    }
  }

  static fromJS(data: any, _mappings?: any): MoveOrganizationUnitInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<MoveOrganizationUnitInput>(data, _mappings, MoveOrganizationUnitInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['newParentId'] = this.newParentId;
    return data;
  }

  clone(): MoveOrganizationUnitInput {
    const json = this.toJSON();
    let result = new MoveOrganizationUnitInput();
    result.init(json);
    return result;
  }
}

export class RoleToOrganizationUnitInput {
  roleId!: number;
  organizationUnitId!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.roleId = _data['roleId'];
      this.organizationUnitId = _data['organizationUnitId'];
    }
  }

  static fromJS(data: any, _mappings?: any): RoleToOrganizationUnitInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<RoleToOrganizationUnitInput>(
      data,
      _mappings,
      RoleToOrganizationUnitInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['roleId'] = this.roleId;
    data['organizationUnitId'] = this.organizationUnitId;
    return data;
  }

  clone(): RoleToOrganizationUnitInput {
    const json = this.toJSON();
    let result = new RoleToOrganizationUnitInput();
    result.init(json);
    return result;
  }
}

export class UpdateOrganizationUnitInput {
  id!: number;
  displayName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.displayName = _data['displayName'];
    }
  }

  static fromJS(data: any, _mappings?: any): UpdateOrganizationUnitInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UpdateOrganizationUnitInput>(
      data,
      _mappings,
      UpdateOrganizationUnitInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['displayName'] = this.displayName;
    return data;
  }

  clone(): UpdateOrganizationUnitInput {
    const json = this.toJSON();
    let result = new UpdateOrganizationUnitInput();
    result.init(json);
    return result;
  }
}

/** 回款的列表DTO Erinyes.CRM.PaymentCollection */
export class PaymentCollectionEditDto {
  /** Id */
  id!: number | undefined;
  /** 财务开票 */
  invoiceFinanceId!: number | undefined;
  /** 回款金额 */
  paymentAmount!: number | undefined;
  /** 回款时间 */
  paymentTime!: dayjs.Dayjs | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.invoiceFinanceId = _data['invoiceFinanceId'];
      this.paymentAmount = _data['paymentAmount'];
      this.paymentTime = _data['paymentTime']
        ? dayjs(_data['paymentTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): PaymentCollectionEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PaymentCollectionEditDto>(data, _mappings, PaymentCollectionEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['invoiceFinanceId'] = this.invoiceFinanceId;
    data['paymentAmount'] = this.paymentAmount;
    data['paymentTime'] = this.paymentTime ? this.paymentTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): PaymentCollectionEditDto {
    const json = this.toJSON();
    let result = new PaymentCollectionEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdatePaymentCollectionInput {
  paymentCollection!: PaymentCollectionEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.paymentCollection = _data['paymentCollection']
        ? PaymentCollectionEditDto.fromJS(_data['paymentCollection'], _mappings)
        : new PaymentCollectionEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdatePaymentCollectionInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdatePaymentCollectionInput>(
      data,
      _mappings,
      CreateOrUpdatePaymentCollectionInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['paymentCollection'] = this.paymentCollection
      ? this.paymentCollection.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdatePaymentCollectionInput {
    const json = this.toJSON();
    let result = new CreateOrUpdatePaymentCollectionInput();
    result.init(json);
    return result;
  }
}

/** 回款的列表DTO Erinyes.CRM.PaymentCollection */
export class PaymentCollectionDetailtDto {
  invoiceSalesId!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 客户Id */
  customerId!: number;
  /** 已开票金额 */
  invoiceAmount!: number | undefined;
  /** 开票时间 */
  invoiceTime!: dayjs.Dayjs | undefined;
  /** 回款总金额 */
  paymentAllAmount!: number | undefined;
  /** 记录数 */
  recordCount!: number;
  /** 负责人 */
  responsibleUserName!: string | undefined;
  /** 负责人Id */
  responsibleUserId!: number | undefined;
  /** 创建人Id */
  creatorUserId!: number | undefined;
  /** 入库记录 */
  paymentCollectionList!: PaymentCollectionDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.invoiceSalesId = _data['invoiceSalesId'];
      this.customerName = _data['customerName'];
      this.customerId = _data['customerId'];
      this.invoiceAmount = _data['invoiceAmount'];
      this.invoiceTime = _data['invoiceTime']
        ? dayjs(_data['invoiceTime'].toString())
        : <any>undefined;
      this.paymentAllAmount = _data['paymentAllAmount'];
      this.recordCount = _data['recordCount'];
      this.responsibleUserName = _data['responsibleUserName'];
      this.responsibleUserId = _data['responsibleUserId'];
      this.creatorUserId = _data['creatorUserId'];
      if (Array.isArray(_data['paymentCollectionList'])) {
        this.paymentCollectionList = [] as any;
        for (let item of _data['paymentCollectionList'])
          this.paymentCollectionList!.push(PaymentCollectionDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PaymentCollectionDetailtDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PaymentCollectionDetailtDto>(
      data,
      _mappings,
      PaymentCollectionDetailtDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['invoiceSalesId'] = this.invoiceSalesId;
    data['customerName'] = this.customerName;
    data['customerId'] = this.customerId;
    data['invoiceAmount'] = this.invoiceAmount;
    data['invoiceTime'] = this.invoiceTime ? this.invoiceTime.toISOString() : <any>undefined;
    data['paymentAllAmount'] = this.paymentAllAmount;
    data['recordCount'] = this.recordCount;
    data['responsibleUserName'] = this.responsibleUserName;
    data['responsibleUserId'] = this.responsibleUserId;
    data['creatorUserId'] = this.creatorUserId;
    if (Array.isArray(this.paymentCollectionList)) {
      data['paymentCollectionList'] = [];
      for (let item of this.paymentCollectionList)
        data['paymentCollectionList'].push(item.toJSON());
    }
    return data;
  }

  clone(): PaymentCollectionDetailtDto {
    const json = this.toJSON();
    let result = new PaymentCollectionDetailtDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑回款的Dto */
export class GetPaymentCollectionForEditOutput {
  paymentCollection!: PaymentCollectionEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.paymentCollection = _data['paymentCollection']
        ? PaymentCollectionEditDto.fromJS(_data['paymentCollection'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetPaymentCollectionForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetPaymentCollectionForEditOutput>(
      data,
      _mappings,
      GetPaymentCollectionForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['paymentCollection'] = this.paymentCollection
      ? this.paymentCollection.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): GetPaymentCollectionForEditOutput {
    const json = this.toJSON();
    let result = new GetPaymentCollectionForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfPaymentCollectionListDto {
  totalCount!: number;
  items!: PaymentCollectionListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(PaymentCollectionListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfPaymentCollectionListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfPaymentCollectionListDto>(
      data,
      _mappings,
      PagedResultDtoOfPaymentCollectionListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfPaymentCollectionListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfPaymentCollectionListDto();
    result.init(json);
    return result;
  }
}

export class FlatPermissionWithLevelDto {
  level!: number;
  parentName!: string | undefined;
  name!: string | undefined;
  displayName!: string | undefined;
  description!: string | undefined;
  isGrantedByDefault!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.level = _data['level'];
      this.parentName = _data['parentName'];
      this.name = _data['name'];
      this.displayName = _data['displayName'];
      this.description = _data['description'];
      this.isGrantedByDefault = _data['isGrantedByDefault'];
    }
  }

  static fromJS(data: any, _mappings?: any): FlatPermissionWithLevelDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<FlatPermissionWithLevelDto>(data, _mappings, FlatPermissionWithLevelDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['level'] = this.level;
    data['parentName'] = this.parentName;
    data['name'] = this.name;
    data['displayName'] = this.displayName;
    data['description'] = this.description;
    data['isGrantedByDefault'] = this.isGrantedByDefault;
    return data;
  }

  clone(): FlatPermissionWithLevelDto {
    const json = this.toJSON();
    let result = new FlatPermissionWithLevelDto();
    result.init(json);
    return result;
  }
}

export class ListResultDtoOfFlatPermissionWithLevelDto {
  items!: FlatPermissionWithLevelDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(FlatPermissionWithLevelDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ListResultDtoOfFlatPermissionWithLevelDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ListResultDtoOfFlatPermissionWithLevelDto>(
      data,
      _mappings,
      ListResultDtoOfFlatPermissionWithLevelDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): ListResultDtoOfFlatPermissionWithLevelDto {
    const json = this.toJSON();
    let result = new ListResultDtoOfFlatPermissionWithLevelDto();
    result.init(json);
    return result;
  }
}

export class TreePermissionDto {
  parentName!: string | undefined;
  name!: string | undefined;
  displayName!: string | undefined;
  description!: string | undefined;
  children!: TreePermissionDto[] | undefined;
  checked!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.parentName = _data['parentName'];
      this.name = _data['name'];
      this.displayName = _data['displayName'];
      this.description = _data['description'];
      if (Array.isArray(_data['children'])) {
        this.children = [] as any;
        for (let item of _data['children'])
          this.children!.push(TreePermissionDto.fromJS(item, _mappings));
      }
      this.checked = _data['checked'];
    }
  }

  static fromJS(data: any, _mappings?: any): TreePermissionDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TreePermissionDto>(data, _mappings, TreePermissionDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['parentName'] = this.parentName;
    data['name'] = this.name;
    data['displayName'] = this.displayName;
    data['description'] = this.description;
    if (Array.isArray(this.children)) {
      data['children'] = [];
      for (let item of this.children) data['children'].push(item.toJSON());
    }
    data['checked'] = this.checked;
    return data;
  }

  clone(): TreePermissionDto {
    const json = this.toJSON();
    let result = new TreePermissionDto();
    result.init(json);
    return result;
  }
}

export class ListResultDtoOfTreePermissionDto {
  items!: TreePermissionDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(TreePermissionDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ListResultDtoOfTreePermissionDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ListResultDtoOfTreePermissionDto>(
      data,
      _mappings,
      ListResultDtoOfTreePermissionDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): ListResultDtoOfTreePermissionDto {
    const json = this.toJSON();
    let result = new ListResultDtoOfTreePermissionDto();
    result.init(json);
    return result;
  }
}

export class ChangeUserLanguageDto {
  languageName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.languageName = _data['languageName'];
    }
  }

  static fromJS(data: any, _mappings?: any): ChangeUserLanguageDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ChangeUserLanguageDto>(data, _mappings, ChangeUserLanguageDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['languageName'] = this.languageName;
    return data;
  }

  clone(): ChangeUserLanguageDto {
    const json = this.toJSON();
    let result = new ChangeUserLanguageDto();
    result.init(json);
    return result;
  }
}

export class ChangePasswordInput {
  currentPassword!: string | undefined;
  newPassword!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.currentPassword = _data['currentPassword'];
      this.newPassword = _data['newPassword'];
    }
  }

  static fromJS(data: any, _mappings?: any): ChangePasswordInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ChangePasswordInput>(data, _mappings, ChangePasswordInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['currentPassword'] = this.currentPassword;
    data['newPassword'] = this.newPassword;
    return data;
  }

  clone(): ChangePasswordInput {
    const json = this.toJSON();
    let result = new ChangePasswordInput();
    result.init(json);
    return result;
  }
}

export class CurrentUserProfileEditDto {
  userName!: string | undefined;
  emailAddress!: string | undefined;
  phoneNumber!: string | undefined;
  isPhoneNumberConfirmed!: boolean;
  realName!: string | undefined;
  /** 时区 */
  timezone!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.userName = _data['userName'];
      this.emailAddress = _data['emailAddress'];
      this.phoneNumber = _data['phoneNumber'];
      this.isPhoneNumberConfirmed = _data['isPhoneNumberConfirmed'];
      this.realName = _data['realName'];
      this.timezone = _data['timezone'];
    }
  }

  static fromJS(data: any, _mappings?: any): CurrentUserProfileEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CurrentUserProfileEditDto>(data, _mappings, CurrentUserProfileEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userName'] = this.userName;
    data['emailAddress'] = this.emailAddress;
    data['phoneNumber'] = this.phoneNumber;
    data['isPhoneNumberConfirmed'] = this.isPhoneNumberConfirmed;
    data['realName'] = this.realName;
    data['timezone'] = this.timezone;
    return data;
  }

  clone(): CurrentUserProfileEditDto {
    const json = this.toJSON();
    let result = new CurrentUserProfileEditDto();
    result.init(json);
    return result;
  }
}

/** 用户头像输出 */
export class GetProfilePictureOutputDto {
  profilePicture!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.profilePicture = _data['profilePicture'];
    }
  }

  static fromJS(data: any, _mappings?: any): GetProfilePictureOutputDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetProfilePictureOutputDto>(data, _mappings, GetProfilePictureOutputDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['profilePicture'] = this.profilePicture;
    return data;
  }

  clone(): GetProfilePictureOutputDto {
    const json = this.toJSON();
    let result = new GetProfilePictureOutputDto();
    result.init(json);
    return result;
  }
}

export class UpdateProfilePictureInput {
  fileToken!: string | undefined;
  x!: number;
  y!: number;
  width!: number;
  height!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.fileToken = _data['fileToken'];
      this.x = _data['x'];
      this.y = _data['y'];
      this.width = _data['width'];
      this.height = _data['height'];
    }
  }

  static fromJS(data: any, _mappings?: any): UpdateProfilePictureInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UpdateProfilePictureInput>(data, _mappings, UpdateProfilePictureInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['fileToken'] = this.fileToken;
    data['x'] = this.x;
    data['y'] = this.y;
    data['width'] = this.width;
    data['height'] = this.height;
    return data;
  }

  clone(): UpdateProfilePictureInput {
    const json = this.toJSON();
    let result = new UpdateProfilePictureInput();
    result.init(json);
    return result;
  }
}

export class PurchasePayInput {
  /** 订单编码 */
  orderCode!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderCode = _data['orderCode'];
    }
  }

  static fromJS(data: any, _mappings?: any): PurchasePayInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PurchasePayInput>(data, _mappings, PurchasePayInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderCode'] = this.orderCode;
    return data;
  }

  clone(): PurchasePayInput {
    const json = this.toJSON();
    let result = new PurchasePayInput();
    result.init(json);
    return result;
  }
}

/** 报价详情DTO Erinyes.CRM.Quotation_Details */
export class QuotationDetailEditDto {
  id!: number | undefined;
  /** 危废详情 */
  customerHWId!: number;
  /** 处置价格（元/吨） */
  unitCost!: number | undefined;
  /** 服务费单价（元/吨） */
  serviceUnitCost!: number | undefined;
  /** 运费 */
  carriageCost!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 年产量 */
  yearlyOutput!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 原处置单位 */
  origDisposalEntName!: string | undefined;
  /** 原处置价格 元/吨 */
  origUnitCost!: number | undefined;
  /** 包装形式：IBC、吨袋、桶（5L-10L-20L-50L-200L）、托盘、槽车；可多选。 public enum Packaging */
  packagings!: string | undefined;
  /** 附件内容 */
  ossFileNames!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerHWId = _data['customerHWId'];
      this.unitCost = _data['unitCost'];
      this.serviceUnitCost = _data['serviceUnitCost'];
      this.carriageCost = _data['carriageCost'];
      this.remark = _data['remark'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.yearlyOutput = _data['yearlyOutput'];
      this.unit = _data['unit'];
      this.origDisposalEntName = _data['origDisposalEntName'];
      this.origUnitCost = _data['origUnitCost'];
      this.packagings = _data['packagings'];
      this.ossFileNames = _data['ossFileNames'];
    }
  }

  static fromJS(data: any, _mappings?: any): QuotationDetailEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<QuotationDetailEditDto>(data, _mappings, QuotationDetailEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerHWId'] = this.customerHWId;
    data['unitCost'] = this.unitCost;
    data['serviceUnitCost'] = this.serviceUnitCost;
    data['carriageCost'] = this.carriageCost;
    data['remark'] = this.remark;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['yearlyOutput'] = this.yearlyOutput;
    data['unit'] = this.unit;
    data['origDisposalEntName'] = this.origDisposalEntName;
    data['origUnitCost'] = this.origUnitCost;
    data['packagings'] = this.packagings;
    data['ossFileNames'] = this.ossFileNames;
    return data;
  }

  clone(): QuotationDetailEditDto {
    const json = this.toJSON();
    let result = new QuotationDetailEditDto();
    result.init(json);
    return result;
  }
}

/** 报价的列表DTO Erinyes.CRM.Quotation */
export class QuotationEditDto {
  /** Id */
  id!: number | undefined;
  /** CustomerId */
  customerId!: number | undefined;
  approveState!: ApproveState;
  /** 原因 */
  reason!: string | undefined;
  /** 总价 */
  totalCost!: number | undefined;
  /** 是否包含运费 */
  containtCarriage!: boolean;
  /** 单次 运费总价（元/次） */
  carriageCost!: number | undefined;
  /** 按次数 报价 */
  byTimes!: boolean;
  /** 按次申请单价（元/次） */
  unitCostByTimes!: number | undefined;
  /** 按次服务费单价（元/次） */
  serviceUnitCostByTimes!: number | undefined;
  remark!: string | undefined;
  quotationDetailEditList!: QuotationDetailEditDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerId = _data['customerId'];
      this.approveState = _data['approveState'];
      this.reason = _data['reason'];
      this.totalCost = _data['totalCost'];
      this.containtCarriage = _data['containtCarriage'];
      this.carriageCost = _data['carriageCost'];
      this.byTimes = _data['byTimes'];
      this.unitCostByTimes = _data['unitCostByTimes'];
      this.serviceUnitCostByTimes = _data['serviceUnitCostByTimes'];
      this.remark = _data['remark'];
      if (Array.isArray(_data['quotationDetailEditList'])) {
        this.quotationDetailEditList = [] as any;
        for (let item of _data['quotationDetailEditList'])
          this.quotationDetailEditList!.push(QuotationDetailEditDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): QuotationEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<QuotationEditDto>(data, _mappings, QuotationEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerId'] = this.customerId;
    data['approveState'] = this.approveState;
    data['reason'] = this.reason;
    data['totalCost'] = this.totalCost;
    data['containtCarriage'] = this.containtCarriage;
    data['carriageCost'] = this.carriageCost;
    data['byTimes'] = this.byTimes;
    data['unitCostByTimes'] = this.unitCostByTimes;
    data['serviceUnitCostByTimes'] = this.serviceUnitCostByTimes;
    data['remark'] = this.remark;
    if (Array.isArray(this.quotationDetailEditList)) {
      data['quotationDetailEditList'] = [];
      for (let item of this.quotationDetailEditList)
        data['quotationDetailEditList'].push(item.toJSON());
    }
    return data;
  }

  clone(): QuotationEditDto {
    const json = this.toJSON();
    let result = new QuotationEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateQuotationInput {
  quotation!: QuotationEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.quotation = _data['quotation']
        ? QuotationEditDto.fromJS(_data['quotation'], _mappings)
        : new QuotationEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateQuotationInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateQuotationInput>(
      data,
      _mappings,
      CreateOrUpdateQuotationInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['quotation'] = this.quotation ? this.quotation.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateQuotationInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateQuotationInput();
    result.init(json);
    return result;
  }
}

/** 报价的列表DTO Erinyes.CRM.Quotation */
export class QuotationDetailListDto {
  id!: number;
  /** 客户Id */
  customerId!: number;
  /** 客户名称 */
  customerName!: string | undefined;
  /** 行政区 */
  cantonName!: string | undefined;
  customerState!: CustomerState;
  /** 审核结果 */
  approveState!: string | undefined;
  /** 审核时间 */
  approveTime!: dayjs.Dayjs | undefined;
  /** 原因 */
  reason!: string | undefined;
  /** 总价 */
  totalCost!: number | undefined;
  /** 是否包含运费 */
  containtCarriage!: boolean;
  /** 单次 运费总价（元/次） */
  carriageCost!: number | undefined;
  /** 按次数 报价 */
  byTimes!: boolean;
  /** 申请单价（元/次） */
  unitCostByTimes!: number | undefined;
  /** 服务费单价（元/次） */
  serviceUnitCostByTimes!: number | undefined;
  /** 审核人 */
  approveUserName!: string | undefined;
  /** 负责人 */
  responsibleUserName!: string | undefined;
  /** 负责人Id */
  responsibleUserId!: number | undefined;
  /** 报价详情 */
  quotationDetails!: QuotationDetailDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerId = _data['customerId'];
      this.customerName = _data['customerName'];
      this.cantonName = _data['cantonName'];
      this.customerState = _data['customerState'];
      this.approveState = _data['approveState'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.reason = _data['reason'];
      this.totalCost = _data['totalCost'];
      this.containtCarriage = _data['containtCarriage'];
      this.carriageCost = _data['carriageCost'];
      this.byTimes = _data['byTimes'];
      this.unitCostByTimes = _data['unitCostByTimes'];
      this.serviceUnitCostByTimes = _data['serviceUnitCostByTimes'];
      this.approveUserName = _data['approveUserName'];
      this.responsibleUserName = _data['responsibleUserName'];
      this.responsibleUserId = _data['responsibleUserId'];
      if (Array.isArray(_data['quotationDetails'])) {
        this.quotationDetails = [] as any;
        for (let item of _data['quotationDetails'])
          this.quotationDetails!.push(QuotationDetailDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): QuotationDetailListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<QuotationDetailListDto>(data, _mappings, QuotationDetailListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerId'] = this.customerId;
    data['customerName'] = this.customerName;
    data['cantonName'] = this.cantonName;
    data['customerState'] = this.customerState;
    data['approveState'] = this.approveState;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['reason'] = this.reason;
    data['totalCost'] = this.totalCost;
    data['containtCarriage'] = this.containtCarriage;
    data['carriageCost'] = this.carriageCost;
    data['byTimes'] = this.byTimes;
    data['unitCostByTimes'] = this.unitCostByTimes;
    data['serviceUnitCostByTimes'] = this.serviceUnitCostByTimes;
    data['approveUserName'] = this.approveUserName;
    data['responsibleUserName'] = this.responsibleUserName;
    data['responsibleUserId'] = this.responsibleUserId;
    if (Array.isArray(this.quotationDetails)) {
      data['quotationDetails'] = [];
      for (let item of this.quotationDetails) data['quotationDetails'].push(item.toJSON());
    }
    return data;
  }

  clone(): QuotationDetailListDto {
    const json = this.toJSON();
    let result = new QuotationDetailListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑报价的Dto */
export class GetQuotationForEditOutput {
  quotation!: QuotationEditDto;
  approveStateTypeEnum!: KeyValuePairOfStringString[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.quotation = _data['quotation']
        ? QuotationEditDto.fromJS(_data['quotation'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['approveStateTypeEnum'])) {
        this.approveStateTypeEnum = [] as any;
        for (let item of _data['approveStateTypeEnum'])
          this.approveStateTypeEnum!.push(KeyValuePairOfStringString.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetQuotationForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetQuotationForEditOutput>(data, _mappings, GetQuotationForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['quotation'] = this.quotation ? this.quotation.toJSON() : <any>undefined;
    if (Array.isArray(this.approveStateTypeEnum)) {
      data['approveStateTypeEnum'] = [];
      for (let item of this.approveStateTypeEnum) data['approveStateTypeEnum'].push(item.toJSON());
    }
    return data;
  }

  clone(): GetQuotationForEditOutput {
    const json = this.toJSON();
    let result = new GetQuotationForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfQuotationListDto {
  totalCount!: number;
  items!: QuotationListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(QuotationListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfQuotationListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfQuotationListDto>(
      data,
      _mappings,
      PagedResultDtoOfQuotationListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfQuotationListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfQuotationListDto();
    result.init(json);
    return result;
  }
}

export class RoleEditDto {
  id!: number | undefined;
  displayName!: string | undefined;
  isDefault!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.displayName = _data['displayName'];
      this.isDefault = _data['isDefault'];
    }
  }

  static fromJS(data: any, _mappings?: any): RoleEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<RoleEditDto>(data, _mappings, RoleEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['displayName'] = this.displayName;
    data['isDefault'] = this.isDefault;
    return data;
  }

  clone(): RoleEditDto {
    const json = this.toJSON();
    let result = new RoleEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateRoleInput {
  role!: RoleEditDto;
  grantedPermissionNames!: string[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.role = _data['role'] ? RoleEditDto.fromJS(_data['role'], _mappings) : new RoleEditDto();
      if (Array.isArray(_data['grantedPermissionNames'])) {
        this.grantedPermissionNames = [] as any;
        for (let item of _data['grantedPermissionNames']) this.grantedPermissionNames!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateRoleInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateRoleInput>(data, _mappings, CreateOrUpdateRoleInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['role'] = this.role ? this.role.toJSON() : <any>undefined;
    if (Array.isArray(this.grantedPermissionNames)) {
      data['grantedPermissionNames'] = [];
      for (let item of this.grantedPermissionNames) data['grantedPermissionNames'].push(item);
    }
    return data;
  }

  clone(): CreateOrUpdateRoleInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateRoleInput();
    result.init(json);
    return result;
  }
}

export class RoleListDto {
  name!: string | undefined;
  displayName!: string | undefined;
  isStatic!: boolean;
  isDefault!: boolean;
  creationTime!: dayjs.Dayjs;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.displayName = _data['displayName'];
      this.isStatic = _data['isStatic'];
      this.isDefault = _data['isDefault'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): RoleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<RoleListDto>(data, _mappings, RoleListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['displayName'] = this.displayName;
    data['isStatic'] = this.isStatic;
    data['isDefault'] = this.isDefault;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['id'] = this.id;
    return data;
  }

  clone(): RoleListDto {
    const json = this.toJSON();
    let result = new RoleListDto();
    result.init(json);
    return result;
  }
}

export class ListResultDtoOfRoleListDto {
  items!: RoleListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(RoleListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ListResultDtoOfRoleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ListResultDtoOfRoleListDto>(data, _mappings, ListResultDtoOfRoleListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): ListResultDtoOfRoleListDto {
    const json = this.toJSON();
    let result = new ListResultDtoOfRoleListDto();
    result.init(json);
    return result;
  }
}

export class FlatPermissionDto {
  parentName!: string | undefined;
  name!: string | undefined;
  displayName!: string | undefined;
  description!: string | undefined;
  isGrantedByDefault!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.parentName = _data['parentName'];
      this.name = _data['name'];
      this.displayName = _data['displayName'];
      this.description = _data['description'];
      this.isGrantedByDefault = _data['isGrantedByDefault'];
    }
  }

  static fromJS(data: any, _mappings?: any): FlatPermissionDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<FlatPermissionDto>(data, _mappings, FlatPermissionDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['parentName'] = this.parentName;
    data['name'] = this.name;
    data['displayName'] = this.displayName;
    data['description'] = this.description;
    data['isGrantedByDefault'] = this.isGrantedByDefault;
    return data;
  }

  clone(): FlatPermissionDto {
    const json = this.toJSON();
    let result = new FlatPermissionDto();
    result.init(json);
    return result;
  }
}

export class GetRoleForEditOutput {
  role!: RoleEditDto;
  permissions!: FlatPermissionDto[] | undefined;
  grantedPermissionNames!: string[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.role = _data['role'] ? RoleEditDto.fromJS(_data['role'], _mappings) : <any>undefined;
      if (Array.isArray(_data['permissions'])) {
        this.permissions = [] as any;
        for (let item of _data['permissions'])
          this.permissions!.push(FlatPermissionDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['grantedPermissionNames'])) {
        this.grantedPermissionNames = [] as any;
        for (let item of _data['grantedPermissionNames']) this.grantedPermissionNames!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetRoleForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetRoleForEditOutput>(data, _mappings, GetRoleForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['role'] = this.role ? this.role.toJSON() : <any>undefined;
    if (Array.isArray(this.permissions)) {
      data['permissions'] = [];
      for (let item of this.permissions) data['permissions'].push(item.toJSON());
    }
    if (Array.isArray(this.grantedPermissionNames)) {
      data['grantedPermissionNames'] = [];
      for (let item of this.grantedPermissionNames) data['grantedPermissionNames'].push(item);
    }
    return data;
  }

  clone(): GetRoleForEditOutput {
    const json = this.toJSON();
    let result = new GetRoleForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfRoleListDto {
  totalCount!: number;
  items!: RoleListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(RoleListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfRoleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfRoleListDto>(
      data,
      _mappings,
      PagedResultDtoOfRoleListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfRoleListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfRoleListDto();
    result.init(json);
    return result;
  }
}

export class UpdateRolePermissionsInput {
  roleId!: number;
  grantedPermissionNames!: string[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.roleId = _data['roleId'];
      if (Array.isArray(_data['grantedPermissionNames'])) {
        this.grantedPermissionNames = [] as any;
        for (let item of _data['grantedPermissionNames']) this.grantedPermissionNames!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): UpdateRolePermissionsInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UpdateRolePermissionsInput>(data, _mappings, UpdateRolePermissionsInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['roleId'] = this.roleId;
    if (Array.isArray(this.grantedPermissionNames)) {
      data['grantedPermissionNames'] = [];
      for (let item of this.grantedPermissionNames) data['grantedPermissionNames'].push(item);
    }
    return data;
  }

  clone(): UpdateRolePermissionsInput {
    const json = this.toJSON();
    let result = new UpdateRolePermissionsInput();
    result.init(json);
    return result;
  }
}

/** 取样的列表DTO Erinyes.CRM.Sampling */
export class SamplingEditDto {
  /** Id */
  id!: number | undefined;
  /** 客户危废详情 */
  customerHWId!: number | undefined;
  /** 是否免检 */
  exemptInspection!: boolean;
  /** 接收样品时间 */
  receivingTime!: dayjs.Dayjs | undefined;
  /** 样品编号 */
  samplingNo!: string | undefined;
  /** 检测报告 */
  labReportFiles!: string | undefined;
  /** 主成分/含量 */
  component!: string | undefined;
  /** 产废工艺 */
  productionProcess!: string | undefined;
  /** 附件 */
  ossFileNames!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerHWId = _data['customerHWId'];
      this.exemptInspection = _data['exemptInspection'];
      this.receivingTime = _data['receivingTime']
        ? dayjs(_data['receivingTime'].toString())
        : <any>undefined;
      this.samplingNo = _data['samplingNo'];
      this.labReportFiles = _data['labReportFiles'];
      this.component = _data['component'];
      this.productionProcess = _data['productionProcess'];
      this.ossFileNames = _data['ossFileNames'];
    }
  }

  static fromJS(data: any, _mappings?: any): SamplingEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SamplingEditDto>(data, _mappings, SamplingEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerHWId'] = this.customerHWId;
    data['exemptInspection'] = this.exemptInspection;
    data['receivingTime'] = this.receivingTime ? this.receivingTime.toISOString() : <any>undefined;
    data['samplingNo'] = this.samplingNo;
    data['labReportFiles'] = this.labReportFiles;
    data['component'] = this.component;
    data['productionProcess'] = this.productionProcess;
    data['ossFileNames'] = this.ossFileNames;
    return data;
  }

  clone(): SamplingEditDto {
    const json = this.toJSON();
    let result = new SamplingEditDto();
    result.init(json);
    return result;
  }
}

/** 实验室的列表DTO Erinyes.CRM.Laboratory */
export class LaboratoryManageDto {
  /** 对应的取样信息 */
  samplingId!: number | undefined;
  /** 检测报告 */
  labReportFiles!: string | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 实验室成分 */
  laboratoryListDto!: LaboratoryEditDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.samplingId = _data['samplingId'];
      this.labReportFiles = _data['labReportFiles'];
      this.remark = _data['remark'];
      if (Array.isArray(_data['laboratoryListDto'])) {
        this.laboratoryListDto = [] as any;
        for (let item of _data['laboratoryListDto'])
          this.laboratoryListDto!.push(LaboratoryEditDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): LaboratoryManageDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LaboratoryManageDto>(data, _mappings, LaboratoryManageDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['samplingId'] = this.samplingId;
    data['labReportFiles'] = this.labReportFiles;
    data['remark'] = this.remark;
    if (Array.isArray(this.laboratoryListDto)) {
      data['laboratoryListDto'] = [];
      for (let item of this.laboratoryListDto) data['laboratoryListDto'].push(item.toJSON());
    }
    return data;
  }

  clone(): LaboratoryManageDto {
    const json = this.toJSON();
    let result = new LaboratoryManageDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateSamplingInput {
  sampling!: SamplingEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.sampling = _data['sampling']
        ? SamplingEditDto.fromJS(_data['sampling'], _mappings)
        : new SamplingEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateSamplingInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateSamplingInput>(
      data,
      _mappings,
      CreateOrUpdateSamplingInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['sampling'] = this.sampling ? this.sampling.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateSamplingInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateSamplingInput();
    result.init(json);
    return result;
  }
}

/** 读取可编辑取样的Dto */
export class GetSamplingForEditOutput {
  sampling!: SamplingEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.sampling = _data['sampling']
        ? SamplingEditDto.fromJS(_data['sampling'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetSamplingForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetSamplingForEditOutput>(data, _mappings, GetSamplingForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['sampling'] = this.sampling ? this.sampling.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetSamplingForEditOutput {
    const json = this.toJSON();
    let result = new GetSamplingForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfSamplingListDto {
  totalCount!: number;
  items!: SamplingListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(SamplingListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfSamplingListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfSamplingListDto>(
      data,
      _mappings,
      PagedResultDtoOfSamplingListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfSamplingListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfSamplingListDto();
    result.init(json);
    return result;
  }
}

export class UserLoginInfoDto {
  name!: string | undefined;
  surname!: string | undefined;
  userName!: string | undefined;
  emailAddress!: string | undefined;
  /** 微信昵称 */
  weChatNickName!: string | undefined;
  /** 微信公众号 OpenId */
  weChatOpenid!: string | undefined;
  /** 绑定用户是否成功 */
  bindUserSuccess!: boolean;
  /** 上次登录时间 */
  lastLoginTime!: dayjs.Dayjs | undefined;
  /** 是否组长 true:组长  false:组员 */
  isLeader!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.surname = _data['surname'];
      this.userName = _data['userName'];
      this.emailAddress = _data['emailAddress'];
      this.weChatNickName = _data['weChatNickName'];
      this.weChatOpenid = _data['weChatOpenid'];
      this.bindUserSuccess = _data['bindUserSuccess'];
      this.lastLoginTime = _data['lastLoginTime']
        ? dayjs(_data['lastLoginTime'].toString())
        : <any>undefined;
      this.isLeader = _data['isLeader'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserLoginInfoDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserLoginInfoDto>(data, _mappings, UserLoginInfoDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['surname'] = this.surname;
    data['userName'] = this.userName;
    data['emailAddress'] = this.emailAddress;
    data['weChatNickName'] = this.weChatNickName;
    data['weChatOpenid'] = this.weChatOpenid;
    data['bindUserSuccess'] = this.bindUserSuccess;
    data['lastLoginTime'] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
    data['isLeader'] = this.isLeader;
    data['id'] = this.id;
    return data;
  }

  clone(): UserLoginInfoDto {
    const json = this.toJSON();
    let result = new UserLoginInfoDto();
    result.init(json);
    return result;
  }
}

export class EditionInfoDto {
  displayName!: string | undefined;
  trialDayCount!: number | undefined;
  monthlyPrice!: number | undefined;
  annualPrice!: number | undefined;
  isHighestEdition!: boolean;
  isFree!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.displayName = _data['displayName'];
      this.trialDayCount = _data['trialDayCount'];
      this.monthlyPrice = _data['monthlyPrice'];
      this.annualPrice = _data['annualPrice'];
      this.isHighestEdition = _data['isHighestEdition'];
      this.isFree = _data['isFree'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): EditionInfoDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EditionInfoDto>(data, _mappings, EditionInfoDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['displayName'] = this.displayName;
    data['trialDayCount'] = this.trialDayCount;
    data['monthlyPrice'] = this.monthlyPrice;
    data['annualPrice'] = this.annualPrice;
    data['isHighestEdition'] = this.isHighestEdition;
    data['isFree'] = this.isFree;
    data['id'] = this.id;
    return data;
  }

  clone(): EditionInfoDto {
    const json = this.toJSON();
    let result = new EditionInfoDto();
    result.init(json);
    return result;
  }
}

export class TenantLoginInfoDto {
  tenancyName!: string | undefined;
  name!: string | undefined;
  logoId!: string | undefined;
  edition!: EditionInfoDto;
  creationTime!: dayjs.Dayjs;
  creationTimeString!: string | undefined;
  /** 是否是试用租户 */
  isTrialTenant!: boolean;
  /** 可以查看的次数 */
  canViewCount!: number;
  /** 可以查看危废 */
  canViewHW!: boolean;
  /** 可以查看环评 */
  canViewEia!: boolean;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenancyName = _data['tenancyName'];
      this.name = _data['name'];
      this.logoId = _data['logoId'];
      this.edition = _data['edition']
        ? EditionInfoDto.fromJS(_data['edition'], _mappings)
        : <any>undefined;
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creationTimeString = _data['creationTimeString'];
      this.isTrialTenant = _data['isTrialTenant'];
      this.canViewCount = _data['canViewCount'];
      this.canViewHW = _data['canViewHW'];
      this.canViewEia = _data['canViewEia'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): TenantLoginInfoDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TenantLoginInfoDto>(data, _mappings, TenantLoginInfoDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenancyName'] = this.tenancyName;
    data['name'] = this.name;
    data['logoId'] = this.logoId;
    data['edition'] = this.edition ? this.edition.toJSON() : <any>undefined;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creationTimeString'] = this.creationTimeString;
    data['isTrialTenant'] = this.isTrialTenant;
    data['canViewCount'] = this.canViewCount;
    data['canViewHW'] = this.canViewHW;
    data['canViewEia'] = this.canViewEia;
    data['id'] = this.id;
    return data;
  }

  clone(): TenantLoginInfoDto {
    const json = this.toJSON();
    let result = new TenantLoginInfoDto();
    result.init(json);
    return result;
  }
}

export class ApplicationInfoDto {
  version!: string | undefined;
  releaseDate!: dayjs.Dayjs;
  features!: { [key: string]: boolean } | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.version = _data['version'];
      this.releaseDate = _data['releaseDate']
        ? dayjs(_data['releaseDate'].toString())
        : <any>undefined;
      if (_data['features']) {
        this.features = {} as any;
        for (let key in _data['features']) {
          if (_data['features'].hasOwnProperty(key))
            (<any>this.features)![key] = _data['features'][key];
        }
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ApplicationInfoDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ApplicationInfoDto>(data, _mappings, ApplicationInfoDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['version'] = this.version;
    data['releaseDate'] = this.releaseDate ? this.releaseDate.toISOString() : <any>undefined;
    if (this.features) {
      data['features'] = {};
      for (let key in this.features) {
        if (this.features.hasOwnProperty(key)) (<any>data['features'])[key] = this.features[key];
      }
    }
    return data;
  }

  clone(): ApplicationInfoDto {
    const json = this.toJSON();
    let result = new ApplicationInfoDto();
    result.init(json);
    return result;
  }
}

export class GetCurrentLoginInformationsOutput {
  user!: UserLoginInfoDto;
  tenant!: TenantLoginInfoDto;
  application!: ApplicationInfoDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.user = _data['user']
        ? UserLoginInfoDto.fromJS(_data['user'], _mappings)
        : <any>undefined;
      this.tenant = _data['tenant']
        ? TenantLoginInfoDto.fromJS(_data['tenant'], _mappings)
        : <any>undefined;
      this.application = _data['application']
        ? ApplicationInfoDto.fromJS(_data['application'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetCurrentLoginInformationsOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetCurrentLoginInformationsOutput>(
      data,
      _mappings,
      GetCurrentLoginInformationsOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['user'] = this.user ? this.user.toJSON() : <any>undefined;
    data['tenant'] = this.tenant ? this.tenant.toJSON() : <any>undefined;
    data['application'] = this.application ? this.application.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetCurrentLoginInformationsOutput {
    const json = this.toJSON();
    let result = new GetCurrentLoginInformationsOutput();
    result.init(json);
    return result;
  }
}

export enum MultiTenancySides {
  Tenant = 'Tenant',
  Host = 'Host',
}

export class AbpMultiTenancySidesConfigDto {
  host!: MultiTenancySides;
  tenant!: MultiTenancySides;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.host = _data['host'];
      this.tenant = _data['tenant'];
    }
  }

  static fromJS(data: any, _mappings?: any): AbpMultiTenancySidesConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpMultiTenancySidesConfigDto>(
      data,
      _mappings,
      AbpMultiTenancySidesConfigDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['host'] = this.host;
    data['tenant'] = this.tenant;
    return data;
  }

  clone(): AbpMultiTenancySidesConfigDto {
    const json = this.toJSON();
    let result = new AbpMultiTenancySidesConfigDto();
    result.init(json);
    return result;
  }
}

export class AbpMultiTenancyConfigDto {
  isEnabled!: boolean;
  ignoreFeatureCheckForHostUsers!: boolean;
  sides!: AbpMultiTenancySidesConfigDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.isEnabled = _data['isEnabled'];
      this.ignoreFeatureCheckForHostUsers = _data['ignoreFeatureCheckForHostUsers'];
      this.sides = _data['sides']
        ? AbpMultiTenancySidesConfigDto.fromJS(_data['sides'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): AbpMultiTenancyConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpMultiTenancyConfigDto>(data, _mappings, AbpMultiTenancyConfigDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['isEnabled'] = this.isEnabled;
    data['ignoreFeatureCheckForHostUsers'] = this.ignoreFeatureCheckForHostUsers;
    data['sides'] = this.sides ? this.sides.toJSON() : <any>undefined;
    return data;
  }

  clone(): AbpMultiTenancyConfigDto {
    const json = this.toJSON();
    let result = new AbpMultiTenancyConfigDto();
    result.init(json);
    return result;
  }
}

export class AbpUserSessionConfigDto {
  userId!: number | undefined;
  tenantId!: number | undefined;
  impersonatorUserId!: number | undefined;
  impersonatorTenantId!: number | undefined;
  multiTenancySide!: MultiTenancySides;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.tenantId = _data['tenantId'];
      this.impersonatorUserId = _data['impersonatorUserId'];
      this.impersonatorTenantId = _data['impersonatorTenantId'];
      this.multiTenancySide = _data['multiTenancySide'];
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserSessionConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserSessionConfigDto>(data, _mappings, AbpUserSessionConfigDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['tenantId'] = this.tenantId;
    data['impersonatorUserId'] = this.impersonatorUserId;
    data['impersonatorTenantId'] = this.impersonatorTenantId;
    data['multiTenancySide'] = this.multiTenancySide;
    return data;
  }

  clone(): AbpUserSessionConfigDto {
    const json = this.toJSON();
    let result = new AbpUserSessionConfigDto();
    result.init(json);
    return result;
  }
}

export class AbpUserCurrentCultureConfigDto {
  name!: string | undefined;
  displayName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.displayName = _data['displayName'];
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserCurrentCultureConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserCurrentCultureConfigDto>(
      data,
      _mappings,
      AbpUserCurrentCultureConfigDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['displayName'] = this.displayName;
    return data;
  }

  clone(): AbpUserCurrentCultureConfigDto {
    const json = this.toJSON();
    let result = new AbpUserCurrentCultureConfigDto();
    result.init(json);
    return result;
  }
}

export class LanguageInfo {
  name!: string | undefined;
  displayName!: string | undefined;
  icon!: string | undefined;
  isDefault!: boolean;
  isDisabled!: boolean;
  readonly isRightToLeft!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.displayName = _data['displayName'];
      this.icon = _data['icon'];
      this.isDefault = _data['isDefault'];
      this.isDisabled = _data['isDisabled'];
      (<any>this).isRightToLeft = _data['isRightToLeft'];
    }
  }

  static fromJS(data: any, _mappings?: any): LanguageInfo | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LanguageInfo>(data, _mappings, LanguageInfo);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['displayName'] = this.displayName;
    data['icon'] = this.icon;
    data['isDefault'] = this.isDefault;
    data['isDisabled'] = this.isDisabled;
    data['isRightToLeft'] = this.isRightToLeft;
    return data;
  }

  clone(): LanguageInfo {
    const json = this.toJSON();
    let result = new LanguageInfo();
    result.init(json);
    return result;
  }
}

export class AbpLocalizationSourceDto {
  name!: string | undefined;
  type!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.type = _data['type'];
    }
  }

  static fromJS(data: any, _mappings?: any): AbpLocalizationSourceDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpLocalizationSourceDto>(data, _mappings, AbpLocalizationSourceDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['type'] = this.type;
    return data;
  }

  clone(): AbpLocalizationSourceDto {
    const json = this.toJSON();
    let result = new AbpLocalizationSourceDto();
    result.init(json);
    return result;
  }
}

export class AbpUserLocalizationConfigDto {
  currentCulture!: AbpUserCurrentCultureConfigDto;
  languages!: LanguageInfo[] | undefined;
  currentLanguage!: LanguageInfo;
  sources!: AbpLocalizationSourceDto[] | undefined;
  values!: { [key: string]: { [key: string]: string } } | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.currentCulture = _data['currentCulture']
        ? AbpUserCurrentCultureConfigDto.fromJS(_data['currentCulture'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['languages'])) {
        this.languages = [] as any;
        for (let item of _data['languages'])
          this.languages!.push(LanguageInfo.fromJS(item, _mappings));
      }
      this.currentLanguage = _data['currentLanguage']
        ? LanguageInfo.fromJS(_data['currentLanguage'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['sources'])) {
        this.sources = [] as any;
        for (let item of _data['sources'])
          this.sources!.push(AbpLocalizationSourceDto.fromJS(item, _mappings));
      }
      if (_data['values']) {
        this.values = {} as any;
        for (let key in _data['values']) {
          if (_data['values'].hasOwnProperty(key))
            (<any>this.values)![key] =
              _data['values'][key] !== undefined ? _data['values'][key] : {};
        }
      }
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserLocalizationConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserLocalizationConfigDto>(
      data,
      _mappings,
      AbpUserLocalizationConfigDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['currentCulture'] = this.currentCulture ? this.currentCulture.toJSON() : <any>undefined;
    if (Array.isArray(this.languages)) {
      data['languages'] = [];
      for (let item of this.languages) data['languages'].push(item.toJSON());
    }
    data['currentLanguage'] = this.currentLanguage ? this.currentLanguage.toJSON() : <any>undefined;
    if (Array.isArray(this.sources)) {
      data['sources'] = [];
      for (let item of this.sources) data['sources'].push(item.toJSON());
    }
    if (this.values) {
      data['values'] = {};
      for (let key in this.values) {
        if (this.values.hasOwnProperty(key)) (<any>data['values'])[key] = this.values[key];
      }
    }
    return data;
  }

  clone(): AbpUserLocalizationConfigDto {
    const json = this.toJSON();
    let result = new AbpUserLocalizationConfigDto();
    result.init(json);
    return result;
  }
}

export class AbpStringValueDto {
  value!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.value = _data['value'];
    }
  }

  static fromJS(data: any, _mappings?: any): AbpStringValueDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpStringValueDto>(data, _mappings, AbpStringValueDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value;
    return data;
  }

  clone(): AbpStringValueDto {
    const json = this.toJSON();
    let result = new AbpStringValueDto();
    result.init(json);
    return result;
  }
}

export class AbpUserFeatureConfigDto {
  allFeatures!: { [key: string]: AbpStringValueDto } | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (_data['allFeatures']) {
        this.allFeatures = {} as any;
        for (let key in _data['allFeatures']) {
          if (_data['allFeatures'].hasOwnProperty(key))
            (<any>this.allFeatures)![key] = _data['allFeatures'][key]
              ? AbpStringValueDto.fromJS(_data['allFeatures'][key], _mappings)
              : new AbpStringValueDto();
        }
      }
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserFeatureConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserFeatureConfigDto>(data, _mappings, AbpUserFeatureConfigDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (this.allFeatures) {
      data['allFeatures'] = {};
      for (let key in this.allFeatures) {
        if (this.allFeatures.hasOwnProperty(key))
          (<any>data['allFeatures'])[key] = this.allFeatures[key]
            ? this.allFeatures[key].toJSON()
            : <any>undefined;
      }
    }
    return data;
  }

  clone(): AbpUserFeatureConfigDto {
    const json = this.toJSON();
    let result = new AbpUserFeatureConfigDto();
    result.init(json);
    return result;
  }
}

export class AbpUserAuthConfigDto {
  allPermissions!: { [key: string]: string } | undefined;
  grantedPermissions!: { [key: string]: string } | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (_data['allPermissions']) {
        this.allPermissions = {} as any;
        for (let key in _data['allPermissions']) {
          if (_data['allPermissions'].hasOwnProperty(key))
            (<any>this.allPermissions)![key] = _data['allPermissions'][key];
        }
      }
      if (_data['grantedPermissions']) {
        this.grantedPermissions = {} as any;
        for (let key in _data['grantedPermissions']) {
          if (_data['grantedPermissions'].hasOwnProperty(key))
            (<any>this.grantedPermissions)![key] = _data['grantedPermissions'][key];
        }
      }
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserAuthConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserAuthConfigDto>(data, _mappings, AbpUserAuthConfigDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (this.allPermissions) {
      data['allPermissions'] = {};
      for (let key in this.allPermissions) {
        if (this.allPermissions.hasOwnProperty(key))
          (<any>data['allPermissions'])[key] = this.allPermissions[key];
      }
    }
    if (this.grantedPermissions) {
      data['grantedPermissions'] = {};
      for (let key in this.grantedPermissions) {
        if (this.grantedPermissions.hasOwnProperty(key))
          (<any>data['grantedPermissions'])[key] = this.grantedPermissions[key];
      }
    }
    return data;
  }

  clone(): AbpUserAuthConfigDto {
    const json = this.toJSON();
    let result = new AbpUserAuthConfigDto();
    result.init(json);
    return result;
  }
}

export class UserMenuItem {
  name!: string | undefined;
  icon!: string | undefined;
  displayName!: string | undefined;
  order!: number;
  url!: string | undefined;
  customData!: any | undefined;
  target!: string | undefined;
  isEnabled!: boolean;
  isVisible!: boolean;
  items!: UserMenuItem[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.icon = _data['icon'];
      this.displayName = _data['displayName'];
      this.order = _data['order'];
      this.url = _data['url'];
      this.customData = _data['customData'];
      this.target = _data['target'];
      this.isEnabled = _data['isEnabled'];
      this.isVisible = _data['isVisible'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(UserMenuItem.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): UserMenuItem | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserMenuItem>(data, _mappings, UserMenuItem);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['icon'] = this.icon;
    data['displayName'] = this.displayName;
    data['order'] = this.order;
    data['url'] = this.url;
    data['customData'] = this.customData;
    data['target'] = this.target;
    data['isEnabled'] = this.isEnabled;
    data['isVisible'] = this.isVisible;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): UserMenuItem {
    const json = this.toJSON();
    let result = new UserMenuItem();
    result.init(json);
    return result;
  }
}

export class UserMenu {
  name!: string | undefined;
  displayName!: string | undefined;
  customData!: any | undefined;
  items!: UserMenuItem[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.displayName = _data['displayName'];
      this.customData = _data['customData'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(UserMenuItem.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): UserMenu | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserMenu>(data, _mappings, UserMenu);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['displayName'] = this.displayName;
    data['customData'] = this.customData;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): UserMenu {
    const json = this.toJSON();
    let result = new UserMenu();
    result.init(json);
    return result;
  }
}

export class AbpUserNavConfigDto {
  menus!: { [key: string]: UserMenu } | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (_data['menus']) {
        this.menus = {} as any;
        for (let key in _data['menus']) {
          if (_data['menus'].hasOwnProperty(key))
            (<any>this.menus)![key] = _data['menus'][key]
              ? UserMenu.fromJS(_data['menus'][key], _mappings)
              : new UserMenu();
        }
      }
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserNavConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserNavConfigDto>(data, _mappings, AbpUserNavConfigDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (this.menus) {
      data['menus'] = {};
      for (let key in this.menus) {
        if (this.menus.hasOwnProperty(key))
          (<any>data['menus'])[key] = this.menus[key] ? this.menus[key].toJSON() : <any>undefined;
      }
    }
    return data;
  }

  clone(): AbpUserNavConfigDto {
    const json = this.toJSON();
    let result = new AbpUserNavConfigDto();
    result.init(json);
    return result;
  }
}

export class AbpUserSettingConfigDto {
  values!: { [key: string]: string } | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (_data['values']) {
        this.values = {} as any;
        for (let key in _data['values']) {
          if (_data['values'].hasOwnProperty(key)) (<any>this.values)![key] = _data['values'][key];
        }
      }
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserSettingConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserSettingConfigDto>(data, _mappings, AbpUserSettingConfigDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (this.values) {
      data['values'] = {};
      for (let key in this.values) {
        if (this.values.hasOwnProperty(key)) (<any>data['values'])[key] = this.values[key];
      }
    }
    return data;
  }

  clone(): AbpUserSettingConfigDto {
    const json = this.toJSON();
    let result = new AbpUserSettingConfigDto();
    result.init(json);
    return result;
  }
}

export class AbpUserClockConfigDto {
  provider!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.provider = _data['provider'];
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserClockConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserClockConfigDto>(data, _mappings, AbpUserClockConfigDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['provider'] = this.provider;
    return data;
  }

  clone(): AbpUserClockConfigDto {
    const json = this.toJSON();
    let result = new AbpUserClockConfigDto();
    result.init(json);
    return result;
  }
}

export class AbpUserWindowsTimeZoneConfigDto {
  timeZoneId!: string | undefined;
  baseUtcOffsetInMilliseconds!: number;
  currentUtcOffsetInMilliseconds!: number;
  isDaylightSavingTimeNow!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.timeZoneId = _data['timeZoneId'];
      this.baseUtcOffsetInMilliseconds = _data['baseUtcOffsetInMilliseconds'];
      this.currentUtcOffsetInMilliseconds = _data['currentUtcOffsetInMilliseconds'];
      this.isDaylightSavingTimeNow = _data['isDaylightSavingTimeNow'];
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserWindowsTimeZoneConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserWindowsTimeZoneConfigDto>(
      data,
      _mappings,
      AbpUserWindowsTimeZoneConfigDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['timeZoneId'] = this.timeZoneId;
    data['baseUtcOffsetInMilliseconds'] = this.baseUtcOffsetInMilliseconds;
    data['currentUtcOffsetInMilliseconds'] = this.currentUtcOffsetInMilliseconds;
    data['isDaylightSavingTimeNow'] = this.isDaylightSavingTimeNow;
    return data;
  }

  clone(): AbpUserWindowsTimeZoneConfigDto {
    const json = this.toJSON();
    let result = new AbpUserWindowsTimeZoneConfigDto();
    result.init(json);
    return result;
  }
}

export class AbpUserIanaTimeZoneConfigDto {
  timeZoneId!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.timeZoneId = _data['timeZoneId'];
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserIanaTimeZoneConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserIanaTimeZoneConfigDto>(
      data,
      _mappings,
      AbpUserIanaTimeZoneConfigDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['timeZoneId'] = this.timeZoneId;
    return data;
  }

  clone(): AbpUserIanaTimeZoneConfigDto {
    const json = this.toJSON();
    let result = new AbpUserIanaTimeZoneConfigDto();
    result.init(json);
    return result;
  }
}

export class AbpUserTimeZoneConfigDto {
  windows!: AbpUserWindowsTimeZoneConfigDto;
  iana!: AbpUserIanaTimeZoneConfigDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.windows = _data['windows']
        ? AbpUserWindowsTimeZoneConfigDto.fromJS(_data['windows'], _mappings)
        : <any>undefined;
      this.iana = _data['iana']
        ? AbpUserIanaTimeZoneConfigDto.fromJS(_data['iana'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserTimeZoneConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserTimeZoneConfigDto>(data, _mappings, AbpUserTimeZoneConfigDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['windows'] = this.windows ? this.windows.toJSON() : <any>undefined;
    data['iana'] = this.iana ? this.iana.toJSON() : <any>undefined;
    return data;
  }

  clone(): AbpUserTimeZoneConfigDto {
    const json = this.toJSON();
    let result = new AbpUserTimeZoneConfigDto();
    result.init(json);
    return result;
  }
}

export class AbpUserTimingConfigDto {
  timeZoneInfo!: AbpUserTimeZoneConfigDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.timeZoneInfo = _data['timeZoneInfo']
        ? AbpUserTimeZoneConfigDto.fromJS(_data['timeZoneInfo'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserTimingConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserTimingConfigDto>(data, _mappings, AbpUserTimingConfigDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['timeZoneInfo'] = this.timeZoneInfo ? this.timeZoneInfo.toJSON() : <any>undefined;
    return data;
  }

  clone(): AbpUserTimingConfigDto {
    const json = this.toJSON();
    let result = new AbpUserTimingConfigDto();
    result.init(json);
    return result;
  }
}

export class AbpUserAntiForgeryConfigDto {
  tokenCookieName!: string | undefined;
  tokenHeaderName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tokenCookieName = _data['tokenCookieName'];
      this.tokenHeaderName = _data['tokenHeaderName'];
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserAntiForgeryConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserAntiForgeryConfigDto>(
      data,
      _mappings,
      AbpUserAntiForgeryConfigDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tokenCookieName'] = this.tokenCookieName;
    data['tokenHeaderName'] = this.tokenHeaderName;
    return data;
  }

  clone(): AbpUserAntiForgeryConfigDto {
    const json = this.toJSON();
    let result = new AbpUserAntiForgeryConfigDto();
    result.init(json);
    return result;
  }
}

export class AbpUserSecurityConfigDto {
  antiForgery!: AbpUserAntiForgeryConfigDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.antiForgery = _data['antiForgery']
        ? AbpUserAntiForgeryConfigDto.fromJS(_data['antiForgery'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserSecurityConfigDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserSecurityConfigDto>(data, _mappings, AbpUserSecurityConfigDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['antiForgery'] = this.antiForgery ? this.antiForgery.toJSON() : <any>undefined;
    return data;
  }

  clone(): AbpUserSecurityConfigDto {
    const json = this.toJSON();
    let result = new AbpUserSecurityConfigDto();
    result.init(json);
    return result;
  }
}

export class AbpUserConfigurationDto {
  multiTenancy!: AbpMultiTenancyConfigDto;
  session!: AbpUserSessionConfigDto;
  localization!: AbpUserLocalizationConfigDto;
  features!: AbpUserFeatureConfigDto;
  auth!: AbpUserAuthConfigDto;
  nav!: AbpUserNavConfigDto;
  setting!: AbpUserSettingConfigDto;
  clock!: AbpUserClockConfigDto;
  timing!: AbpUserTimingConfigDto;
  security!: AbpUserSecurityConfigDto;
  custom!: { [key: string]: any } | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.multiTenancy = _data['multiTenancy']
        ? AbpMultiTenancyConfigDto.fromJS(_data['multiTenancy'], _mappings)
        : <any>undefined;
      this.session = _data['session']
        ? AbpUserSessionConfigDto.fromJS(_data['session'], _mappings)
        : <any>undefined;
      this.localization = _data['localization']
        ? AbpUserLocalizationConfigDto.fromJS(_data['localization'], _mappings)
        : <any>undefined;
      this.features = _data['features']
        ? AbpUserFeatureConfigDto.fromJS(_data['features'], _mappings)
        : <any>undefined;
      this.auth = _data['auth']
        ? AbpUserAuthConfigDto.fromJS(_data['auth'], _mappings)
        : <any>undefined;
      this.nav = _data['nav']
        ? AbpUserNavConfigDto.fromJS(_data['nav'], _mappings)
        : <any>undefined;
      this.setting = _data['setting']
        ? AbpUserSettingConfigDto.fromJS(_data['setting'], _mappings)
        : <any>undefined;
      this.clock = _data['clock']
        ? AbpUserClockConfigDto.fromJS(_data['clock'], _mappings)
        : <any>undefined;
      this.timing = _data['timing']
        ? AbpUserTimingConfigDto.fromJS(_data['timing'], _mappings)
        : <any>undefined;
      this.security = _data['security']
        ? AbpUserSecurityConfigDto.fromJS(_data['security'], _mappings)
        : <any>undefined;
      if (_data['custom']) {
        this.custom = {} as any;
        for (let key in _data['custom']) {
          if (_data['custom'].hasOwnProperty(key)) (<any>this.custom)![key] = _data['custom'][key];
        }
      }
    }
  }

  static fromJS(data: any, _mappings?: any): AbpUserConfigurationDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AbpUserConfigurationDto>(data, _mappings, AbpUserConfigurationDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['multiTenancy'] = this.multiTenancy ? this.multiTenancy.toJSON() : <any>undefined;
    data['session'] = this.session ? this.session.toJSON() : <any>undefined;
    data['localization'] = this.localization ? this.localization.toJSON() : <any>undefined;
    data['features'] = this.features ? this.features.toJSON() : <any>undefined;
    data['auth'] = this.auth ? this.auth.toJSON() : <any>undefined;
    data['nav'] = this.nav ? this.nav.toJSON() : <any>undefined;
    data['setting'] = this.setting ? this.setting.toJSON() : <any>undefined;
    data['clock'] = this.clock ? this.clock.toJSON() : <any>undefined;
    data['timing'] = this.timing ? this.timing.toJSON() : <any>undefined;
    data['security'] = this.security ? this.security.toJSON() : <any>undefined;
    if (this.custom) {
      data['custom'] = {};
      for (let key in this.custom) {
        if (this.custom.hasOwnProperty(key)) (<any>data['custom'])[key] = this.custom[key];
      }
    }
    return data;
  }

  clone(): AbpUserConfigurationDto {
    const json = this.toJSON();
    let result = new AbpUserConfigurationDto();
    result.init(json);
    return result;
  }
}

export class UpdateUserSignInTokenOutput {
  signInToken!: string | undefined;
  encodedUserId!: string | undefined;
  encodedTenantId!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.signInToken = _data['signInToken'];
      this.encodedUserId = _data['encodedUserId'];
      this.encodedTenantId = _data['encodedTenantId'];
    }
  }

  static fromJS(data: any, _mappings?: any): UpdateUserSignInTokenOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UpdateUserSignInTokenOutput>(
      data,
      _mappings,
      UpdateUserSignInTokenOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['signInToken'] = this.signInToken;
    data['encodedUserId'] = this.encodedUserId;
    data['encodedTenantId'] = this.encodedTenantId;
    return data;
  }

  clone(): UpdateUserSignInTokenOutput {
    const json = this.toJSON();
    let result = new UpdateUserSignInTokenOutput();
    result.init(json);
    return result;
  }
}

export class SendSms {
  /** 接收号码 */
  phoneNumbers!: string | undefined;
  /** 签名 */
  signName!: string | undefined;
  /** 模版CODE */
  templateCode!: string | undefined;
  /** 短信模板变量对应的实际值，JSON格式 */
  templateParam!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.phoneNumbers = _data['phoneNumbers'];
      this.signName = _data['signName'];
      this.templateCode = _data['templateCode'];
      this.templateParam = _data['templateParam'];
    }
  }

  static fromJS(data: any, _mappings?: any): SendSms | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SendSms>(data, _mappings, SendSms);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['phoneNumbers'] = this.phoneNumbers;
    data['signName'] = this.signName;
    data['templateCode'] = this.templateCode;
    data['templateParam'] = this.templateParam;
    return data;
  }

  clone(): SendSms {
    const json = this.toJSON();
    let result = new SendSms();
    result.init(json);
    return result;
  }
}

export class EntityDto {
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): EntityDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EntityDto>(data, _mappings, EntityDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    return data;
  }

  clone(): EntityDto {
    const json = this.toJSON();
    let result = new EntityDto();
    result.init(json);
    return result;
  }
}

export class CreateTenantInput {
  tenancyName!: string | undefined;
  name!: string | undefined;
  /** 管理员手机号 */
  phoneNumber!: string | undefined;
  adminEmailAddress!: string | undefined;
  adminPassword!: string | undefined;
  connectionString!: string | undefined;
  shouldChangePasswordOnNextLogin!: boolean;
  sendActivationEmail!: boolean;
  editionId!: number | undefined;
  isActive!: boolean;
  subscriptionEndUtc!: dayjs.Dayjs | undefined;
  isInTrialPeriod!: boolean;
  /** 授权所有的危废编码 */
  useAllHWCode!: boolean;
  /** 危废8位码 */
  hwAuthorityCodes!: string[] | undefined;
  /** 授权所有的行政区编码 */
  useAllCantonCode!: boolean;
  /** 授权行政区 */
  cantonAuthorityCodes!: string[] | undefined;
  /** 租户查询危废线索过滤字段 */
  hwFilterKeyWords!: string | undefined;
  /** 租户查环评线索过滤字段 */
  envFilterKeyWords!: string | undefined;
  /** 可以查看危废 */
  canViewHW!: boolean;
  /** 可以查看环评 */
  canViewEia!: boolean;
  /** 租户查询危废线索过滤不包括的字段 */
  hwFilterNotContainsKeyWords!: string | undefined;
  /** 营业执照 */
  businessLicenseOss!: string | undefined;
  /** 处置许可证 */
  disposalLicenseOss!: string | undefined;
  /** 对应危废交易平台的企业Id */
  entId!: number | undefined;
  /** 许可证编号 */
  licenseNo!: string | undefined;
  /** 平台负责人 */
  sysUserId!: number | undefined;
  /** 道路运输经营许可证 */
  roadTransportLicenseOss!: string | undefined;
  /** 租户类型，1：处置，2：产废，3：物流 */
  tenantType!: number | undefined;
  /** 显示名称 */
  realName!: string | undefined;
  /** 是否是中介企业，false：不是，true：是 */
  isAgentEnt!: boolean | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenancyName = _data['tenancyName'];
      this.name = _data['name'];
      this.phoneNumber = _data['phoneNumber'];
      this.adminEmailAddress = _data['adminEmailAddress'];
      this.adminPassword = _data['adminPassword'];
      this.connectionString = _data['connectionString'];
      this.shouldChangePasswordOnNextLogin = _data['shouldChangePasswordOnNextLogin'];
      this.sendActivationEmail = _data['sendActivationEmail'];
      this.editionId = _data['editionId'];
      this.isActive = _data['isActive'];
      this.subscriptionEndUtc = _data['subscriptionEndUtc']
        ? dayjs(_data['subscriptionEndUtc'].toString())
        : <any>undefined;
      this.isInTrialPeriod = _data['isInTrialPeriod'];
      this.useAllHWCode = _data['useAllHWCode'];
      if (Array.isArray(_data['hwAuthorityCodes'])) {
        this.hwAuthorityCodes = [] as any;
        for (let item of _data['hwAuthorityCodes']) this.hwAuthorityCodes!.push(item);
      }
      this.useAllCantonCode = _data['useAllCantonCode'];
      if (Array.isArray(_data['cantonAuthorityCodes'])) {
        this.cantonAuthorityCodes = [] as any;
        for (let item of _data['cantonAuthorityCodes']) this.cantonAuthorityCodes!.push(item);
      }
      this.hwFilterKeyWords = _data['hwFilterKeyWords'];
      this.envFilterKeyWords = _data['envFilterKeyWords'];
      this.canViewHW = _data['canViewHW'];
      this.canViewEia = _data['canViewEia'];
      this.hwFilterNotContainsKeyWords = _data['hwFilterNotContainsKeyWords'];
      this.businessLicenseOss = _data['businessLicenseOss'];
      this.disposalLicenseOss = _data['disposalLicenseOss'];
      this.entId = _data['entId'];
      this.licenseNo = _data['licenseNo'];
      this.sysUserId = _data['sysUserId'];
      this.roadTransportLicenseOss = _data['roadTransportLicenseOss'];
      this.tenantType = _data['tenantType'];
      this.realName = _data['realName'];
      this.isAgentEnt = _data['isAgentEnt'];
    }
  }

  static fromJS(data: any, _mappings?: any): CreateTenantInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateTenantInput>(data, _mappings, CreateTenantInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenancyName'] = this.tenancyName;
    data['name'] = this.name;
    data['phoneNumber'] = this.phoneNumber;
    data['adminEmailAddress'] = this.adminEmailAddress;
    data['adminPassword'] = this.adminPassword;
    data['connectionString'] = this.connectionString;
    data['shouldChangePasswordOnNextLogin'] = this.shouldChangePasswordOnNextLogin;
    data['sendActivationEmail'] = this.sendActivationEmail;
    data['editionId'] = this.editionId;
    data['isActive'] = this.isActive;
    data['subscriptionEndUtc'] = this.subscriptionEndUtc
      ? this.subscriptionEndUtc.toISOString()
      : <any>undefined;
    data['isInTrialPeriod'] = this.isInTrialPeriod;
    data['useAllHWCode'] = this.useAllHWCode;
    if (Array.isArray(this.hwAuthorityCodes)) {
      data['hwAuthorityCodes'] = [];
      for (let item of this.hwAuthorityCodes) data['hwAuthorityCodes'].push(item);
    }
    data['useAllCantonCode'] = this.useAllCantonCode;
    if (Array.isArray(this.cantonAuthorityCodes)) {
      data['cantonAuthorityCodes'] = [];
      for (let item of this.cantonAuthorityCodes) data['cantonAuthorityCodes'].push(item);
    }
    data['hwFilterKeyWords'] = this.hwFilterKeyWords;
    data['envFilterKeyWords'] = this.envFilterKeyWords;
    data['canViewHW'] = this.canViewHW;
    data['canViewEia'] = this.canViewEia;
    data['hwFilterNotContainsKeyWords'] = this.hwFilterNotContainsKeyWords;
    data['businessLicenseOss'] = this.businessLicenseOss;
    data['disposalLicenseOss'] = this.disposalLicenseOss;
    data['entId'] = this.entId;
    data['licenseNo'] = this.licenseNo;
    data['sysUserId'] = this.sysUserId;
    data['roadTransportLicenseOss'] = this.roadTransportLicenseOss;
    data['tenantType'] = this.tenantType;
    data['realName'] = this.realName;
    data['isAgentEnt'] = this.isAgentEnt;
    return data;
  }

  clone(): CreateTenantInput {
    const json = this.toJSON();
    let result = new CreateTenantInput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfTenantListDto {
  totalCount!: number;
  items!: TenantListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(TenantListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfTenantListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfTenantListDto>(
      data,
      _mappings,
      PagedResultDtoOfTenantListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfTenantListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfTenantListDto();
    result.init(json);
    return result;
  }
}

export class TenantEditDto {
  tenancyName!: string | undefined;
  name!: string | undefined;
  connectionString!: string | undefined;
  editionId!: number | undefined;
  isActive!: boolean;
  subscriptionEndUtc!: dayjs.Dayjs | undefined;
  isInTrialPeriod!: boolean;
  /** 授权所有的危废编码 */
  useAllHWCode!: boolean;
  /** 危废8位码 */
  hwAuthorityCodes!: string[] | undefined;
  /** 授权所有的行政区编码 */
  useAllCantonCode!: boolean;
  /** 授权行政区 */
  cantonAuthorityCodes!: string[] | undefined;
  /** 租户查询危废线索过滤字段 */
  hwFilterKeyWords!: string | undefined;
  /** 租户查环评线索过滤字段 */
  envFilterKeyWords!: string | undefined;
  /** 可以查看危废 */
  canViewHW!: boolean;
  /** 可以查看环评 */
  canViewEia!: boolean;
  /** 租户查询危废线索过滤不包括的字段 */
  hwFilterNotContainsKeyWords!: string | undefined;
  /** 营业执照 */
  businessLicenseOss!: string | undefined;
  /** 处置许可证 */
  disposalLicenseOss!: string | undefined;
  tenantType!: number | undefined;
  /** 道路运输经营许可证 */
  roadTransportLicenseOss!: string | undefined;
  /** 平台负责人 */
  sysUserId!: number | undefined;
  /** 是否是中介企业，false：不是，true：是 */
  isAgentEnt!: boolean;
  cantonFullCode!: string | undefined;
  cantonFullName!: string | undefined;
  entAddress!: string | undefined;
  entId!: number | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenancyName = _data['tenancyName'];
      this.name = _data['name'];
      this.connectionString = _data['connectionString'];
      this.editionId = _data['editionId'];
      this.isActive = _data['isActive'];
      this.subscriptionEndUtc = _data['subscriptionEndUtc']
        ? dayjs(_data['subscriptionEndUtc'].toString())
        : <any>undefined;
      this.isInTrialPeriod = _data['isInTrialPeriod'];
      this.useAllHWCode = _data['useAllHWCode'];
      if (Array.isArray(_data['hwAuthorityCodes'])) {
        this.hwAuthorityCodes = [] as any;
        for (let item of _data['hwAuthorityCodes']) this.hwAuthorityCodes!.push(item);
      }
      this.useAllCantonCode = _data['useAllCantonCode'];
      if (Array.isArray(_data['cantonAuthorityCodes'])) {
        this.cantonAuthorityCodes = [] as any;
        for (let item of _data['cantonAuthorityCodes']) this.cantonAuthorityCodes!.push(item);
      }
      this.hwFilterKeyWords = _data['hwFilterKeyWords'];
      this.envFilterKeyWords = _data['envFilterKeyWords'];
      this.canViewHW = _data['canViewHW'];
      this.canViewEia = _data['canViewEia'];
      this.hwFilterNotContainsKeyWords = _data['hwFilterNotContainsKeyWords'];
      this.businessLicenseOss = _data['businessLicenseOss'];
      this.disposalLicenseOss = _data['disposalLicenseOss'];
      this.tenantType = _data['tenantType'];
      this.roadTransportLicenseOss = _data['roadTransportLicenseOss'];
      this.sysUserId = _data['sysUserId'];
      this.isAgentEnt = _data['isAgentEnt'];
      this.cantonFullCode = _data['cantonFullCode'];
      this.cantonFullName = _data['cantonFullName'];
      this.entAddress = _data['entAddress'];
      this.entId = _data['entId'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): TenantEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TenantEditDto>(data, _mappings, TenantEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenancyName'] = this.tenancyName;
    data['name'] = this.name;
    data['connectionString'] = this.connectionString;
    data['editionId'] = this.editionId;
    data['isActive'] = this.isActive;
    data['subscriptionEndUtc'] = this.subscriptionEndUtc
      ? this.subscriptionEndUtc.toISOString()
      : <any>undefined;
    data['isInTrialPeriod'] = this.isInTrialPeriod;
    data['useAllHWCode'] = this.useAllHWCode;
    if (Array.isArray(this.hwAuthorityCodes)) {
      data['hwAuthorityCodes'] = [];
      for (let item of this.hwAuthorityCodes) data['hwAuthorityCodes'].push(item);
    }
    data['useAllCantonCode'] = this.useAllCantonCode;
    if (Array.isArray(this.cantonAuthorityCodes)) {
      data['cantonAuthorityCodes'] = [];
      for (let item of this.cantonAuthorityCodes) data['cantonAuthorityCodes'].push(item);
    }
    data['hwFilterKeyWords'] = this.hwFilterKeyWords;
    data['envFilterKeyWords'] = this.envFilterKeyWords;
    data['canViewHW'] = this.canViewHW;
    data['canViewEia'] = this.canViewEia;
    data['hwFilterNotContainsKeyWords'] = this.hwFilterNotContainsKeyWords;
    data['businessLicenseOss'] = this.businessLicenseOss;
    data['disposalLicenseOss'] = this.disposalLicenseOss;
    data['tenantType'] = this.tenantType;
    data['roadTransportLicenseOss'] = this.roadTransportLicenseOss;
    data['sysUserId'] = this.sysUserId;
    data['isAgentEnt'] = this.isAgentEnt;
    data['cantonFullCode'] = this.cantonFullCode;
    data['cantonFullName'] = this.cantonFullName;
    data['entAddress'] = this.entAddress;
    data['entId'] = this.entId;
    data['id'] = this.id;
    return data;
  }

  clone(): TenantEditDto {
    const json = this.toJSON();
    let result = new TenantEditDto();
    result.init(json);
    return result;
  }
}

export class GetTenantFeaturesEditOutput {
  featureValues!: NameValueDto[] | undefined;
  features!: FlatFeatureDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['featureValues'])) {
        this.featureValues = [] as any;
        for (let item of _data['featureValues'])
          this.featureValues!.push(NameValueDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['features'])) {
        this.features = [] as any;
        for (let item of _data['features'])
          this.features!.push(FlatFeatureDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetTenantFeaturesEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetTenantFeaturesEditOutput>(
      data,
      _mappings,
      GetTenantFeaturesEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.featureValues)) {
      data['featureValues'] = [];
      for (let item of this.featureValues) data['featureValues'].push(item.toJSON());
    }
    if (Array.isArray(this.features)) {
      data['features'] = [];
      for (let item of this.features) data['features'].push(item.toJSON());
    }
    return data;
  }

  clone(): GetTenantFeaturesEditOutput {
    const json = this.toJSON();
    let result = new GetTenantFeaturesEditOutput();
    result.init(json);
    return result;
  }
}

export class UpdateTenantFeaturesInput {
  id!: number;
  featureValues!: NameValueDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      if (Array.isArray(_data['featureValues'])) {
        this.featureValues = [] as any;
        for (let item of _data['featureValues'])
          this.featureValues!.push(NameValueDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): UpdateTenantFeaturesInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UpdateTenantFeaturesInput>(data, _mappings, UpdateTenantFeaturesInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    if (Array.isArray(this.featureValues)) {
      data['featureValues'] = [];
      for (let item of this.featureValues) data['featureValues'].push(item.toJSON());
    }
    return data;
  }

  clone(): UpdateTenantFeaturesInput {
    const json = this.toJSON();
    let result = new UpdateTenantFeaturesInput();
    result.init(json);
    return result;
  }
}

/** 创建租户的DTO信息 */
export class CreateTenantDto {
  /** 全局唯一的租户Id */
  tenancyName!: string | undefined;
  /** 租户名称 */
  name!: string | undefined;
  userName!: string | undefined;
  adminEmailAddress!: string | undefined;
  connectionString!: string | undefined;
  isActive!: boolean;
  /** 验证码 */
  verificationCode!: string | undefined;
  /** 租户管理员密码 */
  tenantAdminPassword!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenancyName = _data['tenancyName'];
      this.name = _data['name'];
      this.userName = _data['userName'];
      this.adminEmailAddress = _data['adminEmailAddress'];
      this.connectionString = _data['connectionString'];
      this.isActive = _data['isActive'];
      this.verificationCode = _data['verificationCode'];
      this.tenantAdminPassword = _data['tenantAdminPassword'];
    }
  }

  static fromJS(data: any, _mappings?: any): CreateTenantDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateTenantDto>(data, _mappings, CreateTenantDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenancyName'] = this.tenancyName;
    data['name'] = this.name;
    data['userName'] = this.userName;
    data['adminEmailAddress'] = this.adminEmailAddress;
    data['connectionString'] = this.connectionString;
    data['isActive'] = this.isActive;
    data['verificationCode'] = this.verificationCode;
    data['tenantAdminPassword'] = this.tenantAdminPassword;
    return data;
  }

  clone(): CreateTenantDto {
    const json = this.toJSON();
    let result = new CreateTenantDto();
    result.init(json);
    return result;
  }
}

export class RegisterTenantResultDto {
  /** 租户Id */
  tenantId!: number;
  /** 租户是否激活 */
  isActive!: boolean;
  /** 租户启用了用户登陆验证码 */
  useCaptchaOnUserLogin!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.isActive = _data['isActive'];
      this.useCaptchaOnUserLogin = _data['useCaptchaOnUserLogin'];
    }
  }

  static fromJS(data: any, _mappings?: any): RegisterTenantResultDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<RegisterTenantResultDto>(data, _mappings, RegisterTenantResultDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['isActive'] = this.isActive;
    data['useCaptchaOnUserLogin'] = this.useCaptchaOnUserLogin;
    return data;
  }

  clone(): RegisterTenantResultDto {
    const json = this.toJSON();
    let result = new RegisterTenantResultDto();
    result.init(json);
    return result;
  }
}

export class TenantUserManagementSettingsEditDto {
  /** 是否启用注册 */
  allowSelfRegistration!: boolean;
  /** 是否新注册用户默认激活 */
  isNewRegisteredUserActiveByDefault!: boolean;
  /** 是否必须校验邮箱才能登陆 */
  isEmailConfirmationRequiredForLogin!: boolean;
  /** 是否注册使用验证码 */
  useCaptchaOnUserRegistration!: boolean;
  captchaOnUserRegistrationType!: ValidateCodeType;
  /** 注册验证码长度 */
  captchaOnUserRegistrationLength!: number;
  /** 是否登陆使用验证码 */
  useCaptchaOnUserLogin!: boolean;
  captchaOnUserLoginType!: ValidateCodeType;
  /** 登陆验证码长度 */
  captchaOnUserLoginLength!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.allowSelfRegistration = _data['allowSelfRegistration'];
      this.isNewRegisteredUserActiveByDefault = _data['isNewRegisteredUserActiveByDefault'];
      this.isEmailConfirmationRequiredForLogin = _data['isEmailConfirmationRequiredForLogin'];
      this.useCaptchaOnUserRegistration = _data['useCaptchaOnUserRegistration'];
      this.captchaOnUserRegistrationType = _data['captchaOnUserRegistrationType'];
      this.captchaOnUserRegistrationLength = _data['captchaOnUserRegistrationLength'];
      this.useCaptchaOnUserLogin = _data['useCaptchaOnUserLogin'];
      this.captchaOnUserLoginType = _data['captchaOnUserLoginType'];
      this.captchaOnUserLoginLength = _data['captchaOnUserLoginLength'];
    }
  }

  static fromJS(data: any, _mappings?: any): TenantUserManagementSettingsEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TenantUserManagementSettingsEditDto>(
      data,
      _mappings,
      TenantUserManagementSettingsEditDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['allowSelfRegistration'] = this.allowSelfRegistration;
    data['isNewRegisteredUserActiveByDefault'] = this.isNewRegisteredUserActiveByDefault;
    data['isEmailConfirmationRequiredForLogin'] = this.isEmailConfirmationRequiredForLogin;
    data['useCaptchaOnUserRegistration'] = this.useCaptchaOnUserRegistration;
    data['captchaOnUserRegistrationType'] = this.captchaOnUserRegistrationType;
    data['captchaOnUserRegistrationLength'] = this.captchaOnUserRegistrationLength;
    data['useCaptchaOnUserLogin'] = this.useCaptchaOnUserLogin;
    data['captchaOnUserLoginType'] = this.captchaOnUserLoginType;
    data['captchaOnUserLoginLength'] = this.captchaOnUserLoginLength;
    return data;
  }

  clone(): TenantUserManagementSettingsEditDto {
    const json = this.toJSON();
    let result = new TenantUserManagementSettingsEditDto();
    result.init(json);
    return result;
  }
}

export class LdapSettingsEditDto {
  /** 模块启用 */
  isModuleEnabled!: boolean;
  /** 启用 */
  isEnabled!: boolean;
  domain!: string | undefined;
  /** 用户名 */
  userName!: string | undefined;
  /** 密码 */
  password!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.isModuleEnabled = _data['isModuleEnabled'];
      this.isEnabled = _data['isEnabled'];
      this.domain = _data['domain'];
      this.userName = _data['userName'];
      this.password = _data['password'];
    }
  }

  static fromJS(data: any, _mappings?: any): LdapSettingsEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LdapSettingsEditDto>(data, _mappings, LdapSettingsEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['isModuleEnabled'] = this.isModuleEnabled;
    data['isEnabled'] = this.isEnabled;
    data['domain'] = this.domain;
    data['userName'] = this.userName;
    data['password'] = this.password;
    return data;
  }

  clone(): LdapSettingsEditDto {
    const json = this.toJSON();
    let result = new LdapSettingsEditDto();
    result.init(json);
    return result;
  }
}

export class TenantBillingSettingsEditDto {
  legalName!: string | undefined;
  address!: string | undefined;
  taxVatNo!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.legalName = _data['legalName'];
      this.address = _data['address'];
      this.taxVatNo = _data['taxVatNo'];
    }
  }

  static fromJS(data: any, _mappings?: any): TenantBillingSettingsEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TenantBillingSettingsEditDto>(
      data,
      _mappings,
      TenantBillingSettingsEditDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['legalName'] = this.legalName;
    data['address'] = this.address;
    data['taxVatNo'] = this.taxVatNo;
    return data;
  }

  clone(): TenantBillingSettingsEditDto {
    const json = this.toJSON();
    let result = new TenantBillingSettingsEditDto();
    result.init(json);
    return result;
  }
}

export class TenantSettingsEditDto {
  general!: GeneralSettingsEditDto;
  userManagement!: TenantUserManagementSettingsEditDto;
  email!: EmailSettingsEditDto;
  ldap!: LdapSettingsEditDto;
  security!: SecuritySettingsEditDto;
  billing!: TenantBillingSettingsEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.general = _data['general']
        ? GeneralSettingsEditDto.fromJS(_data['general'], _mappings)
        : <any>undefined;
      this.userManagement = _data['userManagement']
        ? TenantUserManagementSettingsEditDto.fromJS(_data['userManagement'], _mappings)
        : new TenantUserManagementSettingsEditDto();
      this.email = _data['email']
        ? EmailSettingsEditDto.fromJS(_data['email'], _mappings)
        : <any>undefined;
      this.ldap = _data['ldap']
        ? LdapSettingsEditDto.fromJS(_data['ldap'], _mappings)
        : <any>undefined;
      this.security = _data['security']
        ? SecuritySettingsEditDto.fromJS(_data['security'], _mappings)
        : new SecuritySettingsEditDto();
      this.billing = _data['billing']
        ? TenantBillingSettingsEditDto.fromJS(_data['billing'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): TenantSettingsEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<TenantSettingsEditDto>(data, _mappings, TenantSettingsEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['general'] = this.general ? this.general.toJSON() : <any>undefined;
    data['userManagement'] = this.userManagement ? this.userManagement.toJSON() : <any>undefined;
    data['email'] = this.email ? this.email.toJSON() : <any>undefined;
    data['ldap'] = this.ldap ? this.ldap.toJSON() : <any>undefined;
    data['security'] = this.security ? this.security.toJSON() : <any>undefined;
    data['billing'] = this.billing ? this.billing.toJSON() : <any>undefined;
    return data;
  }

  clone(): TenantSettingsEditDto {
    const json = this.toJSON();
    let result = new TenantSettingsEditDto();
    result.init(json);
    return result;
  }
}

export enum SettingScopes {
  Application = 'Application',
  Tenant = 'Tenant',
  User = 'User',
  All = 'All',
}

export class ListResultDtoOfNameValueDto {
  items!: NameValueDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(NameValueDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ListResultDtoOfNameValueDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ListResultDtoOfNameValueDto>(
      data,
      _mappings,
      ListResultDtoOfNameValueDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): ListResultDtoOfNameValueDto {
    const json = this.toJSON();
    let result = new ListResultDtoOfNameValueDto();
    result.init(json);
    return result;
  }
}

export class CarNumberInput {
  /** 租户Id */
  tenantId!: number | undefined;
  /** 类型，1：车头，2：车挂 */
  numberType!: number | undefined;
  /** 车牌号 */
  number!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.numberType = _data['numberType'];
      this.number = _data['number'];
    }
  }

  static fromJS(data: any, _mappings?: any): CarNumberInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CarNumberInput>(data, _mappings, CarNumberInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['numberType'] = this.numberType;
    data['number'] = this.number;
    return data;
  }

  clone(): CarNumberInput {
    const json = this.toJSON();
    let result = new CarNumberInput();
    result.init(json);
    return result;
  }
}

/** 司机和押运员的列表DTO !:WlBaseDriver */
export class Transability_UserListDto {
  id!: number | undefined;
  /** 姓名 */
  name!: string | undefined;
  /** 身份证 */
  idCard!: string | undefined;
  /** 手机号码 */
  phone!: string | undefined;
  /** 从业资格证Url */
  certificate!: string | undefined;
  /** 是否包含在运力中，true：包含，false：不包含 */
  isInCapacity!: boolean;
  /** 备注 */
  remark!: string | undefined;
  /** 从业资格证有效期 */
  qualificationCertificateDate!: dayjs.Dayjs | undefined;
  /** 驾驶证有效期 */
  driversLicenseDate!: dayjs.Dayjs | undefined;
  /** 是否已离职：在职:false 离职:true */
  leave!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.name = _data['name'];
      this.idCard = _data['idCard'];
      this.phone = _data['phone'];
      this.certificate = _data['certificate'];
      this.isInCapacity = _data['isInCapacity'];
      this.remark = _data['remark'];
      this.qualificationCertificateDate = _data['qualificationCertificateDate']
        ? dayjs(_data['qualificationCertificateDate'].toString())
        : <any>undefined;
      this.driversLicenseDate = _data['driversLicenseDate']
        ? dayjs(_data['driversLicenseDate'].toString())
        : <any>undefined;
      this.leave = _data['leave'];
    }
  }

  static fromJS(data: any, _mappings?: any): Transability_UserListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Transability_UserListDto>(data, _mappings, Transability_UserListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['name'] = this.name;
    data['idCard'] = this.idCard;
    data['phone'] = this.phone;
    data['certificate'] = this.certificate;
    data['isInCapacity'] = this.isInCapacity;
    data['remark'] = this.remark;
    data['qualificationCertificateDate'] = this.qualificationCertificateDate
      ? this.qualificationCertificateDate.toISOString()
      : <any>undefined;
    data['driversLicenseDate'] = this.driversLicenseDate
      ? this.driversLicenseDate.toISOString()
      : <any>undefined;
    data['leave'] = this.leave;
    return data;
  }

  clone(): Transability_UserListDto {
    const json = this.toJSON();
    let result = new Transability_UserListDto();
    result.init(json);
    return result;
  }
}

/** 车头 DTO Erinyes.Logistics.WlBaseVehicle */
export class Transability_VehicleListDto {
  id!: number | undefined;
  /** 车牌号码 */
  vehicleNumber!: string | undefined;
  /** 车辆类型(字典) */
  vehicleTypeId!: number | undefined;
  vehicleTypeString!: string | undefined;
  /** 核载 */
  capacity!: number | undefined;
  /** 核载能力单位 */
  capacityUnit!: string | undefined;
  /** 车型选择备注 */
  vehicleRemark!: string | undefined;
  /** GPS ID */
  carId!: number | undefined;
  /** 是否包含在运力中，true：包含，false：不包含 */
  isInCapacity!: boolean;
  /** 报废日期 */
  scrapDate!: dayjs.Dayjs | undefined;
  /** 年审有效期 */
  annualReviewValidityDate!: dayjs.Dayjs | undefined;
  /** 道路资质有效期 */
  roadQualificationValidityDate!: dayjs.Dayjs | undefined;
  /** 行驶证有效期 */
  drivingLicenseValidityDate!: dayjs.Dayjs | undefined;
  /** 车头行驶证 */
  driverLicense!: string | undefined;
  /** 道路运输经营许可证 */
  roadTransportLicense!: string | undefined;
  /** 是否包含挂车 */
  hastrailer!: boolean;
  /** 备注 */
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.vehicleNumber = _data['vehicleNumber'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleTypeString = _data['vehicleTypeString'];
      this.capacity = _data['capacity'];
      this.capacityUnit = _data['capacityUnit'];
      this.vehicleRemark = _data['vehicleRemark'];
      this.carId = _data['carId'];
      this.isInCapacity = _data['isInCapacity'];
      this.scrapDate = _data['scrapDate'] ? dayjs(_data['scrapDate'].toString()) : <any>undefined;
      this.annualReviewValidityDate = _data['annualReviewValidityDate']
        ? dayjs(_data['annualReviewValidityDate'].toString())
        : <any>undefined;
      this.roadQualificationValidityDate = _data['roadQualificationValidityDate']
        ? dayjs(_data['roadQualificationValidityDate'].toString())
        : <any>undefined;
      this.drivingLicenseValidityDate = _data['drivingLicenseValidityDate']
        ? dayjs(_data['drivingLicenseValidityDate'].toString())
        : <any>undefined;
      this.driverLicense = _data['driverLicense'];
      this.roadTransportLicense = _data['roadTransportLicense'];
      this.hastrailer = _data['hastrailer'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): Transability_VehicleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Transability_VehicleListDto>(
      data,
      _mappings,
      Transability_VehicleListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['vehicleNumber'] = this.vehicleNumber;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleTypeString'] = this.vehicleTypeString;
    data['capacity'] = this.capacity;
    data['capacityUnit'] = this.capacityUnit;
    data['vehicleRemark'] = this.vehicleRemark;
    data['carId'] = this.carId;
    data['isInCapacity'] = this.isInCapacity;
    data['scrapDate'] = this.scrapDate ? this.scrapDate.toISOString() : <any>undefined;
    data['annualReviewValidityDate'] = this.annualReviewValidityDate
      ? this.annualReviewValidityDate.toISOString()
      : <any>undefined;
    data['roadQualificationValidityDate'] = this.roadQualificationValidityDate
      ? this.roadQualificationValidityDate.toISOString()
      : <any>undefined;
    data['drivingLicenseValidityDate'] = this.drivingLicenseValidityDate
      ? this.drivingLicenseValidityDate.toISOString()
      : <any>undefined;
    data['driverLicense'] = this.driverLicense;
    data['roadTransportLicense'] = this.roadTransportLicense;
    data['hastrailer'] = this.hastrailer;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): Transability_VehicleListDto {
    const json = this.toJSON();
    let result = new Transability_VehicleListDto();
    result.init(json);
    return result;
  }
}

/** 运力信息 Erinyes.Logistics.WlBaseCapacity */
export class CapacityListDto {
  id!: number | undefined;
  /** 车头主键 */
  vehicleId!: number | undefined;
  /** 释放绑定GPS */
  hasBindGps!: boolean;
  /** 车头号码 */
  vehicleStr!: string | undefined;
  /** 车挂主键 */
  trailerId!: number | undefined;
  /** 车挂号码 */
  trailerStr!: string | undefined;
  /** 司机主键 */
  driverId!: number | undefined;
  /** 司机名称 */
  driverStr!: string | undefined;
  /** 押运主键 */
  supercargoId!: number | undefined;
  /** 押运员名称 */
  supercargoStr!: string | undefined;
  /** 状态，【新 0:待运输  1:运输中 2:运力暂未使用】--------------0：初始化，1：抢单中，2：运行中 */
  bcState!: number | undefined;
  /** 关联的订单编号 */
  orderDetailNo!: string | undefined;
  /** 关联的子订单ID */
  orderDetailId!: number | undefined;
  /** 关联的车辆订单Id */
  orderVehicleId!: number | undefined;
  driver!: Transability_UserListDto;
  supercargo!: Transability_UserListDto;
  trailer!: Transability_VehicleListDto;
  vehicle!: Transability_VehicleListDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.vehicleId = _data['vehicleId'];
      this.hasBindGps = _data['hasBindGps'];
      this.vehicleStr = _data['vehicleStr'];
      this.trailerId = _data['trailerId'];
      this.trailerStr = _data['trailerStr'];
      this.driverId = _data['driverId'];
      this.driverStr = _data['driverStr'];
      this.supercargoId = _data['supercargoId'];
      this.supercargoStr = _data['supercargoStr'];
      this.bcState = _data['bcState'];
      this.orderDetailNo = _data['orderDetailNo'];
      this.orderDetailId = _data['orderDetailId'];
      this.orderVehicleId = _data['orderVehicleId'];
      this.driver = _data['driver']
        ? Transability_UserListDto.fromJS(_data['driver'], _mappings)
        : <any>undefined;
      this.supercargo = _data['supercargo']
        ? Transability_UserListDto.fromJS(_data['supercargo'], _mappings)
        : <any>undefined;
      this.trailer = _data['trailer']
        ? Transability_VehicleListDto.fromJS(_data['trailer'], _mappings)
        : <any>undefined;
      this.vehicle = _data['vehicle']
        ? Transability_VehicleListDto.fromJS(_data['vehicle'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): CapacityListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CapacityListDto>(data, _mappings, CapacityListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['vehicleId'] = this.vehicleId;
    data['hasBindGps'] = this.hasBindGps;
    data['vehicleStr'] = this.vehicleStr;
    data['trailerId'] = this.trailerId;
    data['trailerStr'] = this.trailerStr;
    data['driverId'] = this.driverId;
    data['driverStr'] = this.driverStr;
    data['supercargoId'] = this.supercargoId;
    data['supercargoStr'] = this.supercargoStr;
    data['bcState'] = this.bcState;
    data['orderDetailNo'] = this.orderDetailNo;
    data['orderDetailId'] = this.orderDetailId;
    data['orderVehicleId'] = this.orderVehicleId;
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    data['supercargo'] = this.supercargo ? this.supercargo.toJSON() : <any>undefined;
    data['trailer'] = this.trailer ? this.trailer.toJSON() : <any>undefined;
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    return data;
  }

  clone(): CapacityListDto {
    const json = this.toJSON();
    let result = new CapacityListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfCapacityListDto {
  totalCount!: number;
  items!: CapacityListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(CapacityListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfCapacityListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfCapacityListDto>(
      data,
      _mappings,
      PagedResultDtoOfCapacityListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfCapacityListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfCapacityListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfTransability_UserListDto {
  totalCount!: number;
  items!: Transability_UserListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Transability_UserListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfTransability_UserListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfTransability_UserListDto>(
      data,
      _mappings,
      PagedResultDtoOfTransability_UserListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfTransability_UserListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfTransability_UserListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfTransability_VehicleListDto {
  totalCount!: number;
  items!: Transability_VehicleListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Transability_VehicleListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfTransability_VehicleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfTransability_VehicleListDto>(
      data,
      _mappings,
      PagedResultDtoOfTransability_VehicleListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfTransability_VehicleListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfTransability_VehicleListDto();
    result.init(json);
    return result;
  }
}

/** 客户装卸点DTO Erinyes.TMS.Transability_LoadingUnloadingPoint */
export class Transability_LoadingUnloadingPointListDto {
  /** Id */
  id!: number | undefined;
  /** 所属企业 */
  customerId!: number | undefined;
  /** 联系人名称 */
  contactName!: string | undefined;
  /** 职务 */
  contactPost!: string | undefined;
  /** 移动电话 */
  contactPhone!: string | undefined;
  /** 邮箱 */
  contactEmail!: string | undefined;
  /** 地址 */
  adress!: string | undefined;
  /** 点位名称 */
  pointName!: string | undefined;
  /** 行政区编码 */
  cantonCode!: string | undefined;
  /** 行政区名称 */
  cantonName!: string | undefined;
  /** 经度 */
  longitude!: number | undefined;
  /** 纬度 */
  latitude!: number | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerId = _data['customerId'];
      this.contactName = _data['contactName'];
      this.contactPost = _data['contactPost'];
      this.contactPhone = _data['contactPhone'];
      this.contactEmail = _data['contactEmail'];
      this.adress = _data['adress'];
      this.pointName = _data['pointName'];
      this.cantonCode = _data['cantonCode'];
      this.cantonName = _data['cantonName'];
      this.longitude = _data['longitude'];
      this.latitude = _data['latitude'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): Transability_LoadingUnloadingPointListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Transability_LoadingUnloadingPointListDto>(
      data,
      _mappings,
      Transability_LoadingUnloadingPointListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerId'] = this.customerId;
    data['contactName'] = this.contactName;
    data['contactPost'] = this.contactPost;
    data['contactPhone'] = this.contactPhone;
    data['contactEmail'] = this.contactEmail;
    data['adress'] = this.adress;
    data['pointName'] = this.pointName;
    data['cantonCode'] = this.cantonCode;
    data['cantonName'] = this.cantonName;
    data['longitude'] = this.longitude;
    data['latitude'] = this.latitude;
    data['remark'] = this.remark;
    return data;
  }

  clone(): Transability_LoadingUnloadingPointListDto {
    const json = this.toJSON();
    let result = new Transability_LoadingUnloadingPointListDto();
    result.init(json);
    return result;
  }
}

/** 客户的列表DTO Erinyes.TMS.Transability_Customer */
export class Transability_CustomerEditDto {
  /** Id */
  id!: number | undefined;
  /** 装卸点 */
  loadingUnloadingPointList!: Transability_LoadingUnloadingPointListDto[] | undefined;
  /** 企业名称 */
  entName!: string | undefined;
  /** 行业 */
  industry!: string | undefined;
  /** 行业名称 */
  industryName!: string | undefined;
  /** 企业地址 */
  entAdress!: string | undefined;
  /** 行政区编码 */
  cantonCode!: string | undefined;
  /** 经度 */
  longitude!: number | undefined;
  /** 纬度 */
  latitude!: number | undefined;
  /** 联系人名称 */
  contactName!: string | undefined;
  /** 职务 */
  contactPost!: string | undefined;
  /** 移动电话 */
  contactPhone!: string | undefined;
  /** 账期（天） */
  accountPeriod!: number;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      if (Array.isArray(_data['loadingUnloadingPointList'])) {
        this.loadingUnloadingPointList = [] as any;
        for (let item of _data['loadingUnloadingPointList'])
          this.loadingUnloadingPointList!.push(
            Transability_LoadingUnloadingPointListDto.fromJS(item, _mappings),
          );
      }
      this.entName = _data['entName'];
      this.industry = _data['industry'];
      this.industryName = _data['industryName'];
      this.entAdress = _data['entAdress'];
      this.cantonCode = _data['cantonCode'];
      this.longitude = _data['longitude'];
      this.latitude = _data['latitude'];
      this.contactName = _data['contactName'];
      this.contactPost = _data['contactPost'];
      this.contactPhone = _data['contactPhone'];
      this.accountPeriod = _data['accountPeriod'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): Transability_CustomerEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Transability_CustomerEditDto>(
      data,
      _mappings,
      Transability_CustomerEditDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    if (Array.isArray(this.loadingUnloadingPointList)) {
      data['loadingUnloadingPointList'] = [];
      for (let item of this.loadingUnloadingPointList)
        data['loadingUnloadingPointList'].push(item.toJSON());
    }
    data['entName'] = this.entName;
    data['industry'] = this.industry;
    data['industryName'] = this.industryName;
    data['entAdress'] = this.entAdress;
    data['cantonCode'] = this.cantonCode;
    data['longitude'] = this.longitude;
    data['latitude'] = this.latitude;
    data['contactName'] = this.contactName;
    data['contactPost'] = this.contactPost;
    data['contactPhone'] = this.contactPhone;
    data['accountPeriod'] = this.accountPeriod;
    data['remark'] = this.remark;
    return data;
  }

  clone(): Transability_CustomerEditDto {
    const json = this.toJSON();
    let result = new Transability_CustomerEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateTransability_CustomerInput {
  transability_Customer!: Transability_CustomerEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.transability_Customer = _data['transability_Customer']
        ? Transability_CustomerEditDto.fromJS(_data['transability_Customer'], _mappings)
        : new Transability_CustomerEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateTransability_CustomerInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateTransability_CustomerInput>(
      data,
      _mappings,
      CreateOrUpdateTransability_CustomerInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['transability_Customer'] = this.transability_Customer
      ? this.transability_Customer.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateTransability_CustomerInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateTransability_CustomerInput();
    result.init(json);
    return result;
  }
}

/** 客户装卸点DTO Erinyes.TMS.Transability_LoadingUnloadingPoint */
export class Transability_LoadingUnloadingPointEditDto {
  /** Id */
  id!: number | undefined;
  /** 所属企业 */
  customerId!: number | undefined;
  /** 联系人名称 */
  contactName!: string | undefined;
  /** 职务 */
  contactPost!: string | undefined;
  /** 移动电话 */
  contactPhone!: string | undefined;
  /** 邮箱 */
  contactEmail!: string | undefined;
  /** 地址 */
  adress!: string | undefined;
  /** 点位名称 */
  pointName!: string | undefined;
  /** 行政区编码 */
  cantonCode!: string | undefined;
  /** 行政区名称 */
  cantonName!: string | undefined;
  /** 经度 */
  longitude!: number | undefined;
  /** 纬度 */
  latitude!: number | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.customerId = _data['customerId'];
      this.contactName = _data['contactName'];
      this.contactPost = _data['contactPost'];
      this.contactPhone = _data['contactPhone'];
      this.contactEmail = _data['contactEmail'];
      this.adress = _data['adress'];
      this.pointName = _data['pointName'];
      this.cantonCode = _data['cantonCode'];
      this.cantonName = _data['cantonName'];
      this.longitude = _data['longitude'];
      this.latitude = _data['latitude'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): Transability_LoadingUnloadingPointEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Transability_LoadingUnloadingPointEditDto>(
      data,
      _mappings,
      Transability_LoadingUnloadingPointEditDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['customerId'] = this.customerId;
    data['contactName'] = this.contactName;
    data['contactPost'] = this.contactPost;
    data['contactPhone'] = this.contactPhone;
    data['contactEmail'] = this.contactEmail;
    data['adress'] = this.adress;
    data['pointName'] = this.pointName;
    data['cantonCode'] = this.cantonCode;
    data['cantonName'] = this.cantonName;
    data['longitude'] = this.longitude;
    data['latitude'] = this.latitude;
    data['remark'] = this.remark;
    return data;
  }

  clone(): Transability_LoadingUnloadingPointEditDto {
    const json = this.toJSON();
    let result = new Transability_LoadingUnloadingPointEditDto();
    result.init(json);
    return result;
  }
}

/** 客户的列表DTO Erinyes.TMS.Transability_Customer */
export class Transability_CustomerListDto {
  id!: number | undefined;
  /** 装卸点 */
  loadingUnloadingPointList!: Transability_LoadingUnloadingPointListDto[] | undefined;
  /** 企业名称 */
  entName!: string | undefined;
  /** 行业 */
  industry!: string | undefined;
  /** 行业名称 */
  industryName!: string | undefined;
  /** 企业地址 */
  entAdress!: string | undefined;
  /** 行政区编码 */
  cantonCode!: string | undefined;
  /** 行政区名称 */
  cantonName!: string | undefined;
  /** 经度 */
  longitude!: number | undefined;
  /** 纬度 */
  latitude!: number | undefined;
  /** 联系人名称 */
  contactName!: string | undefined;
  /** 职务 */
  contactPost!: string | undefined;
  /** 移动电话 */
  contactPhone!: string | undefined;
  /** 账期（天） */
  accountPeriod!: number;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      if (Array.isArray(_data['loadingUnloadingPointList'])) {
        this.loadingUnloadingPointList = [] as any;
        for (let item of _data['loadingUnloadingPointList'])
          this.loadingUnloadingPointList!.push(
            Transability_LoadingUnloadingPointListDto.fromJS(item, _mappings),
          );
      }
      this.entName = _data['entName'];
      this.industry = _data['industry'];
      this.industryName = _data['industryName'];
      this.entAdress = _data['entAdress'];
      this.cantonCode = _data['cantonCode'];
      this.cantonName = _data['cantonName'];
      this.longitude = _data['longitude'];
      this.latitude = _data['latitude'];
      this.contactName = _data['contactName'];
      this.contactPost = _data['contactPost'];
      this.contactPhone = _data['contactPhone'];
      this.accountPeriod = _data['accountPeriod'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): Transability_CustomerListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Transability_CustomerListDto>(
      data,
      _mappings,
      Transability_CustomerListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    if (Array.isArray(this.loadingUnloadingPointList)) {
      data['loadingUnloadingPointList'] = [];
      for (let item of this.loadingUnloadingPointList)
        data['loadingUnloadingPointList'].push(item.toJSON());
    }
    data['entName'] = this.entName;
    data['industry'] = this.industry;
    data['industryName'] = this.industryName;
    data['entAdress'] = this.entAdress;
    data['cantonCode'] = this.cantonCode;
    data['cantonName'] = this.cantonName;
    data['longitude'] = this.longitude;
    data['latitude'] = this.latitude;
    data['contactName'] = this.contactName;
    data['contactPost'] = this.contactPost;
    data['contactPhone'] = this.contactPhone;
    data['accountPeriod'] = this.accountPeriod;
    data['remark'] = this.remark;
    return data;
  }

  clone(): Transability_CustomerListDto {
    const json = this.toJSON();
    let result = new Transability_CustomerListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfTransability_LoadingUnloadingPointListDto {
  totalCount!: number;
  items!: Transability_LoadingUnloadingPointListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Transability_LoadingUnloadingPointListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(
    data: any,
    _mappings?: any,
  ): PagedResultDtoOfTransability_LoadingUnloadingPointListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfTransability_LoadingUnloadingPointListDto>(
      data,
      _mappings,
      PagedResultDtoOfTransability_LoadingUnloadingPointListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfTransability_LoadingUnloadingPointListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfTransability_LoadingUnloadingPointListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑客户的Dto */
export class GetTransability_CustomerForEditOutput {
  transability_Customer!: Transability_CustomerEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.transability_Customer = _data['transability_Customer']
        ? Transability_CustomerEditDto.fromJS(_data['transability_Customer'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetTransability_CustomerForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetTransability_CustomerForEditOutput>(
      data,
      _mappings,
      GetTransability_CustomerForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['transability_Customer'] = this.transability_Customer
      ? this.transability_Customer.toJSON()
      : <any>undefined;
    return data;
  }

  clone(): GetTransability_CustomerForEditOutput {
    const json = this.toJSON();
    let result = new GetTransability_CustomerForEditOutput();
    result.init(json);
    return result;
  }
}

/** 地图信息 */
export class MapDto {
  /** 地址 */
  adress!: string | undefined;
  /** 点位名称 */
  pointName!: string | undefined;
  /** 行政区编码 */
  cantonCode!: string | undefined;
  /** 行政区名称 */
  cantonName!: string | undefined;
  /** 经度 */
  longitude!: number | undefined;
  /** 纬度 */
  latitude!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.adress = _data['adress'];
      this.pointName = _data['pointName'];
      this.cantonCode = _data['cantonCode'];
      this.cantonName = _data['cantonName'];
      this.longitude = _data['longitude'];
      this.latitude = _data['latitude'];
    }
  }

  static fromJS(data: any, _mappings?: any): MapDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<MapDto>(data, _mappings, MapDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['adress'] = this.adress;
    data['pointName'] = this.pointName;
    data['cantonCode'] = this.cantonCode;
    data['cantonName'] = this.cantonName;
    data['longitude'] = this.longitude;
    data['latitude'] = this.latitude;
    return data;
  }

  clone(): MapDto {
    const json = this.toJSON();
    let result = new MapDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfTransability_CustomerListDto {
  totalCount!: number;
  items!: Transability_CustomerListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(Transability_CustomerListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfTransability_CustomerListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfTransability_CustomerListDto>(
      data,
      _mappings,
      PagedResultDtoOfTransability_CustomerListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfTransability_CustomerListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfTransability_CustomerListDto();
    result.init(json);
    return result;
  }
}

/** 更新版本的列表DTO Erinyes.CRM.UpdateVersion */
export class UpdateVersionEditDto {
  /** Id */
  id!: number | undefined;
  /** 版本号 */
  version!: string | undefined;
  /** 更新时间 */
  updateTime!: dayjs.Dayjs;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.version = _data['version'];
      this.updateTime = _data['updateTime']
        ? dayjs(_data['updateTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): UpdateVersionEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UpdateVersionEditDto>(data, _mappings, UpdateVersionEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['version'] = this.version;
    data['updateTime'] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): UpdateVersionEditDto {
    const json = this.toJSON();
    let result = new UpdateVersionEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateUpdateVersionInput {
  updateVersion!: UpdateVersionEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.updateVersion = _data['updateVersion']
        ? UpdateVersionEditDto.fromJS(_data['updateVersion'], _mappings)
        : new UpdateVersionEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateUpdateVersionInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateUpdateVersionInput>(
      data,
      _mappings,
      CreateOrUpdateUpdateVersionInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['updateVersion'] = this.updateVersion ? this.updateVersion.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateUpdateVersionInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateUpdateVersionInput();
    result.init(json);
    return result;
  }
}

/** 更新版本的列表DTO Erinyes.CRM.UpdateVersion */
export class UpdateVersionListDto {
  id!: number | undefined;
  /** 版本号 */
  version!: string | undefined;
  /** 更新时间 */
  updateTime!: dayjs.Dayjs;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.version = _data['version'];
      this.updateTime = _data['updateTime']
        ? dayjs(_data['updateTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): UpdateVersionListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UpdateVersionListDto>(data, _mappings, UpdateVersionListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['version'] = this.version;
    data['updateTime'] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): UpdateVersionListDto {
    const json = this.toJSON();
    let result = new UpdateVersionListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑更新版本的Dto */
export class GetUpdateVersionForEditOutput {
  updateVersion!: UpdateVersionEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.updateVersion = _data['updateVersion']
        ? UpdateVersionEditDto.fromJS(_data['updateVersion'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetUpdateVersionForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetUpdateVersionForEditOutput>(
      data,
      _mappings,
      GetUpdateVersionForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['updateVersion'] = this.updateVersion ? this.updateVersion.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetUpdateVersionForEditOutput {
    const json = this.toJSON();
    let result = new GetUpdateVersionForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfUpdateVersionListDto {
  totalCount!: number;
  items!: UpdateVersionListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(UpdateVersionListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfUpdateVersionListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfUpdateVersionListDto>(
      data,
      _mappings,
      PagedResultDtoOfUpdateVersionListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfUpdateVersionListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfUpdateVersionListDto();
    result.init(json);
    return result;
  }
}

/** 更新版本的列表DTO */
export class UpdateDetailDto {
  id!: number;
  /** 版本号 */
  version!: string | undefined;
  /** 更新时间 */
  updateTime!: dayjs.Dayjs;
  /** 更新详情 */
  details!: string[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.version = _data['version'];
      this.updateTime = _data['updateTime']
        ? dayjs(_data['updateTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['details'])) {
        this.details = [] as any;
        for (let item of _data['details']) this.details!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): UpdateDetailDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UpdateDetailDto>(data, _mappings, UpdateDetailDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['version'] = this.version;
    data['updateTime'] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
    if (Array.isArray(this.details)) {
      data['details'] = [];
      for (let item of this.details) data['details'].push(item);
    }
    return data;
  }

  clone(): UpdateDetailDto {
    const json = this.toJSON();
    let result = new UpdateDetailDto();
    result.init(json);
    return result;
  }
}

/** 用户信息编辑用Dto */
export class UserEditDto {
  /** 根据id是否有值来判断是创建还是添加 */
  id!: number | undefined;
  userName!: string | undefined;
  emailAddress!: string | undefined;
  phoneNumber!: string | undefined;
  password!: string | undefined;
  isLockoutEnabled!: boolean;
  /** 需要修改密码 */
  needToChangeThePassword!: boolean;
  /** 头像Id */
  profilePictureId!: string | undefined;
  isTwoFactorEnabled!: boolean;
  isActive!: boolean;
  /** 真实姓名 --------------新增 */
  realName!: string | undefined;
  /** 对应的司机Id */
  transabilityDriverId!: number | undefined;
  /** 对应的押运员Id */
  transabilityEscortId!: number | undefined;
  /** 是否组长 true:组长  false:组员 */
  isLeader!: boolean;
  /** 负责区域 行政区编码用逗号分开 */
  ownCantons!: string | undefined;
  /** 小组名称 */
  groupName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.userName = _data['userName'];
      this.emailAddress = _data['emailAddress'];
      this.phoneNumber = _data['phoneNumber'];
      this.password = _data['password'];
      this.isLockoutEnabled = _data['isLockoutEnabled'];
      this.needToChangeThePassword = _data['needToChangeThePassword'];
      this.profilePictureId = _data['profilePictureId'];
      this.isTwoFactorEnabled = _data['isTwoFactorEnabled'];
      this.isActive = _data['isActive'];
      this.realName = _data['realName'];
      this.transabilityDriverId = _data['transabilityDriverId'];
      this.transabilityEscortId = _data['transabilityEscortId'];
      this.isLeader = _data['isLeader'];
      this.ownCantons = _data['ownCantons'];
      this.groupName = _data['groupName'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserEditDto>(data, _mappings, UserEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['userName'] = this.userName;
    data['emailAddress'] = this.emailAddress;
    data['phoneNumber'] = this.phoneNumber;
    data['password'] = this.password;
    data['isLockoutEnabled'] = this.isLockoutEnabled;
    data['needToChangeThePassword'] = this.needToChangeThePassword;
    data['profilePictureId'] = this.profilePictureId;
    data['isTwoFactorEnabled'] = this.isTwoFactorEnabled;
    data['isActive'] = this.isActive;
    data['realName'] = this.realName;
    data['transabilityDriverId'] = this.transabilityDriverId;
    data['transabilityEscortId'] = this.transabilityEscortId;
    data['isLeader'] = this.isLeader;
    data['ownCantons'] = this.ownCantons;
    data['groupName'] = this.groupName;
    return data;
  }

  clone(): UserEditDto {
    const json = this.toJSON();
    let result = new UserEditDto();
    result.init(json);
    return result;
  }
}

/** 用户信息新增和编辑时用Dto */
export class CreateOrUpdateUserInput {
  user!: UserEditDto;
  /** 授权的角色 */
  assignedRoleNames!: string[] | undefined;
  /** 所在的组织机构的ID */
  organizationUnits!: number[] | undefined;
  /** 发送激活邮件 */
  sendActivationEmail!: boolean;
  /** 设置随机密码 */
  setRandomPassword!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.user = _data['user'] ? UserEditDto.fromJS(_data['user'], _mappings) : <any>undefined;
      if (Array.isArray(_data['assignedRoleNames'])) {
        this.assignedRoleNames = [] as any;
        for (let item of _data['assignedRoleNames']) this.assignedRoleNames!.push(item);
      }
      if (Array.isArray(_data['organizationUnits'])) {
        this.organizationUnits = [] as any;
        for (let item of _data['organizationUnits']) this.organizationUnits!.push(item);
      }
      this.sendActivationEmail = _data['sendActivationEmail'];
      this.setRandomPassword = _data['setRandomPassword'];
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateUserInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateUserInput>(data, _mappings, CreateOrUpdateUserInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['user'] = this.user ? this.user.toJSON() : <any>undefined;
    if (Array.isArray(this.assignedRoleNames)) {
      data['assignedRoleNames'] = [];
      for (let item of this.assignedRoleNames) data['assignedRoleNames'].push(item);
    }
    if (Array.isArray(this.organizationUnits)) {
      data['organizationUnits'] = [];
      for (let item of this.organizationUnits) data['organizationUnits'].push(item);
    }
    data['sendActivationEmail'] = this.sendActivationEmail;
    data['setRandomPassword'] = this.setRandomPassword;
    return data;
  }

  clone(): CreateOrUpdateUserInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateUserInput();
    result.init(json);
    return result;
  }
}

export class UserRoleDto {
  roleId!: number;
  roleName!: string | undefined;
  roleDisplayName!: string | undefined;
  isAssigned!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.roleId = _data['roleId'];
      this.roleName = _data['roleName'];
      this.roleDisplayName = _data['roleDisplayName'];
      this.isAssigned = _data['isAssigned'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserRoleDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserRoleDto>(data, _mappings, UserRoleDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['roleId'] = this.roleId;
    data['roleName'] = this.roleName;
    data['roleDisplayName'] = this.roleDisplayName;
    data['isAssigned'] = this.isAssigned;
    return data;
  }

  clone(): UserRoleDto {
    const json = this.toJSON();
    let result = new UserRoleDto();
    result.init(json);
    return result;
  }
}

export class GetUserForEditTreeOutput {
  user!: UserEditDto;
  roles!: UserRoleDto[] | undefined;
  allOrganizationUnits!: OrganizationUnitListDto[] | undefined;
  memberedOrganizationUnits!: string[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.user = _data['user'] ? UserEditDto.fromJS(_data['user'], _mappings) : <any>undefined;
      if (Array.isArray(_data['roles'])) {
        this.roles = [] as any;
        for (let item of _data['roles']) this.roles!.push(UserRoleDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['allOrganizationUnits'])) {
        this.allOrganizationUnits = [] as any;
        for (let item of _data['allOrganizationUnits'])
          this.allOrganizationUnits!.push(OrganizationUnitListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['memberedOrganizationUnits'])) {
        this.memberedOrganizationUnits = [] as any;
        for (let item of _data['memberedOrganizationUnits'])
          this.memberedOrganizationUnits!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetUserForEditTreeOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetUserForEditTreeOutput>(data, _mappings, GetUserForEditTreeOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['user'] = this.user ? this.user.toJSON() : <any>undefined;
    if (Array.isArray(this.roles)) {
      data['roles'] = [];
      for (let item of this.roles) data['roles'].push(item.toJSON());
    }
    if (Array.isArray(this.allOrganizationUnits)) {
      data['allOrganizationUnits'] = [];
      for (let item of this.allOrganizationUnits) data['allOrganizationUnits'].push(item.toJSON());
    }
    if (Array.isArray(this.memberedOrganizationUnits)) {
      data['memberedOrganizationUnits'] = [];
      for (let item of this.memberedOrganizationUnits) data['memberedOrganizationUnits'].push(item);
    }
    return data;
  }

  clone(): GetUserForEditTreeOutput {
    const json = this.toJSON();
    let result = new GetUserForEditTreeOutput();
    result.init(json);
    return result;
  }
}

export class UserListRoleDto {
  roleId!: number;
  roleName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.roleId = _data['roleId'];
      this.roleName = _data['roleName'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserListRoleDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserListRoleDto>(data, _mappings, UserListRoleDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['roleId'] = this.roleId;
    data['roleName'] = this.roleName;
    return data;
  }

  clone(): UserListRoleDto {
    const json = this.toJSON();
    let result = new UserListRoleDto();
    result.init(json);
    return result;
  }
}

/** 用户信息列表Dto */
export class UserListDto {
  userName!: string | undefined;
  emailAddress!: string | undefined;
  phoneNumber!: string | undefined;
  isEmailConfirmed!: boolean;
  roles!: UserListRoleDto[] | undefined;
  lastLoginTime!: dayjs.Dayjs | undefined;
  creationTime!: dayjs.Dayjs;
  isActive!: boolean;
  /** 真实姓名 --------------新增 */
  realName!: string | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.userName = _data['userName'];
      this.emailAddress = _data['emailAddress'];
      this.phoneNumber = _data['phoneNumber'];
      this.isEmailConfirmed = _data['isEmailConfirmed'];
      if (Array.isArray(_data['roles'])) {
        this.roles = [] as any;
        for (let item of _data['roles']) this.roles!.push(UserListRoleDto.fromJS(item, _mappings));
      }
      this.lastLoginTime = _data['lastLoginTime']
        ? dayjs(_data['lastLoginTime'].toString())
        : <any>undefined;
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.isActive = _data['isActive'];
      this.realName = _data['realName'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserListDto>(data, _mappings, UserListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userName'] = this.userName;
    data['emailAddress'] = this.emailAddress;
    data['phoneNumber'] = this.phoneNumber;
    data['isEmailConfirmed'] = this.isEmailConfirmed;
    if (Array.isArray(this.roles)) {
      data['roles'] = [];
      for (let item of this.roles) data['roles'].push(item.toJSON());
    }
    data['lastLoginTime'] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['isActive'] = this.isActive;
    data['realName'] = this.realName;
    data['id'] = this.id;
    return data;
  }

  clone(): UserListDto {
    const json = this.toJSON();
    let result = new UserListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfUserListDto {
  totalCount!: number;
  items!: UserListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(UserListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfUserListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfUserListDto>(
      data,
      _mappings,
      PagedResultDtoOfUserListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfUserListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfUserListDto();
    result.init(json);
    return result;
  }
}

export class GetUserPermissionsTreeForEditOutput {
  permissions!: FlatPermissionDto[] | undefined;
  grantedPermissionNames!: string[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['permissions'])) {
        this.permissions = [] as any;
        for (let item of _data['permissions'])
          this.permissions!.push(FlatPermissionDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['grantedPermissionNames'])) {
        this.grantedPermissionNames = [] as any;
        for (let item of _data['grantedPermissionNames']) this.grantedPermissionNames!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetUserPermissionsTreeForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetUserPermissionsTreeForEditOutput>(
      data,
      _mappings,
      GetUserPermissionsTreeForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.permissions)) {
      data['permissions'] = [];
      for (let item of this.permissions) data['permissions'].push(item.toJSON());
    }
    if (Array.isArray(this.grantedPermissionNames)) {
      data['grantedPermissionNames'] = [];
      for (let item of this.grantedPermissionNames) data['grantedPermissionNames'].push(item);
    }
    return data;
  }

  clone(): GetUserPermissionsTreeForEditOutput {
    const json = this.toJSON();
    let result = new GetUserPermissionsTreeForEditOutput();
    result.init(json);
    return result;
  }
}

export class GetUserForEditOutput {
  profilePictureId!: string | undefined;
  user!: UserEditDto;
  roles!: UserRoleDto[] | undefined;
  allOrganizationUnits!: OrganizationUnitListDto[] | undefined;
  memberedOrganizationUnits!: string[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.profilePictureId = _data['profilePictureId'];
      this.user = _data['user'] ? UserEditDto.fromJS(_data['user'], _mappings) : <any>undefined;
      if (Array.isArray(_data['roles'])) {
        this.roles = [] as any;
        for (let item of _data['roles']) this.roles!.push(UserRoleDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['allOrganizationUnits'])) {
        this.allOrganizationUnits = [] as any;
        for (let item of _data['allOrganizationUnits'])
          this.allOrganizationUnits!.push(OrganizationUnitListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['memberedOrganizationUnits'])) {
        this.memberedOrganizationUnits = [] as any;
        for (let item of _data['memberedOrganizationUnits'])
          this.memberedOrganizationUnits!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetUserForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetUserForEditOutput>(data, _mappings, GetUserForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['profilePictureId'] = this.profilePictureId;
    data['user'] = this.user ? this.user.toJSON() : <any>undefined;
    if (Array.isArray(this.roles)) {
      data['roles'] = [];
      for (let item of this.roles) data['roles'].push(item.toJSON());
    }
    if (Array.isArray(this.allOrganizationUnits)) {
      data['allOrganizationUnits'] = [];
      for (let item of this.allOrganizationUnits) data['allOrganizationUnits'].push(item.toJSON());
    }
    if (Array.isArray(this.memberedOrganizationUnits)) {
      data['memberedOrganizationUnits'] = [];
      for (let item of this.memberedOrganizationUnits) data['memberedOrganizationUnits'].push(item);
    }
    return data;
  }

  clone(): GetUserForEditOutput {
    const json = this.toJSON();
    let result = new GetUserForEditOutput();
    result.init(json);
    return result;
  }
}

export class GetUserPermissionsForEditOutput {
  /** 所有的权限 */
  permissions!: FlatPermissionDto[] | undefined;
  /** 已有权限 */
  grantedPermissionNames!: string[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['permissions'])) {
        this.permissions = [] as any;
        for (let item of _data['permissions'])
          this.permissions!.push(FlatPermissionDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['grantedPermissionNames'])) {
        this.grantedPermissionNames = [] as any;
        for (let item of _data['grantedPermissionNames']) this.grantedPermissionNames!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetUserPermissionsForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetUserPermissionsForEditOutput>(
      data,
      _mappings,
      GetUserPermissionsForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.permissions)) {
      data['permissions'] = [];
      for (let item of this.permissions) data['permissions'].push(item.toJSON());
    }
    if (Array.isArray(this.grantedPermissionNames)) {
      data['grantedPermissionNames'] = [];
      for (let item of this.grantedPermissionNames) data['grantedPermissionNames'].push(item);
    }
    return data;
  }

  clone(): GetUserPermissionsForEditOutput {
    const json = this.toJSON();
    let result = new GetUserPermissionsForEditOutput();
    result.init(json);
    return result;
  }
}

export class NullableIdDtoOfInt64 {
  id!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): NullableIdDtoOfInt64 | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<NullableIdDtoOfInt64>(data, _mappings, NullableIdDtoOfInt64);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    return data;
  }

  clone(): NullableIdDtoOfInt64 {
    const json = this.toJSON();
    let result = new NullableIdDtoOfInt64();
    result.init(json);
    return result;
  }
}

export class UpdateUserPermissionsInput {
  id!: number;
  grantedPermissionNames!: string[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      if (Array.isArray(_data['grantedPermissionNames'])) {
        this.grantedPermissionNames = [] as any;
        for (let item of _data['grantedPermissionNames']) this.grantedPermissionNames!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): UpdateUserPermissionsInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UpdateUserPermissionsInput>(data, _mappings, UpdateUserPermissionsInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    if (Array.isArray(this.grantedPermissionNames)) {
      data['grantedPermissionNames'] = [];
      for (let item of this.grantedPermissionNames) data['grantedPermissionNames'].push(item);
    }
    return data;
  }

  clone(): UpdateUserPermissionsInput {
    const json = this.toJSON();
    let result = new UpdateUserPermissionsInput();
    result.init(json);
    return result;
  }
}

export class LinkedUserDto {
  tenantId!: number | undefined;
  tenancyName!: string | undefined;
  username!: string | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.tenancyName = _data['tenancyName'];
      this.username = _data['username'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): LinkedUserDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LinkedUserDto>(data, _mappings, LinkedUserDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['tenancyName'] = this.tenancyName;
    data['username'] = this.username;
    data['id'] = this.id;
    return data;
  }

  clone(): LinkedUserDto {
    const json = this.toJSON();
    let result = new LinkedUserDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfLinkedUserDto {
  totalCount!: number;
  items!: LinkedUserDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(LinkedUserDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfLinkedUserDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfLinkedUserDto>(
      data,
      _mappings,
      PagedResultDtoOfLinkedUserDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfLinkedUserDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfLinkedUserDto();
    result.init(json);
    return result;
  }
}

export class ListResultDtoOfLinkedUserDto {
  items!: LinkedUserDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(LinkedUserDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ListResultDtoOfLinkedUserDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ListResultDtoOfLinkedUserDto>(
      data,
      _mappings,
      ListResultDtoOfLinkedUserDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): ListResultDtoOfLinkedUserDto {
    const json = this.toJSON();
    let result = new ListResultDtoOfLinkedUserDto();
    result.init(json);
    return result;
  }
}

export class LinkToUserInput {
  tenancyName!: string | undefined;
  usernameOrEmailAddress!: string | undefined;
  password!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenancyName = _data['tenancyName'];
      this.usernameOrEmailAddress = _data['usernameOrEmailAddress'];
      this.password = _data['password'];
    }
  }

  static fromJS(data: any, _mappings?: any): LinkToUserInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LinkToUserInput>(data, _mappings, LinkToUserInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenancyName'] = this.tenancyName;
    data['usernameOrEmailAddress'] = this.usernameOrEmailAddress;
    data['password'] = this.password;
    return data;
  }

  clone(): LinkToUserInput {
    const json = this.toJSON();
    let result = new LinkToUserInput();
    result.init(json);
    return result;
  }
}

export class UnlinkUserInput {
  tenantId!: number | undefined;
  userId!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.userId = _data['userId'];
    }
  }

  static fromJS(data: any, _mappings?: any): UnlinkUserInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UnlinkUserInput>(data, _mappings, UnlinkUserInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['userId'] = this.userId;
    return data;
  }

  clone(): UnlinkUserInput {
    const json = this.toJSON();
    let result = new UnlinkUserInput();
    result.init(json);
    return result;
  }
}

export class UserLoginAttemptDto {
  tenancyName!: string | undefined;
  userNameOrEmailAddress!: string | undefined;
  clientIpAddress!: string | undefined;
  clientName!: string | undefined;
  browserInfo!: string | undefined;
  result!: string | undefined;
  creationTime!: dayjs.Dayjs;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenancyName = _data['tenancyName'];
      this.userNameOrEmailAddress = _data['userNameOrEmailAddress'];
      this.clientIpAddress = _data['clientIpAddress'];
      this.clientName = _data['clientName'];
      this.browserInfo = _data['browserInfo'];
      this.result = _data['result'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): UserLoginAttemptDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserLoginAttemptDto>(data, _mappings, UserLoginAttemptDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenancyName'] = this.tenancyName;
    data['userNameOrEmailAddress'] = this.userNameOrEmailAddress;
    data['clientIpAddress'] = this.clientIpAddress;
    data['clientName'] = this.clientName;
    data['browserInfo'] = this.browserInfo;
    data['result'] = this.result;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): UserLoginAttemptDto {
    const json = this.toJSON();
    let result = new UserLoginAttemptDto();
    result.init(json);
    return result;
  }
}

export class ListResultDtoOfUserLoginAttemptDto {
  items!: UserLoginAttemptDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(UserLoginAttemptDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ListResultDtoOfUserLoginAttemptDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ListResultDtoOfUserLoginAttemptDto>(
      data,
      _mappings,
      ListResultDtoOfUserLoginAttemptDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): ListResultDtoOfUserLoginAttemptDto {
    const json = this.toJSON();
    let result = new ListResultDtoOfUserLoginAttemptDto();
    result.init(json);
    return result;
  }
}

/** 车辆管理的列表DTO Erinyes.CRM.Vehicle */
export class VehicleEditDto {
  /** Id */
  id!: number | undefined;
  /** 车辆编号 */
  vehicleNo!: string | undefined;
  /** 运输企业车牌号 */
  vehicleNum!: string | undefined;
  /** 物流公司 */
  logisticsCompanyId!: number | undefined;
  /** 物流公司名称 */
  entName!: string | undefined;
  remark!: string | undefined;
  /** 附件 */
  ossFileNames!: string | undefined;
  /** 行驶证许可证文件 */
  drivingLicenseOssFile!: string | undefined;
  /** 道路运输许可证文件 */
  roadTransportLicenseOssFile!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.vehicleNo = _data['vehicleNo'];
      this.vehicleNum = _data['vehicleNum'];
      this.logisticsCompanyId = _data['logisticsCompanyId'];
      this.entName = _data['entName'];
      this.remark = _data['remark'];
      this.ossFileNames = _data['ossFileNames'];
      this.drivingLicenseOssFile = _data['drivingLicenseOssFile'];
      this.roadTransportLicenseOssFile = _data['roadTransportLicenseOssFile'];
    }
  }

  static fromJS(data: any, _mappings?: any): VehicleEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<VehicleEditDto>(data, _mappings, VehicleEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['vehicleNo'] = this.vehicleNo;
    data['vehicleNum'] = this.vehicleNum;
    data['logisticsCompanyId'] = this.logisticsCompanyId;
    data['entName'] = this.entName;
    data['remark'] = this.remark;
    data['ossFileNames'] = this.ossFileNames;
    data['drivingLicenseOssFile'] = this.drivingLicenseOssFile;
    data['roadTransportLicenseOssFile'] = this.roadTransportLicenseOssFile;
    return data;
  }

  clone(): VehicleEditDto {
    const json = this.toJSON();
    let result = new VehicleEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateVehicleInput {
  vehicle!: VehicleEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.vehicle = _data['vehicle']
        ? VehicleEditDto.fromJS(_data['vehicle'], _mappings)
        : new VehicleEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateVehicleInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateVehicleInput>(data, _mappings, CreateOrUpdateVehicleInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateVehicleInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateVehicleInput();
    result.init(json);
    return result;
  }
}

/** 车辆管理的列表DTO Erinyes.CRM.Vehicle */
export class VehicleListDto {
  id!: number;
  /** 车辆编号 */
  vehicleNo!: string | undefined;
  /** 运输企业车牌号 */
  vehicleNum!: string | undefined;
  /** 物流公司 */
  logisticsCompanyId!: number | undefined;
  /** 物流公司名称 */
  entName!: string | undefined;
  /** 行政区 */
  cantonCode!: string | undefined;
  /** 联系人 */
  linkName!: string | undefined;
  /** 联系电话 */
  phoneNo!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  remark!: string | undefined;
  /** 附件 */
  ossFileNames!: string | undefined;
  /** 行驶证许可证文件 */
  drivingLicenseOssFile!: string | undefined;
  /** 道路运输许可证文件 */
  roadTransportLicenseOssFile!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.vehicleNo = _data['vehicleNo'];
      this.vehicleNum = _data['vehicleNum'];
      this.logisticsCompanyId = _data['logisticsCompanyId'];
      this.entName = _data['entName'];
      this.cantonCode = _data['cantonCode'];
      this.linkName = _data['linkName'];
      this.phoneNo = _data['phoneNo'];
      this.address = _data['address'];
      this.remark = _data['remark'];
      this.ossFileNames = _data['ossFileNames'];
      this.drivingLicenseOssFile = _data['drivingLicenseOssFile'];
      this.roadTransportLicenseOssFile = _data['roadTransportLicenseOssFile'];
    }
  }

  static fromJS(data: any, _mappings?: any): VehicleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<VehicleListDto>(data, _mappings, VehicleListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['vehicleNo'] = this.vehicleNo;
    data['vehicleNum'] = this.vehicleNum;
    data['logisticsCompanyId'] = this.logisticsCompanyId;
    data['entName'] = this.entName;
    data['cantonCode'] = this.cantonCode;
    data['linkName'] = this.linkName;
    data['phoneNo'] = this.phoneNo;
    data['address'] = this.address;
    data['remark'] = this.remark;
    data['ossFileNames'] = this.ossFileNames;
    data['drivingLicenseOssFile'] = this.drivingLicenseOssFile;
    data['roadTransportLicenseOssFile'] = this.roadTransportLicenseOssFile;
    return data;
  }

  clone(): VehicleListDto {
    const json = this.toJSON();
    let result = new VehicleListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑车辆管理的Dto */
export class GetVehicleForEditOutput {
  vehicle!: VehicleEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.vehicle = _data['vehicle']
        ? VehicleEditDto.fromJS(_data['vehicle'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetVehicleForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetVehicleForEditOutput>(data, _mappings, GetVehicleForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetVehicleForEditOutput {
    const json = this.toJSON();
    let result = new GetVehicleForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfVehicleListDto {
  totalCount!: number;
  items!: VehicleListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items']) this.items!.push(VehicleListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfVehicleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfVehicleListDto>(
      data,
      _mappings,
      PagedResultDtoOfVehicleListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfVehicleListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfVehicleListDto();
    result.init(json);
    return result;
  }
}

/** 分享信息 Erinyes.CRM.Vehicle */
export class VehicleShareDetailDto {
  /** 物流公司名称 */
  logisticsCompanyName!: string | undefined;
  /** 联系人 */
  linkName!: string | undefined;
  /** 联系电话 */
  phoneNo!: string | undefined;
  /** 地址 */
  address!: string | undefined;
  /** 经营许可证文件 */
  businessLicenseOssFile!: string | undefined;
  /** 道路运输许可证文件 */
  roadTransportLicenseOssFile!: string | undefined;
  /** 车辆编号 */
  vehicleNo!: string | undefined;
  /** 运输企业车牌号 */
  vehicleNum!: string | undefined;
  /** 行驶证许可证文件 */
  drivingLicenseOssFile!: string | undefined;
  /** 车辆道路运输许可证文件 */
  vehicleRoadTransportLicenseOssFile!: string | undefined;
  /** 司机名称 */
  driverName!: string | undefined;
  /** 司机手机号 */
  driverPhone!: string | undefined;
  /** 司机身份证 */
  driverNo!: string | undefined;
  /** 司机身份证文件 */
  driverNoOssFile!: string | undefined;
  /** 司机驾驶证文件 */
  driverLicenseOssFile!: string | undefined;
  /** 司机从业资格证文件 */
  driverQualificationOssFile!: string | undefined;
  /** 押运员名称 */
  supercargoName!: string | undefined;
  /** 押运员手机号 */
  supercargoPhone!: string | undefined;
  /** 押运员身份证 */
  supercargoNo!: string | undefined;
  /** 押运员身份证文件 */
  supercargoNoOssFile!: string | undefined;
  /** 押运员从业资格证文件 */
  supercargoQualificationOssFile!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.logisticsCompanyName = _data['logisticsCompanyName'];
      this.linkName = _data['linkName'];
      this.phoneNo = _data['phoneNo'];
      this.address = _data['address'];
      this.businessLicenseOssFile = _data['businessLicenseOssFile'];
      this.roadTransportLicenseOssFile = _data['roadTransportLicenseOssFile'];
      this.vehicleNo = _data['vehicleNo'];
      this.vehicleNum = _data['vehicleNum'];
      this.drivingLicenseOssFile = _data['drivingLicenseOssFile'];
      this.vehicleRoadTransportLicenseOssFile = _data['vehicleRoadTransportLicenseOssFile'];
      this.driverName = _data['driverName'];
      this.driverPhone = _data['driverPhone'];
      this.driverNo = _data['driverNo'];
      this.driverNoOssFile = _data['driverNoOssFile'];
      this.driverLicenseOssFile = _data['driverLicenseOssFile'];
      this.driverQualificationOssFile = _data['driverQualificationOssFile'];
      this.supercargoName = _data['supercargoName'];
      this.supercargoPhone = _data['supercargoPhone'];
      this.supercargoNo = _data['supercargoNo'];
      this.supercargoNoOssFile = _data['supercargoNoOssFile'];
      this.supercargoQualificationOssFile = _data['supercargoQualificationOssFile'];
    }
  }

  static fromJS(data: any, _mappings?: any): VehicleShareDetailDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<VehicleShareDetailDto>(data, _mappings, VehicleShareDetailDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['logisticsCompanyName'] = this.logisticsCompanyName;
    data['linkName'] = this.linkName;
    data['phoneNo'] = this.phoneNo;
    data['address'] = this.address;
    data['businessLicenseOssFile'] = this.businessLicenseOssFile;
    data['roadTransportLicenseOssFile'] = this.roadTransportLicenseOssFile;
    data['vehicleNo'] = this.vehicleNo;
    data['vehicleNum'] = this.vehicleNum;
    data['drivingLicenseOssFile'] = this.drivingLicenseOssFile;
    data['vehicleRoadTransportLicenseOssFile'] = this.vehicleRoadTransportLicenseOssFile;
    data['driverName'] = this.driverName;
    data['driverPhone'] = this.driverPhone;
    data['driverNo'] = this.driverNo;
    data['driverNoOssFile'] = this.driverNoOssFile;
    data['driverLicenseOssFile'] = this.driverLicenseOssFile;
    data['driverQualificationOssFile'] = this.driverQualificationOssFile;
    data['supercargoName'] = this.supercargoName;
    data['supercargoPhone'] = this.supercargoPhone;
    data['supercargoNo'] = this.supercargoNo;
    data['supercargoNoOssFile'] = this.supercargoNoOssFile;
    data['supercargoQualificationOssFile'] = this.supercargoQualificationOssFile;
    return data;
  }

  clone(): VehicleShareDetailDto {
    const json = this.toJSON();
    let result = new VehicleShareDetailDto();
    result.init(json);
    return result;
  }
}

export class GetLatestWebLogsOutput {
  latestWebLogLines!: string[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['latestWebLogLines'])) {
        this.latestWebLogLines = [] as any;
        for (let item of _data['latestWebLogLines']) this.latestWebLogLines!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetLatestWebLogsOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetLatestWebLogsOutput>(data, _mappings, GetLatestWebLogsOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.latestWebLogLines)) {
      data['latestWebLogLines'] = [];
      for (let item of this.latestWebLogLines) data['latestWebLogLines'].push(item);
    }
    return data;
  }

  clone(): GetLatestWebLogsOutput {
    const json = this.toJSON();
    let result = new GetLatestWebLogsOutput();
    result.init(json);
    return result;
  }
}

export enum WechatAppTypeEnum {
  订阅号 = '订阅号',
  认证订阅号 = '认证订阅号',
  服务号 = '服务号',
  认证服务号 = '认证服务号',
}

export class WechatAppConfigEditDto {
  /** Id */
  id!: number | undefined;
  /** AppId */
  appId!: string | undefined;
  /** AppSecret */
  appSecret!: string | undefined;
  /** Token */
  token!: string | undefined;
  /** EncodingAESKey */
  encodingAESKey!: string | undefined;
  /** 公众号名称 */
  name!: string | undefined;
  /** 公众号原始ID */
  appOrgId!: string | undefined;
  appType!: WechatAppTypeEnum;
  /** QRCodeUrl */
  qrCodeUrl!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.appId = _data['appId'];
      this.appSecret = _data['appSecret'];
      this.token = _data['token'];
      this.encodingAESKey = _data['encodingAESKey'];
      this.name = _data['name'];
      this.appOrgId = _data['appOrgId'];
      this.appType = _data['appType'];
      this.qrCodeUrl = _data['qrCodeUrl'];
    }
  }

  static fromJS(data: any, _mappings?: any): WechatAppConfigEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WechatAppConfigEditDto>(data, _mappings, WechatAppConfigEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['appId'] = this.appId;
    data['appSecret'] = this.appSecret;
    data['token'] = this.token;
    data['encodingAESKey'] = this.encodingAESKey;
    data['name'] = this.name;
    data['appOrgId'] = this.appOrgId;
    data['appType'] = this.appType;
    data['qrCodeUrl'] = this.qrCodeUrl;
    return data;
  }

  clone(): WechatAppConfigEditDto {
    const json = this.toJSON();
    let result = new WechatAppConfigEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateWechatAppConfigInput {
  wechatAppConfig!: WechatAppConfigEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.wechatAppConfig = _data['wechatAppConfig']
        ? WechatAppConfigEditDto.fromJS(_data['wechatAppConfig'], _mappings)
        : new WechatAppConfigEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateWechatAppConfigInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateWechatAppConfigInput>(
      data,
      _mappings,
      CreateOrUpdateWechatAppConfigInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['wechatAppConfig'] = this.wechatAppConfig ? this.wechatAppConfig.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateWechatAppConfigInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateWechatAppConfigInput();
    result.init(json);
    return result;
  }
}

export class WechatAppConfigListDto {
  /** AppId */
  appId!: string | undefined;
  /** 公众号名称 */
  name!: string | undefined;
  appType!: WechatAppTypeEnum;
  /** 公众号类型中文名称 */
  appTypeStr!: string | undefined;
  /** QRCodeUrl */
  qrCodeUrl!: string | undefined;
  /** 已注册到应用冲 */
  registered!: boolean;
  lastModificationTime!: dayjs.Dayjs | undefined;
  lastModifierUserId!: number | undefined;
  creationTime!: dayjs.Dayjs;
  creatorUserId!: number | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.appId = _data['appId'];
      this.name = _data['name'];
      this.appType = _data['appType'];
      this.appTypeStr = _data['appTypeStr'];
      this.qrCodeUrl = _data['qrCodeUrl'];
      this.registered = _data['registered'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.lastModifierUserId = _data['lastModifierUserId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.creatorUserId = _data['creatorUserId'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): WechatAppConfigListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WechatAppConfigListDto>(data, _mappings, WechatAppConfigListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['appId'] = this.appId;
    data['name'] = this.name;
    data['appType'] = this.appType;
    data['appTypeStr'] = this.appTypeStr;
    data['qrCodeUrl'] = this.qrCodeUrl;
    data['registered'] = this.registered;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['lastModifierUserId'] = this.lastModifierUserId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['creatorUserId'] = this.creatorUserId;
    data['id'] = this.id;
    return data;
  }

  clone(): WechatAppConfigListDto {
    const json = this.toJSON();
    let result = new WechatAppConfigListDto();
    result.init(json);
    return result;
  }
}

export class KeyValuePairOfStringInt32 {
  readonly key!: string | undefined;
  readonly value!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      (<any>this).key = _data['key'];
      (<any>this).value = _data['value'];
    }
  }

  static fromJS(data: any, _mappings?: any): KeyValuePairOfStringInt32 | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<KeyValuePairOfStringInt32>(data, _mappings, KeyValuePairOfStringInt32);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['key'] = this.key;
    data['value'] = this.value;
    return data;
  }

  clone(): KeyValuePairOfStringInt32 {
    const json = this.toJSON();
    let result = new KeyValuePairOfStringInt32();
    result.init(json);
    return result;
  }
}

export class GetWechatAppConfigForEditOutput {
  wechatAppConfig!: WechatAppConfigEditDto;
  wechatAppTypeList!: KeyValuePairOfStringInt32[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.wechatAppConfig = _data['wechatAppConfig']
        ? WechatAppConfigEditDto.fromJS(_data['wechatAppConfig'], _mappings)
        : <any>undefined;
      if (Array.isArray(_data['wechatAppTypeList'])) {
        this.wechatAppTypeList = [] as any;
        for (let item of _data['wechatAppTypeList'])
          this.wechatAppTypeList!.push(KeyValuePairOfStringInt32.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetWechatAppConfigForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetWechatAppConfigForEditOutput>(
      data,
      _mappings,
      GetWechatAppConfigForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['wechatAppConfig'] = this.wechatAppConfig ? this.wechatAppConfig.toJSON() : <any>undefined;
    if (Array.isArray(this.wechatAppTypeList)) {
      data['wechatAppTypeList'] = [];
      for (let item of this.wechatAppTypeList) data['wechatAppTypeList'].push(item.toJSON());
    }
    return data;
  }

  clone(): GetWechatAppConfigForEditOutput {
    const json = this.toJSON();
    let result = new GetWechatAppConfigForEditOutput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWechatAppConfigListDto {
  totalCount!: number;
  items!: WechatAppConfigListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WechatAppConfigListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWechatAppConfigListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWechatAppConfigListDto>(
      data,
      _mappings,
      PagedResultDtoOfWechatAppConfigListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWechatAppConfigListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWechatAppConfigListDto();
    result.init(json);
    return result;
  }
}

export class GetImageTextMaterialsInput {
  appId!: string | undefined;
  maxResultCount!: number;
  skipCount!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.appId = _data['appId'];
      this.maxResultCount = _data['maxResultCount'];
      this.skipCount = _data['skipCount'];
    }
  }

  static fromJS(data: any, _mappings?: any): GetImageTextMaterialsInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetImageTextMaterialsInput>(data, _mappings, GetImageTextMaterialsInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['appId'] = this.appId;
    data['maxResultCount'] = this.maxResultCount;
    data['skipCount'] = this.skipCount;
    return data;
  }

  clone(): GetImageTextMaterialsInput {
    const json = this.toJSON();
    let result = new GetImageTextMaterialsInput();
    result.init(json);
    return result;
  }
}

export class Media_News_Content_Item {
  url!: string | undefined;
  thumb_url!: string | undefined;
  thumb_media_id!: string | undefined;
  author!: string | undefined;
  title!: string | undefined;
  content_source_url!: string | undefined;
  content!: string | undefined;
  digest!: string | undefined;
  show_cover_pic!: string | undefined;
  need_open_comment!: number;
  only_fans_can_comment!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.url = _data['url'];
      this.thumb_url = _data['thumb_url'];
      this.thumb_media_id = _data['thumb_media_id'];
      this.author = _data['author'];
      this.title = _data['title'];
      this.content_source_url = _data['content_source_url'];
      this.content = _data['content'];
      this.digest = _data['digest'];
      this.show_cover_pic = _data['show_cover_pic'];
      this.need_open_comment = _data['need_open_comment'];
      this.only_fans_can_comment = _data['only_fans_can_comment'];
    }
  }

  static fromJS(data: any, _mappings?: any): Media_News_Content_Item | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Media_News_Content_Item>(data, _mappings, Media_News_Content_Item);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['url'] = this.url;
    data['thumb_url'] = this.thumb_url;
    data['thumb_media_id'] = this.thumb_media_id;
    data['author'] = this.author;
    data['title'] = this.title;
    data['content_source_url'] = this.content_source_url;
    data['content'] = this.content;
    data['digest'] = this.digest;
    data['show_cover_pic'] = this.show_cover_pic;
    data['need_open_comment'] = this.need_open_comment;
    data['only_fans_can_comment'] = this.only_fans_can_comment;
    return data;
  }

  clone(): Media_News_Content_Item {
    const json = this.toJSON();
    let result = new Media_News_Content_Item();
    result.init(json);
    return result;
  }
}

export class Media_News_Content {
  news_item!: Media_News_Content_Item[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['news_item'])) {
        this.news_item = [] as any;
        for (let item of _data['news_item'])
          this.news_item!.push(Media_News_Content_Item.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): Media_News_Content | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<Media_News_Content>(data, _mappings, Media_News_Content);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.news_item)) {
      data['news_item'] = [];
      for (let item of this.news_item) data['news_item'].push(item.toJSON());
    }
    return data;
  }

  clone(): Media_News_Content {
    const json = this.toJSON();
    let result = new Media_News_Content();
    result.init(json);
    return result;
  }
}

export class MediaList_News_Item {
  media_id!: string | undefined;
  content!: Media_News_Content;
  update_time!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.media_id = _data['media_id'];
      this.content = _data['content']
        ? Media_News_Content.fromJS(_data['content'], _mappings)
        : <any>undefined;
      this.update_time = _data['update_time'];
    }
  }

  static fromJS(data: any, _mappings?: any): MediaList_News_Item | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<MediaList_News_Item>(data, _mappings, MediaList_News_Item);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['media_id'] = this.media_id;
    data['content'] = this.content ? this.content.toJSON() : <any>undefined;
    data['update_time'] = this.update_time;
    return data;
  }

  clone(): MediaList_News_Item {
    const json = this.toJSON();
    let result = new MediaList_News_Item();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfMediaList_News_Item {
  totalCount!: number;
  items!: MediaList_News_Item[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(MediaList_News_Item.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfMediaList_News_Item | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfMediaList_News_Item>(
      data,
      _mappings,
      PagedResultDtoOfMediaList_News_Item,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfMediaList_News_Item {
    const json = this.toJSON();
    let result = new PagedResultDtoOfMediaList_News_Item();
    result.init(json);
    return result;
  }
}

export enum UploadMediaFileType {
  Image = 'image',
  Voice = 'voice',
  Video = 'video',
  Thumb = 'thumb',
  News = 'news',
}

export class GetOtherMaterialsInput {
  appId!: string | undefined;
  materialType!: UploadMediaFileType;
  maxResultCount!: number;
  skipCount!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.appId = _data['appId'];
      this.materialType = _data['materialType'];
      this.maxResultCount = _data['maxResultCount'];
      this.skipCount = _data['skipCount'];
    }
  }

  static fromJS(data: any, _mappings?: any): GetOtherMaterialsInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetOtherMaterialsInput>(data, _mappings, GetOtherMaterialsInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['appId'] = this.appId;
    data['materialType'] = this.materialType;
    data['maxResultCount'] = this.maxResultCount;
    data['skipCount'] = this.skipCount;
    return data;
  }

  clone(): GetOtherMaterialsInput {
    const json = this.toJSON();
    let result = new GetOtherMaterialsInput();
    result.init(json);
    return result;
  }
}

export class MediaList_Others_Item {
  media_id!: string | undefined;
  name!: string | undefined;
  update_time!: number;
  url!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.media_id = _data['media_id'];
      this.name = _data['name'];
      this.update_time = _data['update_time'];
      this.url = _data['url'];
    }
  }

  static fromJS(data: any, _mappings?: any): MediaList_Others_Item | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<MediaList_Others_Item>(data, _mappings, MediaList_Others_Item);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['media_id'] = this.media_id;
    data['name'] = this.name;
    data['update_time'] = this.update_time;
    data['url'] = this.url;
    return data;
  }

  clone(): MediaList_Others_Item {
    const json = this.toJSON();
    let result = new MediaList_Others_Item();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfMediaList_Others_Item {
  totalCount!: number;
  items!: MediaList_Others_Item[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(MediaList_Others_Item.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfMediaList_Others_Item | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfMediaList_Others_Item>(
      data,
      _mappings,
      PagedResultDtoOfMediaList_Others_Item,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfMediaList_Others_Item {
    const json = this.toJSON();
    let result = new PagedResultDtoOfMediaList_Others_Item();
    result.init(json);
    return result;
  }
}

export class NewsInfoItem {
  title!: string | undefined;
  author!: string | undefined;
  digest!: string | undefined;
  show_cover!: number;
  cover_url!: string | undefined;
  content_url!: string | undefined;
  source_url!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.title = _data['title'];
      this.author = _data['author'];
      this.digest = _data['digest'];
      this.show_cover = _data['show_cover'];
      this.cover_url = _data['cover_url'];
      this.content_url = _data['content_url'];
      this.source_url = _data['source_url'];
    }
  }

  static fromJS(data: any, _mappings?: any): NewsInfoItem | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<NewsInfoItem>(data, _mappings, NewsInfoItem);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['title'] = this.title;
    data['author'] = this.author;
    data['digest'] = this.digest;
    data['show_cover'] = this.show_cover;
    data['cover_url'] = this.cover_url;
    data['content_url'] = this.content_url;
    data['source_url'] = this.source_url;
    return data;
  }

  clone(): NewsInfoItem {
    const json = this.toJSON();
    let result = new NewsInfoItem();
    result.init(json);
    return result;
  }
}

export class NewsInfo {
  list!: NewsInfoItem[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      if (Array.isArray(_data['list'])) {
        this.list = [] as any;
        for (let item of _data['list']) this.list!.push(NewsInfoItem.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): NewsInfo | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<NewsInfo>(data, _mappings, NewsInfo);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.list)) {
      data['list'] = [];
      for (let item of this.list) data['list'].push(item.toJSON());
    }
    return data;
  }

  clone(): NewsInfo {
    const json = this.toJSON();
    let result = new NewsInfo();
    result.init(json);
    return result;
  }
}

export class MenuFull_RootButton {
  type!: string | undefined;
  key!: string | undefined;
  name!: string | undefined;
  url!: string | undefined;
  news_info!: NewsInfo;
  appid!: string | undefined;
  pagepath!: string | undefined;
  media_id!: string | undefined;
  sub_button!: MenuFull_RootButton[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.type = _data['type'];
      this.key = _data['key'];
      this.name = _data['name'];
      this.url = _data['url'];
      this.news_info = _data['news_info']
        ? NewsInfo.fromJS(_data['news_info'], _mappings)
        : <any>undefined;
      this.appid = _data['appid'];
      this.pagepath = _data['pagepath'];
      this.media_id = _data['media_id'];
      if (Array.isArray(_data['sub_button'])) {
        this.sub_button = [] as any;
        for (let item of _data['sub_button'])
          this.sub_button!.push(MenuFull_RootButton.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): MenuFull_RootButton | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<MenuFull_RootButton>(data, _mappings, MenuFull_RootButton);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['type'] = this.type;
    data['key'] = this.key;
    data['name'] = this.name;
    data['url'] = this.url;
    data['news_info'] = this.news_info ? this.news_info.toJSON() : <any>undefined;
    data['appid'] = this.appid;
    data['pagepath'] = this.pagepath;
    data['media_id'] = this.media_id;
    if (Array.isArray(this.sub_button)) {
      data['sub_button'] = [];
      for (let item of this.sub_button) data['sub_button'].push(item.toJSON());
    }
    return data;
  }

  clone(): MenuFull_RootButton {
    const json = this.toJSON();
    let result = new MenuFull_RootButton();
    result.init(json);
    return result;
  }
}

export class MenuMatchRule {
  tag_id!: string | undefined;
  group_id!: string | undefined;
  sex!: string | undefined;
  country!: string | undefined;
  province!: string | undefined;
  city!: string | undefined;
  client_platform_type!: string | undefined;
  language!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tag_id = _data['tag_id'];
      this.group_id = _data['group_id'];
      this.sex = _data['sex'];
      this.country = _data['country'];
      this.province = _data['province'];
      this.city = _data['city'];
      this.client_platform_type = _data['client_platform_type'];
      this.language = _data['language'];
    }
  }

  static fromJS(data: any, _mappings?: any): MenuMatchRule | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<MenuMatchRule>(data, _mappings, MenuMatchRule);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tag_id'] = this.tag_id;
    data['group_id'] = this.group_id;
    data['sex'] = this.sex;
    data['country'] = this.country;
    data['province'] = this.province;
    data['city'] = this.city;
    data['client_platform_type'] = this.client_platform_type;
    data['language'] = this.language;
    return data;
  }

  clone(): MenuMatchRule {
    const json = this.toJSON();
    let result = new MenuMatchRule();
    result.init(json);
    return result;
  }
}

/** 创建或编辑菜单 */
export class CreateOrEditWechatMenuInput {
  /** 应用key */
  appId!: string | undefined;
  /** 菜单数据结构 */
  menu!: MenuFull_RootButton[] | undefined;
  matchRule!: MenuMatchRule;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.appId = _data['appId'];
      if (Array.isArray(_data['menu'])) {
        this.menu = [] as any;
        for (let item of _data['menu'])
          this.menu!.push(MenuFull_RootButton.fromJS(item, _mappings));
      }
      this.matchRule = _data['matchRule']
        ? MenuMatchRule.fromJS(_data['matchRule'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrEditWechatMenuInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrEditWechatMenuInput>(
      data,
      _mappings,
      CreateOrEditWechatMenuInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['appId'] = this.appId;
    if (Array.isArray(this.menu)) {
      data['menu'] = [];
      for (let item of this.menu) data['menu'].push(item.toJSON());
    }
    data['matchRule'] = this.matchRule ? this.matchRule.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrEditWechatMenuInput {
    const json = this.toJSON();
    let result = new CreateOrEditWechatMenuInput();
    result.init(json);
    return result;
  }
}

export class GetWechatMenuForEditOutput {
  /** 默认菜单
(单独对象,数据结构参照 MenuFull_ButtonGroup) */
  menu!: any | undefined;
  /** 有个性化菜单时显示。最新的在最前。
(集合 数据结构参照 MenuFull_ConditionalButtonGroup) */
  conditionalmenu!: any | undefined;
  /** 菜单类型 */
  menuTypeList!: KeyValuePairOfStringString[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.menu = _data['menu'];
      this.conditionalmenu = _data['conditionalmenu'];
      if (Array.isArray(_data['menuTypeList'])) {
        this.menuTypeList = [] as any;
        for (let item of _data['menuTypeList'])
          this.menuTypeList!.push(KeyValuePairOfStringString.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): GetWechatMenuForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetWechatMenuForEditOutput>(data, _mappings, GetWechatMenuForEditOutput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['menu'] = this.menu;
    data['conditionalmenu'] = this.conditionalmenu;
    if (Array.isArray(this.menuTypeList)) {
      data['menuTypeList'] = [];
      for (let item of this.menuTypeList) data['menuTypeList'].push(item.toJSON());
    }
    return data;
  }

  clone(): GetWechatMenuForEditOutput {
    const json = this.toJSON();
    let result = new GetWechatMenuForEditOutput();
    result.init(json);
    return result;
  }
}

export class AuthQrModel {
  url!: string | undefined;
  key!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.url = _data['url'];
      this.key = _data['key'];
    }
  }

  static fromJS(data: any, _mappings?: any): AuthQrModel | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AuthQrModel>(data, _mappings, AuthQrModel);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['url'] = this.url;
    data['key'] = this.key;
    return data;
  }

  clone(): AuthQrModel {
    const json = this.toJSON();
    let result = new AuthQrModel();
    result.init(json);
    return result;
  }
}

export class JsSdkUiPackage {
  appId!: string | undefined;
  timestamp!: string | undefined;
  nonceStr!: string | undefined;
  signature!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.appId = _data['appId'];
      this.timestamp = _data['timestamp'];
      this.nonceStr = _data['nonceStr'];
      this.signature = _data['signature'];
    }
  }

  static fromJS(data: any, _mappings?: any): JsSdkUiPackage | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<JsSdkUiPackage>(data, _mappings, JsSdkUiPackage);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['appId'] = this.appId;
    data['timestamp'] = this.timestamp;
    data['nonceStr'] = this.nonceStr;
    data['signature'] = this.signature;
    return data;
  }

  clone(): JsSdkUiPackage {
    const json = this.toJSON();
    let result = new JsSdkUiPackage();
    result.init(json);
    return result;
  }
}

export class BidCapacityInput {
  /** 货单主键 */
  orderBidId!: number | undefined;
  /** 添加或删除，true：添加，false：删除 */
  isAddOrDelete!: boolean;
  /** 运力信息 */
  capacityList!: number[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderBidId = _data['orderBidId'];
      this.isAddOrDelete = _data['isAddOrDelete'];
      if (Array.isArray(_data['capacityList'])) {
        this.capacityList = [] as any;
        for (let item of _data['capacityList']) this.capacityList!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): BidCapacityInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<BidCapacityInput>(data, _mappings, BidCapacityInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderBidId'] = this.orderBidId;
    data['isAddOrDelete'] = this.isAddOrDelete;
    if (Array.isArray(this.capacityList)) {
      data['capacityList'] = [];
      for (let item of this.capacityList) data['capacityList'].push(item);
    }
    return data;
  }

  clone(): BidCapacityInput {
    const json = this.toJSON();
    let result = new BidCapacityInput();
    result.init(json);
    return result;
  }
}

export class WlBaseDriverInput {
  id!: number | undefined;
  /** 姓名 */
  name!: string | undefined;
  /** 手机号 */
  phone!: string | undefined;
  /** 从业资格证 */
  certificate!: string | undefined;
  /** 租户 */
  tenantId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 身份证 */
  idCard!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.name = _data['name'];
      this.phone = _data['phone'];
      this.certificate = _data['certificate'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.idCard = _data['idCard'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseDriverInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseDriverInput>(data, _mappings, WlBaseDriverInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['name'] = this.name;
    data['phone'] = this.phone;
    data['certificate'] = this.certificate;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['idCard'] = this.idCard;
    return data;
  }

  clone(): WlBaseDriverInput {
    const json = this.toJSON();
    let result = new WlBaseDriverInput();
    result.init(json);
    return result;
  }
}

export class WlBaseSupercargoInput {
  id!: number | undefined;
  /** 姓名 */
  name!: string | undefined;
  /** 手机号码 */
  phone!: string | undefined;
  /** 从业资格证 */
  certificate!: string | undefined;
  /** 租户 */
  tenantId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 身份证 */
  idCard!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.name = _data['name'];
      this.phone = _data['phone'];
      this.certificate = _data['certificate'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.idCard = _data['idCard'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseSupercargoInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseSupercargoInput>(data, _mappings, WlBaseSupercargoInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['name'] = this.name;
    data['phone'] = this.phone;
    data['certificate'] = this.certificate;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['idCard'] = this.idCard;
    return data;
  }

  clone(): WlBaseSupercargoInput {
    const json = this.toJSON();
    let result = new WlBaseSupercargoInput();
    result.init(json);
    return result;
  }
}

export class WlBaseVehicleInput {
  id!: number | undefined;
  /** 车牌号 */
  number!: string | undefined;
  /** 保险单 */
  policy!: string | undefined;
  /** 核载能力 */
  capacity!: number | undefined;
  /** 核载能力单位 */
  capacityUnit!: string | undefined;
  /** 车头行驶证 */
  driverLicense!: string | undefined;
  /** 道路运输经营许可证 */
  roadTransportLicense!: string | undefined;
  /** 是否包含挂车 */
  hastrailer!: boolean;
  /** 租户 */
  tenantId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 车型选择 */
  vehicleTypeId!: number | undefined;
  /** 车型选择备注 */
  vehicleRemark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.number = _data['number'];
      this.policy = _data['policy'];
      this.capacity = _data['capacity'];
      this.capacityUnit = _data['capacityUnit'];
      this.driverLicense = _data['driverLicense'];
      this.roadTransportLicense = _data['roadTransportLicense'];
      this.hastrailer = _data['hastrailer'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleRemark = _data['vehicleRemark'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseVehicleInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseVehicleInput>(data, _mappings, WlBaseVehicleInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['number'] = this.number;
    data['policy'] = this.policy;
    data['capacity'] = this.capacity;
    data['capacityUnit'] = this.capacityUnit;
    data['driverLicense'] = this.driverLicense;
    data['roadTransportLicense'] = this.roadTransportLicense;
    data['hastrailer'] = this.hastrailer;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleRemark'] = this.vehicleRemark;
    return data;
  }

  clone(): WlBaseVehicleInput {
    const json = this.toJSON();
    let result = new WlBaseVehicleInput();
    result.init(json);
    return result;
  }
}

export class WlBaseVehicleTrailerInput {
  id!: number | undefined;
  /** 车牌号 */
  number!: string | undefined;
  /** 保险单 */
  policy!: string | undefined;
  /** 车头行驶证 */
  driverLicense!: string | undefined;
  /** 道路运输经营许可证 */
  roadTransportLicense!: string | undefined;
  /** 车型选择 */
  vehicleTypeId!: number | undefined;
  /** 车型选择备注 */
  vehicleRemark!: string | undefined;
  /** 核载能力 */
  capacity!: number | undefined;
  /** 核载能力单位 */
  capacityUnit!: string | undefined;
  /** 租户 */
  tenantId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.number = _data['number'];
      this.policy = _data['policy'];
      this.driverLicense = _data['driverLicense'];
      this.roadTransportLicense = _data['roadTransportLicense'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleRemark = _data['vehicleRemark'];
      this.capacity = _data['capacity'];
      this.capacityUnit = _data['capacityUnit'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseVehicleTrailerInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseVehicleTrailerInput>(data, _mappings, WlBaseVehicleTrailerInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['number'] = this.number;
    data['policy'] = this.policy;
    data['driverLicense'] = this.driverLicense;
    data['roadTransportLicense'] = this.roadTransportLicense;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleRemark'] = this.vehicleRemark;
    data['capacity'] = this.capacity;
    data['capacityUnit'] = this.capacityUnit;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    return data;
  }

  clone(): WlBaseVehicleTrailerInput {
    const json = this.toJSON();
    let result = new WlBaseVehicleTrailerInput();
    result.init(json);
    return result;
  }
}

export class WlCapacity {
  driver!: WlBaseDriverInput;
  supercargo!: WlBaseSupercargoInput;
  vehicle!: WlBaseVehicleInput;
  trailer!: WlBaseVehicleTrailerInput;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.driver = _data['driver']
        ? WlBaseDriverInput.fromJS(_data['driver'], _mappings)
        : <any>undefined;
      this.supercargo = _data['supercargo']
        ? WlBaseSupercargoInput.fromJS(_data['supercargo'], _mappings)
        : <any>undefined;
      this.vehicle = _data['vehicle']
        ? WlBaseVehicleInput.fromJS(_data['vehicle'], _mappings)
        : <any>undefined;
      this.trailer = _data['trailer']
        ? WlBaseVehicleTrailerInput.fromJS(_data['trailer'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): WlCapacity | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlCapacity>(data, _mappings, WlCapacity);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    data['supercargo'] = this.supercargo ? this.supercargo.toJSON() : <any>undefined;
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    data['trailer'] = this.trailer ? this.trailer.toJSON() : <any>undefined;
    return data;
  }

  clone(): WlCapacity {
    const json = this.toJSON();
    let result = new WlCapacity();
    result.init(json);
    return result;
  }
}

export class WlOrderBidingInput {
  /** 货单主键 */
  orderId!: number | undefined;
  /** 运力信息 */
  capacityList!: WlCapacity[] | undefined;
  token!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
      if (Array.isArray(_data['capacityList'])) {
        this.capacityList = [] as any;
        for (let item of _data['capacityList'])
          this.capacityList!.push(WlCapacity.fromJS(item, _mappings));
      }
      this.token = _data['token'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderBidingInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderBidingInput>(data, _mappings, WlOrderBidingInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    if (Array.isArray(this.capacityList)) {
      data['capacityList'] = [];
      for (let item of this.capacityList) data['capacityList'].push(item.toJSON());
    }
    data['token'] = this.token;
    return data;
  }

  clone(): WlOrderBidingInput {
    const json = this.toJSON();
    let result = new WlOrderBidingInput();
    result.init(json);
    return result;
  }
}

export class AddCapacity_Vehicle {
  /** 车牌号 */
  number!: string | undefined;
  /** 保险单 */
  policy!: string | undefined;
  /** 车头行驶证 */
  driverLicense!: string | undefined;
  /** 核载能力 */
  capacity!: number | undefined;
  /** 核载能力单位 */
  capacityUnit!: string | undefined;
  /** 道路运输经营许可证 */
  roadTransportLicense!: string | undefined;
  /** 是否包含挂车 true:车头  false:整车 */
  hastrailer!: boolean;
  /** 车型选择 */
  vehicleTypeId!: number | undefined;
  /** 车型选择备注 */
  vehicleRemark!: string | undefined;
  /** GPS ID */
  carId!: number | undefined;
  /** 报废日期 */
  scrapDate!: dayjs.Dayjs | undefined;
  /** 年审有效期 */
  annualReviewValidityDate!: dayjs.Dayjs | undefined;
  /** 道路资质有效期 */
  roadQualificationValidityDate!: dayjs.Dayjs | undefined;
  /** 行驶证有效期 */
  drivingLicenseValidityDate!: dayjs.Dayjs | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.number = _data['number'];
      this.policy = _data['policy'];
      this.driverLicense = _data['driverLicense'];
      this.capacity = _data['capacity'];
      this.capacityUnit = _data['capacityUnit'];
      this.roadTransportLicense = _data['roadTransportLicense'];
      this.hastrailer = _data['hastrailer'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleRemark = _data['vehicleRemark'];
      this.carId = _data['carId'];
      this.scrapDate = _data['scrapDate'] ? dayjs(_data['scrapDate'].toString()) : <any>undefined;
      this.annualReviewValidityDate = _data['annualReviewValidityDate']
        ? dayjs(_data['annualReviewValidityDate'].toString())
        : <any>undefined;
      this.roadQualificationValidityDate = _data['roadQualificationValidityDate']
        ? dayjs(_data['roadQualificationValidityDate'].toString())
        : <any>undefined;
      this.drivingLicenseValidityDate = _data['drivingLicenseValidityDate']
        ? dayjs(_data['drivingLicenseValidityDate'].toString())
        : <any>undefined;
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): AddCapacity_Vehicle | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AddCapacity_Vehicle>(data, _mappings, AddCapacity_Vehicle);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['number'] = this.number;
    data['policy'] = this.policy;
    data['driverLicense'] = this.driverLicense;
    data['capacity'] = this.capacity;
    data['capacityUnit'] = this.capacityUnit;
    data['roadTransportLicense'] = this.roadTransportLicense;
    data['hastrailer'] = this.hastrailer;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleRemark'] = this.vehicleRemark;
    data['carId'] = this.carId;
    data['scrapDate'] = this.scrapDate ? this.scrapDate.toISOString() : <any>undefined;
    data['annualReviewValidityDate'] = this.annualReviewValidityDate
      ? this.annualReviewValidityDate.toISOString()
      : <any>undefined;
    data['roadQualificationValidityDate'] = this.roadQualificationValidityDate
      ? this.roadQualificationValidityDate.toISOString()
      : <any>undefined;
    data['drivingLicenseValidityDate'] = this.drivingLicenseValidityDate
      ? this.drivingLicenseValidityDate.toISOString()
      : <any>undefined;
    data['remark'] = this.remark;
    return data;
  }

  clone(): AddCapacity_Vehicle {
    const json = this.toJSON();
    let result = new AddCapacity_Vehicle();
    result.init(json);
    return result;
  }
}

export class AddCapacity_VehicleTrailer {
  /** 车牌号 */
  number!: string | undefined;
  /** 保险单 */
  policy!: string | undefined;
  /** 车头行驶证 */
  driverLicense!: string | undefined;
  /** 道路运输经营许可证 */
  roadTransportLicense!: string | undefined;
  /** 车型选择 */
  vehicleTypeId!: number | undefined;
  /** 车型选择备注 */
  vehicleRemark!: string | undefined;
  /** 核载能力 */
  capacity!: number | undefined;
  /** 核载能力单位 */
  capacityUnit!: string | undefined;
  /** 报废日期 */
  scrapDate!: dayjs.Dayjs | undefined;
  /** 年审有效期 */
  annualReviewValidityDate!: dayjs.Dayjs | undefined;
  /** 道路资质有效期 */
  roadQualificationValidityDate!: dayjs.Dayjs | undefined;
  /** 行驶证有效期 */
  drivingLicenseValidityDate!: dayjs.Dayjs | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.number = _data['number'];
      this.policy = _data['policy'];
      this.driverLicense = _data['driverLicense'];
      this.roadTransportLicense = _data['roadTransportLicense'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleRemark = _data['vehicleRemark'];
      this.capacity = _data['capacity'];
      this.capacityUnit = _data['capacityUnit'];
      this.scrapDate = _data['scrapDate'] ? dayjs(_data['scrapDate'].toString()) : <any>undefined;
      this.annualReviewValidityDate = _data['annualReviewValidityDate']
        ? dayjs(_data['annualReviewValidityDate'].toString())
        : <any>undefined;
      this.roadQualificationValidityDate = _data['roadQualificationValidityDate']
        ? dayjs(_data['roadQualificationValidityDate'].toString())
        : <any>undefined;
      this.drivingLicenseValidityDate = _data['drivingLicenseValidityDate']
        ? dayjs(_data['drivingLicenseValidityDate'].toString())
        : <any>undefined;
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): AddCapacity_VehicleTrailer | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AddCapacity_VehicleTrailer>(data, _mappings, AddCapacity_VehicleTrailer);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['number'] = this.number;
    data['policy'] = this.policy;
    data['driverLicense'] = this.driverLicense;
    data['roadTransportLicense'] = this.roadTransportLicense;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleRemark'] = this.vehicleRemark;
    data['capacity'] = this.capacity;
    data['capacityUnit'] = this.capacityUnit;
    data['scrapDate'] = this.scrapDate ? this.scrapDate.toISOString() : <any>undefined;
    data['annualReviewValidityDate'] = this.annualReviewValidityDate
      ? this.annualReviewValidityDate.toISOString()
      : <any>undefined;
    data['roadQualificationValidityDate'] = this.roadQualificationValidityDate
      ? this.roadQualificationValidityDate.toISOString()
      : <any>undefined;
    data['drivingLicenseValidityDate'] = this.drivingLicenseValidityDate
      ? this.drivingLicenseValidityDate.toISOString()
      : <any>undefined;
    data['remark'] = this.remark;
    return data;
  }

  clone(): AddCapacity_VehicleTrailer {
    const json = this.toJSON();
    let result = new AddCapacity_VehicleTrailer();
    result.init(json);
    return result;
  }
}

export class AddCapacity_Driver {
  /** 姓名 */
  name!: string | undefined;
  /** 手机号 */
  phone!: string | undefined;
  /** 从业资格证 */
  certificate!: string | undefined;
  /** 身份证 */
  idCard!: string | undefined;
  /** 司机的UserId */
  driverUserId!: number | undefined;
  /** 从业资格证有效期 */
  qualificationCertificateDate!: dayjs.Dayjs | undefined;
  /** 驾驶证有效期 */
  driversLicenseDate!: dayjs.Dayjs | undefined;
  /** 是否已离职：在职:false 离职:true */
  leave!: boolean;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.phone = _data['phone'];
      this.certificate = _data['certificate'];
      this.idCard = _data['idCard'];
      this.driverUserId = _data['driverUserId'];
      this.qualificationCertificateDate = _data['qualificationCertificateDate']
        ? dayjs(_data['qualificationCertificateDate'].toString())
        : <any>undefined;
      this.driversLicenseDate = _data['driversLicenseDate']
        ? dayjs(_data['driversLicenseDate'].toString())
        : <any>undefined;
      this.leave = _data['leave'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): AddCapacity_Driver | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AddCapacity_Driver>(data, _mappings, AddCapacity_Driver);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['phone'] = this.phone;
    data['certificate'] = this.certificate;
    data['idCard'] = this.idCard;
    data['driverUserId'] = this.driverUserId;
    data['qualificationCertificateDate'] = this.qualificationCertificateDate
      ? this.qualificationCertificateDate.toISOString()
      : <any>undefined;
    data['driversLicenseDate'] = this.driversLicenseDate
      ? this.driversLicenseDate.toISOString()
      : <any>undefined;
    data['leave'] = this.leave;
    data['remark'] = this.remark;
    return data;
  }

  clone(): AddCapacity_Driver {
    const json = this.toJSON();
    let result = new AddCapacity_Driver();
    result.init(json);
    return result;
  }
}

export class AddCapacity_Supercargo {
  /** 姓名 */
  name!: string | undefined;
  /** 手机号码 */
  phone!: string | undefined;
  /** 从业资格证 */
  certificate!: string | undefined;
  /** 身份证 */
  idCard!: string | undefined;
  /** 从业资格证有效期 */
  qualificationCertificateDate!: dayjs.Dayjs | undefined;
  /** 驾驶证有效期 */
  driversLicenseDate!: dayjs.Dayjs | undefined;
  /** 是否已离职：在职:false 离职:true */
  leave!: boolean;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.phone = _data['phone'];
      this.certificate = _data['certificate'];
      this.idCard = _data['idCard'];
      this.qualificationCertificateDate = _data['qualificationCertificateDate']
        ? dayjs(_data['qualificationCertificateDate'].toString())
        : <any>undefined;
      this.driversLicenseDate = _data['driversLicenseDate']
        ? dayjs(_data['driversLicenseDate'].toString())
        : <any>undefined;
      this.leave = _data['leave'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): AddCapacity_Supercargo | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AddCapacity_Supercargo>(data, _mappings, AddCapacity_Supercargo);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['phone'] = this.phone;
    data['certificate'] = this.certificate;
    data['idCard'] = this.idCard;
    data['qualificationCertificateDate'] = this.qualificationCertificateDate
      ? this.qualificationCertificateDate.toISOString()
      : <any>undefined;
    data['driversLicenseDate'] = this.driversLicenseDate
      ? this.driversLicenseDate.toISOString()
      : <any>undefined;
    data['leave'] = this.leave;
    data['remark'] = this.remark;
    return data;
  }

  clone(): AddCapacity_Supercargo {
    const json = this.toJSON();
    let result = new AddCapacity_Supercargo();
    result.init(json);
    return result;
  }
}

export class AddCapacityFastInput {
  tenantId!: number | undefined;
  vehicle!: AddCapacity_Vehicle;
  vehicleTrailer!: AddCapacity_VehicleTrailer;
  driver!: AddCapacity_Driver;
  supercargo!: AddCapacity_Supercargo;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      this.vehicle = _data['vehicle']
        ? AddCapacity_Vehicle.fromJS(_data['vehicle'], _mappings)
        : <any>undefined;
      this.vehicleTrailer = _data['vehicleTrailer']
        ? AddCapacity_VehicleTrailer.fromJS(_data['vehicleTrailer'], _mappings)
        : <any>undefined;
      this.driver = _data['driver']
        ? AddCapacity_Driver.fromJS(_data['driver'], _mappings)
        : <any>undefined;
      this.supercargo = _data['supercargo']
        ? AddCapacity_Supercargo.fromJS(_data['supercargo'], _mappings)
        : <any>undefined;
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): AddCapacityFastInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AddCapacityFastInput>(data, _mappings, AddCapacityFastInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    data['vehicleTrailer'] = this.vehicleTrailer ? this.vehicleTrailer.toJSON() : <any>undefined;
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    data['supercargo'] = this.supercargo ? this.supercargo.toJSON() : <any>undefined;
    data['remark'] = this.remark;
    return data;
  }

  clone(): AddCapacityFastInput {
    const json = this.toJSON();
    let result = new AddCapacityFastInput();
    result.init(json);
    return result;
  }
}

export class AdjustOriginalPriceInput {
  /** 货单ID */
  orderId!: number;
  /** 原始价格 */
  originalPrice!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
      this.originalPrice = _data['originalPrice'];
    }
  }

  static fromJS(data: any, _mappings?: any): AdjustOriginalPriceInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AdjustOriginalPriceInput>(data, _mappings, AdjustOriginalPriceInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    data['originalPrice'] = this.originalPrice;
    return data;
  }

  clone(): AdjustOriginalPriceInput {
    const json = this.toJSON();
    let result = new AdjustOriginalPriceInput();
    result.init(json);
    return result;
  }
}

export class AdjustPriceInput {
  /** 货单ID */
  orderId!: number;
  /** 价差类型 */
  priceDiffTypeID!: number | undefined;
  /** 价差 */
  priceDifference!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
      this.priceDiffTypeID = _data['priceDiffTypeID'];
      this.priceDifference = _data['priceDifference'];
    }
  }

  static fromJS(data: any, _mappings?: any): AdjustPriceInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AdjustPriceInput>(data, _mappings, AdjustPriceInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    data['priceDiffTypeID'] = this.priceDiffTypeID;
    data['priceDifference'] = this.priceDifference;
    return data;
  }

  clone(): AdjustPriceInput {
    const json = this.toJSON();
    let result = new AdjustPriceInput();
    result.init(json);
    return result;
  }
}

export class BatchDeleteWlOrderPushDto {
  orderId!: number;
  wlTenantIds!: number[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
      if (Array.isArray(_data['wlTenantIds'])) {
        this.wlTenantIds = [] as any;
        for (let item of _data['wlTenantIds']) this.wlTenantIds!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): BatchDeleteWlOrderPushDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<BatchDeleteWlOrderPushDto>(data, _mappings, BatchDeleteWlOrderPushDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    if (Array.isArray(this.wlTenantIds)) {
      data['wlTenantIds'] = [];
      for (let item of this.wlTenantIds) data['wlTenantIds'].push(item);
    }
    return data;
  }

  clone(): BatchDeleteWlOrderPushDto {
    const json = this.toJSON();
    let result = new BatchDeleteWlOrderPushDto();
    result.init(json);
    return result;
  }
}

export class WlOrderWasteEditDto {
  id!: number | undefined;
  /** 询价主键 */
  orderId!: number | undefined;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 运输重量 */
  transportWeight!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 包装方式 */
  packagings!: string | undefined;
  /** 包装方式 */
  packagingId!: number | undefined;
  /** 包装方式备注 */
  packRemark!: string | undefined;
  /** 租户 */
  tenantId!: number | undefined;
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.orderId = _data['orderId'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.transportWeight = _data['transportWeight'];
      this.unit = _data['unit'];
      this.packagings = _data['packagings'];
      this.packagingId = _data['packagingId'];
      this.packRemark = _data['packRemark'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderWasteEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderWasteEditDto>(data, _mappings, WlOrderWasteEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['orderId'] = this.orderId;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['transportWeight'] = this.transportWeight;
    data['unit'] = this.unit;
    data['packagings'] = this.packagings;
    data['packagingId'] = this.packagingId;
    data['packRemark'] = this.packRemark;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    return data;
  }

  clone(): WlOrderWasteEditDto {
    const json = this.toJSON();
    let result = new WlOrderWasteEditDto();
    result.init(json);
    return result;
  }
}

/** 货单的列表DTO Erinyes.Logistics.WlOrderForm */
export class WlOrderFormEditDto {
  /** Id */
  id!: number | undefined;
  /** 询价单ID */
  quoteId!: number | undefined;
  /** 单号 */
  orderCode!: string | undefined;
  /** 装货企业 */
  senderEntname!: string | undefined;
  /** 装货行政区 */
  senderCantonCode!: string | undefined;
  /** 装货地址 */
  senderAddress!: string | undefined;
  /** 卸货企业 */
  receiverEntname!: string | undefined;
  /** 卸货行政区 */
  receiverCantonCode!: string | undefined;
  /** 卸货地址 */
  receiverAddress!: string | undefined;
  /** 装货联系人 */
  senderName!: string | undefined;
  /** 装货联系手机 */
  senderPhone!: string | undefined;
  /** 卸货联系人 */
  receiverName!: string | undefined;
  /** 卸货联系手机 */
  receiverPhone!: string | undefined;
  /** 装货时间 */
  shippingTime!: dayjs.Dayjs | undefined;
  /** 运输一口价 */
  transportPrice!: number | undefined;
  /** 车辆类型 */
  vehicleTypeId!: number | undefined;
  /** 车辆类型备注 */
  vehicleTypeRemark!: string | undefined;
  /** 需求内容 */
  content!: string | undefined;
  /** 发布时间 */
  publishTime!: dayjs.Dayjs | undefined;
  /** 审核状态，0：未审核，1：审核通过，2：审核不通过 */
  formState!: number | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 单据状态 */
  orderState!: number | undefined;
  /** 货单发布时间 */
  transportTime!: dayjs.Dayjs | undefined;
  /** 货单明细 */
  wlOrderWastes!: WlOrderWasteEditDto[] | undefined;
  /** 备注 */
  remark!: string | undefined;
  approveComment!: string | undefined;
  senderCantonCodeFull!: string | undefined;
  receiverCantonCodeFull!: string | undefined;
  approveTime!: dayjs.Dayjs | undefined;
  /** 租户 */
  tenantId!: number | undefined;
  creatorUserId!: number | undefined;
  /** 装货企业Id */
  senderEntId!: number | undefined;
  /** 需求车数 */
  needVehicleNumber!: number;
  /** 货单结算方式 */
  accountTypeId!: number | undefined;
  /** 是否超时，ture：超时，false：没超时 */
  isTimeout!: boolean;
  /** 装货企业经度 */
  longitudeSender!: number | undefined;
  /** 装货企业纬度 */
  latitudeSender!: number | undefined;
  /** 卸货企业经度 */
  longitudeReceiver!: number | undefined;
  /** 卸货企业纬度 */
  latitudeReceiver!: number | undefined;
  /** 货单类型，0：普通货单，1：专车单 */
  orderType!: number;
  /** 距离，公里数 */
  distanceKilometers!: number | undefined;
  /** 计价方式，0：一口价，1：单价 */
  valuationType!: number;
  /** 单价价格 */
  unitPrice!: number | undefined;
  /** 单价单位 */
  unit!: string | undefined;
  /** 专车单状态，0：以保存，1：已发布，2：已推送 */
  specialOrderStatus!: number | undefined;
  /** 是否释放专车单到物流企业公共池，false：不释放，true：释放 */
  isSpecialOrderReleased!: boolean | undefined;
  /** 记录货单完成状态的时间 */
  completeTime!: dayjs.Dayjs | undefined;
  /** 价格是否审核，false：未审核，true：已审核 */
  priceApproved!: boolean;
  /** 价差类型 */
  priceDiffTypeID!: number | undefined;
  /** 价差 */
  priceDifference!: number | undefined;
  /** 最终显示价格 */
  finalPrice!: number | undefined;
  /** 是否是 兰陵万里 的货单，false：不是，true：是 */
  isBelongLLWL!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.quoteId = _data['quoteId'];
      this.orderCode = _data['orderCode'];
      this.senderEntname = _data['senderEntname'];
      this.senderCantonCode = _data['senderCantonCode'];
      this.senderAddress = _data['senderAddress'];
      this.receiverEntname = _data['receiverEntname'];
      this.receiverCantonCode = _data['receiverCantonCode'];
      this.receiverAddress = _data['receiverAddress'];
      this.senderName = _data['senderName'];
      this.senderPhone = _data['senderPhone'];
      this.receiverName = _data['receiverName'];
      this.receiverPhone = _data['receiverPhone'];
      this.shippingTime = _data['shippingTime']
        ? dayjs(_data['shippingTime'].toString())
        : <any>undefined;
      this.transportPrice = _data['transportPrice'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleTypeRemark = _data['vehicleTypeRemark'];
      this.content = _data['content'];
      this.publishTime = _data['publishTime']
        ? dayjs(_data['publishTime'].toString())
        : <any>undefined;
      this.formState = _data['formState'];
      this.sysUserId = _data['sysUserId'];
      this.orderState = _data['orderState'];
      this.transportTime = _data['transportTime']
        ? dayjs(_data['transportTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['wlOrderWastes'])) {
        this.wlOrderWastes = [] as any;
        for (let item of _data['wlOrderWastes'])
          this.wlOrderWastes!.push(WlOrderWasteEditDto.fromJS(item, _mappings));
      }
      this.remark = _data['remark'];
      this.approveComment = _data['approveComment'];
      this.senderCantonCodeFull = _data['senderCantonCodeFull'];
      this.receiverCantonCodeFull = _data['receiverCantonCodeFull'];
      this.approveTime = _data['approveTime']
        ? dayjs(_data['approveTime'].toString())
        : <any>undefined;
      this.tenantId = _data['tenantId'];
      this.creatorUserId = _data['creatorUserId'];
      this.senderEntId = _data['senderEntId'];
      this.needVehicleNumber = _data['needVehicleNumber'];
      this.accountTypeId = _data['accountTypeId'];
      this.isTimeout = _data['isTimeout'];
      this.longitudeSender = _data['longitudeSender'];
      this.latitudeSender = _data['latitudeSender'];
      this.longitudeReceiver = _data['longitudeReceiver'];
      this.latitudeReceiver = _data['latitudeReceiver'];
      this.orderType = _data['orderType'];
      this.distanceKilometers = _data['distanceKilometers'];
      this.valuationType = _data['valuationType'];
      this.unitPrice = _data['unitPrice'];
      this.unit = _data['unit'];
      this.specialOrderStatus = _data['specialOrderStatus'];
      this.isSpecialOrderReleased = _data['isSpecialOrderReleased'];
      this.completeTime = _data['completeTime']
        ? dayjs(_data['completeTime'].toString())
        : <any>undefined;
      this.priceApproved = _data['priceApproved'];
      this.priceDiffTypeID = _data['priceDiffTypeID'];
      this.priceDifference = _data['priceDifference'];
      this.finalPrice = _data['finalPrice'];
      this.isBelongLLWL = _data['isBelongLLWL'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderFormEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderFormEditDto>(data, _mappings, WlOrderFormEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['quoteId'] = this.quoteId;
    data['orderCode'] = this.orderCode;
    data['senderEntname'] = this.senderEntname;
    data['senderCantonCode'] = this.senderCantonCode;
    data['senderAddress'] = this.senderAddress;
    data['receiverEntname'] = this.receiverEntname;
    data['receiverCantonCode'] = this.receiverCantonCode;
    data['receiverAddress'] = this.receiverAddress;
    data['senderName'] = this.senderName;
    data['senderPhone'] = this.senderPhone;
    data['receiverName'] = this.receiverName;
    data['receiverPhone'] = this.receiverPhone;
    data['shippingTime'] = this.shippingTime ? this.shippingTime.toISOString() : <any>undefined;
    data['transportPrice'] = this.transportPrice;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleTypeRemark'] = this.vehicleTypeRemark;
    data['content'] = this.content;
    data['publishTime'] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
    data['formState'] = this.formState;
    data['sysUserId'] = this.sysUserId;
    data['orderState'] = this.orderState;
    data['transportTime'] = this.transportTime ? this.transportTime.toISOString() : <any>undefined;
    if (Array.isArray(this.wlOrderWastes)) {
      data['wlOrderWastes'] = [];
      for (let item of this.wlOrderWastes) data['wlOrderWastes'].push(item.toJSON());
    }
    data['remark'] = this.remark;
    data['approveComment'] = this.approveComment;
    data['senderCantonCodeFull'] = this.senderCantonCodeFull;
    data['receiverCantonCodeFull'] = this.receiverCantonCodeFull;
    data['approveTime'] = this.approveTime ? this.approveTime.toISOString() : <any>undefined;
    data['tenantId'] = this.tenantId;
    data['creatorUserId'] = this.creatorUserId;
    data['senderEntId'] = this.senderEntId;
    data['needVehicleNumber'] = this.needVehicleNumber;
    data['accountTypeId'] = this.accountTypeId;
    data['isTimeout'] = this.isTimeout;
    data['longitudeSender'] = this.longitudeSender;
    data['latitudeSender'] = this.latitudeSender;
    data['longitudeReceiver'] = this.longitudeReceiver;
    data['latitudeReceiver'] = this.latitudeReceiver;
    data['orderType'] = this.orderType;
    data['distanceKilometers'] = this.distanceKilometers;
    data['valuationType'] = this.valuationType;
    data['unitPrice'] = this.unitPrice;
    data['unit'] = this.unit;
    data['specialOrderStatus'] = this.specialOrderStatus;
    data['isSpecialOrderReleased'] = this.isSpecialOrderReleased;
    data['completeTime'] = this.completeTime ? this.completeTime.toISOString() : <any>undefined;
    data['priceApproved'] = this.priceApproved;
    data['priceDiffTypeID'] = this.priceDiffTypeID;
    data['priceDifference'] = this.priceDifference;
    data['finalPrice'] = this.finalPrice;
    data['isBelongLLWL'] = this.isBelongLLWL;
    return data;
  }

  clone(): WlOrderFormEditDto {
    const json = this.toJSON();
    let result = new WlOrderFormEditDto();
    result.init(json);
    return result;
  }
}

export class CreateOrUpdateWlOrderFormInput {
  wlOrderForm!: WlOrderFormEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.wlOrderForm = _data['wlOrderForm']
        ? WlOrderFormEditDto.fromJS(_data['wlOrderForm'], _mappings)
        : new WlOrderFormEditDto();
    }
  }

  static fromJS(data: any, _mappings?: any): CreateOrUpdateWlOrderFormInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CreateOrUpdateWlOrderFormInput>(
      data,
      _mappings,
      CreateOrUpdateWlOrderFormInput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['wlOrderForm'] = this.wlOrderForm ? this.wlOrderForm.toJSON() : <any>undefined;
    return data;
  }

  clone(): CreateOrUpdateWlOrderFormInput {
    const json = this.toJSON();
    let result = new CreateOrUpdateWlOrderFormInput();
    result.init(json);
    return result;
  }
}

export class WlOrderBidEditDto {
  id!: number | undefined;
  /** 货单主键 */
  orderId!: number | undefined;
  /** 抢单状态 */
  bidState!: number | undefined;
  /** 运力主键列表 */
  capacityIds!: number[] | undefined;
  /** 租户 */
  tenantId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.orderId = _data['orderId'];
      this.bidState = _data['bidState'];
      if (Array.isArray(_data['capacityIds'])) {
        this.capacityIds = [] as any;
        for (let item of _data['capacityIds']) this.capacityIds!.push(item);
      }
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderBidEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderBidEditDto>(data, _mappings, WlOrderBidEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['orderId'] = this.orderId;
    data['bidState'] = this.bidState;
    if (Array.isArray(this.capacityIds)) {
      data['capacityIds'] = [];
      for (let item of this.capacityIds) data['capacityIds'].push(item);
    }
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    return data;
  }

  clone(): WlOrderBidEditDto {
    const json = this.toJSON();
    let result = new WlOrderBidEditDto();
    result.init(json);
    return result;
  }
}

export class WlOrderFollowEditDto {
  id!: number | undefined;
  /** 货单主键 */
  orderId!: number | undefined;
  /** 车次主键 */
  transportInfoId!: number | undefined;
  /** 跟进类型，0：货单，1：车单 */
  followType!: number;
  /** 标签 */
  tags!: string | undefined;
  /** 内容 */
  content!: string | undefined;
  /** 附件 */
  attachment!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.orderId = _data['orderId'];
      this.transportInfoId = _data['transportInfoId'];
      this.followType = _data['followType'];
      this.tags = _data['tags'];
      this.content = _data['content'];
      this.attachment = _data['attachment'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderFollowEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderFollowEditDto>(data, _mappings, WlOrderFollowEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['orderId'] = this.orderId;
    data['transportInfoId'] = this.transportInfoId;
    data['followType'] = this.followType;
    data['tags'] = this.tags;
    data['content'] = this.content;
    data['attachment'] = this.attachment;
    return data;
  }

  clone(): WlOrderFollowEditDto {
    const json = this.toJSON();
    let result = new WlOrderFollowEditDto();
    result.init(json);
    return result;
  }
}

export class WlQuoteWasteEditDto {
  id!: number | undefined;
  /** 询价主键 */
  quoteId!: number | undefined;
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 运输重量 */
  transportWeight!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 包装方式 */
  packagings!: string | undefined;
  /** 包装方式 */
  packagingId!: number | undefined;
  /** 包装方式备注 */
  packRemark!: string | undefined;
  /** 租户 */
  tenantId!: number | undefined;
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.quoteId = _data['quoteId'];
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.transportWeight = _data['transportWeight'];
      this.unit = _data['unit'];
      this.packagings = _data['packagings'];
      this.packagingId = _data['packagingId'];
      this.packRemark = _data['packRemark'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlQuoteWasteEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlQuoteWasteEditDto>(data, _mappings, WlQuoteWasteEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['quoteId'] = this.quoteId;
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['transportWeight'] = this.transportWeight;
    data['unit'] = this.unit;
    data['packagings'] = this.packagings;
    data['packagingId'] = this.packagingId;
    data['packRemark'] = this.packRemark;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    return data;
  }

  clone(): WlQuoteWasteEditDto {
    const json = this.toJSON();
    let result = new WlQuoteWasteEditDto();
    result.init(json);
    return result;
  }
}

export class WlQuoteFormInput {
  id!: number | undefined;
  tenantId!: number;
  /** 单号 */
  quoteCode!: string | undefined;
  /** 装货企业 */
  senderEntname!: string | undefined;
  /** 装货企业Id */
  senderEntId!: number | undefined;
  /** 装货行政区 */
  senderCantonCode!: string | undefined;
  /** 装货地址 */
  senderAddress!: string | undefined;
  /** 卸货企业 */
  receiverEntname!: string | undefined;
  /** 卸货行政区 */
  receiverCantonCode!: string | undefined;
  /** 卸货地址 */
  receiverAddress!: string | undefined;
  /** 装货联系人 */
  senderName!: string | undefined;
  /** 装货联系手机 */
  senderPhone!: string | undefined;
  /** 卸货联系人 */
  receiverName!: string | undefined;
  /** 卸货联系手机 */
  receiverPhone!: string | undefined;
  /** 装货时间 */
  shippingTime!: dayjs.Dayjs | undefined;
  /** 确认报价状态，1：询价中，2：已报价 */
  quoteState!: number | undefined;
  /** 车辆类型 */
  vehicleTypeId!: number | undefined;
  /** 车辆类型备注 */
  vehicleTypeRemark!: string | undefined;
  /** 平台第三方发布 */
  senderCantonCodeFull!: string | undefined;
  receiverCantonCodeFull!: string | undefined;
  wlQuoteWastes!: WlQuoteWasteEditDto[] | undefined;
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.tenantId = _data['tenantId'];
      this.quoteCode = _data['quoteCode'];
      this.senderEntname = _data['senderEntname'];
      this.senderEntId = _data['senderEntId'];
      this.senderCantonCode = _data['senderCantonCode'];
      this.senderAddress = _data['senderAddress'];
      this.receiverEntname = _data['receiverEntname'];
      this.receiverCantonCode = _data['receiverCantonCode'];
      this.receiverAddress = _data['receiverAddress'];
      this.senderName = _data['senderName'];
      this.senderPhone = _data['senderPhone'];
      this.receiverName = _data['receiverName'];
      this.receiverPhone = _data['receiverPhone'];
      this.shippingTime = _data['shippingTime']
        ? dayjs(_data['shippingTime'].toString())
        : <any>undefined;
      this.quoteState = _data['quoteState'];
      this.vehicleTypeId = _data['vehicleTypeId'];
      this.vehicleTypeRemark = _data['vehicleTypeRemark'];
      this.senderCantonCodeFull = _data['senderCantonCodeFull'];
      this.receiverCantonCodeFull = _data['receiverCantonCodeFull'];
      if (Array.isArray(_data['wlQuoteWastes'])) {
        this.wlQuoteWastes = [] as any;
        for (let item of _data['wlQuoteWastes'])
          this.wlQuoteWastes!.push(WlQuoteWasteEditDto.fromJS(item, _mappings));
      }
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlQuoteFormInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlQuoteFormInput>(data, _mappings, WlQuoteFormInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['tenantId'] = this.tenantId;
    data['quoteCode'] = this.quoteCode;
    data['senderEntname'] = this.senderEntname;
    data['senderEntId'] = this.senderEntId;
    data['senderCantonCode'] = this.senderCantonCode;
    data['senderAddress'] = this.senderAddress;
    data['receiverEntname'] = this.receiverEntname;
    data['receiverCantonCode'] = this.receiverCantonCode;
    data['receiverAddress'] = this.receiverAddress;
    data['senderName'] = this.senderName;
    data['senderPhone'] = this.senderPhone;
    data['receiverName'] = this.receiverName;
    data['receiverPhone'] = this.receiverPhone;
    data['shippingTime'] = this.shippingTime ? this.shippingTime.toISOString() : <any>undefined;
    data['quoteState'] = this.quoteState;
    data['vehicleTypeId'] = this.vehicleTypeId;
    data['vehicleTypeRemark'] = this.vehicleTypeRemark;
    data['senderCantonCodeFull'] = this.senderCantonCodeFull;
    data['receiverCantonCodeFull'] = this.receiverCantonCodeFull;
    if (Array.isArray(this.wlQuoteWastes)) {
      data['wlQuoteWastes'] = [];
      for (let item of this.wlQuoteWastes) data['wlQuoteWastes'].push(item.toJSON());
    }
    data['remark'] = this.remark;
    return data;
  }

  clone(): WlQuoteFormInput {
    const json = this.toJSON();
    let result = new WlQuoteFormInput();
    result.init(json);
    return result;
  }
}

export class WlBaseCapacityInput {
  id!: number | undefined;
  /** 车头主键 */
  vehicleId!: number | undefined;
  /** 车挂主键 */
  trailerId!: number | undefined;
  /** 司机主键 */
  driverId!: number | undefined;
  /** 押运主键 */
  supercargoId!: number | undefined;
  /** 状态，0：初始化，1：抢单中，2：运行中 */
  bcState!: number | undefined;
  /** 租户 */
  tenantId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.vehicleId = _data['vehicleId'];
      this.trailerId = _data['trailerId'];
      this.driverId = _data['driverId'];
      this.supercargoId = _data['supercargoId'];
      this.bcState = _data['bcState'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlBaseCapacityInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlBaseCapacityInput>(data, _mappings, WlBaseCapacityInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['vehicleId'] = this.vehicleId;
    data['trailerId'] = this.trailerId;
    data['driverId'] = this.driverId;
    data['supercargoId'] = this.supercargoId;
    data['bcState'] = this.bcState;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    return data;
  }

  clone(): WlBaseCapacityInput {
    const json = this.toJSON();
    let result = new WlBaseCapacityInput();
    result.init(json);
    return result;
  }
}

export class WlEmptyVehicleInput {
  id!: number | undefined;
  /** 起始地点，区位码 */
  startLocation!: string | undefined;
  /** 终止地点，区位码 */
  endLocation!: string | undefined;
  /** 经停地点，多个区位码 */
  passLocations!: string[] | undefined;
  /** 空车开始时间 */
  beginEmptyTime!: dayjs.Dayjs | undefined;
  /** 空车结束时间 */
  endEmptyTime!: dayjs.Dayjs | undefined;
  /** 运力主键 */
  capacityId!: number | undefined;
  /** 租户ID */
  tenantId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;
  /** 是否取消，0：未取消，1：已取消 */
  isCanceled!: number;
  /** 空车需求 */
  vehicleNeedId!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.startLocation = _data['startLocation'];
      this.endLocation = _data['endLocation'];
      if (Array.isArray(_data['passLocations'])) {
        this.passLocations = [] as any;
        for (let item of _data['passLocations']) this.passLocations!.push(item);
      }
      this.beginEmptyTime = _data['beginEmptyTime']
        ? dayjs(_data['beginEmptyTime'].toString())
        : <any>undefined;
      this.endEmptyTime = _data['endEmptyTime']
        ? dayjs(_data['endEmptyTime'].toString())
        : <any>undefined;
      this.capacityId = _data['capacityId'];
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.isCanceled = _data['isCanceled'];
      this.vehicleNeedId = _data['vehicleNeedId'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlEmptyVehicleInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlEmptyVehicleInput>(data, _mappings, WlEmptyVehicleInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['startLocation'] = this.startLocation;
    data['endLocation'] = this.endLocation;
    if (Array.isArray(this.passLocations)) {
      data['passLocations'] = [];
      for (let item of this.passLocations) data['passLocations'].push(item);
    }
    data['beginEmptyTime'] = this.beginEmptyTime
      ? this.beginEmptyTime.toISOString()
      : <any>undefined;
    data['endEmptyTime'] = this.endEmptyTime ? this.endEmptyTime.toISOString() : <any>undefined;
    data['capacityId'] = this.capacityId;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['isCanceled'] = this.isCanceled;
    data['vehicleNeedId'] = this.vehicleNeedId;
    return data;
  }

  clone(): WlEmptyVehicleInput {
    const json = this.toJSON();
    let result = new WlEmptyVehicleInput();
    result.init(json);
    return result;
  }
}

export class WlEmptyVehicleDayInput {
  id!: number | undefined;
  /** 装货行政区 */
  senderCantonCode!: string | undefined;
  /** 卸货行政区 */
  receiverCantonCode!: string | undefined;
  /** 空车日期 */
  emptyDate!: dayjs.Dayjs | undefined;
  /** 车辆类型 */
  vehicleTypeName!: string | undefined;
  /** 记录主键 */
  recordId!: number;
  /** 物流企业名称 */
  wlEntName!: string | undefined;
  /** 车头号码 */
  vehicleNo!: string | undefined;
  /** 车挂号码 */
  trailerNo!: string | undefined;
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.senderCantonCode = _data['senderCantonCode'];
      this.receiverCantonCode = _data['receiverCantonCode'];
      this.emptyDate = _data['emptyDate'] ? dayjs(_data['emptyDate'].toString()) : <any>undefined;
      this.vehicleTypeName = _data['vehicleTypeName'];
      this.recordId = _data['recordId'];
      this.wlEntName = _data['wlEntName'];
      this.vehicleNo = _data['vehicleNo'];
      this.trailerNo = _data['trailerNo'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlEmptyVehicleDayInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlEmptyVehicleDayInput>(data, _mappings, WlEmptyVehicleDayInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['senderCantonCode'] = this.senderCantonCode;
    data['receiverCantonCode'] = this.receiverCantonCode;
    data['emptyDate'] = this.emptyDate ? this.emptyDate.toISOString() : <any>undefined;
    data['vehicleTypeName'] = this.vehicleTypeName;
    data['recordId'] = this.recordId;
    data['wlEntName'] = this.wlEntName;
    data['vehicleNo'] = this.vehicleNo;
    data['trailerNo'] = this.trailerNo;
    data['remark'] = this.remark;
    return data;
  }

  clone(): WlEmptyVehicleDayInput {
    const json = this.toJSON();
    let result = new WlEmptyVehicleDayInput();
    result.init(json);
    return result;
  }
}

export class WlOrderQuoteInput {
  id!: number | undefined;
  tenantId!: number | undefined;
  /** 询价主键 */
  quoteId!: number | undefined;
  /** 报价一口价 */
  transportPrice!: number | undefined;
  /** 报价状态，0：询价中（物流端状态则显示为报价），1：待确认，2：已确认，3：未采纳 */
  quoteState!: number | undefined;
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.tenantId = _data['tenantId'];
      this.quoteId = _data['quoteId'];
      this.transportPrice = _data['transportPrice'];
      this.quoteState = _data['quoteState'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderQuoteInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderQuoteInput>(data, _mappings, WlOrderQuoteInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['tenantId'] = this.tenantId;
    data['quoteId'] = this.quoteId;
    data['transportPrice'] = this.transportPrice;
    data['quoteState'] = this.quoteState;
    data['remark'] = this.remark;
    return data;
  }

  clone(): WlOrderQuoteInput {
    const json = this.toJSON();
    let result = new WlOrderQuoteInput();
    result.init(json);
    return result;
  }
}

export class WlOrderStateInput {
  id!: number | undefined;
  /** 询价主键 */
  orderId!: number | undefined;
  /** 货单状态 */
  stateType!: number | undefined;
  /** 排序 */
  ix!: number | undefined;
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.orderId = _data['orderId'];
      this.stateType = _data['stateType'];
      this.ix = _data['ix'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderStateInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderStateInput>(data, _mappings, WlOrderStateInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['orderId'] = this.orderId;
    data['stateType'] = this.stateType;
    data['ix'] = this.ix;
    data['remark'] = this.remark;
    return data;
  }

  clone(): WlOrderStateInput {
    const json = this.toJSON();
    let result = new WlOrderStateInput();
    result.init(json);
    return result;
  }
}

export class WlOrderWasteListItemDto {
  /** 废物代码 */
  wasteCode!: string | undefined;
  /** 俗称 */
  commonName!: string | undefined;
  /** 运输重量 */
  transportWeight!: number | undefined;
  /** 单位 */
  unit!: string | undefined;
  /** 包装方式 */
  packagingId!: number | undefined;
  /** 包装方式备注 */
  packRemark!: string | undefined;
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.wasteCode = _data['wasteCode'];
      this.commonName = _data['commonName'];
      this.transportWeight = _data['transportWeight'];
      this.unit = _data['unit'];
      this.packagingId = _data['packagingId'];
      this.packRemark = _data['packRemark'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderWasteListItemDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderWasteListItemDto>(data, _mappings, WlOrderWasteListItemDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['wasteCode'] = this.wasteCode;
    data['commonName'] = this.commonName;
    data['transportWeight'] = this.transportWeight;
    data['unit'] = this.unit;
    data['packagingId'] = this.packagingId;
    data['packRemark'] = this.packRemark;
    data['remark'] = this.remark;
    return data;
  }

  clone(): WlOrderWasteListItemDto {
    const json = this.toJSON();
    let result = new WlOrderWasteListItemDto();
    result.init(json);
    return result;
  }
}

export class WlOrderWasteInput {
  /** 货单或询价单主键 */
  orderId!: number | undefined;
  /** 租户 */
  tenantId!: number | undefined;
  /** 危废明细 */
  wlOrderWastes!: WlOrderWasteListItemDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
      this.tenantId = _data['tenantId'];
      if (Array.isArray(_data['wlOrderWastes'])) {
        this.wlOrderWastes = [] as any;
        for (let item of _data['wlOrderWastes'])
          this.wlOrderWastes!.push(WlOrderWasteListItemDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderWasteInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderWasteInput>(data, _mappings, WlOrderWasteInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    data['tenantId'] = this.tenantId;
    if (Array.isArray(this.wlOrderWastes)) {
      data['wlOrderWastes'] = [];
      for (let item of this.wlOrderWastes) data['wlOrderWastes'].push(item.toJSON());
    }
    return data;
  }

  clone(): WlOrderWasteInput {
    const json = this.toJSON();
    let result = new WlOrderWasteInput();
    result.init(json);
    return result;
  }
}

export class WlTransportInfoInput {
  /** 主键 */
  id!: number | undefined;
  /** 租户 */
  tenantId!: number | undefined;
  /** 运单主键 */
  transId!: number | undefined;
  /** 运力主键 */
  capacityId!: number | undefined;
  /** 状态，0：无状态，1：装货签到，2：装货完成，3：卸货签到，4：卸货完成 */
  transState!: number;
  /** 装货签到时间 */
  loadingCheckInTime!: dayjs.Dayjs | undefined;
  /** 装货完成时间 */
  loadingCompleteTime!: dayjs.Dayjs | undefined;
  /** 装货吨数 */
  loadingWeight!: number | undefined;
  /** 装货现场照片 */
  loadingPics!: string | undefined;
  /** 卸货签到时间 */
  unLoadingCheckInTime!: dayjs.Dayjs | undefined;
  /** 卸货完成时间 */
  unLoadingCompleteTime!: dayjs.Dayjs | undefined;
  /** 卸货吨数 */
  unLoadingWeight!: number | undefined;
  /** 卸货现场照片 */
  unLoadingPics!: string | undefined;
  /** 实际里程数 */
  realDistance!: number | undefined;
  /** 实际里程数照片 */
  realDistancePics!: string | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.tenantId = _data['tenantId'];
      this.transId = _data['transId'];
      this.capacityId = _data['capacityId'];
      this.transState = _data['transState'];
      this.loadingCheckInTime = _data['loadingCheckInTime']
        ? dayjs(_data['loadingCheckInTime'].toString())
        : <any>undefined;
      this.loadingCompleteTime = _data['loadingCompleteTime']
        ? dayjs(_data['loadingCompleteTime'].toString())
        : <any>undefined;
      this.loadingWeight = _data['loadingWeight'];
      this.loadingPics = _data['loadingPics'];
      this.unLoadingCheckInTime = _data['unLoadingCheckInTime']
        ? dayjs(_data['unLoadingCheckInTime'].toString())
        : <any>undefined;
      this.unLoadingCompleteTime = _data['unLoadingCompleteTime']
        ? dayjs(_data['unLoadingCompleteTime'].toString())
        : <any>undefined;
      this.unLoadingWeight = _data['unLoadingWeight'];
      this.unLoadingPics = _data['unLoadingPics'];
      this.realDistance = _data['realDistance'];
      this.realDistancePics = _data['realDistancePics'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlTransportInfoInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlTransportInfoInput>(data, _mappings, WlTransportInfoInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['tenantId'] = this.tenantId;
    data['transId'] = this.transId;
    data['capacityId'] = this.capacityId;
    data['transState'] = this.transState;
    data['loadingCheckInTime'] = this.loadingCheckInTime
      ? this.loadingCheckInTime.toISOString()
      : <any>undefined;
    data['loadingCompleteTime'] = this.loadingCompleteTime
      ? this.loadingCompleteTime.toISOString()
      : <any>undefined;
    data['loadingWeight'] = this.loadingWeight;
    data['loadingPics'] = this.loadingPics;
    data['unLoadingCheckInTime'] = this.unLoadingCheckInTime
      ? this.unLoadingCheckInTime.toISOString()
      : <any>undefined;
    data['unLoadingCompleteTime'] = this.unLoadingCompleteTime
      ? this.unLoadingCompleteTime.toISOString()
      : <any>undefined;
    data['unLoadingWeight'] = this.unLoadingWeight;
    data['unLoadingPics'] = this.unLoadingPics;
    data['realDistance'] = this.realDistance;
    data['realDistancePics'] = this.realDistancePics;
    data['remark'] = this.remark;
    return data;
  }

  clone(): WlTransportInfoInput {
    const json = this.toJSON();
    let result = new WlTransportInfoInput();
    result.init(json);
    return result;
  }
}

export class WlOrderPushInput {
  /** 货单主键 */
  orderId!: number | undefined;
  /** 推送时间 */
  pushTime!: dayjs.Dayjs | undefined;
  /** 推送租户 */
  pushTenantIds!: number[] | undefined;
  /** 平台第三方发布 */
  sysUserId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
      this.pushTime = _data['pushTime'] ? dayjs(_data['pushTime'].toString()) : <any>undefined;
      if (Array.isArray(_data['pushTenantIds'])) {
        this.pushTenantIds = [] as any;
        for (let item of _data['pushTenantIds']) this.pushTenantIds!.push(item);
      }
      this.sysUserId = _data['sysUserId'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderPushInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderPushInput>(data, _mappings, WlOrderPushInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    data['pushTime'] = this.pushTime ? this.pushTime.toISOString() : <any>undefined;
    if (Array.isArray(this.pushTenantIds)) {
      data['pushTenantIds'] = [];
      for (let item of this.pushTenantIds) data['pushTenantIds'].push(item);
    }
    data['sysUserId'] = this.sysUserId;
    data['remark'] = this.remark;
    return data;
  }

  clone(): WlOrderPushInput {
    const json = this.toJSON();
    let result = new WlOrderPushInput();
    result.init(json);
    return result;
  }
}

export class DataStatesDto {
  /** 货单待抢单数量 */
  orderPendingCount!: number;
  /** 货单待审核数量 */
  orderAppvovingCount!: number;
  /** 运行中的运单总数 */
  transCount!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderPendingCount = _data['orderPendingCount'];
      this.orderAppvovingCount = _data['orderAppvovingCount'];
      this.transCount = _data['transCount'];
    }
  }

  static fromJS(data: any, _mappings?: any): DataStatesDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DataStatesDto>(data, _mappings, DataStatesDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderPendingCount'] = this.orderPendingCount;
    data['orderAppvovingCount'] = this.orderAppvovingCount;
    data['transCount'] = this.transCount;
    return data;
  }

  clone(): DataStatesDto {
    const json = this.toJSON();
    let result = new DataStatesDto();
    result.init(json);
    return result;
  }
}

export class WlEmptyVehicleReserveListDto {
  id!: number;
  /** 空车Id */
  emptyVehicleId!: number | undefined;
  emptyVehicle!: WlEmptyVehicleListDto;
  /** 预约状态，0：预约中，1：预约成功，2：预约失败 */
  reserveStatus!: number;
  /** 预约时间 */
  reserveTime!: dayjs.Dayjs | undefined;
  /** 预约处置企业名称 */
  tenantEntName!: string | undefined;
  creationTime!: dayjs.Dayjs;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.emptyVehicleId = _data['emptyVehicleId'];
      this.emptyVehicle = _data['emptyVehicle']
        ? WlEmptyVehicleListDto.fromJS(_data['emptyVehicle'], _mappings)
        : <any>undefined;
      this.reserveStatus = _data['reserveStatus'];
      this.reserveTime = _data['reserveTime']
        ? dayjs(_data['reserveTime'].toString())
        : <any>undefined;
      this.tenantEntName = _data['tenantEntName'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): WlEmptyVehicleReserveListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlEmptyVehicleReserveListDto>(
      data,
      _mappings,
      WlEmptyVehicleReserveListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['emptyVehicleId'] = this.emptyVehicleId;
    data['emptyVehicle'] = this.emptyVehicle ? this.emptyVehicle.toJSON() : <any>undefined;
    data['reserveStatus'] = this.reserveStatus;
    data['reserveTime'] = this.reserveTime ? this.reserveTime.toISOString() : <any>undefined;
    data['tenantEntName'] = this.tenantEntName;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): WlEmptyVehicleReserveListDto {
    const json = this.toJSON();
    let result = new WlEmptyVehicleReserveListDto();
    result.init(json);
    return result;
  }
}

export class WlEmptyVehicleListDto {
  id!: number | undefined;
  /** 起始地点，区位码 */
  startLocation!: string | undefined;
  /** 起始地点，名称 */
  startLocationName!: string | undefined;
  /** 终止地点，区位码 */
  endLocation!: string | undefined;
  /** 终止地点，名称 */
  endLocationName!: string | undefined;
  /** 经停地点，多个区位码，以逗号分隔 */
  passLocations!: string | undefined;
  /** 经停地点，多个区位码对应的地名，以逗号分隔 */
  passLocationNames!: string | undefined;
  /** 空车开始时间 */
  beginEmptyTime!: dayjs.Dayjs | undefined;
  /** 空车结束时间 */
  endEmptyTime!: dayjs.Dayjs | undefined;
  /** 运力主键 */
  capacityId!: number | undefined;
  capacity!: WlBaseCapacityListDto;
  tenantId!: number;
  /** 备注 */
  remark!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 企业名称 */
  tenantEntName!: string | undefined;
  /** 整车类型描述 */
  vehicleType!: string | undefined;
  /** 整车类型备注 */
  vehicleRemark!: string | undefined;
  /** 核载能力 */
  loadCapacity!: number | undefined;
  /** 核载能力单位 */
  capacityUnit!: string | undefined;
  /** 车头主键 */
  vehicleId!: number | undefined;
  /** 车挂主键 */
  trailerId!: number | undefined;
  /** 司机主键 */
  driverId!: number | undefined;
  /** 押运主键 */
  supercargoId!: number | undefined;
  driver!: WlBaseDriverListDto;
  supercargo!: WlBaseSupercargoListDto;
  trailer!: WlBaseVehicleTrailerListDto;
  vehicle!: WlBaseVehicleListDto;
  /** 是否有效，true：有效，false：失效 */
  isValid!: boolean;
  /** 预约状态，0：预约中，1：预约成功，2：预约失败 */
  reserveStatus!: number | undefined;
  /** 是否取消，0：未取消，1：已取消 */
  isCanceled!: number;
  /** 空车需求 */
  vehicleNeedId!: number | undefined;
  vehicleNeed!: string | undefined;
  /** 预约企业名称 */
  reserveEntName!: string | undefined;
  vehicleReserves!: WlEmptyVehicleReserveListDto[] | undefined;
  /** 是否被推荐，0：不被推荐，1：推荐 */
  isRecommended!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.startLocation = _data['startLocation'];
      this.startLocationName = _data['startLocationName'];
      this.endLocation = _data['endLocation'];
      this.endLocationName = _data['endLocationName'];
      this.passLocations = _data['passLocations'];
      this.passLocationNames = _data['passLocationNames'];
      this.beginEmptyTime = _data['beginEmptyTime']
        ? dayjs(_data['beginEmptyTime'].toString())
        : <any>undefined;
      this.endEmptyTime = _data['endEmptyTime']
        ? dayjs(_data['endEmptyTime'].toString())
        : <any>undefined;
      this.capacityId = _data['capacityId'];
      this.capacity = _data['capacity']
        ? WlBaseCapacityListDto.fromJS(_data['capacity'], _mappings)
        : <any>undefined;
      this.tenantId = _data['tenantId'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.tenantEntName = _data['tenantEntName'];
      this.vehicleType = _data['vehicleType'];
      this.vehicleRemark = _data['vehicleRemark'];
      this.loadCapacity = _data['loadCapacity'];
      this.capacityUnit = _data['capacityUnit'];
      this.vehicleId = _data['vehicleId'];
      this.trailerId = _data['trailerId'];
      this.driverId = _data['driverId'];
      this.supercargoId = _data['supercargoId'];
      this.driver = _data['driver']
        ? WlBaseDriverListDto.fromJS(_data['driver'], _mappings)
        : <any>undefined;
      this.supercargo = _data['supercargo']
        ? WlBaseSupercargoListDto.fromJS(_data['supercargo'], _mappings)
        : <any>undefined;
      this.trailer = _data['trailer']
        ? WlBaseVehicleTrailerListDto.fromJS(_data['trailer'], _mappings)
        : <any>undefined;
      this.vehicle = _data['vehicle']
        ? WlBaseVehicleListDto.fromJS(_data['vehicle'], _mappings)
        : <any>undefined;
      this.isValid = _data['isValid'];
      this.reserveStatus = _data['reserveStatus'];
      this.isCanceled = _data['isCanceled'];
      this.vehicleNeedId = _data['vehicleNeedId'];
      this.vehicleNeed = _data['vehicleNeed'];
      this.reserveEntName = _data['reserveEntName'];
      if (Array.isArray(_data['vehicleReserves'])) {
        this.vehicleReserves = [] as any;
        for (let item of _data['vehicleReserves'])
          this.vehicleReserves!.push(WlEmptyVehicleReserveListDto.fromJS(item, _mappings));
      }
      this.isRecommended = _data['isRecommended'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlEmptyVehicleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlEmptyVehicleListDto>(data, _mappings, WlEmptyVehicleListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['startLocation'] = this.startLocation;
    data['startLocationName'] = this.startLocationName;
    data['endLocation'] = this.endLocation;
    data['endLocationName'] = this.endLocationName;
    data['passLocations'] = this.passLocations;
    data['passLocationNames'] = this.passLocationNames;
    data['beginEmptyTime'] = this.beginEmptyTime
      ? this.beginEmptyTime.toISOString()
      : <any>undefined;
    data['endEmptyTime'] = this.endEmptyTime ? this.endEmptyTime.toISOString() : <any>undefined;
    data['capacityId'] = this.capacityId;
    data['capacity'] = this.capacity ? this.capacity.toJSON() : <any>undefined;
    data['tenantId'] = this.tenantId;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['tenantEntName'] = this.tenantEntName;
    data['vehicleType'] = this.vehicleType;
    data['vehicleRemark'] = this.vehicleRemark;
    data['loadCapacity'] = this.loadCapacity;
    data['capacityUnit'] = this.capacityUnit;
    data['vehicleId'] = this.vehicleId;
    data['trailerId'] = this.trailerId;
    data['driverId'] = this.driverId;
    data['supercargoId'] = this.supercargoId;
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    data['supercargo'] = this.supercargo ? this.supercargo.toJSON() : <any>undefined;
    data['trailer'] = this.trailer ? this.trailer.toJSON() : <any>undefined;
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    data['isValid'] = this.isValid;
    data['reserveStatus'] = this.reserveStatus;
    data['isCanceled'] = this.isCanceled;
    data['vehicleNeedId'] = this.vehicleNeedId;
    data['vehicleNeed'] = this.vehicleNeed;
    data['reserveEntName'] = this.reserveEntName;
    if (Array.isArray(this.vehicleReserves)) {
      data['vehicleReserves'] = [];
      for (let item of this.vehicleReserves) data['vehicleReserves'].push(item.toJSON());
    }
    data['isRecommended'] = this.isRecommended;
    return data;
  }

  clone(): WlEmptyVehicleListDto {
    const json = this.toJSON();
    let result = new WlEmptyVehicleListDto();
    result.init(json);
    return result;
  }
}

export class WlEmptyVehicleRecommendListDto {
  id!: number;
  creationTime!: dayjs.Dayjs;
  isDeleted!: boolean;
  /** 空车ID */
  emptyVehicleId!: number | undefined;
  emptyVehicle!: WlEmptyVehicleListDto;
  /** 推荐的处置企业 */
  disposalTenantId!: number | undefined;
  /** 推荐比例，1-100 */
  recommendRatio!: number;
  /** 是否读，false：未读，true：已读 */
  isRead!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.isDeleted = _data['isDeleted'];
      this.emptyVehicleId = _data['emptyVehicleId'];
      this.emptyVehicle = _data['emptyVehicle']
        ? WlEmptyVehicleListDto.fromJS(_data['emptyVehicle'], _mappings)
        : <any>undefined;
      this.disposalTenantId = _data['disposalTenantId'];
      this.recommendRatio = _data['recommendRatio'];
      this.isRead = _data['isRead'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlEmptyVehicleRecommendListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlEmptyVehicleRecommendListDto>(
      data,
      _mappings,
      WlEmptyVehicleRecommendListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['isDeleted'] = this.isDeleted;
    data['emptyVehicleId'] = this.emptyVehicleId;
    data['emptyVehicle'] = this.emptyVehicle ? this.emptyVehicle.toJSON() : <any>undefined;
    data['disposalTenantId'] = this.disposalTenantId;
    data['recommendRatio'] = this.recommendRatio;
    data['isRead'] = this.isRead;
    return data;
  }

  clone(): WlEmptyVehicleRecommendListDto {
    const json = this.toJSON();
    let result = new WlEmptyVehicleRecommendListDto();
    result.init(json);
    return result;
  }
}

/** 读取可编辑货单的Dto */
export class GetWlOrderFormForEditOutput {
  wlOrderForm!: WlOrderFormEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.wlOrderForm = _data['wlOrderForm']
        ? WlOrderFormEditDto.fromJS(_data['wlOrderForm'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): GetWlOrderFormForEditOutput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetWlOrderFormForEditOutput>(
      data,
      _mappings,
      GetWlOrderFormForEditOutput,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['wlOrderForm'] = this.wlOrderForm ? this.wlOrderForm.toJSON() : <any>undefined;
    return data;
  }

  clone(): GetWlOrderFormForEditOutput {
    const json = this.toJSON();
    let result = new GetWlOrderFormForEditOutput();
    result.init(json);
    return result;
  }
}

export class EnterpriseForTenantListDto {
  /** 企业ID */
  id!: number | undefined;
  /** 企业注册名称 */
  regName!: string | undefined;
  /** 统一社会信用代码 */
  creditCode!: string | undefined;
  /** 所属行业 */
  industryStr!: string | undefined;
  /** 行政区 */
  cantonStr!: string | undefined;
  /** 行政区 */
  cantonCode!: string | undefined;
  /** 行政区 */
  cantonFullCode!: string | undefined;
  /** 环保行业 */
  envIndustryStr!: string | undefined;
  /** 企业网址 */
  website!: string | undefined;
  /** 工商注册号 */
  regNo!: string | undefined;
  /** 组织机构代码（统一解析） */
  orgCode!: string | undefined;
  orgType!: string | undefined;
  /** 发证机关（登记）类型（统一解析） */
  issueOrgType!: string | undefined;
  /** 发证机关名称 */
  issueOrgName!: string | undefined;
  /** 发证日期 */
  issueDate!: dayjs.Dayjs | undefined;
  /** 法定代表人名称 */
  legalName!: string | undefined;
  /** 企业注册类型 */
  regType!: string | undefined;
  /** 企业注册地址 */
  regAdress!: string | undefined;
  /** 注册资本 */
  regCapital!: number | undefined;
  /** 注册币种 */
  regCapitalCur!: string | undefined;
  /** 实收资本 */
  revCapital!: number | undefined;
  /** 金额单位 */
  unit!: string | undefined;
  /** 成立日期 */
  foundDate!: dayjs.Dayjs | undefined;
  /** 经营开始日期（yyyy-MM-dd） */
  startDate!: dayjs.Dayjs | undefined;
  /** 经营结束日期（yyyy-MM-dd） */
  endDate!: dayjs.Dayjs | undefined;
  /** 许可经营项目 */
  licenseItems!: string | undefined;
  /** 一般经营项目 */
  generalItems!: string | undefined;
  /** 经营范围及方式（其中许可经营项目、一般经营项目自动补充） */
  businessScope!: string | undefined;
  /** 经营状态 */
  businessStatus!: string | undefined;
  /** 注销日期（根据经营状态） */
  logoutDate!: dayjs.Dayjs | undefined;
  /** 吊销日期（根据经营状态） */
  revocationDate!: dayjs.Dayjs | undefined;
  /** 证照文件指纹（加密，包含原文件名、后缀名） */
  idFingerprint!: string | undefined;
  /** 最后年检日期 */
  lastInspectionDate!: dayjs.Dayjs | undefined;
  /** 最后年检年度 */
  lastInspectionYear!: dayjs.Dayjs | undefined;
  /** 工商信息认证记录 */
  isAudited!: number;
  /** 排序号 */
  ix!: number;
  lastModificationTime!: dayjs.Dayjs | undefined;
  /** 企业类型 */
  entType!: string | undefined;
  /** 企业编码 */
  tenancyName!: string | undefined;
  /** 租户名称 */
  tenantName!: string | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs | undefined;
  /** 平台负责人 */
  sysUserId!: number | undefined;
  /** 负责人 */
  sysUserName!: string | undefined;
  /** 租户ID */
  tenantId!: number | undefined;
  /** 营业执照 */
  businessLicenseOss!: string | undefined;
  /** 处置许可证 */
  disposalLicenseOss!: string | undefined;
  /** 道路运输经营许可证 */
  roadTransportLicenseOss!: string | undefined;
  /** 纬度 */
  latitude!: number | undefined;
  /** 经度 */
  longitude!: number | undefined;
  /** 物流企业是否绑定到处置企业 */
  bindStatus!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.regName = _data['regName'];
      this.creditCode = _data['creditCode'];
      this.industryStr = _data['industryStr'];
      this.cantonStr = _data['cantonStr'];
      this.cantonCode = _data['cantonCode'];
      this.cantonFullCode = _data['cantonFullCode'];
      this.envIndustryStr = _data['envIndustryStr'];
      this.website = _data['website'];
      this.regNo = _data['regNo'];
      this.orgCode = _data['orgCode'];
      this.orgType = _data['orgType'];
      this.issueOrgType = _data['issueOrgType'];
      this.issueOrgName = _data['issueOrgName'];
      this.issueDate = _data['issueDate'] ? dayjs(_data['issueDate'].toString()) : <any>undefined;
      this.legalName = _data['legalName'];
      this.regType = _data['regType'];
      this.regAdress = _data['regAdress'];
      this.regCapital = _data['regCapital'];
      this.regCapitalCur = _data['regCapitalCur'];
      this.revCapital = _data['revCapital'];
      this.unit = _data['unit'];
      this.foundDate = _data['foundDate'] ? dayjs(_data['foundDate'].toString()) : <any>undefined;
      this.startDate = _data['startDate'] ? dayjs(_data['startDate'].toString()) : <any>undefined;
      this.endDate = _data['endDate'] ? dayjs(_data['endDate'].toString()) : <any>undefined;
      this.licenseItems = _data['licenseItems'];
      this.generalItems = _data['generalItems'];
      this.businessScope = _data['businessScope'];
      this.businessStatus = _data['businessStatus'];
      this.logoutDate = _data['logoutDate']
        ? dayjs(_data['logoutDate'].toString())
        : <any>undefined;
      this.revocationDate = _data['revocationDate']
        ? dayjs(_data['revocationDate'].toString())
        : <any>undefined;
      this.idFingerprint = _data['idFingerprint'];
      this.lastInspectionDate = _data['lastInspectionDate']
        ? dayjs(_data['lastInspectionDate'].toString())
        : <any>undefined;
      this.lastInspectionYear = _data['lastInspectionYear']
        ? dayjs(_data['lastInspectionYear'].toString())
        : <any>undefined;
      this.isAudited = _data['isAudited'];
      this.ix = _data['ix'];
      this.lastModificationTime = _data['lastModificationTime']
        ? dayjs(_data['lastModificationTime'].toString())
        : <any>undefined;
      this.entType = _data['entType'];
      this.tenancyName = _data['tenancyName'];
      this.tenantName = _data['tenantName'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.sysUserId = _data['sysUserId'];
      this.sysUserName = _data['sysUserName'];
      this.tenantId = _data['tenantId'];
      this.businessLicenseOss = _data['businessLicenseOss'];
      this.disposalLicenseOss = _data['disposalLicenseOss'];
      this.roadTransportLicenseOss = _data['roadTransportLicenseOss'];
      this.latitude = _data['latitude'];
      this.longitude = _data['longitude'];
      this.bindStatus = _data['bindStatus'];
    }
  }

  static fromJS(data: any, _mappings?: any): EnterpriseForTenantListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EnterpriseForTenantListDto>(data, _mappings, EnterpriseForTenantListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['regName'] = this.regName;
    data['creditCode'] = this.creditCode;
    data['industryStr'] = this.industryStr;
    data['cantonStr'] = this.cantonStr;
    data['cantonCode'] = this.cantonCode;
    data['cantonFullCode'] = this.cantonFullCode;
    data['envIndustryStr'] = this.envIndustryStr;
    data['website'] = this.website;
    data['regNo'] = this.regNo;
    data['orgCode'] = this.orgCode;
    data['orgType'] = this.orgType;
    data['issueOrgType'] = this.issueOrgType;
    data['issueOrgName'] = this.issueOrgName;
    data['issueDate'] = this.issueDate ? this.issueDate.toISOString() : <any>undefined;
    data['legalName'] = this.legalName;
    data['regType'] = this.regType;
    data['regAdress'] = this.regAdress;
    data['regCapital'] = this.regCapital;
    data['regCapitalCur'] = this.regCapitalCur;
    data['revCapital'] = this.revCapital;
    data['unit'] = this.unit;
    data['foundDate'] = this.foundDate ? this.foundDate.toISOString() : <any>undefined;
    data['startDate'] = this.startDate ? this.startDate.toISOString() : <any>undefined;
    data['endDate'] = this.endDate ? this.endDate.toISOString() : <any>undefined;
    data['licenseItems'] = this.licenseItems;
    data['generalItems'] = this.generalItems;
    data['businessScope'] = this.businessScope;
    data['businessStatus'] = this.businessStatus;
    data['logoutDate'] = this.logoutDate ? this.logoutDate.toISOString() : <any>undefined;
    data['revocationDate'] = this.revocationDate
      ? this.revocationDate.toISOString()
      : <any>undefined;
    data['idFingerprint'] = this.idFingerprint;
    data['lastInspectionDate'] = this.lastInspectionDate
      ? this.lastInspectionDate.toISOString()
      : <any>undefined;
    data['lastInspectionYear'] = this.lastInspectionYear
      ? this.lastInspectionYear.toISOString()
      : <any>undefined;
    data['isAudited'] = this.isAudited;
    data['ix'] = this.ix;
    data['lastModificationTime'] = this.lastModificationTime
      ? this.lastModificationTime.toISOString()
      : <any>undefined;
    data['entType'] = this.entType;
    data['tenancyName'] = this.tenancyName;
    data['tenantName'] = this.tenantName;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['sysUserId'] = this.sysUserId;
    data['sysUserName'] = this.sysUserName;
    data['tenantId'] = this.tenantId;
    data['businessLicenseOss'] = this.businessLicenseOss;
    data['disposalLicenseOss'] = this.disposalLicenseOss;
    data['roadTransportLicenseOss'] = this.roadTransportLicenseOss;
    data['latitude'] = this.latitude;
    data['longitude'] = this.longitude;
    data['bindStatus'] = this.bindStatus;
    return data;
  }

  clone(): EnterpriseForTenantListDto {
    const json = this.toJSON();
    let result = new EnterpriseForTenantListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfEnterpriseForTenantListDto {
  totalCount!: number;
  items!: EnterpriseForTenantListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(EnterpriseForTenantListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfEnterpriseForTenantListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfEnterpriseForTenantListDto>(
      data,
      _mappings,
      PagedResultDtoOfEnterpriseForTenantListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfEnterpriseForTenantListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfEnterpriseForTenantListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlOrderBidListDto {
  totalCount!: number;
  items!: WlOrderBidListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlOrderBidListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlOrderBidListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlOrderBidListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlOrderBidListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlOrderBidListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlOrderBidListDto();
    result.init(json);
    return result;
  }
}

export class WlOrderFollowListDto {
  id!: number | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 创建用户名称 */
  createUserName!: string | undefined;
  /** 货单主键 */
  orderId!: number | undefined;
  /** 车次主键 */
  transportInfoId!: number | undefined;
  /** 跟进类型，0：货单，1：车单 */
  followType!: number;
  /** 标签 */
  tags!: string | undefined;
  /** 内容 */
  content!: string | undefined;
  /** 附件 */
  attachment!: string | undefined;
  transportInfo!: WlTransportInfoListDto;
  /** 是否可以编辑 */
  isCanEdit!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.createUserName = _data['createUserName'];
      this.orderId = _data['orderId'];
      this.transportInfoId = _data['transportInfoId'];
      this.followType = _data['followType'];
      this.tags = _data['tags'];
      this.content = _data['content'];
      this.attachment = _data['attachment'];
      this.transportInfo = _data['transportInfo']
        ? WlTransportInfoListDto.fromJS(_data['transportInfo'], _mappings)
        : <any>undefined;
      this.isCanEdit = _data['isCanEdit'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderFollowListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderFollowListDto>(data, _mappings, WlOrderFollowListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['createUserName'] = this.createUserName;
    data['orderId'] = this.orderId;
    data['transportInfoId'] = this.transportInfoId;
    data['followType'] = this.followType;
    data['tags'] = this.tags;
    data['content'] = this.content;
    data['attachment'] = this.attachment;
    data['transportInfo'] = this.transportInfo ? this.transportInfo.toJSON() : <any>undefined;
    data['isCanEdit'] = this.isCanEdit;
    return data;
  }

  clone(): WlOrderFollowListDto {
    const json = this.toJSON();
    let result = new WlOrderFollowListDto();
    result.init(json);
    return result;
  }
}

export class WlOrderLogListDto {
  id!: number | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 创建人 */
  createUserName!: string | undefined;
  /** 货单主键 */
  orderId!: number | undefined;
  /** 记录类型，0：货单发布，1：价格审核，2：物流报车，3：生成运单，4：货单完结 */
  logType!: number;
  /** 记录名称 */
  logTypeName!: string | undefined;
  /** 是否已经生成 */
  isExist!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.createUserName = _data['createUserName'];
      this.orderId = _data['orderId'];
      this.logType = _data['logType'];
      this.logTypeName = _data['logTypeName'];
      this.isExist = _data['isExist'];
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderLogListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderLogListDto>(data, _mappings, WlOrderLogListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['createUserName'] = this.createUserName;
    data['orderId'] = this.orderId;
    data['logType'] = this.logType;
    data['logTypeName'] = this.logTypeName;
    data['isExist'] = this.isExist;
    return data;
  }

  clone(): WlOrderLogListDto {
    const json = this.toJSON();
    let result = new WlOrderLogListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlQuoteFormListDto {
  totalCount!: number;
  items!: WlQuoteFormListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlQuoteFormListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlQuoteFormListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlQuoteFormListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlQuoteFormListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlQuoteFormListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlQuoteFormListDto();
    result.init(json);
    return result;
  }
}

export class WlStatementVehicleListDto {
  id!: number;
  /** 对账单明细ID */
  statementDetailId!: number | undefined;
  statementDetail!: WlStatementDetailListDto;
  /** 运单明细ID */
  transportInfoId!: number | undefined;
  transportInfo!: WlTransportInfoListDto;
  /** 计价方式，0：一口价，1：单价 */
  valuationType!: number;
  /** 单价价格 */
  unitPrice!: number | undefined;
  /** 单价单位 */
  unit!: string | undefined;
  /** 距离，公里数 */
  distanceKilometers!: number | undefined;
  /** 运输一口价 */
  transportPrice!: number | undefined;
  /** 运输重量 */
  transportWeight!: number | undefined;
  /** 总运费 */
  vehicleFreight!: number | undefined;
  /** 车头主键 */
  vehicleId!: number | undefined;
  /** 车挂主键 */
  trailerId!: number | undefined;
  /** 司机主键 */
  driverId!: number | undefined;
  /** 押运主键 */
  supercargoId!: number | undefined;
  driver!: WlBaseDriverListDto;
  supercargo!: WlBaseSupercargoListDto;
  trailer!: WlBaseVehicleTrailerListDto;
  vehicle!: WlBaseVehicleListDto;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.statementDetailId = _data['statementDetailId'];
      this.statementDetail = _data['statementDetail']
        ? WlStatementDetailListDto.fromJS(_data['statementDetail'], _mappings)
        : <any>undefined;
      this.transportInfoId = _data['transportInfoId'];
      this.transportInfo = _data['transportInfo']
        ? WlTransportInfoListDto.fromJS(_data['transportInfo'], _mappings)
        : <any>undefined;
      this.valuationType = _data['valuationType'];
      this.unitPrice = _data['unitPrice'];
      this.unit = _data['unit'];
      this.distanceKilometers = _data['distanceKilometers'];
      this.transportPrice = _data['transportPrice'];
      this.transportWeight = _data['transportWeight'];
      this.vehicleFreight = _data['vehicleFreight'];
      this.vehicleId = _data['vehicleId'];
      this.trailerId = _data['trailerId'];
      this.driverId = _data['driverId'];
      this.supercargoId = _data['supercargoId'];
      this.driver = _data['driver']
        ? WlBaseDriverListDto.fromJS(_data['driver'], _mappings)
        : <any>undefined;
      this.supercargo = _data['supercargo']
        ? WlBaseSupercargoListDto.fromJS(_data['supercargo'], _mappings)
        : <any>undefined;
      this.trailer = _data['trailer']
        ? WlBaseVehicleTrailerListDto.fromJS(_data['trailer'], _mappings)
        : <any>undefined;
      this.vehicle = _data['vehicle']
        ? WlBaseVehicleListDto.fromJS(_data['vehicle'], _mappings)
        : <any>undefined;
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): WlStatementVehicleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlStatementVehicleListDto>(data, _mappings, WlStatementVehicleListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['statementDetailId'] = this.statementDetailId;
    data['statementDetail'] = this.statementDetail ? this.statementDetail.toJSON() : <any>undefined;
    data['transportInfoId'] = this.transportInfoId;
    data['transportInfo'] = this.transportInfo ? this.transportInfo.toJSON() : <any>undefined;
    data['valuationType'] = this.valuationType;
    data['unitPrice'] = this.unitPrice;
    data['unit'] = this.unit;
    data['distanceKilometers'] = this.distanceKilometers;
    data['transportPrice'] = this.transportPrice;
    data['transportWeight'] = this.transportWeight;
    data['vehicleFreight'] = this.vehicleFreight;
    data['vehicleId'] = this.vehicleId;
    data['trailerId'] = this.trailerId;
    data['driverId'] = this.driverId;
    data['supercargoId'] = this.supercargoId;
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    data['supercargo'] = this.supercargo ? this.supercargo.toJSON() : <any>undefined;
    data['trailer'] = this.trailer ? this.trailer.toJSON() : <any>undefined;
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): WlStatementVehicleListDto {
    const json = this.toJSON();
    let result = new WlStatementVehicleListDto();
    result.init(json);
    return result;
  }
}

export class WlStatementDetailListDto {
  id!: number;
  /** 对账单ID */
  statementId!: number | undefined;
  statement!: WlStatementListDto;
  /** 运单ID */
  transId!: number | undefined;
  trans!: WlTransFormListDto;
  /** 对账单状态，0：未对账，1：对账中，2：已完成 */
  status!: number;
  /** 总运费 */
  transFreight!: number | undefined;
  /** 总里程 */
  totalMileage!: number | undefined;
  /** 总荷载 */
  totalWeight!: number | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  statementVehicles!: WlStatementVehicleListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.statementId = _data['statementId'];
      this.statement = _data['statement']
        ? WlStatementListDto.fromJS(_data['statement'], _mappings)
        : <any>undefined;
      this.transId = _data['transId'];
      this.trans = _data['trans']
        ? WlTransFormListDto.fromJS(_data['trans'], _mappings)
        : <any>undefined;
      this.status = _data['status'];
      this.transFreight = _data['transFreight'];
      this.totalMileage = _data['totalMileage'];
      this.totalWeight = _data['totalWeight'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['statementVehicles'])) {
        this.statementVehicles = [] as any;
        for (let item of _data['statementVehicles'])
          this.statementVehicles!.push(WlStatementVehicleListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): WlStatementDetailListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlStatementDetailListDto>(data, _mappings, WlStatementDetailListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['statementId'] = this.statementId;
    data['statement'] = this.statement ? this.statement.toJSON() : <any>undefined;
    data['transId'] = this.transId;
    data['trans'] = this.trans ? this.trans.toJSON() : <any>undefined;
    data['status'] = this.status;
    data['transFreight'] = this.transFreight;
    data['totalMileage'] = this.totalMileage;
    data['totalWeight'] = this.totalWeight;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    if (Array.isArray(this.statementVehicles)) {
      data['statementVehicles'] = [];
      for (let item of this.statementVehicles) data['statementVehicles'].push(item.toJSON());
    }
    return data;
  }

  clone(): WlStatementDetailListDto {
    const json = this.toJSON();
    let result = new WlStatementDetailListDto();
    result.init(json);
    return result;
  }
}

export class WlStatementListDto {
  id!: number;
  orderID!: number | undefined;
  order!: WlOrderFormListDto;
  /** 开始对账时间 */
  beginTime!: dayjs.Dayjs | undefined;
  /** 完成对账时间 */
  endTime!: dayjs.Dayjs | undefined;
  /** 对账单状态，0：未完成，1：已完成 */
  stStatus!: number;
  /** 总运费 */
  orderFreight!: number | undefined;
  /** 创建时间 */
  creationTime!: dayjs.Dayjs;
  /** 装货时间 */
  shippingTime!: dayjs.Dayjs | undefined;
  statementDetails!: WlStatementDetailListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.orderID = _data['orderID'];
      this.order = _data['order']
        ? WlOrderFormListDto.fromJS(_data['order'], _mappings)
        : <any>undefined;
      this.beginTime = _data['beginTime'] ? dayjs(_data['beginTime'].toString()) : <any>undefined;
      this.endTime = _data['endTime'] ? dayjs(_data['endTime'].toString()) : <any>undefined;
      this.stStatus = _data['stStatus'];
      this.orderFreight = _data['orderFreight'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.shippingTime = _data['shippingTime']
        ? dayjs(_data['shippingTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['statementDetails'])) {
        this.statementDetails = [] as any;
        for (let item of _data['statementDetails'])
          this.statementDetails!.push(WlStatementDetailListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): WlStatementListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlStatementListDto>(data, _mappings, WlStatementListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['orderID'] = this.orderID;
    data['order'] = this.order ? this.order.toJSON() : <any>undefined;
    data['beginTime'] = this.beginTime ? this.beginTime.toISOString() : <any>undefined;
    data['endTime'] = this.endTime ? this.endTime.toISOString() : <any>undefined;
    data['stStatus'] = this.stStatus;
    data['orderFreight'] = this.orderFreight;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['shippingTime'] = this.shippingTime ? this.shippingTime.toISOString() : <any>undefined;
    if (Array.isArray(this.statementDetails)) {
      data['statementDetails'] = [];
      for (let item of this.statementDetails) data['statementDetails'].push(item.toJSON());
    }
    return data;
  }

  clone(): WlStatementListDto {
    const json = this.toJSON();
    let result = new WlStatementListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlStatementDetailListDto {
  totalCount!: number;
  items!: WlStatementDetailListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlStatementDetailListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlStatementDetailListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlStatementDetailListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlStatementDetailListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlStatementDetailListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlStatementDetailListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlStatementListDto {
  totalCount!: number;
  items!: WlStatementListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlStatementListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlStatementListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlStatementListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlStatementListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlStatementListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlStatementListDto();
    result.init(json);
    return result;
  }
}

export class RecommendVehicleInput {
  /** 物流租户Id */
  tenantId!: number | undefined;
  /** 货单Id列表 */
  orderIds!: number[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.tenantId = _data['tenantId'];
      if (Array.isArray(_data['orderIds'])) {
        this.orderIds = [] as any;
        for (let item of _data['orderIds']) this.orderIds!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): RecommendVehicleInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<RecommendVehicleInput>(data, _mappings, RecommendVehicleInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['tenantId'] = this.tenantId;
    if (Array.isArray(this.orderIds)) {
      data['orderIds'] = [];
      for (let item of this.orderIds) data['orderIds'].push(item);
    }
    return data;
  }

  clone(): RecommendVehicleInput {
    const json = this.toJSON();
    let result = new RecommendVehicleInput();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlTransFormListDto {
  totalCount!: number;
  items!: WlTransFormListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlTransFormListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlTransFormListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlTransFormListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlTransFormListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlTransFormListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlTransFormListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlTransportInfoListDto {
  totalCount!: number;
  items!: WlTransportInfoListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlTransportInfoListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlTransportInfoListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlTransportInfoListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlTransportInfoListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlTransportInfoListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlTransportInfoListDto();
    result.init(json);
    return result;
  }
}

export class VehicleRouteDto {
  /** 定位时间 */
  positionTime!: dayjs.Dayjs;
  /** 接收时间 */
  receiveTime!: dayjs.Dayjs;
  /** 入网时间 */
  joinNetworkTime!: dayjs.Dayjs;
  /** 经度 */
  longitude!: number;
  /** 纬度 */
  latitude!: number;
  /** 海拔 */
  seaPull!: number;
  /** 方向 */
  direction!: number;
  /** 速度(公里/小时) */
  speed!: number;
  /** 状态(点火,定位) */
  state!: string | undefined;
  /** 地理位置 */
  location!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.positionTime = _data['positionTime']
        ? dayjs(_data['positionTime'].toString())
        : <any>undefined;
      this.receiveTime = _data['receiveTime']
        ? dayjs(_data['receiveTime'].toString())
        : <any>undefined;
      this.joinNetworkTime = _data['joinNetworkTime']
        ? dayjs(_data['joinNetworkTime'].toString())
        : <any>undefined;
      this.longitude = _data['longitude'];
      this.latitude = _data['latitude'];
      this.seaPull = _data['seaPull'];
      this.direction = _data['direction'];
      this.speed = _data['speed'];
      this.state = _data['state'];
      this.location = _data['location'];
    }
  }

  static fromJS(data: any, _mappings?: any): VehicleRouteDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<VehicleRouteDto>(data, _mappings, VehicleRouteDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['positionTime'] = this.positionTime ? this.positionTime.toISOString() : <any>undefined;
    data['receiveTime'] = this.receiveTime ? this.receiveTime.toISOString() : <any>undefined;
    data['joinNetworkTime'] = this.joinNetworkTime
      ? this.joinNetworkTime.toISOString()
      : <any>undefined;
    data['longitude'] = this.longitude;
    data['latitude'] = this.latitude;
    data['seaPull'] = this.seaPull;
    data['direction'] = this.direction;
    data['speed'] = this.speed;
    data['state'] = this.state;
    data['location'] = this.location;
    return data;
  }

  clone(): VehicleRouteDto {
    const json = this.toJSON();
    let result = new VehicleRouteDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlBaseCapacityListDto {
  totalCount!: number;
  items!: WlBaseCapacityListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlBaseCapacityListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlBaseCapacityListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlBaseCapacityListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlBaseCapacityListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlBaseCapacityListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlBaseCapacityListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlBaseDriverListDto {
  totalCount!: number;
  items!: WlBaseDriverListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlBaseDriverListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlBaseDriverListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlBaseDriverListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlBaseDriverListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlBaseDriverListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlBaseDriverListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlBaseSupercargoListDto {
  totalCount!: number;
  items!: WlBaseSupercargoListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlBaseSupercargoListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlBaseSupercargoListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlBaseSupercargoListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlBaseSupercargoListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlBaseSupercargoListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlBaseSupercargoListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlBaseVehicleListDto {
  totalCount!: number;
  items!: WlBaseVehicleListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlBaseVehicleListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlBaseVehicleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlBaseVehicleListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlBaseVehicleListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlBaseVehicleListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlBaseVehicleListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlBaseVehicleTrailerListDto {
  totalCount!: number;
  items!: WlBaseVehicleTrailerListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlBaseVehicleTrailerListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlBaseVehicleTrailerListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlBaseVehicleTrailerListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlBaseVehicleTrailerListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlBaseVehicleTrailerListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlBaseVehicleTrailerListDto();
    result.init(json);
    return result;
  }
}

export class WlEmptyVehicleDayListDto {
  id!: number;
  /** 装货行政区 */
  senderCantonCode!: string | undefined;
  senderCantonFullCode!: string | undefined;
  senderCantonFullName!: string | undefined;
  /** 卸货行政区 */
  receiverCantonCode!: string | undefined;
  receiverCantonFullCode!: string | undefined;
  receiverCantonFullName!: string | undefined;
  /** 空车日期 */
  emptyDate!: dayjs.Dayjs | undefined;
  /** 车辆类型 */
  vehicleTypeName!: string | undefined;
  /** 记录主键 */
  recordId!: number;
  /** 物流企业名称 */
  wlEntName!: string | undefined;
  /** 车头号码 */
  vehicleNo!: string | undefined;
  /** 车挂号码 */
  trailerNo!: string | undefined;
  remark!: string | undefined;
  creationTime!: dayjs.Dayjs;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.senderCantonCode = _data['senderCantonCode'];
      this.senderCantonFullCode = _data['senderCantonFullCode'];
      this.senderCantonFullName = _data['senderCantonFullName'];
      this.receiverCantonCode = _data['receiverCantonCode'];
      this.receiverCantonFullCode = _data['receiverCantonFullCode'];
      this.receiverCantonFullName = _data['receiverCantonFullName'];
      this.emptyDate = _data['emptyDate'] ? dayjs(_data['emptyDate'].toString()) : <any>undefined;
      this.vehicleTypeName = _data['vehicleTypeName'];
      this.recordId = _data['recordId'];
      this.wlEntName = _data['wlEntName'];
      this.vehicleNo = _data['vehicleNo'];
      this.trailerNo = _data['trailerNo'];
      this.remark = _data['remark'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): WlEmptyVehicleDayListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlEmptyVehicleDayListDto>(data, _mappings, WlEmptyVehicleDayListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['senderCantonCode'] = this.senderCantonCode;
    data['senderCantonFullCode'] = this.senderCantonFullCode;
    data['senderCantonFullName'] = this.senderCantonFullName;
    data['receiverCantonCode'] = this.receiverCantonCode;
    data['receiverCantonFullCode'] = this.receiverCantonFullCode;
    data['receiverCantonFullName'] = this.receiverCantonFullName;
    data['emptyDate'] = this.emptyDate ? this.emptyDate.toISOString() : <any>undefined;
    data['vehicleTypeName'] = this.vehicleTypeName;
    data['recordId'] = this.recordId;
    data['wlEntName'] = this.wlEntName;
    data['vehicleNo'] = this.vehicleNo;
    data['trailerNo'] = this.trailerNo;
    data['remark'] = this.remark;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): WlEmptyVehicleDayListDto {
    const json = this.toJSON();
    let result = new WlEmptyVehicleDayListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlEmptyVehicleDayListDto {
  totalCount!: number;
  items!: WlEmptyVehicleDayListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlEmptyVehicleDayListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlEmptyVehicleDayListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlEmptyVehicleDayListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlEmptyVehicleDayListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlEmptyVehicleDayListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlEmptyVehicleDayListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlEmptyVehicleListDto {
  totalCount!: number;
  items!: WlEmptyVehicleListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlEmptyVehicleListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlEmptyVehicleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlEmptyVehicleListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlEmptyVehicleListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlEmptyVehicleListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlEmptyVehicleListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlEmptyVehicleReserveListDto {
  totalCount!: number;
  items!: WlEmptyVehicleReserveListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlEmptyVehicleReserveListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlEmptyVehicleReserveListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlEmptyVehicleReserveListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlEmptyVehicleReserveListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlEmptyVehicleReserveListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlEmptyVehicleReserveListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlOrderPushListDto {
  totalCount!: number;
  items!: WlOrderPushListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlOrderPushListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlOrderPushListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlOrderPushListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlOrderPushListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlOrderPushListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlOrderPushListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlOrderQuoteListDto {
  totalCount!: number;
  items!: WlOrderQuoteListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlOrderQuoteListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlOrderQuoteListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlOrderQuoteListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlOrderQuoteListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlOrderQuoteListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlOrderQuoteListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfWlOrderStateListDto {
  totalCount!: number;
  items!: WlOrderStateListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(WlOrderStateListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfWlOrderStateListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfWlOrderStateListDto>(
      data,
      _mappings,
      PagedResultDtoOfWlOrderStateListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfWlOrderStateListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfWlOrderStateListDto();
    result.init(json);
    return result;
  }
}

export class OrderBidingInput {
  /** 货单主键 */
  orderId!: number | undefined;
  /** 运力信息 */
  capacityList!: number[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
      if (Array.isArray(_data['capacityList'])) {
        this.capacityList = [] as any;
        for (let item of _data['capacityList']) this.capacityList!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): OrderBidingInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<OrderBidingInput>(data, _mappings, OrderBidingInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    if (Array.isArray(this.capacityList)) {
      data['capacityList'] = [];
      for (let item of this.capacityList) data['capacityList'].push(item);
    }
    return data;
  }

  clone(): OrderBidingInput {
    const json = this.toJSON();
    let result = new OrderBidingInput();
    result.init(json);
    return result;
  }
}

/** 推荐车辆信息 */
export class RecommendVehicle {
  /** 派单Id */
  orderVehicleId!: number;
  /** 订单车辆编号 */
  orderVehicleNo!: string | undefined;
  /** 计划装货时间 */
  planLoadingTime!: dayjs.Dayjs | undefined;
  /** 计划到货时间 */
  planUnloadingTime!: dayjs.Dayjs | undefined;
  /** 车头车牌号码 */
  vehicleHeadNumber!: string | undefined;
  /** 车挂车牌号码 */
  vehicleTailNumber!: string | undefined;
  /** 司机名称 */
  userDriverName!: string | undefined;
  /** 押运员名称 */
  userEscortName!: string | undefined;
  /** 车辆类型 */
  vehicleTypeName!: string | undefined;
  /** 车辆标准30、20、10吨 */
  vehicleStandardName!: string | undefined;
  /** 节省里程 */
  mileage!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderVehicleId = _data['orderVehicleId'];
      this.orderVehicleNo = _data['orderVehicleNo'];
      this.planLoadingTime = _data['planLoadingTime']
        ? dayjs(_data['planLoadingTime'].toString())
        : <any>undefined;
      this.planUnloadingTime = _data['planUnloadingTime']
        ? dayjs(_data['planUnloadingTime'].toString())
        : <any>undefined;
      this.vehicleHeadNumber = _data['vehicleHeadNumber'];
      this.vehicleTailNumber = _data['vehicleTailNumber'];
      this.userDriverName = _data['userDriverName'];
      this.userEscortName = _data['userEscortName'];
      this.vehicleTypeName = _data['vehicleTypeName'];
      this.vehicleStandardName = _data['vehicleStandardName'];
      this.mileage = _data['mileage'];
    }
  }

  static fromJS(data: any, _mappings?: any): RecommendVehicle | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<RecommendVehicle>(data, _mappings, RecommendVehicle);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderVehicleId'] = this.orderVehicleId;
    data['orderVehicleNo'] = this.orderVehicleNo;
    data['planLoadingTime'] = this.planLoadingTime
      ? this.planLoadingTime.toISOString()
      : <any>undefined;
    data['planUnloadingTime'] = this.planUnloadingTime
      ? this.planUnloadingTime.toISOString()
      : <any>undefined;
    data['vehicleHeadNumber'] = this.vehicleHeadNumber;
    data['vehicleTailNumber'] = this.vehicleTailNumber;
    data['userDriverName'] = this.userDriverName;
    data['userEscortName'] = this.userEscortName;
    data['vehicleTypeName'] = this.vehicleTypeName;
    data['vehicleStandardName'] = this.vehicleStandardName;
    data['mileage'] = this.mileage;
    return data;
  }

  clone(): RecommendVehicle {
    const json = this.toJSON();
    let result = new RecommendVehicle();
    result.init(json);
    return result;
  }
}

export class WlOrderBidingTMSInput {
  /** 货单主键 */
  orderId!: number | undefined;
  /** 运力信息 */
  capacityList!: RecommendVehicle[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
      if (Array.isArray(_data['capacityList'])) {
        this.capacityList = [] as any;
        for (let item of _data['capacityList'])
          this.capacityList!.push(RecommendVehicle.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): WlOrderBidingTMSInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<WlOrderBidingTMSInput>(data, _mappings, WlOrderBidingTMSInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    if (Array.isArray(this.capacityList)) {
      data['capacityList'] = [];
      for (let item of this.capacityList) data['capacityList'].push(item.toJSON());
    }
    return data;
  }

  clone(): WlOrderBidingTMSInput {
    const json = this.toJSON();
    let result = new WlOrderBidingTMSInput();
    result.init(json);
    return result;
  }
}

export class DriverUserDto {
  id!: number;
  userName!: string | undefined;
  phoneNumber!: string | undefined;
  realName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.userName = _data['userName'];
      this.phoneNumber = _data['phoneNumber'];
      this.realName = _data['realName'];
    }
  }

  static fromJS(data: any, _mappings?: any): DriverUserDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<DriverUserDto>(data, _mappings, DriverUserDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['userName'] = this.userName;
    data['phoneNumber'] = this.phoneNumber;
    data['realName'] = this.realName;
    return data;
  }

  clone(): DriverUserDto {
    const json = this.toJSON();
    let result = new DriverUserDto();
    result.init(json);
    return result;
  }
}

export class SelectQuoteInput {
  /** 报价Id */
  orderQuoteId!: number;
  /** 是否采纳，false：未采纳，true：已采纳 */
  isAccepted!: boolean;
  orderDto!: WlOrderFormEditDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderQuoteId = _data['orderQuoteId'];
      this.isAccepted = _data['isAccepted'];
      this.orderDto = _data['orderDto']
        ? WlOrderFormEditDto.fromJS(_data['orderDto'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): SelectQuoteInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SelectQuoteInput>(data, _mappings, SelectQuoteInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderQuoteId'] = this.orderQuoteId;
    data['isAccepted'] = this.isAccepted;
    data['orderDto'] = this.orderDto ? this.orderDto.toJSON() : <any>undefined;
    return data;
  }

  clone(): SelectQuoteInput {
    const json = this.toJSON();
    let result = new SelectQuoteInput();
    result.init(json);
    return result;
  }
}

export class CommonMessage {
  title!: string | undefined;
  message!: string | undefined;
  status!: number | undefined;
  msgType!: number | undefined;
  fromUserId!: number | undefined;
  fromTenantId!: number | undefined;
  toUserIds!: string | undefined;
  toTenantIds!: string | undefined;
  exceptionMsg!: string | undefined;
  creationTime!: dayjs.Dayjs;
  remark!: string | undefined;
  id!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.title = _data['title'];
      this.message = _data['message'];
      this.status = _data['status'];
      this.msgType = _data['msgType'];
      this.fromUserId = _data['fromUserId'];
      this.fromTenantId = _data['fromTenantId'];
      this.toUserIds = _data['toUserIds'];
      this.toTenantIds = _data['toTenantIds'];
      this.exceptionMsg = _data['exceptionMsg'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.remark = _data['remark'];
      this.id = _data['id'];
    }
  }

  static fromJS(data: any, _mappings?: any): CommonMessage | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<CommonMessage>(data, _mappings, CommonMessage);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['title'] = this.title;
    data['message'] = this.message;
    data['status'] = this.status;
    data['msgType'] = this.msgType;
    data['fromUserId'] = this.fromUserId;
    data['fromTenantId'] = this.fromTenantId;
    data['toUserIds'] = this.toUserIds;
    data['toTenantIds'] = this.toTenantIds;
    data['exceptionMsg'] = this.exceptionMsg;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['remark'] = this.remark;
    data['id'] = this.id;
    return data;
  }

  clone(): CommonMessage {
    const json = this.toJSON();
    let result = new CommonMessage();
    result.init(json);
    return result;
  }
}

export class SendPhoneNotificationDto {
  type!: number;
  cid!: string | undefined;
  title!: string | undefined;
  body!: string | undefined;
  info!: CommonMessage;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.type = _data['type'];
      this.cid = _data['cid'];
      this.title = _data['title'];
      this.body = _data['body'];
      this.info = _data['info'] ? CommonMessage.fromJS(_data['info'], _mappings) : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): SendPhoneNotificationDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SendPhoneNotificationDto>(data, _mappings, SendPhoneNotificationDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['type'] = this.type;
    data['cid'] = this.cid;
    data['title'] = this.title;
    data['body'] = this.body;
    data['info'] = this.info ? this.info.toJSON() : <any>undefined;
    return data;
  }

  clone(): SendPhoneNotificationDto {
    const json = this.toJSON();
    let result = new SendPhoneNotificationDto();
    result.init(json);
    return result;
  }
}

export class OrderForLLWL {
  /** 货单ID */
  orderId!: number;
  /** 是否是 兰陵万里 的货单 */
  isLLWL!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
      this.isLLWL = _data['isLLWL'];
    }
  }

  static fromJS(data: any, _mappings?: any): OrderForLLWL | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<OrderForLLWL>(data, _mappings, OrderForLLWL);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    data['isLLWL'] = this.isLLWL;
    return data;
  }

  clone(): OrderForLLWL {
    const json = this.toJSON();
    let result = new OrderForLLWL();
    result.init(json);
    return result;
  }
}

export class EnterpriseEditDto {
  /** 企业ID */
  entId!: number | undefined;
  /** 行政区编码 */
  cantonCode!: string | undefined;
  /** 地址 */
  regAddress!: string | undefined;
  /** 法人 */
  legalName!: string | undefined;
  /** 所属行业 */
  industryId!: number | undefined;
  /** 纬度 */
  latitude!: number | undefined;
  /** 经度 */
  longitude!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entId = _data['entId'];
      this.cantonCode = _data['cantonCode'];
      this.regAddress = _data['regAddress'];
      this.legalName = _data['legalName'];
      this.industryId = _data['industryId'];
      this.latitude = _data['latitude'];
      this.longitude = _data['longitude'];
    }
  }

  static fromJS(data: any, _mappings?: any): EnterpriseEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<EnterpriseEditDto>(data, _mappings, EnterpriseEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entId'] = this.entId;
    data['cantonCode'] = this.cantonCode;
    data['regAddress'] = this.regAddress;
    data['legalName'] = this.legalName;
    data['industryId'] = this.industryId;
    data['latitude'] = this.latitude;
    data['longitude'] = this.longitude;
    return data;
  }

  clone(): EnterpriseEditDto {
    const json = this.toJSON();
    let result = new EnterpriseEditDto();
    result.init(json);
    return result;
  }
}

export class UpdateStatementVehicleDto {
  /** WlStatementVehicle ID */
  id!: number;
  /** 距离，公里数 */
  distanceKilometers!: number | undefined;
  /** 运输重量 */
  transportWeight!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.distanceKilometers = _data['distanceKilometers'];
      this.transportWeight = _data['transportWeight'];
    }
  }

  static fromJS(data: any, _mappings?: any): UpdateStatementVehicleDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UpdateStatementVehicleDto>(data, _mappings, UpdateStatementVehicleDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['distanceKilometers'] = this.distanceKilometers;
    data['transportWeight'] = this.transportWeight;
    return data;
  }

  clone(): UpdateStatementVehicleDto {
    const json = this.toJSON();
    let result = new UpdateStatementVehicleDto();
    result.init(json);
    return result;
  }
}

export class ApproveForKHDto {
  /** 物流对账单处置企业ID */
  disposalId!: number | undefined;
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.disposalId = _data['disposalId'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): ApproveForKHDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ApproveForKHDto>(data, _mappings, ApproveForKHDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['disposalId'] = this.disposalId;
    data['remark'] = this.remark;
    return data;
  }

  clone(): ApproveForKHDto {
    const json = this.toJSON();
    let result = new ApproveForKHDto();
    result.init(json);
    return result;
  }
}

export class ApproveForWlDto {
  /** 对账单ID */
  statementId!: number | undefined;
  /** 备注 */
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.statementId = _data['statementId'];
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): ApproveForWlDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ApproveForWlDto>(data, _mappings, ApproveForWlDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['statementId'] = this.statementId;
    data['remark'] = this.remark;
    return data;
  }

  clone(): ApproveForWlDto {
    const json = this.toJSON();
    let result = new ApproveForWlDto();
    result.init(json);
    return result;
  }
}

export class LsStatementBillingEditDto {
  id!: number | undefined;
  /** 对账单处置企业 */
  statementDisposalId!: number | undefined;
  /** 账期 */
  endBillingDate!: dayjs.Dayjs | undefined;
  /** 应收账款 */
  billAmount!: number | undefined;
  /** 图片 */
  billPic!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.statementDisposalId = _data['statementDisposalId'];
      this.endBillingDate = _data['endBillingDate']
        ? dayjs(_data['endBillingDate'].toString())
        : <any>undefined;
      this.billAmount = _data['billAmount'];
      this.billPic = _data['billPic'];
    }
  }

  static fromJS(data: any, _mappings?: any): LsStatementBillingEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LsStatementBillingEditDto>(data, _mappings, LsStatementBillingEditDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['statementDisposalId'] = this.statementDisposalId;
    data['endBillingDate'] = this.endBillingDate
      ? this.endBillingDate.toISOString()
      : <any>undefined;
    data['billAmount'] = this.billAmount;
    data['billPic'] = this.billPic;
    return data;
  }

  clone(): LsStatementBillingEditDto {
    const json = this.toJSON();
    let result = new LsStatementBillingEditDto();
    result.init(json);
    return result;
  }
}

export class LsStatementBillingReceiveEditDto {
  id!: number | undefined;
  /** 对账单开票ID */
  statementBillingId!: number | undefined;
  /** 付款金额 */
  receiveAmount!: number | undefined;
  /** 图片 */
  billPic!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.statementBillingId = _data['statementBillingId'];
      this.receiveAmount = _data['receiveAmount'];
      this.billPic = _data['billPic'];
    }
  }

  static fromJS(data: any, _mappings?: any): LsStatementBillingReceiveEditDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LsStatementBillingReceiveEditDto>(
      data,
      _mappings,
      LsStatementBillingReceiveEditDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['statementBillingId'] = this.statementBillingId;
    data['receiveAmount'] = this.receiveAmount;
    data['billPic'] = this.billPic;
    return data;
  }

  clone(): LsStatementBillingReceiveEditDto {
    const json = this.toJSON();
    let result = new LsStatementBillingReceiveEditDto();
    result.init(json);
    return result;
  }
}

export class LsStatementVehicleListDto {
  id!: number;
  /** 对账单处置企业 */
  statementDisposalId!: number | undefined;
  statementDisposal!: LsStatementDisposalListDto;
  /** 运单明细ID */
  transportInfoId!: number | undefined;
  transportInfo!: WlTransportInfo;
  /** 计价方式，0：一口价，1：单价 */
  valuationType!: number;
  /** 距离，公里数 */
  distanceKilometers!: number | undefined;
  /** 单价价格 */
  unitPrice!: number | undefined;
  /** 运输一口价 */
  transportPrice!: number | undefined;
  /** 最终显示价格 */
  finalPrice!: number | undefined;
  /** 运输重量 */
  transportWeight!: number | undefined;
  /** 物流总运费 */
  wlVehicleFreight!: number | undefined;
  /** 货主总运费 */
  khVehicleFreight!: number | undefined;
  /** 价差，货主价格减去物流价格 */
  priceDiff!: number | undefined;
  /** 车头主键 */
  vehicleId!: number | undefined;
  /** 车挂主键 */
  trailerId!: number | undefined;
  /** 司机主键 */
  driverId!: number | undefined;
  /** 押运主键 */
  supercargoId!: number | undefined;
  creationTime!: dayjs.Dayjs;
  /** 车头车牌 */
  vehicleNumber!: string | undefined;
  /** 核载能力 */
  capacity!: number | undefined;
  /** 货单编号 */
  orderCode!: string | undefined;
  /** 装货时间 */
  shippingTime!: dayjs.Dayjs | undefined;
  /** 装货企业 */
  senderEntname!: string | undefined;
  /** 卸货企业 */
  receiverEntname!: string | undefined;
  /** 危废明细 */
  wlOrderWastes!: WlOrderWasteListDto[] | undefined;
  driver!: WlBaseDriverListDto;
  supercargo!: WlBaseSupercargoListDto;
  trailer!: WlBaseVehicleTrailerListDto;
  vehicle!: WlBaseVehicleListDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.statementDisposalId = _data['statementDisposalId'];
      this.statementDisposal = _data['statementDisposal']
        ? LsStatementDisposalListDto.fromJS(_data['statementDisposal'], _mappings)
        : <any>undefined;
      this.transportInfoId = _data['transportInfoId'];
      this.transportInfo = _data['transportInfo']
        ? WlTransportInfo.fromJS(_data['transportInfo'], _mappings)
        : <any>undefined;
      this.valuationType = _data['valuationType'];
      this.distanceKilometers = _data['distanceKilometers'];
      this.unitPrice = _data['unitPrice'];
      this.transportPrice = _data['transportPrice'];
      this.finalPrice = _data['finalPrice'];
      this.transportWeight = _data['transportWeight'];
      this.wlVehicleFreight = _data['wlVehicleFreight'];
      this.khVehicleFreight = _data['khVehicleFreight'];
      this.priceDiff = _data['priceDiff'];
      this.vehicleId = _data['vehicleId'];
      this.trailerId = _data['trailerId'];
      this.driverId = _data['driverId'];
      this.supercargoId = _data['supercargoId'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.vehicleNumber = _data['vehicleNumber'];
      this.capacity = _data['capacity'];
      this.orderCode = _data['orderCode'];
      this.shippingTime = _data['shippingTime']
        ? dayjs(_data['shippingTime'].toString())
        : <any>undefined;
      this.senderEntname = _data['senderEntname'];
      this.receiverEntname = _data['receiverEntname'];
      if (Array.isArray(_data['wlOrderWastes'])) {
        this.wlOrderWastes = [] as any;
        for (let item of _data['wlOrderWastes'])
          this.wlOrderWastes!.push(WlOrderWasteListDto.fromJS(item, _mappings));
      }
      this.driver = _data['driver']
        ? WlBaseDriverListDto.fromJS(_data['driver'], _mappings)
        : <any>undefined;
      this.supercargo = _data['supercargo']
        ? WlBaseSupercargoListDto.fromJS(_data['supercargo'], _mappings)
        : <any>undefined;
      this.trailer = _data['trailer']
        ? WlBaseVehicleTrailerListDto.fromJS(_data['trailer'], _mappings)
        : <any>undefined;
      this.vehicle = _data['vehicle']
        ? WlBaseVehicleListDto.fromJS(_data['vehicle'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): LsStatementVehicleListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LsStatementVehicleListDto>(data, _mappings, LsStatementVehicleListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['statementDisposalId'] = this.statementDisposalId;
    data['statementDisposal'] = this.statementDisposal
      ? this.statementDisposal.toJSON()
      : <any>undefined;
    data['transportInfoId'] = this.transportInfoId;
    data['transportInfo'] = this.transportInfo ? this.transportInfo.toJSON() : <any>undefined;
    data['valuationType'] = this.valuationType;
    data['distanceKilometers'] = this.distanceKilometers;
    data['unitPrice'] = this.unitPrice;
    data['transportPrice'] = this.transportPrice;
    data['finalPrice'] = this.finalPrice;
    data['transportWeight'] = this.transportWeight;
    data['wlVehicleFreight'] = this.wlVehicleFreight;
    data['khVehicleFreight'] = this.khVehicleFreight;
    data['priceDiff'] = this.priceDiff;
    data['vehicleId'] = this.vehicleId;
    data['trailerId'] = this.trailerId;
    data['driverId'] = this.driverId;
    data['supercargoId'] = this.supercargoId;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['vehicleNumber'] = this.vehicleNumber;
    data['capacity'] = this.capacity;
    data['orderCode'] = this.orderCode;
    data['shippingTime'] = this.shippingTime ? this.shippingTime.toISOString() : <any>undefined;
    data['senderEntname'] = this.senderEntname;
    data['receiverEntname'] = this.receiverEntname;
    if (Array.isArray(this.wlOrderWastes)) {
      data['wlOrderWastes'] = [];
      for (let item of this.wlOrderWastes) data['wlOrderWastes'].push(item.toJSON());
    }
    data['driver'] = this.driver ? this.driver.toJSON() : <any>undefined;
    data['supercargo'] = this.supercargo ? this.supercargo.toJSON() : <any>undefined;
    data['trailer'] = this.trailer ? this.trailer.toJSON() : <any>undefined;
    data['vehicle'] = this.vehicle ? this.vehicle.toJSON() : <any>undefined;
    return data;
  }

  clone(): LsStatementVehicleListDto {
    const json = this.toJSON();
    let result = new LsStatementVehicleListDto();
    result.init(json);
    return result;
  }
}

export class LsStatementDisposalListDto {
  id!: number;
  /** 对账单主表 */
  statementId!: number | undefined;
  statement!: LsStatementListDto;
  /** 处置企业 */
  disposalEntId!: number | undefined;
  disposalEntName!: string | undefined;
  /** 物流企业名称 */
  billedWlEntName!: string | undefined;
  /** 是否代开票 */
  isBilled!: boolean | undefined;
  /** 对账单状态，0：未审核，1：物流经理审核，2：客户经理审核，3：总经理审核 */
  stStatus!: number;
  /** 货主总价 */
  totalPriceHZ!: number | undefined;
  /** 物流总价 */
  totalPriceWL!: number | undefined;
  creationTime!: dayjs.Dayjs;
  statementVehicles!: LsStatementVehicleListDto[] | undefined;
  statementBillings!: LsStatementBillingReceiveDto[] | undefined;
  statementLog!: LsStatementLogListDto;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.statementId = _data['statementId'];
      this.statement = _data['statement']
        ? LsStatementListDto.fromJS(_data['statement'], _mappings)
        : <any>undefined;
      this.disposalEntId = _data['disposalEntId'];
      this.disposalEntName = _data['disposalEntName'];
      this.billedWlEntName = _data['billedWlEntName'];
      this.isBilled = _data['isBilled'];
      this.stStatus = _data['stStatus'];
      this.totalPriceHZ = _data['totalPriceHZ'];
      this.totalPriceWL = _data['totalPriceWL'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['statementVehicles'])) {
        this.statementVehicles = [] as any;
        for (let item of _data['statementVehicles'])
          this.statementVehicles!.push(LsStatementVehicleListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['statementBillings'])) {
        this.statementBillings = [] as any;
        for (let item of _data['statementBillings'])
          this.statementBillings!.push(LsStatementBillingReceiveDto.fromJS(item, _mappings));
      }
      this.statementLog = _data['statementLog']
        ? LsStatementLogListDto.fromJS(_data['statementLog'], _mappings)
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): LsStatementDisposalListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LsStatementDisposalListDto>(data, _mappings, LsStatementDisposalListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['statementId'] = this.statementId;
    data['statement'] = this.statement ? this.statement.toJSON() : <any>undefined;
    data['disposalEntId'] = this.disposalEntId;
    data['disposalEntName'] = this.disposalEntName;
    data['billedWlEntName'] = this.billedWlEntName;
    data['isBilled'] = this.isBilled;
    data['stStatus'] = this.stStatus;
    data['totalPriceHZ'] = this.totalPriceHZ;
    data['totalPriceWL'] = this.totalPriceWL;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    if (Array.isArray(this.statementVehicles)) {
      data['statementVehicles'] = [];
      for (let item of this.statementVehicles) data['statementVehicles'].push(item.toJSON());
    }
    if (Array.isArray(this.statementBillings)) {
      data['statementBillings'] = [];
      for (let item of this.statementBillings) data['statementBillings'].push(item.toJSON());
    }
    data['statementLog'] = this.statementLog ? this.statementLog.toJSON() : <any>undefined;
    return data;
  }

  clone(): LsStatementDisposalListDto {
    const json = this.toJSON();
    let result = new LsStatementDisposalListDto();
    result.init(json);
    return result;
  }
}

export class LsStatementLogListDto {
  id!: number;
  /** 对账单主表 */
  statementId!: number | undefined;
  statement!: LsStatementListDto;
  /** 对账单处置企业 */
  statementDisposalId!: number | undefined;
  statementDisposal!: LsStatementDisposalListDto;
  /** 操作时间 */
  optTime!: dayjs.Dayjs | undefined;
  /** 对账单状态，0：未审核，1：物流经理审核，2：客户经理审核，3：总经理审核，4：客户经理驳回，5：总经理驳回 */
  stStatus!: number;
  creationTime!: dayjs.Dayjs;
  remark!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.statementId = _data['statementId'];
      this.statement = _data['statement']
        ? LsStatementListDto.fromJS(_data['statement'], _mappings)
        : <any>undefined;
      this.statementDisposalId = _data['statementDisposalId'];
      this.statementDisposal = _data['statementDisposal']
        ? LsStatementDisposalListDto.fromJS(_data['statementDisposal'], _mappings)
        : <any>undefined;
      this.optTime = _data['optTime'] ? dayjs(_data['optTime'].toString()) : <any>undefined;
      this.stStatus = _data['stStatus'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.remark = _data['remark'];
    }
  }

  static fromJS(data: any, _mappings?: any): LsStatementLogListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LsStatementLogListDto>(data, _mappings, LsStatementLogListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['statementId'] = this.statementId;
    data['statement'] = this.statement ? this.statement.toJSON() : <any>undefined;
    data['statementDisposalId'] = this.statementDisposalId;
    data['statementDisposal'] = this.statementDisposal
      ? this.statementDisposal.toJSON()
      : <any>undefined;
    data['optTime'] = this.optTime ? this.optTime.toISOString() : <any>undefined;
    data['stStatus'] = this.stStatus;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['remark'] = this.remark;
    return data;
  }

  clone(): LsStatementLogListDto {
    const json = this.toJSON();
    let result = new LsStatementLogListDto();
    result.init(json);
    return result;
  }
}

export class LsStatementListDto {
  id!: number;
  /** 选定对账的物流企业 */
  statementTenantId!: number | undefined;
  statementTenantName!: string | undefined;
  /** 开始对账时间 */
  beginTime!: dayjs.Dayjs | undefined;
  /** 完成对账时间 */
  endTime!: dayjs.Dayjs | undefined;
  /** 对账单状态，0：未审核，1：已审核 */
  stStatus!: number;
  creationTime!: dayjs.Dayjs;
  wlCantonCode!: string | undefined;
  wlAddress!: string | undefined;
  /** 货主总价 */
  allPriceHZ!: number | undefined;
  /** 物流总价 */
  allPriceWL!: number | undefined;
  statementLogs!: LsStatementLogListDto[] | undefined;
  statementDisposals!: LsStatementDisposalListDto[] | undefined;
  statementBillings!: LsStatementBillingReceiveDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.statementTenantId = _data['statementTenantId'];
      this.statementTenantName = _data['statementTenantName'];
      this.beginTime = _data['beginTime'] ? dayjs(_data['beginTime'].toString()) : <any>undefined;
      this.endTime = _data['endTime'] ? dayjs(_data['endTime'].toString()) : <any>undefined;
      this.stStatus = _data['stStatus'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      this.wlCantonCode = _data['wlCantonCode'];
      this.wlAddress = _data['wlAddress'];
      this.allPriceHZ = _data['allPriceHZ'];
      this.allPriceWL = _data['allPriceWL'];
      if (Array.isArray(_data['statementLogs'])) {
        this.statementLogs = [] as any;
        for (let item of _data['statementLogs'])
          this.statementLogs!.push(LsStatementLogListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['statementDisposals'])) {
        this.statementDisposals = [] as any;
        for (let item of _data['statementDisposals'])
          this.statementDisposals!.push(LsStatementDisposalListDto.fromJS(item, _mappings));
      }
      if (Array.isArray(_data['statementBillings'])) {
        this.statementBillings = [] as any;
        for (let item of _data['statementBillings'])
          this.statementBillings!.push(LsStatementBillingReceiveDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): LsStatementListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LsStatementListDto>(data, _mappings, LsStatementListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['statementTenantId'] = this.statementTenantId;
    data['statementTenantName'] = this.statementTenantName;
    data['beginTime'] = this.beginTime ? this.beginTime.toISOString() : <any>undefined;
    data['endTime'] = this.endTime ? this.endTime.toISOString() : <any>undefined;
    data['stStatus'] = this.stStatus;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    data['wlCantonCode'] = this.wlCantonCode;
    data['wlAddress'] = this.wlAddress;
    data['allPriceHZ'] = this.allPriceHZ;
    data['allPriceWL'] = this.allPriceWL;
    if (Array.isArray(this.statementLogs)) {
      data['statementLogs'] = [];
      for (let item of this.statementLogs) data['statementLogs'].push(item.toJSON());
    }
    if (Array.isArray(this.statementDisposals)) {
      data['statementDisposals'] = [];
      for (let item of this.statementDisposals) data['statementDisposals'].push(item.toJSON());
    }
    if (Array.isArray(this.statementBillings)) {
      data['statementBillings'] = [];
      for (let item of this.statementBillings) data['statementBillings'].push(item.toJSON());
    }
    return data;
  }

  clone(): LsStatementListDto {
    const json = this.toJSON();
    let result = new LsStatementListDto();
    result.init(json);
    return result;
  }
}

export class LsStatementBillingListDto {
  id!: number;
  /** 对账单主表 */
  statementId!: number | undefined;
  statement!: LsStatementListDto;
  /** 对账单处置企业 */
  statementDisposalId!: number | undefined;
  statementDisposal!: LsStatementDisposalListDto;
  /** 付款日期 */
  billingDate!: dayjs.Dayjs | undefined;
  /** 截止日期 */
  endBillingDate!: dayjs.Dayjs | undefined;
  /** 金额 */
  billAmount!: number | undefined;
  /** 开票状态，0：未完结，1：已完结 */
  billStatus!: number;
  creationTime!: dayjs.Dayjs;
  statementBillingReceives!: LsStatementBillingReceiveListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.statementId = _data['statementId'];
      this.statement = _data['statement']
        ? LsStatementListDto.fromJS(_data['statement'], _mappings)
        : <any>undefined;
      this.statementDisposalId = _data['statementDisposalId'];
      this.statementDisposal = _data['statementDisposal']
        ? LsStatementDisposalListDto.fromJS(_data['statementDisposal'], _mappings)
        : <any>undefined;
      this.billingDate = _data['billingDate']
        ? dayjs(_data['billingDate'].toString())
        : <any>undefined;
      this.endBillingDate = _data['endBillingDate']
        ? dayjs(_data['endBillingDate'].toString())
        : <any>undefined;
      this.billAmount = _data['billAmount'];
      this.billStatus = _data['billStatus'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
      if (Array.isArray(_data['statementBillingReceives'])) {
        this.statementBillingReceives = [] as any;
        for (let item of _data['statementBillingReceives'])
          this.statementBillingReceives!.push(
            LsStatementBillingReceiveListDto.fromJS(item, _mappings),
          );
      }
    }
  }

  static fromJS(data: any, _mappings?: any): LsStatementBillingListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LsStatementBillingListDto>(data, _mappings, LsStatementBillingListDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['statementId'] = this.statementId;
    data['statement'] = this.statement ? this.statement.toJSON() : <any>undefined;
    data['statementDisposalId'] = this.statementDisposalId;
    data['statementDisposal'] = this.statementDisposal
      ? this.statementDisposal.toJSON()
      : <any>undefined;
    data['billingDate'] = this.billingDate ? this.billingDate.toISOString() : <any>undefined;
    data['endBillingDate'] = this.endBillingDate
      ? this.endBillingDate.toISOString()
      : <any>undefined;
    data['billAmount'] = this.billAmount;
    data['billStatus'] = this.billStatus;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    if (Array.isArray(this.statementBillingReceives)) {
      data['statementBillingReceives'] = [];
      for (let item of this.statementBillingReceives)
        data['statementBillingReceives'].push(item.toJSON());
    }
    return data;
  }

  clone(): LsStatementBillingListDto {
    const json = this.toJSON();
    let result = new LsStatementBillingListDto();
    result.init(json);
    return result;
  }
}

export class LsStatementBillingReceiveListDto {
  id!: number;
  /** 对账单开票 */
  statementBillingId!: number | undefined;
  statementBilling!: LsStatementBillingListDto;
  /** 付款日期 */
  receiveDate!: dayjs.Dayjs | undefined;
  /** 付款金额 */
  receiveAmount!: number | undefined;
  /** 付款图片 */
  billPic!: string | undefined;
  creationTime!: dayjs.Dayjs;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.statementBillingId = _data['statementBillingId'];
      this.statementBilling = _data['statementBilling']
        ? LsStatementBillingListDto.fromJS(_data['statementBilling'], _mappings)
        : <any>undefined;
      this.receiveDate = _data['receiveDate']
        ? dayjs(_data['receiveDate'].toString())
        : <any>undefined;
      this.receiveAmount = _data['receiveAmount'];
      this.billPic = _data['billPic'];
      this.creationTime = _data['creationTime']
        ? dayjs(_data['creationTime'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any, _mappings?: any): LsStatementBillingReceiveListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LsStatementBillingReceiveListDto>(
      data,
      _mappings,
      LsStatementBillingReceiveListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['statementBillingId'] = this.statementBillingId;
    data['statementBilling'] = this.statementBilling
      ? this.statementBilling.toJSON()
      : <any>undefined;
    data['receiveDate'] = this.receiveDate ? this.receiveDate.toISOString() : <any>undefined;
    data['receiveAmount'] = this.receiveAmount;
    data['billPic'] = this.billPic;
    data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
    return data;
  }

  clone(): LsStatementBillingReceiveListDto {
    const json = this.toJSON();
    let result = new LsStatementBillingReceiveListDto();
    result.init(json);
    return result;
  }
}

export class LsStatementBillingReceiveDto {
  id!: number | undefined;
  /** 对账单处置企业 */
  statementDisposalId!: number | undefined;
  /** 开票状态，0：未完结，1：已完结 */
  billStatus!: number;
  /** 开票时间 */
  receiveDate!: dayjs.Dayjs | undefined;
  /** 应收账款 */
  billAmount!: number | undefined;
  /** 实收账款 */
  receiveAmount!: number | undefined;
  /** 收款进度 */
  billProgress!: number;
  /** 账期 */
  endBillingDate!: dayjs.Dayjs | undefined;
  /** 图片 */
  billPic!: string | undefined;
  statementBillingReceives!: LsStatementBillingReceiveListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.statementDisposalId = _data['statementDisposalId'];
      this.billStatus = _data['billStatus'];
      this.receiveDate = _data['receiveDate']
        ? dayjs(_data['receiveDate'].toString())
        : <any>undefined;
      this.billAmount = _data['billAmount'];
      this.receiveAmount = _data['receiveAmount'];
      this.billProgress = _data['billProgress'];
      this.endBillingDate = _data['endBillingDate']
        ? dayjs(_data['endBillingDate'].toString())
        : <any>undefined;
      this.billPic = _data['billPic'];
      if (Array.isArray(_data['statementBillingReceives'])) {
        this.statementBillingReceives = [] as any;
        for (let item of _data['statementBillingReceives'])
          this.statementBillingReceives!.push(
            LsStatementBillingReceiveListDto.fromJS(item, _mappings),
          );
      }
    }
  }

  static fromJS(data: any, _mappings?: any): LsStatementBillingReceiveDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<LsStatementBillingReceiveDto>(
      data,
      _mappings,
      LsStatementBillingReceiveDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['statementDisposalId'] = this.statementDisposalId;
    data['billStatus'] = this.billStatus;
    data['receiveDate'] = this.receiveDate ? this.receiveDate.toISOString() : <any>undefined;
    data['billAmount'] = this.billAmount;
    data['receiveAmount'] = this.receiveAmount;
    data['billProgress'] = this.billProgress;
    data['endBillingDate'] = this.endBillingDate
      ? this.endBillingDate.toISOString()
      : <any>undefined;
    data['billPic'] = this.billPic;
    if (Array.isArray(this.statementBillingReceives)) {
      data['statementBillingReceives'] = [];
      for (let item of this.statementBillingReceives)
        data['statementBillingReceives'].push(item.toJSON());
    }
    return data;
  }

  clone(): LsStatementBillingReceiveDto {
    const json = this.toJSON();
    let result = new LsStatementBillingReceiveDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfLsStatementDisposalListDto {
  totalCount!: number;
  items!: LsStatementDisposalListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(LsStatementDisposalListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfLsStatementDisposalListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfLsStatementDisposalListDto>(
      data,
      _mappings,
      PagedResultDtoOfLsStatementDisposalListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfLsStatementDisposalListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfLsStatementDisposalListDto();
    result.init(json);
    return result;
  }
}

export class PagedResultDtoOfLsStatementListDto {
  totalCount!: number;
  items!: LsStatementListDto[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.totalCount = _data['totalCount'];
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(LsStatementListDto.fromJS(item, _mappings));
      }
    }
  }

  static fromJS(data: any, _mappings?: any): PagedResultDtoOfLsStatementListDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<PagedResultDtoOfLsStatementListDto>(
      data,
      _mappings,
      PagedResultDtoOfLsStatementListDto,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['totalCount'] = this.totalCount;
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    return data;
  }

  clone(): PagedResultDtoOfLsStatementListDto {
    const json = this.toJSON();
    let result = new PagedResultDtoOfLsStatementListDto();
    result.init(json);
    return result;
  }
}

export class SelectBilledWlEntDto {
  /** 对账单处置企业ID */
  id!: number | undefined;
  /** 是否待开票 */
  isBilled!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.isBilled = _data['isBilled'];
    }
  }

  static fromJS(data: any, _mappings?: any): SelectBilledWlEntDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SelectBilledWlEntDto>(data, _mappings, SelectBilledWlEntDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['isBilled'] = this.isBilled;
    return data;
  }

  clone(): SelectBilledWlEntDto {
    const json = this.toJSON();
    let result = new SelectBilledWlEntDto();
    result.init(json);
    return result;
  }
}

export class SelectOrdersInput {
  /** 对账单ID */
  statementId!: number | undefined;
  /** 物流企业ID */
  wlTenantId!: number | undefined;
  /** 货单列表 */
  orderIds!: number[] | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.statementId = _data['statementId'];
      this.wlTenantId = _data['wlTenantId'];
      if (Array.isArray(_data['orderIds'])) {
        this.orderIds = [] as any;
        for (let item of _data['orderIds']) this.orderIds!.push(item);
      }
    }
  }

  static fromJS(data: any, _mappings?: any): SelectOrdersInput | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SelectOrdersInput>(data, _mappings, SelectOrdersInput);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['statementId'] = this.statementId;
    data['wlTenantId'] = this.wlTenantId;
    if (Array.isArray(this.orderIds)) {
      data['orderIds'] = [];
      for (let item of this.orderIds) data['orderIds'].push(item);
    }
    return data;
  }

  clone(): SelectOrdersInput {
    const json = this.toJSON();
    let result = new SelectOrdersInput();
    result.init(json);
    return result;
  }
}

export class UpdatePriceDto {
  id!: number | undefined;
  /** 单价价格 */
  unitPrice!: number | undefined;
  /** 运输一口价 */
  transportPrice!: number | undefined;
  /** 最终显示价格 */
  finalPrice!: number | undefined;
  /** 运输重量 */
  transportWeight!: number | undefined;
  /** 物流总运费 */
  wlVehicleFreight!: number | undefined;
  /** 货主总运费 */
  khVehicleFreight!: number | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.id = _data['id'];
      this.unitPrice = _data['unitPrice'];
      this.transportPrice = _data['transportPrice'];
      this.finalPrice = _data['finalPrice'];
      this.transportWeight = _data['transportWeight'];
      this.wlVehicleFreight = _data['wlVehicleFreight'];
      this.khVehicleFreight = _data['khVehicleFreight'];
    }
  }

  static fromJS(data: any, _mappings?: any): UpdatePriceDto | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UpdatePriceDto>(data, _mappings, UpdatePriceDto);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['unitPrice'] = this.unitPrice;
    data['transportPrice'] = this.transportPrice;
    data['finalPrice'] = this.finalPrice;
    data['transportWeight'] = this.transportWeight;
    data['wlVehicleFreight'] = this.wlVehicleFreight;
    data['khVehicleFreight'] = this.khVehicleFreight;
    return data;
  }

  clone(): UpdatePriceDto {
    const json = this.toJSON();
    let result = new UpdatePriceDto();
    result.init(json);
    return result;
  }
}

/** 获取accessToken结果 */
export class GetOpenidRestult {
  openid!: string | undefined;
  session_key!: string | undefined;
  unionid!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.openid = _data['openid'];
      this.session_key = _data['session_key'];
      this.unionid = _data['unionid'];
    }
  }

  static fromJS(data: any, _mappings?: any): GetOpenidRestult | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<GetOpenidRestult>(data, _mappings, GetOpenidRestult);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['openid'] = this.openid;
    data['session_key'] = this.session_key;
    data['unionid'] = this.unionid;
    return data;
  }

  clone(): GetOpenidRestult {
    const json = this.toJSON();
    let result = new GetOpenidRestult();
    result.init(json);
    return result;
  }
}

export enum ActivateType {
  NewAccount = 'NewAccount',
  BindExistAccount = 'BindExistAccount',
}

export class ActivateAccountModel {
  emailAddress!: string | undefined;
  password!: string | undefined;
  userId!: string | undefined;
  verificationCode!: string | undefined;
  activateType!: ActivateType;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.emailAddress = _data['emailAddress'];
      this.password = _data['password'];
      this.userId = _data['userId'];
      this.verificationCode = _data['verificationCode'];
      this.activateType = _data['activateType'];
    }
  }

  static fromJS(data: any, _mappings?: any): ActivateAccountModel | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ActivateAccountModel>(data, _mappings, ActivateAccountModel);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['emailAddress'] = this.emailAddress;
    data['password'] = this.password;
    data['userId'] = this.userId;
    data['verificationCode'] = this.verificationCode;
    data['activateType'] = this.activateType;
    return data;
  }

  clone(): ActivateAccountModel {
    const json = this.toJSON();
    let result = new ActivateAccountModel();
    result.init(json);
    return result;
  }
}

export class ActivateAccountResultModel {
  accessToken!: string | undefined;
  encryptedAccessToken!: string | undefined;
  expireInSeconds!: number;
  userId!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.accessToken = _data['accessToken'];
      this.encryptedAccessToken = _data['encryptedAccessToken'];
      this.expireInSeconds = _data['expireInSeconds'];
      this.userId = _data['userId'];
    }
  }

  static fromJS(data: any, _mappings?: any): ActivateAccountResultModel | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ActivateAccountResultModel>(data, _mappings, ActivateAccountResultModel);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accessToken'] = this.accessToken;
    data['encryptedAccessToken'] = this.encryptedAccessToken;
    data['expireInSeconds'] = this.expireInSeconds;
    data['userId'] = this.userId;
    return data;
  }

  clone(): ActivateAccountResultModel {
    const json = this.toJSON();
    let result = new ActivateAccountResultModel();
    result.init(json);
    return result;
  }
}

export class AuthenticateModelExt {
  telePhoneNo!: string | undefined;
  password!: string | undefined;
  verificationCode!: string | undefined;
  returnUrl!: string | undefined;
  userType!: number | undefined;
  firstLogin!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.telePhoneNo = _data['telePhoneNo'];
      this.password = _data['password'];
      this.verificationCode = _data['verificationCode'];
      this.returnUrl = _data['returnUrl'];
      this.userType = _data['userType'];
      this.firstLogin = _data['firstLogin'];
    }
  }

  static fromJS(data: any, _mappings?: any): AuthenticateModelExt | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AuthenticateModelExt>(data, _mappings, AuthenticateModelExt);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['telePhoneNo'] = this.telePhoneNo;
    data['password'] = this.password;
    data['verificationCode'] = this.verificationCode;
    data['returnUrl'] = this.returnUrl;
    data['userType'] = this.userType;
    data['firstLogin'] = this.firstLogin;
    return data;
  }

  clone(): AuthenticateModelExt {
    const json = this.toJSON();
    let result = new AuthenticateModelExt();
    result.init(json);
    return result;
  }
}

export class UserTypeModel {
  userType!: number | undefined;
  userTypeName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.userType = _data['userType'];
      this.userTypeName = _data['userTypeName'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserTypeModel | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserTypeModel>(data, _mappings, UserTypeModel);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userType'] = this.userType;
    data['userTypeName'] = this.userTypeName;
    return data;
  }

  clone(): UserTypeModel {
    const json = this.toJSON();
    let result = new UserTypeModel();
    result.init(json);
    return result;
  }
}

export class AuthenticateResultModel {
  accessToken!: string | undefined;
  encryptedAccessToken!: string | undefined;
  expireInSeconds!: number;
  userId!: number;
  tenantId!: number | undefined;
  shouldResetPassword!: boolean;
  passwordResetCode!: string | undefined;
  returnUrl!: string | undefined;
  waitingForActivation!: boolean;
  hasBindUnionid!: boolean;
  realName!: string | undefined;
  userName!: string | undefined;
  telePhoneNo!: string | undefined;
  unionid!: string | undefined;
  userType!: number | undefined;
  userTypeList!: UserTypeModel[] | undefined;
  bindEntId!: number | undefined;
  bindEntName!: string | undefined;
  isAdmin!: boolean;
  sysUserName!: string | undefined;
  sysUserPhone!: string | undefined;
  businessLicenseOss!: string | undefined;
  disposalLicenseOss!: string | undefined;
  licenseNo!: string | undefined;
  roadTransportLicenseOss!: string | undefined;
  isExclusiveEnt!: boolean;
  cantonFullName!: string | undefined;
  entRegAddress!: string | undefined;
  tenantName!: string | undefined;
  isAgentEnt!: boolean;
  entLatitude!: number | undefined;
  entLongitude!: number | undefined;
  cantonFullCode!: string | undefined;
  clientConnectState!: number;
  isActive!: boolean;
  isDeleted!: boolean;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.accessToken = _data['accessToken'];
      this.encryptedAccessToken = _data['encryptedAccessToken'];
      this.expireInSeconds = _data['expireInSeconds'];
      this.userId = _data['userId'];
      this.tenantId = _data['tenantId'];
      this.shouldResetPassword = _data['shouldResetPassword'];
      this.passwordResetCode = _data['passwordResetCode'];
      this.returnUrl = _data['returnUrl'];
      this.waitingForActivation = _data['waitingForActivation'];
      this.hasBindUnionid = _data['hasBindUnionid'];
      this.realName = _data['realName'];
      this.userName = _data['userName'];
      this.telePhoneNo = _data['telePhoneNo'];
      this.unionid = _data['unionid'];
      this.userType = _data['userType'];
      if (Array.isArray(_data['userTypeList'])) {
        this.userTypeList = [] as any;
        for (let item of _data['userTypeList'])
          this.userTypeList!.push(UserTypeModel.fromJS(item, _mappings));
      }
      this.bindEntId = _data['bindEntId'];
      this.bindEntName = _data['bindEntName'];
      this.isAdmin = _data['isAdmin'];
      this.sysUserName = _data['sysUserName'];
      this.sysUserPhone = _data['sysUserPhone'];
      this.businessLicenseOss = _data['businessLicenseOss'];
      this.disposalLicenseOss = _data['disposalLicenseOss'];
      this.licenseNo = _data['licenseNo'];
      this.roadTransportLicenseOss = _data['roadTransportLicenseOss'];
      this.isExclusiveEnt = _data['isExclusiveEnt'];
      this.cantonFullName = _data['cantonFullName'];
      this.entRegAddress = _data['entRegAddress'];
      this.tenantName = _data['tenantName'];
      this.isAgentEnt = _data['isAgentEnt'];
      this.entLatitude = _data['entLatitude'];
      this.entLongitude = _data['entLongitude'];
      this.cantonFullCode = _data['cantonFullCode'];
      this.clientConnectState = _data['clientConnectState'];
      this.isActive = _data['isActive'];
      this.isDeleted = _data['isDeleted'];
    }
  }

  static fromJS(data: any, _mappings?: any): AuthenticateResultModel | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AuthenticateResultModel>(data, _mappings, AuthenticateResultModel);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accessToken'] = this.accessToken;
    data['encryptedAccessToken'] = this.encryptedAccessToken;
    data['expireInSeconds'] = this.expireInSeconds;
    data['userId'] = this.userId;
    data['tenantId'] = this.tenantId;
    data['shouldResetPassword'] = this.shouldResetPassword;
    data['passwordResetCode'] = this.passwordResetCode;
    data['returnUrl'] = this.returnUrl;
    data['waitingForActivation'] = this.waitingForActivation;
    data['hasBindUnionid'] = this.hasBindUnionid;
    data['realName'] = this.realName;
    data['userName'] = this.userName;
    data['telePhoneNo'] = this.telePhoneNo;
    data['unionid'] = this.unionid;
    data['userType'] = this.userType;
    if (Array.isArray(this.userTypeList)) {
      data['userTypeList'] = [];
      for (let item of this.userTypeList) data['userTypeList'].push(item.toJSON());
    }
    data['bindEntId'] = this.bindEntId;
    data['bindEntName'] = this.bindEntName;
    data['isAdmin'] = this.isAdmin;
    data['sysUserName'] = this.sysUserName;
    data['sysUserPhone'] = this.sysUserPhone;
    data['businessLicenseOss'] = this.businessLicenseOss;
    data['disposalLicenseOss'] = this.disposalLicenseOss;
    data['licenseNo'] = this.licenseNo;
    data['roadTransportLicenseOss'] = this.roadTransportLicenseOss;
    data['isExclusiveEnt'] = this.isExclusiveEnt;
    data['cantonFullName'] = this.cantonFullName;
    data['entRegAddress'] = this.entRegAddress;
    data['tenantName'] = this.tenantName;
    data['isAgentEnt'] = this.isAgentEnt;
    data['entLatitude'] = this.entLatitude;
    data['entLongitude'] = this.entLongitude;
    data['cantonFullCode'] = this.cantonFullCode;
    data['clientConnectState'] = this.clientConnectState;
    data['isActive'] = this.isActive;
    data['isDeleted'] = this.isDeleted;
    return data;
  }

  clone(): AuthenticateResultModel {
    const json = this.toJSON();
    let result = new AuthenticateResultModel();
    result.init(json);
    return result;
  }
}

export class AuthenticateModel {
  userNameOrEmailAddress!: string | undefined;
  password!: string | undefined;
  verificationCode!: string | undefined;
  rememberClient!: boolean;
  returnUrl!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.userNameOrEmailAddress = _data['userNameOrEmailAddress'];
      this.password = _data['password'];
      this.verificationCode = _data['verificationCode'];
      this.rememberClient = _data['rememberClient'];
      this.returnUrl = _data['returnUrl'];
    }
  }

  static fromJS(data: any, _mappings?: any): AuthenticateModel | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AuthenticateModel>(data, _mappings, AuthenticateModel);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userNameOrEmailAddress'] = this.userNameOrEmailAddress;
    data['password'] = this.password;
    data['verificationCode'] = this.verificationCode;
    data['rememberClient'] = this.rememberClient;
    data['returnUrl'] = this.returnUrl;
    return data;
  }

  clone(): AuthenticateModel {
    const json = this.toJSON();
    let result = new AuthenticateModel();
    result.init(json);
    return result;
  }
}

export class AuthenticateModelExtUni {
  telePhoneNo!: string | undefined;
  password!: string | undefined;
  verificationCode!: string | undefined;
  wxMiniProgramOpenid!: string | undefined;
  wxMiniProgramCode!: string | undefined;
  encryptedData!: string | undefined;
  iv!: string | undefined;
  session_key!: string | undefined;
  auth_key!: string | undefined;
  unionid!: string | undefined;
  openid!: string | undefined;
  nickName!: string | undefined;
  sex!: number;
  language!: string | undefined;
  city!: string | undefined;
  province!: string | undefined;
  country!: string | undefined;
  headimgurl!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.telePhoneNo = _data['telePhoneNo'];
      this.password = _data['password'];
      this.verificationCode = _data['verificationCode'];
      this.wxMiniProgramOpenid = _data['wxMiniProgramOpenid'];
      this.wxMiniProgramCode = _data['wxMiniProgramCode'];
      this.encryptedData = _data['encryptedData'];
      this.iv = _data['iv'];
      this.session_key = _data['session_key'];
      this.auth_key = _data['auth_key'];
      this.unionid = _data['unionid'];
      this.openid = _data['openid'];
      this.nickName = _data['nickName'];
      this.sex = _data['sex'];
      this.language = _data['language'];
      this.city = _data['city'];
      this.province = _data['province'];
      this.country = _data['country'];
      this.headimgurl = _data['headimgurl'];
    }
  }

  static fromJS(data: any, _mappings?: any): AuthenticateModelExtUni | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<AuthenticateModelExtUni>(data, _mappings, AuthenticateModelExtUni);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['telePhoneNo'] = this.telePhoneNo;
    data['password'] = this.password;
    data['verificationCode'] = this.verificationCode;
    data['wxMiniProgramOpenid'] = this.wxMiniProgramOpenid;
    data['wxMiniProgramCode'] = this.wxMiniProgramCode;
    data['encryptedData'] = this.encryptedData;
    data['iv'] = this.iv;
    data['session_key'] = this.session_key;
    data['auth_key'] = this.auth_key;
    data['unionid'] = this.unionid;
    data['openid'] = this.openid;
    data['nickName'] = this.nickName;
    data['sex'] = this.sex;
    data['language'] = this.language;
    data['city'] = this.city;
    data['province'] = this.province;
    data['country'] = this.country;
    data['headimgurl'] = this.headimgurl;
    return data;
  }

  clone(): AuthenticateModelExtUni {
    const json = this.toJSON();
    let result = new AuthenticateModelExtUni();
    result.init(json);
    return result;
  }
}

export class ExternalAuthenticateModel {
  authProvider!: string | undefined;
  providerKey!: string | undefined;
  providerAccessCode!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.authProvider = _data['authProvider'];
      this.providerKey = _data['providerKey'];
      this.providerAccessCode = _data['providerAccessCode'];
    }
  }

  static fromJS(data: any, _mappings?: any): ExternalAuthenticateModel | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ExternalAuthenticateModel>(data, _mappings, ExternalAuthenticateModel);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['authProvider'] = this.authProvider;
    data['providerKey'] = this.providerKey;
    data['providerAccessCode'] = this.providerAccessCode;
    return data;
  }

  clone(): ExternalAuthenticateModel {
    const json = this.toJSON();
    let result = new ExternalAuthenticateModel();
    result.init(json);
    return result;
  }
}

export class ExternalAuthenticateResultModel {
  accessToken!: string | undefined;
  encryptedAccessToken!: string | undefined;
  expireInSeconds!: number;
  waitingForActivation!: boolean;
  userId!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.accessToken = _data['accessToken'];
      this.encryptedAccessToken = _data['encryptedAccessToken'];
      this.expireInSeconds = _data['expireInSeconds'];
      this.waitingForActivation = _data['waitingForActivation'];
      this.userId = _data['userId'];
    }
  }

  static fromJS(data: any, _mappings?: any): ExternalAuthenticateResultModel | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ExternalAuthenticateResultModel>(
      data,
      _mappings,
      ExternalAuthenticateResultModel,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accessToken'] = this.accessToken;
    data['encryptedAccessToken'] = this.encryptedAccessToken;
    data['expireInSeconds'] = this.expireInSeconds;
    data['waitingForActivation'] = this.waitingForActivation;
    data['userId'] = this.userId;
    return data;
  }

  clone(): ExternalAuthenticateResultModel {
    const json = this.toJSON();
    let result = new ExternalAuthenticateResultModel();
    result.init(json);
    return result;
  }
}

export class ExternalLoginProviderInfoModel {
  name!: string | undefined;
  clientId!: string | undefined;
  additionalParams!: { [key: string]: string } | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.name = _data['name'];
      this.clientId = _data['clientId'];
      if (_data['additionalParams']) {
        this.additionalParams = {} as any;
        for (let key in _data['additionalParams']) {
          if (_data['additionalParams'].hasOwnProperty(key))
            (<any>this.additionalParams)![key] = _data['additionalParams'][key];
        }
      }
    }
  }

  static fromJS(data: any, _mappings?: any): ExternalLoginProviderInfoModel | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ExternalLoginProviderInfoModel>(
      data,
      _mappings,
      ExternalLoginProviderInfoModel,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['clientId'] = this.clientId;
    if (this.additionalParams) {
      data['additionalParams'] = {};
      for (let key in this.additionalParams) {
        if (this.additionalParams.hasOwnProperty(key))
          (<any>data['additionalParams'])[key] = this.additionalParams[key];
      }
    }
    return data;
  }

  clone(): ExternalLoginProviderInfoModel {
    const json = this.toJSON();
    let result = new ExternalLoginProviderInfoModel();
    result.init(json);
    return result;
  }
}

export class ImpersonatedAuthenticateResultModel {
  accessToken!: string | undefined;
  encryptedAccessToken!: string | undefined;
  expireInSeconds!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.accessToken = _data['accessToken'];
      this.encryptedAccessToken = _data['encryptedAccessToken'];
      this.expireInSeconds = _data['expireInSeconds'];
    }
  }

  static fromJS(data: any, _mappings?: any): ImpersonatedAuthenticateResultModel | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<ImpersonatedAuthenticateResultModel>(
      data,
      _mappings,
      ImpersonatedAuthenticateResultModel,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accessToken'] = this.accessToken;
    data['encryptedAccessToken'] = this.encryptedAccessToken;
    data['expireInSeconds'] = this.expireInSeconds;
    return data;
  }

  clone(): ImpersonatedAuthenticateResultModel {
    const json = this.toJSON();
    let result = new ImpersonatedAuthenticateResultModel();
    result.init(json);
    return result;
  }
}

export class SwitchedAccountAuthenticateResultModel {
  accessToken!: string | undefined;
  encryptedAccessToken!: string | undefined;
  expireInSeconds!: number;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.accessToken = _data['accessToken'];
      this.encryptedAccessToken = _data['encryptedAccessToken'];
      this.expireInSeconds = _data['expireInSeconds'];
    }
  }

  static fromJS(data: any, _mappings?: any): SwitchedAccountAuthenticateResultModel | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<SwitchedAccountAuthenticateResultModel>(
      data,
      _mappings,
      SwitchedAccountAuthenticateResultModel,
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accessToken'] = this.accessToken;
    data['encryptedAccessToken'] = this.encryptedAccessToken;
    data['expireInSeconds'] = this.expireInSeconds;
    return data;
  }

  clone(): SwitchedAccountAuthenticateResultModel {
    const json = this.toJSON();
    let result = new SwitchedAccountAuthenticateResultModel();
    result.init(json);
    return result;
  }
}

export class UserRegisterModel {
  entName!: string | undefined;
  bindEntId!: number | undefined;
  telePhoneNo!: string | undefined;
  password!: string | undefined;
  nickName!: string | undefined;

  init(_data?: any, _mappings?: any) {
    if (_data) {
      this.entName = _data['entName'];
      this.bindEntId = _data['bindEntId'];
      this.telePhoneNo = _data['telePhoneNo'];
      this.password = _data['password'];
      this.nickName = _data['nickName'];
    }
  }

  static fromJS(data: any, _mappings?: any): UserRegisterModel | null {
    data = typeof data === 'object' ? data : {};
    return createInstance<UserRegisterModel>(data, _mappings, UserRegisterModel);
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['entName'] = this.entName;
    data['bindEntId'] = this.bindEntId;
    data['telePhoneNo'] = this.telePhoneNo;
    data['password'] = this.password;
    data['nickName'] = this.nickName;
    return data;
  }

  clone(): UserRegisterModel {
    const json = this.toJSON();
    let result = new UserRegisterModel();
    result.init(json);
    return result;
  }
}

export enum CaptchaType {
  Defulat = 'Defulat',
  HostTenantRegister = 'HostTenantRegister',
  HostUserLogin = 'HostUserLogin',
  TenantUserRegister = 'TenantUserRegister',
  TenantUserLogin = 'TenantUserLogin',
}

function jsonParse(json: any, reviver?: any) {
  json = JSON.parse(json, reviver);

  var byid: any = {};
  var refs: any = [];
  json = (function recurse(obj: any, prop?: any, parent?: any) {
    if (typeof obj !== 'object' || !obj) return obj;

    if ('$ref' in obj) {
      let ref = obj.$ref;
      if (ref in byid) return byid[ref];
      refs.push([parent, prop, ref]);
      return undefined;
    } else if ('$id' in obj) {
      let id = obj.$id;
      delete obj.$id;
      if ('$values' in obj) obj = obj.$values;
      byid[id] = obj;
    }

    if (Array.isArray(obj)) {
      obj = obj.map((v, i) => recurse(v, i, obj));
    } else {
      for (var p in obj) {
        if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
          obj[p] = recurse(obj[p], p, obj);
      }
    }

    return obj;
  })(json);

  for (let i = 0; i < refs.length; i++) {
    const ref = refs[i];
    ref[0][ref[1]] = byid[ref[2]];
  }

  return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T | null {
  if (!mappings) mappings = [];
  if (!data) return null;

  const mappingIndexName = '__mappingIndex';
  if (data[mappingIndexName]) return <T>mappings[data[mappingIndexName]].target;

  data[mappingIndexName] = mappings.length;

  let result: any = new type();
  mappings.push({ source: data, target: result });
  result.init(data, mappings);
  return result;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any,
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any,
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
  return obj && obj.isAxiosError === true;
}
